{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "OptyADF"
		},
		"SMART_IOF_NEW_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SMART_IOF_NEW'"
		},
		"SMART_ITABUNA_NEW_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SMART_ITABUNA_NEW'"
		},
		"SMART_ITAIGARA_NEW_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SMART_ITAIGARA_NEW'"
		},
		"SMART_Oftalmoclin_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SMART_Oftalmoclin'"
		},
		"SQL_ORIGEM_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQL_ORIGEM'"
		},
		"SadallaSeniorProd_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SadallaSeniorProd'"
		},
		"SadallaSeniorTeste_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SadallaSeniorTeste'"
		},
		"SadallaTasyProd_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SadallaTasyProd'"
		},
		"SadallaTasyProd_NEW_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SadallaTasyProd_NEW'"
		},
		"Smart_Connections_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "@linkedService().NOME_KEYVAULT_SECRET"
		},
		"TECHSALLUS_DINAMICO_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "otorrinocenter"
		},
		"Tasy_Connections_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "@linkedService().NOME_KEYVAULT_SECRET"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/SMART_IOF_NEW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SMART_IOF_NEW_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART_ITABUNA_NEW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SMART_ITABUNA_NEW_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART_ITAIGARA_NEW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SMART_ITAIGARA_NEW_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART_Oftalmoclin')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SMART_Oftalmoclin_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_ORIGEM')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SQL_ORIGEM_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SadallaSeniorProd')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('SadallaSeniorProd_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SadallaSeniorTeste')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('SadallaSeniorTeste_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SadallaTasyProd')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('SadallaTasyProd_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SadallaTasyProd_NEW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('SadallaTasyProd_NEW_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Smart_Connections')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"NOME_KEYVAULT_SECRET": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "[parameters('Smart_Connections_properties_typeProperties_connectionString_secretName')]",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TECHSALLUS_DINAMICO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"NOME_KEYVAULT_SECRET": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('TECHSALLUS_DINAMICO_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tasy_Connections')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"NOME_KEYVAULT_SECRET": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "[parameters('Tasy_Connections_properties_typeProperties_connectionString_secretName')]",
							"type": "Expression"
						},
						"secretVersion": ""
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/2_Processa_DataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Verifica Start Datamart",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT\n    COUNT(1) as QT_REGISTRO \nFROM(\n    SELECT \n        A.ID_PLATAFORMA\n        ,B.DS_PLATAFORMA\n        ,A.TIPO_PROCESSO\n        ,MAX(A.DT_INICIO_PROCESS) DT_INICIO_PROCESS \n        ,CAST(MAX(A.DT_FIM_PROCESS) AS DATE) DT_FIM_PROCESS         \n    FROM DBO.LOG_PROCESSAMENTO_DW A\n    INNER JOIN DBO.cfg_plataforma_dw B ON B.ID_PLATAFORMA = A.ID_PLATAFORMA\n    WHERE UPPER(A.NOME_PROCESSO) LIKE '%CARGA_DW'\n    GROUP BY A.ID_PLATAFORMA\n        ,B.DS_PLATAFORMA\n        ,A.TIPO_PROCESSO\n)TMP    \nWHERE TMP.DT_FIM_PROCESS = CAST(GETDATE() AS DATE)\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AZ_SQL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Processo",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Verifica Start Datamart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Verifica Start Datamart').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Inicia Atualizacao Datamart",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greaterOrEquals(item().QT_REGISTRO,2 )",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Busca Email",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": "SELECT * FROM ADF.OWNER",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AZ_SQL",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "Variable Email",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Busca Email",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "email",
													"value": {
														"value": "@activity('Busca Email').output.firstRow['Email']",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Disparado de Erro Datamart Receb",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Variable Email",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Send email",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"EmailTo": {
															"value": "@variables('email')",
															"type": "Expression"
														},
														"Subject": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"ErrorMessage": "Falha na atualização do Datamart "
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Execute Datamart Recebimento",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "DM_Recebimento",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {}
												}
											},
											{
												"name": "Exec Datamart Prod Diaria Tasy",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "DM_ProdDiaria_TasyV2",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {}
												}
											},
											{
												"name": "Exec Datamart Prod Diaria Smart",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "DM_ProdDiariaSMARTV2",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"email": {
						"type": "String"
					},
					"qt_registro": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/1_Inicializador"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CEOP_CSV')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lista arquivos",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_HMAISDATADRIVEN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": "ceop"
								}
							},
							"fieldList": [
								"childItems",
								"itemType",
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filtro",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lista arquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista arquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endsWith(item().name, 'csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filtro",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filtro').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copia dados para a STG",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('Truncate table stg.',activity('Lista arquivos').output.itemName)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_SQL_STG",
											"type": "DatasetReference",
											"parameters": {
												"SCHEMA": "stg",
												"TABELA": {
													"value": "CEOP_FPA",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Move arquivo para PROCESSADOS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copia dados para a STG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@concat(activity('Lista arquivos').output.itemName,'\\Processados')",
													"type": "Expression"
												},
												"File": {
													"value": "@concat(item().name,'-',utcnow())",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Apaga arquivo",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move arquivo para PROCESSADOS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "sv_hmaisbrasildatadriven",
												"type": "LinkedServiceReference"
											},
											"path": "ceop/logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Convenio",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "DECLARE @ESTABELECIMENTO VARCHAR(10)\n\nSELECT @ESTABELECIMENTO = ID_SYSTEM FROM v_plataforma_dw WHERE UPPER(DS_SYSTEM) LIKE '%CEOP%'\n\nTRUNCATE TABLE DW.CEOP_CONVENIO\n\nINSERT INTO DW.CEOP_CONVENIO\nSELECT DISTINCT\n    @ESTABELECIMENTO AS ESTABELECIMENTO\n    ,@ESTABELECIMENTO + '|' + CAST(A.[Cnv.Id] AS VARCHAR(50)) AS FK_CONVENIO\n    ,A.[Cnv.Id] AS CD_CONVENIO\n    ,A.Convênio AS DS_CONVENIO   \nFROM STG.CEOP A"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/P&P"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CEOP_CSV_FPA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lista arquivos",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_HMAISDATADRIVEN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": "ceop"
								}
							},
							"fieldList": [
								"childItems",
								"itemType",
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filtro",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lista arquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista arquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endsWith(item().name, 'csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filtro",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filtro').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copia dados para a STG",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_SQL_STG",
											"type": "DatasetReference",
											"parameters": {
												"SCHEMA": "stg",
												"TABELA": {
													"value": "CEOP_FPA",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Move arquivo para PROCESSADOS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copia dados para a STG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@concat(activity('Lista arquivos').output.itemName,'\\Processados')",
													"type": "Expression"
												},
												"File": {
													"value": "@concat(item().name,'-',utcnow())",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Apaga arquivo",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move arquivo para PROCESSADOS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "sv_hmaisbrasildatadriven",
												"type": "LinkedServiceReference"
											},
											"path": "ceop/logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Convenio",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "BEGIN\n    DECLARE @ESTABELECIMENTO VARCHAR(10)\n\n    SELECT @ESTABELECIMENTO = ID_SYSTEM FROM v_plataforma_dw WHERE UPPER(DS_SYSTEM) LIKE '%CEOP%'\n\n    TRUNCATE TABLE STG.CEOP_CONVENIO\n\n    INSERT INTO STG.CEOP_CONVENIO\n    SELECT DISTINCT\n        @ESTABELECIMENTO AS ESTABELECIMENTO\n        ,@ESTABELECIMENTO + '|' + CAST(A.[Cnv.Id] AS VARCHAR(50)) AS FK_CONVENIO\n        ,A.[Cnv.Id] AS CD_CONVENIO\n        ,A.Convênio AS DS_CONVENIO   \n    FROM STG.CEOP_FPA A\nEND\nBEGIN\n    with tab as(\n        SELECT\n            ESTABELECIMENTO\n            ,FK_CONVENIO\n            ,CD_CONVENIO\n            ,DS_CONVENIO\n        FROM(    \n            SELECT \n            A.ESTABELECIMENTO\n            ,A.FK_CONVENIO\n            ,A.CD_CONVENIO\n            ,A.DS_CONVENIO\n            ,ROW_NUMBER()OVER(PARTITION BY A.FK_CONVENIO ORDER BY A.FK_CONVENIO DESC) ID_LINHA \n            FROM STG.CEOP_CONVENIO A\n        )TMP\n        WHERE TMP.ID_LINHA = 1\n    )\n\n    MERGE\t           \n    \tdw.CEOP_CONVENIO AS destino           \n    USING            \n    \ttab AS origem           \n\n        ON\t(        \n            ORIGEM.FK_CONVENIO = DESTINO.FK_CONVENIO\t\n    \t\t)        \n\n    --Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \n    WHEN MATCHED            \n    THEN UPDATE SET           \n    DESTINO.ESTABELECIMENTO = ORIGEM.ESTABELECIMENTO\n    ,DESTINO.FK_CONVENIO = ORIGEM.FK_CONVENIO\n    ,DESTINO.CD_CONVENIO = ORIGEM.CD_CONVENIO\n    ,DESTINO.DS_CONVENIO = ORIGEM.DS_CONVENIO\n\n\n\n    --Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \n    WHEN NOT MATCHED BY TARGET            \n    THEN INSERT            \n    VALUES (\n    ORIGEM.ESTABELECIMENTO\n    ,ORIGEM.FK_CONVENIO\n    ,ORIGEM.CD_CONVENIO\n    ,ORIGEM.DS_CONVENIO\n    ); \nEND    \n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/P&P"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Chamados Requestia_Otim_Deadlock')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Clear all tables",
						"description": "Truncate all Requestia's tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_TRUNCATEREQUESTS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Check request file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Clear all tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_REQUESTS_NEW",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Requests file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check request file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check request file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send requests failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "csi.ti@opty.com.br",
											"Subject": "Arquivo Requestia\\REQUESTS não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\REQUESTS não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Calculate fields",
									"description": "Update calculated fields (for example, SLA formula, datetime conversions, business hours difference) for time saving in queries",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy requests",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_CALCULATEREQUESTS]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Altera chamado em pausa",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Calculate fields",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_ALTERACHAMADOSPAUSADOS]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Copy requests",
									"description": "Copy requests data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "REQUEST",
														"type": "String"
													},
													"sink": {
														"name": "REQUEST",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CLIENT",
														"type": "String"
													},
													"sink": {
														"name": "CLIENT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ORIGANAL",
														"type": "String"
													},
													"sink": {
														"name": "ORIGANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CURRANAL",
														"type": "String"
													},
													"sink": {
														"name": "CURRANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "GROUPANAL",
														"type": "String"
													},
													"sink": {
														"name": "GROUPANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LASTANAL",
														"type": "String"
													},
													"sink": {
														"name": "LASTANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LASTANLGRP",
														"type": "String"
													},
													"sink": {
														"name": "LASTANLGRP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ORIGGROUP",
														"type": "String"
													},
													"sink": {
														"name": "ORIGGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CURRGROUP",
														"type": "String"
													},
													"sink": {
														"name": "CURRGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LASTGROUP",
														"type": "String"
													},
													"sink": {
														"name": "LASTGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "GRGROUP",
														"type": "String"
													},
													"sink": {
														"name": "GRGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CATEGORY",
														"type": "String"
													},
													"sink": {
														"name": "CATEGORY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RPRIORITY",
														"type": "String"
													},
													"sink": {
														"name": "RPRIORITY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PRODUCT",
														"type": "String"
													},
													"sink": {
														"name": "PRODUCT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PROCESS",
														"type": "String"
													},
													"sink": {
														"name": "PROCESS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PROBLEM",
														"type": "String"
													},
													"sink": {
														"name": "PROBLEM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "RSTATUS"
													}
												},
												{
													"source": {
														"name": "REQTYPE",
														"type": "String"
													},
													"sink": {
														"name": "REQTYPE"
													}
												},
												{
													"source": {
														"name": "REQSOURCE",
														"type": "String"
													},
													"sink": {
														"name": "REQSOURCE"
													}
												},
												{
													"source": {
														"name": "LOCATION",
														"type": "String"
													},
													"sink": {
														"name": "REQLOCATION"
													}
												},
												{
													"source": {
														"name": "ORGUNIT",
														"type": "String"
													},
													"sink": {
														"name": "ORGUNIT"
													}
												},
												{
													"source": {
														"name": "ORGUNIT_ROOT",
														"type": "String"
													},
													"sink": {
														"name": "ORGUNIT_ROOT"
													}
												},
												{
													"source": {
														"name": "CHARGE",
														"type": "String"
													},
													"sink": {
														"name": "CHARGE"
													}
												},
												{
													"source": {
														"name": "SLEVEL",
														"type": "String"
													},
													"sink": {
														"name": "SLEVEL"
													}
												},
												{
													"source": {
														"name": "EQUIP",
														"type": "String"
													},
													"sink": {
														"name": "EQUIP"
													}
												},
												{
													"source": {
														"name": "RESOURCEID",
														"type": "String"
													},
													"sink": {
														"name": "RESOURCEID"
													}
												},
												{
													"source": {
														"name": "REQUESTOR",
														"type": "String"
													},
													"sink": {
														"name": "REQUESTOR"
													}
												},
												{
													"source": {
														"name": "OPENDATE",
														"type": "String"
													},
													"sink": {
														"name": "OPENDATE"
													}
												},
												{
													"source": {
														"name": "CLOSEDATE",
														"type": "String"
													},
													"sink": {
														"name": "CLOSEDATE"
													}
												},
												{
													"source": {
														"name": "CLOSED",
														"type": "String"
													},
													"sink": {
														"name": "CLOSED"
													}
												},
												{
													"source": {
														"name": "LASTACTION",
														"type": "String"
													},
													"sink": {
														"name": "LASTACTION"
													}
												},
												{
													"source": {
														"name": "LASTANALYST",
														"type": "String"
													},
													"sink": {
														"name": "LASTANALYST"
													}
												},
												{
													"source": {
														"name": "LASTSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "LASTSTATUS"
													}
												},
												{
													"source": {
														"name": "LASTPRIORITY",
														"type": "String"
													},
													"sink": {
														"name": "LASTPRIORITY"
													}
												},
												{
													"source": {
														"name": "LASTREOPEN",
														"type": "String"
													},
													"sink": {
														"name": "LASTREOPEN"
													}
												},
												{
													"source": {
														"name": "LASTACTIONATEND",
														"type": "String"
													},
													"sink": {
														"name": "LASTACTIONATEND"
													}
												},
												{
													"source": {
														"name": "LASTACTTYPE",
														"type": "String"
													},
													"sink": {
														"name": "LASTACTTYPE"
													}
												},
												{
													"source": {
														"name": "RESPDATE",
														"type": "String"
													},
													"sink": {
														"name": "RESPDATE"
													}
												},
												{
													"source": {
														"name": "RESPTIME",
														"type": "String"
													},
													"sink": {
														"name": "RESPTIME"
													}
												},
												{
													"source": {
														"name": "RESLTIME",
														"type": "String"
													},
													"sink": {
														"name": "RESLTIME"
													}
												},
												{
													"source": {
														"name": "RESPMINS",
														"type": "String"
													},
													"sink": {
														"name": "RESPMINS"
													}
												},
												{
													"source": {
														"name": "RESLMINS",
														"type": "String"
													},
													"sink": {
														"name": "RESLMINS"
													}
												},
												{
													"source": {
														"name": "RESPREMAINS",
														"type": "String"
													},
													"sink": {
														"name": "RESPREMAINS"
													}
												},
												{
													"source": {
														"name": "RESLREMAINS",
														"type": "String"
													},
													"sink": {
														"name": "RESLREMAINS"
													}
												},
												{
													"source": {
														"name": "RESPMODE",
														"type": "String"
													},
													"sink": {
														"name": "RESPMODE"
													}
												},
												{
													"source": {
														"name": "RESLMODE",
														"type": "String"
													},
													"sink": {
														"name": "RESLMODE"
													}
												},
												{
													"source": {
														"name": "NOCOMPUTE",
														"type": "String"
													},
													"sink": {
														"name": "NOCOMPUTE"
													}
												},
												{
													"source": {
														"name": "RLOCKED",
														"type": "String"
													},
													"sink": {
														"name": "RLOCKED"
													}
												},
												{
													"source": {
														"name": "ESTIMCOST",
														"type": "String"
													},
													"sink": {
														"name": "ESTIMCOST"
													}
												},
												{
													"source": {
														"name": "TOTALCOST",
														"type": "String"
													},
													"sink": {
														"name": "TOTALCOST"
													}
												},
												{
													"source": {
														"name": "APROVANLTYPE",
														"type": "String"
													},
													"sink": {
														"name": "APROVANLTYPE"
													}
												},
												{
													"source": {
														"name": "APROVCLITYPE",
														"type": "String"
													},
													"sink": {
														"name": "APROVCLITYPE"
													}
												},
												{
													"source": {
														"name": "MLEVELAPROV",
														"type": "String"
													},
													"sink": {
														"name": "MLEVELAPROV"
													}
												},
												{
													"source": {
														"name": "CLIENTAPROV",
														"type": "String"
													},
													"sink": {
														"name": "CLIENTAPROV"
													}
												},
												{
													"source": {
														"name": "PACKAGE",
														"type": "String"
													},
													"sink": {
														"name": "PACKAGE"
													}
												},
												{
													"source": {
														"name": "PROJECT",
														"type": "String"
													},
													"sink": {
														"name": "PROJECT"
													}
												},
												{
													"source": {
														"name": "WORKFLOW",
														"type": "String"
													},
													"sink": {
														"name": "WORKFLOW"
													}
												},
												{
													"source": {
														"name": "REQWORKFLOW",
														"type": "String"
													},
													"sink": {
														"name": "REQWORKFLOW"
													}
												},
												{
													"source": {
														"name": "ORIGCATEGORY",
														"type": "String"
													},
													"sink": {
														"name": "ORIGCATEGORY"
													}
												},
												{
													"source": {
														"name": "ORIGPRODUCT",
														"type": "String"
													},
													"sink": {
														"name": "ORIGPRODUCT"
													}
												},
												{
													"source": {
														"name": "ORIGPROCESS",
														"type": "String"
													},
													"sink": {
														"name": "ORIGPROCESS"
													}
												},
												{
													"source": {
														"name": "TOTALATTACH",
														"type": "String"
													},
													"sink": {
														"name": "TOTALATTACH"
													}
												},
												{
													"source": {
														"name": "TOTALATTACHACT",
														"type": "String"
													},
													"sink": {
														"name": "TOTALATTACHACT"
													}
												},
												{
													"source": {
														"name": "INSERTDATE",
														"type": "String"
													},
													"sink": {
														"name": "INSERTDATE"
													}
												},
												{
													"source": {
														"name": "QFORM",
														"type": "String"
													},
													"sink": {
														"name": "QFORM"
													}
												},
												{
													"source": {
														"name": "QSURVEY",
														"type": "String"
													},
													"sink": {
														"name": "QSURVEY"
													}
												},
												{
													"source": {
														"name": "QSESSIONFORM",
														"type": "String"
													},
													"sink": {
														"name": "QSESSIONFORM"
													}
												},
												{
													"source": {
														"name": "QSESSIONSURVEY",
														"type": "String"
													},
													"sink": {
														"name": "QSESSIONSURVEY"
													}
												},
												{
													"source": {
														"name": "TEMPO_RESOLUCAO",
														"type": "String"
													},
													"sink": {
														"name": "TEMPO_RESOLUCAO"
													}
												},
												{
													"source": {
														"name": "PRAZO_RESL",
														"type": "String"
													},
													"sink": {
														"name": "PRAZO_RESL"
													}
												},
												{
													"source": {
														"name": "TEMPO_REPOSTA",
														"type": "String"
													},
													"sink": {
														"name": "TEMPO_REPOSTA"
													}
												},
												{
													"source": {
														"name": "PRAZO_RESP",
														"type": "String"
													},
													"sink": {
														"name": "PRAZO_RESP"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_REQUESTS_NEW",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_REQUESTS",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check sessions file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Requests file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QSESSION_NEW",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Sessions file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check sessions file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check sessions file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send session failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QSESSION não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QSESSION não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy sessions",
									"description": "Copy sessions data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "QSESSION",
														"type": "String"
													},
													"sink": {
														"name": "QSESSION"
													}
												},
												{
													"source": {
														"name": "QSESSIONTITLE",
														"type": "String"
													},
													"sink": {
														"name": "QSESSIONTITLE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QCLIENT",
														"type": "String"
													},
													"sink": {
														"name": "QCLIENT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QFORM",
														"type": "String"
													},
													"sink": {
														"name": "QFORM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QVERSION",
														"type": "String"
													},
													"sink": {
														"name": "QVERSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "QSTATUS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWERDATE",
														"type": "String"
													},
													"sink": {
														"name": "QANSWERDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QEXPDATE",
														"type": "String"
													},
													"sink": {
														"name": "QEXPDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QAPPLICATION",
														"type": "String"
													},
													"sink": {
														"name": "QAPPLICATION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSURVEYTYPE",
														"type": "String"
													},
													"sink": {
														"name": "QSURVEYTYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "REQLOCATION",
														"type": "String"
													},
													"sink": {
														"name": "REQLOCATION",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QSESSION_NEW",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QSESSION",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check answers file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Sessions file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QANSWER_NEW",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Answers file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check answers file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check answers file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send answers failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QANSWER não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QANSWER não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy answers",
									"description": "Copy answers data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "QSESSION",
														"type": "String"
													},
													"sink": {
														"name": "QSESSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QUESTION",
														"type": "String"
													},
													"sink": {
														"name": "QUESTION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWER",
														"type": "String"
													},
													"sink": {
														"name": "QANSWER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWERED",
														"type": "String"
													},
													"sink": {
														"name": "QANSWERED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWERDATE",
														"type": "String"
													},
													"sink": {
														"name": "QANSWERDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSHOW",
														"type": "String"
													},
													"sink": {
														"name": "QSHOW",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QORDER",
														"type": "String"
													},
													"sink": {
														"name": "QORDER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QUPDATED",
														"type": "String"
													},
													"sink": {
														"name": "QUPDATED",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QANSWER_NEW",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QANSWER",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Update clients",
									"description": "Transport [UNIDADE ATENDIMENTO] field from answers table to requests table, for time saving in queries",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy answers",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_UPDATEREQUESTCLIENT]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Regionais",
									"description": "",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Update clients",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_REGIONALREQUESTIA]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Check table answers file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Answers file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QTABLEANSWER_NEW",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Table answers file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check table answers file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check table answers file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send table answer failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QTABLEANSWER não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QTABLEANSWER não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy table answers",
									"description": "Copy anwers table data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "QSESSION",
														"type": "String"
													},
													"sink": {
														"name": "QSESSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TABLE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "TABLE_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TABLE_ROWID",
														"type": "String"
													},
													"sink": {
														"name": "TABLE_ROWID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TABLE_ROWNUM",
														"type": "String"
													},
													"sink": {
														"name": "TABLE_ROWNUM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_NAME",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_VALUE",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_VALUE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_POSITION",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_POSITION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_ANSWERED",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_ANSWERED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_ANSWERDATE",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_ANSWERDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_UPDATED",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_UPDATED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_VISIBLE",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_VISIBLE",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QTABLEANSWER_NEW",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QTABLEANSWER",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check table Actions",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Table answers file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_ACTION",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Copy table Actions",
						"description": "",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Check table Actions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "TRUNCATE TABLE STG.REQUESTIA_ACTIONS",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "FILE_ACTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": {
										"value": "REQUESTIA_ACTIONS",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check table Survey",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Copy table Actions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_SURVEY",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Copy table Survey",
						"description": "",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Check table Survey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "TRUNCATE TABLE STG.REQUESTIA_HO_AUX_SURVEY",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "FILE_SURVEY",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": {
										"value": "REQUESTIA_HO_AUX_SURVEY",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Apoio"
				},
				"annotations": [],
				"lastPublishTime": "2021-02-17T17:43:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Databricks Five9 API')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "F9 ESP0001",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:25:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Five9/F9_ESP0001"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "STG DW FIVE9_ESP0001",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "F9 ESP0001",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SQL_DESTINO",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH ESP0001 AS (\n\n    SELECT \nCAST(ID_LIGACAO AS VARCHAR(255)) AS ID_LIGACAO\n,CAST(DATA AS VARCHAR(255)) AS DATA\n,CAST(REGISTRO_DATA_HORA AS VARCHAR(255)) AS REGISTRO_DATA_HORA\n,CAST(CAMPANHA AS VARCHAR(255)) AS CAMPANHA\n,CAST(COMPETENCIA AS VARCHAR(255)) AS COMPETENCIA\n,CAST(AGENTE AS VARCHAR(255)) AS AGENTE\n,CAST(NOME_AGENTE AS VARCHAR(255)) AS NOME_AGENTE\n,CAST(POSICAO AS VARCHAR(255)) AS POSICAO\n,CAST(ANI AS VARCHAR(255)) AS ANI\n,CAST(NOME_CLIENTE AS VARCHAR(255)) AS NOME_CLIENTE\n,CAST(DNIS AS VARCHAR(255)) AS DNIS\n,CAST(TEMPO_LIGACAO AS VARCHAR(255)) AS TEMPO_LIGACAO\n,CAST(TEMPO_FATURAMENTO_ARRED AS VARCHAR(255)) AS TEMPO_FATURAMENTO_ARRED\n,CAST(TEMPO_IVR AS VARCHAR(255)) AS TEMPO_IVR\n,CAST(CAMINHO_IVR AS VARCHAR(255)) AS CAMINHO_IVR\n,CAST(TEMPO_ESPERA_FILA AS VARCHAR(255)) AS TEMPO_ESPERA_FILA\n,CAST(TEMPO_TOQUE AS VARCHAR(255)) AS TEMPO_TOQUE\n,CAST(TEMPO_CONVERSA AS VARCHAR(255)) AS TEMPO_CONVERSA\n,CAST(TEMPO_RETENCAO AS VARCHAR(255)) AS TEMPO_RETENCAO\n,CAST(TEMPO_ESPERA AS VARCHAR(255)) AS TEMPO_ESPERA\n,CAST(TEMPO_ABANDONAR AS VARCHAR(255)) AS TEMPO_ABANDONAR\n,CAST(TEMPO_TOTAL_FILA AS VARCHAR(255)) AS TEMPO_TOTAL_FILA\n,CAST(AP_TEMPO_ATIVIDADE_LIGACAO AS VARCHAR(255)) AS AP_TEMPO_ATIVIDADE_LIGACAO\n,CAST(TRANSFERENCIAS AS VARCHAR(255)) AS TRANSFERENCIAS\n,CAST(CONFERENCIAS AS VARCHAR(255)) AS CONFERENCIAS\n,CAST(RETENCOES AS VARCHAR(255)) AS RETENCOES\n,CAST(ABANDONADA AS VARCHAR(255)) AS ABANDONADA\n,CAST(GRAVACOES AS VARCHAR(255)) AS GRAVACOES\n,CAST(TIPO_CAMPANHA AS VARCHAR(255)) AS TIPO_CAMPANHA\n,CAST(TIPO_LIGACAO AS VARCHAR(255)) AS TIPO_LIGACAO\n,CAST(GRUPO_AGENTES AS VARCHAR(255)) AS GRUPO_AGENTES\n\n    FROM STG.FIVE9_ESP0001\n)\n\n\nMERGE\t           \n\tdw.FIVE9_ESP0001 AS destino           \nUSING            \n\tESP0001 AS origem           \n           \n    ON(        \n        destino.id_ligacao = origem.id_ligacao        \n          )        \n       \n      \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \ndestino.DATA\t\t\t\t\t=origem.DATA,\ndestino.REGISTRO_DATA_HORA\t\t=origem.REGISTRO_DATA_HORA,\ndestino.CAMPANHA\t\t\t\t=origem.CAMPANHA,\ndestino.COMPETENCIA\t\t\t\t=origem.COMPETENCIA,\ndestino.AGENTE\t\t\t\t\t=origem.AGENTE,\ndestino.NOME_AGENTE\t\t\t\t=origem.NOME_AGENTE,\ndestino.POSICAO\t\t\t\t\t=origem.POSICAO,\ndestino.ANI\t\t\t\t\t\t=origem.ANI,\ndestino.NOME_CLIENTE\t\t\t=origem.NOME_CLIENTE,\ndestino.DNIS\t\t\t\t\t=origem.DNIS,\ndestino.TEMPO_LIGACAO\t\t\t=origem.TEMPO_LIGACAO,\ndestino.TEMPO_FATURAMENTO_ARRED\t=origem.TEMPO_FATURAMENTO_ARRED,\ndestino.TEMPO_IVR\t\t\t\t=origem.TEMPO_IVR,\ndestino.CAMINHO_IVR\t\t\t\t=origem.CAMINHO_IVR,\ndestino.TEMPO_ESPERA_FILA\t\t=origem.TEMPO_ESPERA_FILA,\ndestino.TEMPO_TOQUE\t\t\t\t=origem.TEMPO_TOQUE,\ndestino.TEMPO_CONVERSA\t\t\t=origem.TEMPO_CONVERSA,\ndestino.TEMPO_RETENCAO\t\t\t=origem.TEMPO_RETENCAO,\ndestino.TEMPO_ESPERA\t\t\t=origem.TEMPO_ESPERA,\ndestino.TEMPO_ABANDONAR\t\t\t=origem.TEMPO_ABANDONAR,\ndestino.TEMPO_TOTAL_FILA\t\t\t=origem.TEMPO_TOTAL_FILA,\ndestino.AP_TEMPO_ATIVIDADE_LIGACAO\t=origem.AP_TEMPO_ATIVIDADE_LIGACAO,\ndestino.TRANSFERENCIAS\t\t\t\t=origem.TRANSFERENCIAS,\ndestino.CONFERENCIAS\t\t\t\t=origem.CONFERENCIAS,\ndestino.RETENCOES\t\t\t\t\t=origem.RETENCOES,\ndestino.ABANDONADA\t\t\t\t\t=origem.ABANDONADA,\ndestino.GRAVACOES\t\t\t\t\t=origem.GRAVACOES,\ndestino.TIPO_CAMPANHA\t\t\t\t=origem.TIPO_CAMPANHA,\ndestino.TIPO_LIGACAO\t\t\t\t=origem.TIPO_LIGACAO,\ndestino.GRUPO_AGENTES\t\t\t\t=origem.GRUPO_AGENTES\n  \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.id_ligacao\t\n,origem.DATA\n,origem.REGISTRO_DATA_HORA\n,origem.CAMPANHA\n,origem.COMPETENCIA\n,origem.AGENTE\n,origem.NOME_AGENTE\n,origem.POSICAO\n,origem.ANI\n,origem.NOME_CLIENTE\n,origem.DNIS\n,origem.TEMPO_LIGACAO\n,origem.TEMPO_FATURAMENTO_ARRED\n,origem.TEMPO_IVR\n,origem.CAMINHO_IVR\n,origem.TEMPO_ESPERA_FILA\n,origem.TEMPO_TOQUE\n,origem.TEMPO_CONVERSA\n,origem.TEMPO_RETENCAO\n,origem.TEMPO_ESPERA\n,origem.TEMPO_ABANDONAR\n,origem.TEMPO_TOTAL_FILA\n,origem.AP_TEMPO_ATIVIDADE_LIGACAO\n,origem.TRANSFERENCIAS\n,origem.CONFERENCIAS\n,origem.RETENCOES\n,origem.ABANDONADA\n,origem.GRAVACOES\n,origem.TIPO_CAMPANHA\n,origem.TIPO_LIGACAO\n,origem.GRUPO_AGENTES\n);        "
								}
							]
						}
					},
					{
						"name": "STG DW FIVE9_ESP0002",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "F9 ESP0002",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SQL_DESTINO",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH TMP AS(\nSELECT\n      A.AGENTE\n      ,A.REGISTRO_HORA_DATA_ACESSO\n      ,A.REGISTRO_HORA_DATA_SAIDA\n      ,ROW_NUMBER()OVER(PARTITION BY A.AGENTE,A.REGISTRO_HORA_DATA_ACESSO,A.REGISTRO_HORA_DATA_SAIDA ORDER BY A.REGISTRO_HORA_DATA_SAIDA) ID_LINHA\nFROM STG.FIVE9_ESP0002 A\n)\nDELETE FROM TMP WHERE ID_LINHA > 1\n\nMERGE\t           \n\tdw.FIVE9_ESP0002 AS destino           \nUSING            \n\tstg.FIVE9_ESP0002 AS origem           \n           \n    ON(        \n        destino.agente = origem.agente \n\t\tAND destino.REGISTRO_HORA_DATA_ACESSO = origem.REGISTRO_HORA_DATA_ACESSO\n\t\tAND destino.REGISTRO_HORA_DATA_SAIDA = origem.REGISTRO_HORA_DATA_SAIDA\n          )        \n       \n      \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \ndestino.DATA_HORA\t\t\t\t\t=origem.DATA_HORA,\ndestino.NOME_AGENTE\t\t\t\t\t=origem.NOME_AGENTE,\ndestino.GRUPO_AGENTES\t\t\t\t=origem.GRUPO_AGENTES,\ndestino.REGISTRO_HORA_DATA_SAIDA\t=origem.REGISTRO_HORA_DATA_SAIDA,\ndestino.TEMPO_LOGIN\t\t\t\t\t=origem.TEMPO_LOGIN,\ndestino.DATA\t\t\t\t\t\t=origem.DATA\n  \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.DATA_HORA\n,origem.AGENTE\n,origem.NOME_AGENTE\n,origem.GRUPO_AGENTES\n,origem.REGISTRO_HORA_DATA_ACESSO\n,origem.REGISTRO_HORA_DATA_SAIDA\n,origem.TEMPO_LOGIN\n,origem.DATA\n);        "
								}
							]
						}
					},
					{
						"name": "STG DW FIVE9_ESP0003",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "F9 ESP0003",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SQL_DESTINO",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH ESP0003 AS (\n    SELECT\n        TMP.*\n    FROM(\n        SELECT\n            A.*\n            ,ROW_NUMBER()OVER(PARTITION BY A.ID_LIGACAO ORDER BY A.ID_LIGACAO DESC) ID_LINHA\n        FROM STG.FIVE9_ESP0003 A\n    )TMP\n    WHERE TMP.ID_LINHA = 1  \n)\n\n\n\nMERGE\t           \n\tdw.FIVE9_ESP0003 AS destino           \nUSING            \n\tESP0003 AS origem           \n           \n    ON(        \n        destino.id_ligacao = origem.id_ligacao \n          )        \n       \n      \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \ndestino.ID_LIGACAO\t\t\t\t\t\t\t=origem.ID_LIGACAO,\ndestino.CAMPANHA\t\t\t\t\t\t\t=origem.CAMPANHA,\ndestino.TIPO_LIGACAO\t\t\t\t\t\t=origem.TIPO_LIGACAO,\ndestino.AGENTE\t\t\t\t\t\t\t\t=origem.AGENTE,\ndestino.NOME_AGENTE\t\t\t\t\t\t\t=origem.NOME_AGENTE,\ndestino.POSICAO\t\t\t\t\t\t\t\t=origem.POSICAO,\ndestino.ANI\t\t\t\t\t\t\t\t\t=origem.ANI,\ndestino.TEMPO_LIGACAO\t\t\t\t\t\t=origem.TEMPO_LIGACAO,\ndestino.TEMPO_FATURAMENTO_ARRENDONDADO\t\t=origem.TEMPO_FATURAMENTO_ARRENDONDADO,\ndestino.TEMPO_RETENCAO\t\t\t\t\t\t=origem.TEMPO_RETENCAO,\ndestino.TEMPO_ESPERA\t\t\t\t\t\t=origem.TEMPO_ESPERA,\ndestino.APÓS_TEMPO_ATIVIDADE_LIGACAO\t\t=origem.APÓS_TEMPO_ATIVIDADE_LIGACAO,\ndestino.TRANSFERENCIAS\t\t\t\t\t\t=origem.TRANSFERENCIAS,\ndestino.CONFERENCIAS\t\t\t\t\t\t=origem.CONFERENCIAS,\ndestino.ABANDONADA\t\t\t\t\t\t\t=origem.ABANDONADA,\ndestino.DATA\t\t\t\t\t\t\t\t=origem.DATA,\ndestino.HORA\t\t\t\t\t\t\t\t=origem.HORA,\ndestino.COMPETENCIA\t\t\t\t\t\t\t=origem.COMPETENCIA,\ndestino.TEMPO_CONVERSA\t\t\t\t\t\t=origem.TEMPO_CONVERSA\n  \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.ID_LIGACAO\n,origem.CAMPANHA\n,origem.TIPO_LIGACAO\n,origem.AGENTE\n,origem.NOME_AGENTE\n,origem.POSICAO\n,origem.ANI\n,origem.TEMPO_LIGACAO\n,origem.TEMPO_FATURAMENTO_ARRENDONDADO\n,origem.TEMPO_RETENCAO\n,origem.TEMPO_ESPERA\n,origem.APÓS_TEMPO_ATIVIDADE_LIGACAO\n,origem.TRANSFERENCIAS\n,origem.CONFERENCIAS\n,origem.ABANDONADA\n,origem.DATA\n,origem.HORA\n,origem.COMPETENCIA\n,origem.TEMPO_CONVERSA\n\n);        \n"
								}
							]
						}
					},
					{
						"name": "STG DW FIVE9_ESP0004",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "F9 ESP0004",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SQL_DESTINO",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH DADOS AS(\n    SELECT DISTINCT\n    CAMPANHA\n    ,TIPO_LIGACAO\n    ,AGENTE\n    ,NOME_AGENTE\n    ,POSICAO\n    ,ANI\n    ,DNIS\n    ,TEMPO_LIGACAO\n    ,TEMPO_ESPERA_FILA\n    ,TEMPO_CONVERSA\n    ,TEMPO_ESPERA\n    ,ABANDONADA\n    ,DATA\n    ,HORA\n    FROM STG.FIVE9_ESP0004\n)\n\n\nMERGE\t           \n\tdw.FIVE9_ESP0004 AS destino           \nUSING            \n\tDADOS AS origem           \n           \n    ON(        \ndestino.CAMPANHA\t\t\t\t\t=origem.CAMPANHA\t\t\tAND\ndestino.TIPO_LIGACAO\t\t\t\t=origem.TIPO_LIGACAO\t\tAND\ndestino.AGENTE\t\t\t\t\t\t=origem.AGENTE\t\t\t\tAND\ndestino.NOME_AGENTE\t\t\t\t\t=origem.NOME_AGENTE\t\t\tAND\ndestino.POSICAO\t\t\t\t\t\t=origem.POSICAO\t\t\t\tAND\ndestino.ANI\t\t\t\t\t\t\t=origem.ANI\t\t\t\t\tAND\ndestino.DNIS\t\t\t\t\t\t=origem.DNIS\t\t\t\tAND\ndestino.TEMPO_LIGACAO\t\t\t\t=origem.TEMPO_LIGACAO\t\tAND\ndestino.TEMPO_ESPERA_FILA\t\t\t=origem.TEMPO_ESPERA_FILA\tAND\ndestino.TEMPO_CONVERSA\t\t\t\t=origem.TEMPO_CONVERSA\t\tAND\ndestino.TEMPO_ESPERA\t\t\t\t=origem.TEMPO_ESPERA\t\tAND\ndestino.ABANDONADA\t\t\t\t\t=origem.ABANDONADA\t\t\tAND\ndestino.DATA\t\t\t\t\t\t=origem.DATA\t\t\t\tAND\ndestino.HORA\t\t\t\t\t\t=origem.HORA\n          )        \n       \n      \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \ndestino.CAMPANHA\t\t\t\t\t=origem.CAMPANHA,\ndestino.TIPO_LIGACAO\t\t\t\t=origem.TIPO_LIGACAO,\ndestino.AGENTE\t\t\t\t\t\t=origem.AGENTE,\ndestino.NOME_AGENTE\t\t\t\t\t=origem.NOME_AGENTE,\ndestino.POSICAO\t\t\t\t\t\t=origem.POSICAO,\ndestino.ANI\t\t\t\t\t\t\t=origem.ANI,\ndestino.DNIS\t\t\t\t\t\t=origem.DNIS,\ndestino.TEMPO_LIGACAO\t\t\t\t=origem.TEMPO_LIGACAO,\ndestino.TEMPO_ESPERA_FILA\t\t\t=origem.TEMPO_ESPERA_FILA,\ndestino.TEMPO_CONVERSA\t\t\t\t=origem.TEMPO_CONVERSA,\ndestino.TEMPO_ESPERA\t\t\t\t=origem.TEMPO_ESPERA,\ndestino.ABANDONADA\t\t\t\t\t=origem.ABANDONADA,\ndestino.DATA\t\t\t\t\t\t=origem.DATA,\ndestino.HORA\t\t\t\t\t\t=origem.HORA\n  \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.CAMPANHA\n,origem.TIPO_LIGACAO\n,origem.AGENTE\n,origem.NOME_AGENTE\n,origem.POSICAO\n,origem.ANI\n,origem.DNIS\n,origem.TEMPO_LIGACAO\n,origem.TEMPO_ESPERA_FILA\n,origem.TEMPO_CONVERSA\n,origem.TEMPO_ESPERA\n,origem.ABANDONADA\n,origem.DATA\n,origem.HORA\n);"
								}
							]
						}
					},
					{
						"name": "F9 ESP0002",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:25:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Five9/F9_ESP0002"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "F9 ESP0003",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:25:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Five9/F9_ESP0003"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "F9 ESP0004",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:25:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Five9/F9_ESP0004"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/Five9"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Verifica Start Datamart",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT\n    COUNT(1) as QT_REGISTRO \nFROM(\n    SELECT \n        A.ID_PLATAFORMA\n        ,B.DS_PLATAFORMA\n        ,A.TIPO_PROCESSO\n        ,MAX(A.DT_INICIO_PROCESS) DT_INICIO_PROCESS \n        ,CAST(MAX(A.DT_FIM_PROCESS) AS DATE) DT_FIM_PROCESS         \n    FROM DBO.LOG_PROCESSAMENTO_DW A\n    INNER JOIN DBO.cfg_plataforma_dw B ON B.ID_PLATAFORMA = A.ID_PLATAFORMA\n    WHERE UPPER(A.NOME_PROCESSO) LIKE '%CARGA_DW'\n    GROUP BY A.ID_PLATAFORMA\n        ,B.DS_PLATAFORMA\n        ,A.TIPO_PROCESSO\n)TMP    \nWHERE TMP.DT_FIM_PROCESS = CAST(GETDATE() AS DATE)\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AZ_SQL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Processo",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Verifica Start Datamart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Verifica Start Datamart').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Inicia Atualizacao Datamart",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greaterOrEquals(item().QT_REGISTRO,2 )",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Busca Email",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": "SELECT * FROM ADF.OWNER",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AZ_SQL",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "Variable Email",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Busca Email",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"variableName": "email",
													"value": {
														"value": "@activity('Busca Email').output.firstRow['Email']",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Disparado de Erro Datamart Receb",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Variable Email",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Send email",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"EmailTo": {
															"value": "@variables('email')",
															"type": "Expression"
														},
														"Subject": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"ErrorMessage": "Falha na atualização do Datamart Recebimento"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Processa Datamart",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "SP_PROCESSA_RECEBIMENTO_SYS_LEG"
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"email": {
						"type": "String"
					},
					"qt_registro": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INSTITUTO_DR_OSMAR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Agendamento",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Atendimento_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Agendamento]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Agendamento]\n",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_AGENDAMENTO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Agendamento"
								}
							}
						]
					},
					{
						"name": "Agendamento_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Agendamento",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Agendamento_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Agendamento_Diario]\n",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_AGENDAMENTO_DIARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Agendamento_Diario"
								}
							}
						]
					},
					{
						"name": "Atendimento",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "01:30:00",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Atendimento]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Atendimento]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_ATENDIMENTO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Atendimento"
								}
							}
						]
					},
					{
						"name": "Atendimento_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Atendimento",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Atendimento_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Atendimento_Diario]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_ATENDIMENTO_DIARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_atendimento_diario"
								}
							}
						]
					},
					{
						"name": "Faturamento",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Agendamento_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Faturamento]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Faturamento]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_FATURAMENTO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Faturamento"
								}
							}
						]
					},
					{
						"name": "Faturamento_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Faturamento",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Faturamento_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Faturamento_Diario]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_FATURAMENTO_DIARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Faturamento_Diario"
								}
							}
						]
					},
					{
						"name": "Financeiro",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Faturamento_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Financeiro]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Financeiro]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_FINANCEIRO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Financeiro"
								}
							}
						]
					},
					{
						"name": "Financeiro_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Financeiro",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Financeiro_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Financeiro_Diario]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_FINANCEIRO_DIARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Financeiro_Diario"
								}
							}
						]
					},
					{
						"name": "Repasse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Financeiro_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Repasse]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Repasse]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_REPASSE",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Repasse"
								}
							}
						]
					},
					{
						"name": "Repasse_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Repasse",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Repasse_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Repasse_Diario]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_REPASSE_DIARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Repasse_Diario"
								}
							}
						]
					},
					{
						"name": "Questionario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Repasse_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Questionario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Questionario]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_QUESTIONARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_questionario"
								}
							}
						]
					},
					{
						"name": "Questionario_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Questionario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Questionario_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Questionario_Diario]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_QUESTIONARIO_DIARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_questionario_diario"
								}
							}
						]
					},
					{
						"name": "ContasPagarReceber",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Questionario_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_ContasPagarReceber]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_ContasPagarReceber]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_CONTASPAGARRECEBER",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_ContasPagarReceber"
								}
							}
						]
					},
					{
						"name": "ContasPagarReceber_Diarias",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ContasPagarReceber",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_ContasPagarReceber_Diarias]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_ContasPagarReceber_Diarias]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_CONTASPAGARRECEBER_DIARIAS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_ContasPagarReceber_Diarias"
								}
							}
						]
					},
					{
						"name": "Caixa",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ContasPagarReceber_Diarias",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Caixa]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Caixa]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_CAIXA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Caixa"
								}
							}
						]
					},
					{
						"name": "Caixa_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Caixa",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Caixa_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Caixa_Diario]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_CAIXA_DIARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Caixa_Diario"
								}
							}
						]
					},
					{
						"name": "Paciente",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Caixa_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Paciente]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Paciente]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_PACIENTE",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Paciente"
								}
							}
						]
					},
					{
						"name": "Paciente_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Paciente",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Paciente_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Paciente_Diario]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_PACIENTE_DIARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Paciente_Diario"
								}
							}
						]
					},
					{
						"name": "Teleorientacao",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Paciente_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Teleorientacao]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Teleorientacao]\n",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_TELEORIENTACAO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Teleorientacao"
								}
							}
						]
					},
					{
						"name": "Teleorientacao_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Teleorientacao",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Teleorientacao_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Teleorientacao_Diario]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_TELEORIENTACAO_DIARIA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Teleorientacao_Diaria"
								}
							}
						]
					},
					{
						"name": "Venda",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Teleorientacao_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Venda]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Venda]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_VENDA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Venda"
								}
							}
						]
					},
					{
						"name": "Venda_Diaria",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Venda",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Venda_Diaria]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Venda_Diaria]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_VENDA_DIARIA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Venda_Diaria"
								}
							}
						]
					},
					{
						"name": "Profissional",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Venda_Diaria",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Profissional]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Profissional]\n",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_PROFISSIONAL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Profissional"
								}
							}
						]
					},
					{
						"name": "Profissional_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Profissional",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Profissional_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Profissional_Diario]\n",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_PROFISSIONAL_DIARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Profissional_Diario"
								}
							}
						]
					},
					{
						"name": "ATENDIMENTO MERGE",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Atendimento",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SQL_DESTINO",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH CTE \nAS\n\n(\nSELECT \nA.ATENDIMENTO_CODIGO + '|' + A.atendimento_procedimento_codigo + '|' + LTRIM(RTRIM(REPLACE(A.atendimento_procedimento_convenio,' ',''))) + '|' + CAST(ROW_NUMBER()OVER(PARTITION BY A.ATENDIMENTO_CODIGO, A.ATENDIMENTO_PROCEDIMENTO_CODIGO, A.atendimento_procedimento_convenio ORDER BY A.ATENDIMENTO_HORA DESC) AS VARCHAR(100)) AS FK\n,A.atendimento_codigo\n,A.agendamento_codigo\n,A.atendimento_turno\n,A.atendimento_dia\n,A.atendimento_mes\n,A.atendimento_ano\n,A.atendimento_usuario_cadastro\n,A.atendimento_procedimento_empresa\n,A.atendimento_procedimento_empresa_requisitante\n,A.atendimento_procedimento_profissional_nome\n,A.atendimento_procedimento_profissional_requisitante\n,A.atendimento_procedimento_especialidade_profissional_requisitante\n,A.atendimento_procedimento_convenio\n,A.atendimento_procedimento_plano\n,A.atendimento_procedimento_especialidade\n,A.atendimento_procedimento_nome\n,A.atendimento_procedimento_grupo\n,A.atendimento_procedimento_valor\n,A.atendimento_procedimento_coparticipacao_valor\n,A.atendimento_procedimento_filme_valor\n,A.atendimento_material_medicamento_nome\n,A.atendimento_material_medicamento_valor\n,A.atendimento_material_medicamento_coparticipacao_valor\n,A.atendimento_taxa_nome\n,A.atendimento_taxa_valor\n,A.atendimento_taxa_coparticipacao_valor\n,A.paciente_codigo\n,A.paciente_nome\n,A.paciente_sexo\n,A.paciente_faixa_idade\n,A.paciente_estado\n,A.paciente_cidade\n,A.paciente_bairro\n,A.atendimento_hora\n,A.atendimento_diadasemana\n,A.atendimento_cid_primario\n,A.atendimento_cid_secundario\n,A.atendimento_cid_consultorio\n,A.atendimento_tipo\n,A.atendimento_horainicio_recepcao\n,A.atendimento_horafim_recepcao\n,A.atendimento_horainicio_consultorio\n,A.atendimento_horafim_consultorio\n,A.atendimento_procedimento_codigo\n,A.paciente_cep\n,A.atendimento_profissional_especialidade\n,A.atendimento_previsao_valor_repasse_profissional\n,A.atendimento_previsao_valor_repasse_clinica\n,A.atendimento_passo\n,A.atendimento_codigo_guia\n,A.atendimento_quantidade_executada_procedimento\n,A.atendimento_status_procedimento\nFROM STG.inst_dr_osmar_Atendimento A\n\n)\n\nMERGE\t           \n\tdw.inst_dr_osmar_Atendimento AS destino           \nUSING            \n\tCTE AS origem           \n           \n    ON\t(        \n            origem.fk = destino.fk\n\t\t)        \n\n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \n\ndestino.fk = origem.fk\n,destino.atendimento_codigo = origem.atendimento_codigo\n,destino.agendamento_codigo = origem.agendamento_codigo\n,destino.atendimento_turno = origem.atendimento_turno\n,destino.atendimento_dia = origem.atendimento_dia\n,destino.atendimento_mes = origem.atendimento_mes\n,destino.atendimento_ano = origem.atendimento_ano\n,destino.atendimento_usuario_cadastro = origem.atendimento_usuario_cadastro\n,destino.atendimento_procedimento_empresa = origem.atendimento_procedimento_empresa\n,destino.atendimento_procedimento_empresa_requisitante = origem.atendimento_procedimento_empresa_requisitante\n,destino.atendimento_procedimento_profissional_nome = origem.atendimento_procedimento_profissional_nome\n,destino.atendimento_procedimento_profissional_requisitante = origem.atendimento_procedimento_profissional_requisitante\n,destino.atendimento_procedimento_especialidade_profissional_requisitante = origem.atendimento_procedimento_especialidade_profissional_requisitante\n,destino.atendimento_procedimento_convenio = origem.atendimento_procedimento_convenio\n,destino.atendimento_procedimento_plano = origem.atendimento_procedimento_plano\n,destino.atendimento_procedimento_especialidade = origem.atendimento_procedimento_especialidade\n,destino.atendimento_procedimento_nome = origem.atendimento_procedimento_nome\n,destino.atendimento_procedimento_grupo = origem.atendimento_procedimento_grupo\n,destino.atendimento_procedimento_valor = origem.atendimento_procedimento_valor\n,destino.atendimento_procedimento_coparticipacao_valor = origem.atendimento_procedimento_coparticipacao_valor\n,destino.atendimento_procedimento_filme_valor = origem.atendimento_procedimento_filme_valor\n,destino.atendimento_material_medicamento_nome = origem.atendimento_material_medicamento_nome\n,destino.atendimento_material_medicamento_valor = origem.atendimento_material_medicamento_valor\n,destino.atendimento_material_medicamento_coparticipacao_valor = origem.atendimento_material_medicamento_coparticipacao_valor\n,destino.atendimento_taxa_nome = origem.atendimento_taxa_nome\n,destino.atendimento_taxa_valor = origem.atendimento_taxa_valor\n,destino.atendimento_taxa_coparticipacao_valor = origem.atendimento_taxa_coparticipacao_valor\n,destino.paciente_codigo = origem.paciente_codigo\n,destino.paciente_nome = origem.paciente_nome\n,destino.paciente_sexo = origem.paciente_sexo\n,destino.paciente_faixa_idade = origem.paciente_faixa_idade\n,destino.paciente_estado = origem.paciente_estado\n,destino.paciente_cidade = origem.paciente_cidade\n,destino.paciente_bairro = origem.paciente_bairro\n,destino.atendimento_hora = origem.atendimento_hora\n,destino.atendimento_diadasemana = origem.atendimento_diadasemana\n,destino.atendimento_cid_primario = origem.atendimento_cid_primario\n,destino.atendimento_cid_secundario = origem.atendimento_cid_secundario\n,destino.atendimento_cid_consultorio = origem.atendimento_cid_consultorio\n,destino.atendimento_tipo = origem.atendimento_tipo\n,destino.atendimento_horainicio_recepcao = origem.atendimento_horainicio_recepcao\n,destino.atendimento_horafim_recepcao = origem.atendimento_horafim_recepcao\n,destino.atendimento_horainicio_consultorio = origem.atendimento_horainicio_consultorio\n,destino.atendimento_horafim_consultorio = origem.atendimento_horafim_consultorio\n,destino.atendimento_procedimento_codigo = origem.atendimento_procedimento_codigo\n,destino.paciente_cep = origem.paciente_cep\n,destino.atendimento_profissional_especialidade = origem.atendimento_profissional_especialidade\n,destino.atendimento_previsao_valor_repasse_profissional = origem.atendimento_previsao_valor_repasse_profissional\n,destino.atendimento_previsao_valor_repasse_clinica = origem.atendimento_previsao_valor_repasse_clinica\n,destino.atendimento_passo = origem.atendimento_passo\n,destino.atendimento_codigo_guia = origem.atendimento_codigo_guia\n,destino.atendimento_quantidade_executada_procedimento = origem.atendimento_quantidade_executada_procedimento\n,destino.atendimento_status_procedimento = origem.atendimento_status_procedimento\n\n\n\n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.fk\n,origem.atendimento_codigo\n,origem.agendamento_codigo\n,origem.atendimento_turno\n,origem.atendimento_dia\n,origem.atendimento_mes\n,origem.atendimento_ano\n,origem.atendimento_usuario_cadastro\n,origem.atendimento_procedimento_empresa\n,origem.atendimento_procedimento_empresa_requisitante\n,origem.atendimento_procedimento_profissional_nome\n,origem.atendimento_procedimento_profissional_requisitante\n,origem.atendimento_procedimento_especialidade_profissional_requisitante\n,origem.atendimento_procedimento_convenio\n,origem.atendimento_procedimento_plano\n,origem.atendimento_procedimento_especialidade\n,origem.atendimento_procedimento_nome\n,origem.atendimento_procedimento_grupo\n,origem.atendimento_procedimento_valor\n,origem.atendimento_procedimento_coparticipacao_valor\n,origem.atendimento_procedimento_filme_valor\n,origem.atendimento_material_medicamento_nome\n,origem.atendimento_material_medicamento_valor\n,origem.atendimento_material_medicamento_coparticipacao_valor\n,origem.atendimento_taxa_nome\n,origem.atendimento_taxa_valor\n,origem.atendimento_taxa_coparticipacao_valor\n,origem.paciente_codigo\n,origem.paciente_nome\n,origem.paciente_sexo\n,origem.paciente_faixa_idade\n,origem.paciente_estado\n,origem.paciente_cidade\n,origem.paciente_bairro\n,origem.atendimento_hora\n,origem.atendimento_diadasemana\n,origem.atendimento_cid_primario\n,origem.atendimento_cid_secundario\n,origem.atendimento_cid_consultorio\n,origem.atendimento_tipo\n,origem.atendimento_horainicio_recepcao\n,origem.atendimento_horafim_recepcao\n,origem.atendimento_horainicio_consultorio\n,origem.atendimento_horafim_consultorio\n,origem.atendimento_procedimento_codigo\n,origem.paciente_cep\n,origem.atendimento_profissional_especialidade\n,origem.atendimento_previsao_valor_repasse_profissional\n,origem.atendimento_previsao_valor_repasse_clinica\n,origem.atendimento_passo\n,origem.atendimento_codigo_guia\n,origem.atendimento_quantidade_executada_procedimento\n,origem.atendimento_status_procedimento        \n\n); \n"
								}
							]
						}
					},
					{
						"name": "CONVENIO MERGE",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ATENDIMENTO MERGE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH CONV AS(\n\nSELECT DISTINCT\n    '41' AS ESTABELECIMENTO\n    ,'41|' + LTRIM(RTRIM(REPLACE(REPLACE(UPPER(ATENDIMENTO_PROCEDIMENTO_CONVENIO),' ',''),'-',''))) AS FK_CONVENIO\n    ,LTRIM(RTRIM(REPLACE(REPLACE(UPPER(ATENDIMENTO_PROCEDIMENTO_CONVENIO),' ',''),'-',''))) AS CD_CONVENIO\n    ,ATENDIMENTO_PROCEDIMENTO_CONVENIO AS DS_CONVENIO\n    ,CASE\n        WHEN UPPER(ATENDIMENTO_PROCEDIMENTO_CONVENIO) LIKE '%PARTICULAR%' THEN 'PARTICULAR'\n        WHEN UPPER(ATENDIMENTO_PROCEDIMENTO_CONVENIO) LIKE '%SUS%' THEN 'SUS'\n        ELSE 'CONVÊNIO'\n     END TP_CONVENIO\n    ,'0' AS CD_CGC\n    \nFROM dw.inst_dr_osmar_Atendimento\n\n)\n\nMERGE\t           \n\tDW.inst_dr_osmar_CONVENIO AS destino           \nUSING            \n\tCONV AS origem           \n           \n    ON\t(        \n        origem.FK_CONVENIO = destino.FK_CONVENIO\n\t\t)        \n\n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \nDESTINO.ESTABELECIMENTO = ORIGEM.ESTABELECIMENTO\n,DESTINO.FK_CONVENIO = ORIGEM.FK_CONVENIO\n,DESTINO.CD_CONVENIO = ORIGEM.CD_CONVENIO\n,DESTINO.DS_CONVENIO = ORIGEM.DS_CONVENIO\n,DESTINO.TP_CONVENIO = ORIGEM.TP_CONVENIO\n,DESTINO.CD_CGC = ORIGEM.CD_CGC\n\n\n\n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\nORIGEM.ESTABELECIMENTO\n,ORIGEM.FK_CONVENIO\n,ORIGEM.CD_CONVENIO\n,ORIGEM.DS_CONVENIO\n,ORIGEM.TP_CONVENIO\n,ORIGEM.CD_CGC\n); \n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/P&P"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IOV')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lista arquivos",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_HMAISDATADRIVEN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": "urobrasil"
								}
							},
							"fieldList": [
								"childItems",
								"itemType",
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filtro",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lista arquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista arquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endsWith(item().name, 'csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filtro",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filtro').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copia dados para a STG",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('Drop table stg.',activity('Lista arquivos').output.itemName)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_SQL_STG",
											"type": "DatasetReference",
											"parameters": {
												"SCHEMA": "stg",
												"TABELA": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Move arquivo para PROCESSADOS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "STG DW",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@concat(activity('Lista arquivos').output.itemName,'\\Processados')",
													"type": "Expression"
												},
												"File": {
													"value": "@concat(item().name,'-',utcnow())",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Apaga arquivo",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move arquivo para PROCESSADOS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "sv_hmaisbrasildatadriven",
												"type": "LinkedServiceReference"
											},
											"path": "ceop/logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "STG DW",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copia dados para a STG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SQL_DESTINO",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": "MERGE\t           \n\tdw.ortocity AS destino           \nUSING            \n\tstg.ortocity AS origem           \n           \n    ON(        \ndestino.CD_ESTABELECIMENTO\t\t= origem.CD_ESTABELECIMENTO AND\ndestino.DS_ESTABELECIMENTO\t\t= origem.DS_ESTABELECIMENTO AND\ndestino.NR_ATENDIMENTO\t\t\t= origem.NR_ATENDIMENTO AND\ndestino.NR_INTERNO_CONTA\t\t= origem.NR_INTERNO_CONTA AND\ndestino.CD_PESSOA_FISICA\t\t= origem.CD_PESSOA_FISICA AND\ndestino.CD_CONVENIO\t\t\t\t= origem.CD_CONVENIO AND\ndestino.CD_MEDICO_EXECUTANTE\t=\torigem.CD_MEDICO_EXECUTANTE \n)        \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \ndestino.CD_ESTABELECIMENTO=origem.CD_ESTABELECIMENTO ,\ndestino.DS_ESTABELECIMENTO=origem.DS_ESTABELECIMENTO ,\ndestino.NR_ATENDIMENTO=origem.NR_ATENDIMENTO ,\ndestino.NR_INTERNO_CONTA=origem.NR_INTERNO_CONTA ,\ndestino.CD_PESSOA_FISICA=origem.CD_PESSOA_FISICA ,\ndestino.NM_PESSOA_FISICA=origem.NM_PESSOA_FISICA ,\ndestino.DT_NASCIMENTO=origem.DT_NASCIMENTO ,\ndestino.CD_CONVENIO=origem.CD_CONVENIO ,\ndestino.DS_CONVENIO=origem.DS_CONVENIO ,\ndestino.CD_MEDICO_EXECUTANTE=origem.CD_MEDICO_EXECUTANTE ,\ndestino.NM_MEDICO_EXECUTANTE=origem.NM_MEDICO_EXECUTANTE ,\ndestino.CD_SETOR_EXECUTANTE=origem.CD_SETOR_EXECUTANTE ,\ndestino.DS_SETOR_EXECUTANTE=origem.DS_SETOR_EXECUTANTE ,\ndestino.DT_ENTRADA=origem.DT_ENTRADA ,\ndestino.CD_ITEM=origem.CD_ITEM ,\ndestino.DS_ITEM=origem.DS_ITEM ,\ndestino.DT_LANC_ITEM=origem.DT_LANC_ITEM ,\ndestino.QT=origem.QT ,\ndestino.VALOR=origem.VALOR \n\n\n  \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.CD_ESTABELECIMENTO,\norigem.DS_ESTABELECIMENTO,\norigem.NR_ATENDIMENTO,\norigem.NR_INTERNO_CONTA,\norigem.CD_PESSOA_FISICA,\norigem.NM_PESSOA_FISICA,\norigem.DT_NASCIMENTO,\norigem.CD_CONVENIO,\norigem.DS_CONVENIO,\norigem.CD_MEDICO_EXECUTANTE,\norigem.NM_MEDICO_EXECUTANTE,\norigem.CD_SETOR_EXECUTANTE,\norigem.DS_SETOR_EXECUTANTE,\norigem.DT_ENTRADA,\norigem.CD_ITEM,\norigem.DS_ITEM,\norigem.DT_LANC_ITEM,\norigem.QT,\norigem.VALOR\n); "
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/P&P"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}