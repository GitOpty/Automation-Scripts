{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "OptyADF"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/NF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Calendario",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DT_INICIO",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DT_FIM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('\nSELECT DISTINCT\n    CAST(MIN(A.TheDate) AS VARCHAR(20)) + '' 00:00:00.000'' AS DT_INICIO\n    ,CAST(MAX(A.TheDate) AS VARCHAR(20)) + '' 23:59:59.000'' AS DT_FIM,\n\n     CONVERT(VARCHAR(20),MIN(A.TheDate)  ,103)  AS DT_INICIO_ORACLE\n    ,CONVERT(VARCHAR(20),Max(A.TheDate) ,103)  AS DT_FIM_ORACLE\n\nFROM calendar A\nWHERE A.TheDate BETWEEN ','''',variables('DT_INICIO'),'''', ' AND  ','''',variables('DT_FIM'),'''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_DIN",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DT_INICIO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup Periodo Inicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DT_INICIO",
							"value": {
								"value": "@activity('Lookup Periodo Inicial').output.firstRow.Data_Inicial",
								"type": "Expression"
							}
						}
					},
					{
						"name": "DT_FIM",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup Periodo Inicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DT_FIM",
							"value": {
								"value": "@activity('Lookup Periodo Inicial').output.firstRow.data_final",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Calendario",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Calendario').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SMART - NF ITG",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "TASY - NF HTML",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat(\n'DECLARE @DT_INICIO AS DATE\n DECLARE @DT_FIM     AS DATE\n\nSET @DT_INICIO = ','''', item().DT_INICIO,'''',\n'SET @DT_FIM = '  , '''', item().DT_FIM,'''',\n' SELECT \n 90 as estabelecimento  ',\n\n '  ,STR_STR_COD\n     ,nfe_dt_emissao\n    , nfe_dt_entrada\n    , nfe_tipo\n    , nfe_serie\n    , nfe_num\n    , fne_cod\n    , fne_nome_fantasia\n    , ine_mat_cod\n    , mat_desc_resumida\n    , gmm_nome\n    , ine_qtde_entrada\n    , mat_unm_cod_entrada\n    , ine_vlr_unit_entrada\n    , nfe_ipg_aberto\n    , ine_vlr_desconto\n    , ine_vlr_ipi\n    , nfe_aft\n    , nfe_vlr_total\n    , ds_nfe_tipo\n    , nfe_crit_venc\n    , nfe_cpg_parcelas\n    , nfe_ipg_dt_vcto\n    , nfe_parcela_1\nFROM (\n    SELECT cfg.cfg_emp\n        ,ISNULL(str_str_cod,''DH'') AS STR_STR_COD\n        , sba.sba_cod\n        , sba.sba_nome\n        , nfe.nfe_serie\n        , nfe.nfe_num\n        , nfe.nfe_fne_cod\n        , nfe.nfe_tipo\n        , CASE nfe.nfe_tipo\n\n                WHEN ''PR''\n                THEN ''Entrada''\n            WHEN ''SR''\n                THEN ''Simples Remessa''\n            WHEN ''SF''\n                THEN ''Simples Faturamento''\n            WHEN ''DV''\n                THEN ''Devolução''\n            WHEN ''TR''\n                THEN ''Transferência''\n            ELSE ''N/A''\n            END AS ds_nfe_tipo\n        , fne.fne_cod\n        , fne.fne_nome_fantasia\n        , nfe.nfe_vlr_total\n \n \n        , (\n            SELECT TOP 1 i.ipg_dt_vcto\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ORDER BY i.ipg_dt_vcto\n            ) AS nfe_ipg_dt_vcto\n        , (\n            SELECT count(ipg_parc)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ) AS nfe_cpg_parcelas\n        , nfe.nfe_crit_venc\n        , nfe.nfe_parcela_1\n        , nfe.nfe_dt_emissao\n        , nfe.nfe_dt_entrada\n        , ine.ine_seq\n        , ine.ine_mat_cod\n        , mat.mat_desc_resumida\n        , mat.mat_lma_cod\n        , lma.lma_nome\n        , mat.mat_gmm_cod\n        , gmm.gmm_nome\n        , mat_unm_cod_entrada\n        , ine.ine_qtde AS ine_qtde_entrada\n        , ine.ine_vlr_unit AS ine_vlr_unit_entrada\n        , (\n            SELECT isnull(sum(ipg_valor), 0)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n                AND i.ipg_status IN (''A'', ''R'')\n                AND i.ipg_dt_vcto <= @DT_FIM\n            ) AS nfe_ipg_aberto\n        , mat_unm_cod_saida\n        , '' AS solic\n        , '' AS DATA_solic\n        , convert(VARCHAR, ine_aft_serie) + ''.'' + convert(VARCHAR, ine_aft_num) AS nfe_aft\n        , aft_dthr\n        , ine.ine_qtde * mat_fat_conv_s_v AS ine_qtde_saida\n        , ine.ine_vlr_unit / mat_fat_conv_s_v AS ine_vlr_saida\n        , ine.ine_vlr_ipi\n        , ine.ine_vlr_desconto\n        , (\n            SELECT TOP 1 f.fne_cod\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                          )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                    n.nfe_dt_entrada >= @DT_INICIO\n                    AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_cod\n        , (\n            SELECT TOP 1 f.fne_nome_fantasia\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                        )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                   n.nfe_dt_entrada >= @DT_INICIO\n                 AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_nome_fantasia\n        , replace(replace(replace(emp_cgc, ''.'', ''''), ''/'', ''''), ''-'', '''') AS emp_cgc\n    FROM nfe WITH (NOLOCK)\n    INNER JOIN ine WITH (NOLOCK)\n        ON (\n                nfe.nfe_fne_cod = ine.ine_fne_cod\n                AND nfe.nfe_serie = ine.ine_nfe_serie\n                AND nfe.nfe_num = ine.ine_nfe_num\n                AND nfe.nfe_tipo = ine.ine_nfe_tipo\n                )\n    LEFT OUTER JOIN fne WITH (NOLOCK)\n        ON (convert(VARCHAR, ine.ine_fne_cod) = convert(VARCHAR, fne.fne_cod))\n    LEFT OUTER JOIN mat WITH (NOLOCK)\n        ON (mat.mat_cod = ine.ine_mat_cod)\n    LEFT OUTER JOIN lma WITH (NOLOCK)\n       ON (\n                lma.lma_cod = mat.mat_lma_cod\n                AND lma.lma_gmm_cod = mat.mat_gmm_cod\n                )\n    LEFT OUTER JOIN gmm WITH (NOLOCK)\n        ON (lma.lma_gmm_cod = gmm.gmm_cod)\n    LEFT OUTER JOIN sba WITH (NOLOCK)\n        ON (sba.sba_cod = nfe.nfe_sba_cod)\n    LEFT OUTER JOIN aft WITH (NOLOCK)\n        ON (\n               aft_serie = ine_aft_serie\n                AND aft_num = ine_aft_num\n                )\n    LEFT JOIN STR STR WITH (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD            \n    LEFT OUTER JOIN emp WITH (NOLOCK)\n        ON (emp.emp_fne_cod = fne.FNE_COD)\n    CROSS JOIN cfg\n    WHERE (\n            nfe.nfe_dt_entrada >= @DT_INICIO\n            AND nfe.nfe_dt_entrada <= @DT_FIM\n            )\n        AND (\n            fne.fne_cod IN (''%'')\n            OR (''%'' IN (''%''))\n            )\n    ) AS t1\nORDER BY sba_cod\n    , sba_nome\n    , nfe_tipo\n    , nfe_dt_entrada\n    , nfe_serie\n    , nfe_num\n    , ine_seq\n '\n\n)\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													},
													"sink": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													},
													"sink": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													},
													"sink": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 18
													},
													"sink": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 18
													}
												},
												{
													"source": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													},
													"sink": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													}
												},
												{
													"source": {
														"name": "STR_STR_COD",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "str_str_cod",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_ITAIGARA_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_SMART"
											}
										}
									]
								},
								{
									"name": "SMART - NF ITB",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SMART - NF ITG",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat(\n'DECLARE @DT_INICIO AS DATE\n DECLARE @DT_FIM     AS DATE\n\nSET @DT_INICIO = ','''', item().DT_INICIO,'''',\n'SET @DT_FIM = '  , '''', item().DT_FIM,'''',\n' SELECT \n 91 as estabelecimento  ',\n\n '      \n    ,STR_STR_COD\n     ,nfe_dt_emissao\n    , nfe_dt_entrada\n    , nfe_tipo\n    , nfe_serie\n    , nfe_num\n    , fne_cod\n    , fne_nome_fantasia\n    , ine_mat_cod\n    , mat_desc_resumida\n    , gmm_nome\n    , ine_qtde_entrada\n    , mat_unm_cod_entrada\n    , ine_vlr_unit_entrada\n    , nfe_ipg_aberto\n    , ine_vlr_desconto\n    , ine_vlr_ipi\n    , nfe_aft\n    , nfe_vlr_total\n    , ds_nfe_tipo\n    , nfe_crit_venc\n    , nfe_cpg_parcelas\n    , nfe_ipg_dt_vcto\n    , nfe_parcela_1\nFROM (\n    SELECT cfg.cfg_emp\n        ,ISNULL(str_str_cod,''DHI'') AS STR_STR_COD\n        , sba.sba_cod\n        , sba.sba_nome\n        , nfe.nfe_serie\n        , nfe.nfe_num\n        , nfe.nfe_fne_cod\n        , nfe.nfe_tipo\n        , CASE nfe.nfe_tipo\n\n                WHEN ''PR''\n                THEN ''Entrada''\n            WHEN ''SR''\n                THEN ''Simples Remessa''\n            WHEN ''SF''\n                THEN ''Simples Faturamento''\n            WHEN ''DV''\n                THEN ''Devolução''\n            WHEN ''TR''\n                THEN ''Transferência''\n            ELSE ''N/A''\n            END AS ds_nfe_tipo\n        , fne.fne_cod\n        , fne.fne_nome_fantasia\n        , nfe.nfe_vlr_total\n \n \n        , (\n            SELECT TOP 1 i.ipg_dt_vcto\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ORDER BY i.ipg_dt_vcto\n            ) AS nfe_ipg_dt_vcto\n        , (\n            SELECT count(ipg_parc)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ) AS nfe_cpg_parcelas\n        , nfe.nfe_crit_venc\n        , nfe.nfe_parcela_1\n        , nfe.nfe_dt_emissao\n        , nfe.nfe_dt_entrada\n        , ine.ine_seq\n        , ine.ine_mat_cod\n        , mat.mat_desc_resumida\n        , mat.mat_lma_cod\n        , lma.lma_nome\n        , mat.mat_gmm_cod\n        , gmm.gmm_nome\n        , mat_unm_cod_entrada\n        , ine.ine_qtde AS ine_qtde_entrada\n        , ine.ine_vlr_unit AS ine_vlr_unit_entrada\n        , (\n            SELECT isnull(sum(ipg_valor), 0)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n                AND i.ipg_status IN (''A'', ''R'')\n                AND i.ipg_dt_vcto <= @DT_FIM\n            ) AS nfe_ipg_aberto\n        , mat_unm_cod_saida\n        , '' AS solic\n        , '' AS DATA_solic\n        , convert(VARCHAR, ine_aft_serie) + ''.'' + convert(VARCHAR, ine_aft_num) AS nfe_aft\n        , aft_dthr\n        , ine.ine_qtde * mat_fat_conv_s_v AS ine_qtde_saida\n        , ine.ine_vlr_unit / mat_fat_conv_s_v AS ine_vlr_saida\n        , ine.ine_vlr_ipi\n        , ine.ine_vlr_desconto\n        , (\n            SELECT TOP 1 f.fne_cod\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                          )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                    n.nfe_dt_entrada >= @DT_INICIO\n                    AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_cod\n        , (\n            SELECT TOP 1 f.fne_nome_fantasia\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                        )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                   n.nfe_dt_entrada >= @DT_INICIO\n                 AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_nome_fantasia\n        , replace(replace(replace(emp_cgc, ''.'', ''''), ''/'', ''''), ''-'', '''') AS emp_cgc\n    FROM nfe WITH (NOLOCK)\n    INNER JOIN ine WITH (NOLOCK)\n        ON (\n                nfe.nfe_fne_cod = ine.ine_fne_cod\n                AND nfe.nfe_serie = ine.ine_nfe_serie\n                AND nfe.nfe_num = ine.ine_nfe_num\n                AND nfe.nfe_tipo = ine.ine_nfe_tipo\n                )\n    LEFT OUTER JOIN fne WITH (NOLOCK)\n        ON (convert(VARCHAR, ine.ine_fne_cod) = convert(VARCHAR, fne.fne_cod))\n    LEFT OUTER JOIN mat WITH (NOLOCK)\n        ON (mat.mat_cod = ine.ine_mat_cod)\n    LEFT OUTER JOIN lma WITH (NOLOCK)\n       ON (\n                lma.lma_cod = mat.mat_lma_cod\n                AND lma.lma_gmm_cod = mat.mat_gmm_cod\n                )\n    LEFT OUTER JOIN gmm WITH (NOLOCK)\n        ON (lma.lma_gmm_cod = gmm.gmm_cod)\n    LEFT OUTER JOIN sba WITH (NOLOCK)\n        ON (sba.sba_cod = nfe.nfe_sba_cod)\n    LEFT OUTER JOIN aft WITH (NOLOCK)\n        ON (\n               aft_serie = ine_aft_serie\n                AND aft_num = ine_aft_num\n                )\n    LEFT OUTER JOIN emp WITH (NOLOCK)\n        ON (emp.emp_fne_cod = fne.FNE_COD)\n    LEFT JOIN STR STR WITH (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD    \n    CROSS JOIN cfg\n    WHERE (\n            nfe.nfe_dt_entrada >= @DT_INICIO\n            AND nfe.nfe_dt_entrada <= @DT_FIM\n            )\n        AND (\n            fne.fne_cod IN (''%'')\n            OR (''%'' IN (''%''))\n            )\n    ) AS t1\nORDER BY sba_cod\n    , sba_nome\n    , nfe_tipo\n    , nfe_dt_entrada\n    , nfe_serie\n    , nfe_num\n    , ine_seq\n '\n\n)\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													},
													"sink": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													},
													"sink": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 18
													}
												},
												{
													"source": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													},
													"sink": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													}
												},
												{
													"source": {
														"name": "STR_STR_COD",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "str_str_cod",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_ITABUNA_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_SMART"
											}
										}
									]
								},
								{
									"name": "SMART - NF IOF",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SMART - NF ITB",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat(\n'DECLARE @DT_INICIO AS DATE\n DECLARE @DT_FIM     AS DATE\n\nSET @DT_INICIO = ','''', item().DT_INICIO,'''',\n'SET @DT_FIM = '  , '''', item().DT_FIM,'''',\n' SELECT \n 92 as estabelecimento  ',\n\n '  ,STR_STR_COD\n     ,nfe_dt_emissao\n    , nfe_dt_entrada\n    , nfe_tipo\n    , nfe_serie\n    , nfe_num\n    , fne_cod\n    , fne_nome_fantasia\n    , ine_mat_cod\n    , mat_desc_resumida\n    , gmm_nome\n    , ine_qtde_entrada\n    , mat_unm_cod_entrada\n    , ine_vlr_unit_entrada\n    , nfe_ipg_aberto\n    , ine_vlr_desconto\n    , ine_vlr_ipi\n    , nfe_aft\n    , nfe_vlr_total\n    , ds_nfe_tipo\n    , nfe_crit_venc\n    , nfe_cpg_parcelas\n    , nfe_ipg_dt_vcto\n    , nfe_parcela_1\nFROM (\n    SELECT cfg.cfg_emp\n        , ISNULL(str_str_cod,''IOF'') AS STR_STR_COD\n        , sba.sba_cod\n        , sba.sba_nome\n        , nfe.nfe_serie\n        , nfe.nfe_num\n        , nfe.nfe_fne_cod\n        , nfe.nfe_tipo\n        , CASE nfe.nfe_tipo\n\n                WHEN ''PR''\n                THEN ''Entrada''\n            WHEN ''SR''\n                THEN ''Simples Remessa''\n            WHEN ''SF''\n                THEN ''Simples Faturamento''\n            WHEN ''DV''\n                THEN ''Devolução''\n            WHEN ''TR''\n                THEN ''Transferência''\n            ELSE ''N/A''\n            END AS ds_nfe_tipo\n        , fne.fne_cod\n        , fne.fne_nome_fantasia\n        , nfe.nfe_vlr_total\n \n \n        , (\n            SELECT TOP 1 i.ipg_dt_vcto\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ORDER BY i.ipg_dt_vcto\n            ) AS nfe_ipg_dt_vcto\n        , (\n            SELECT count(ipg_parc)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ) AS nfe_cpg_parcelas\n        , nfe.nfe_crit_venc\n        , nfe.nfe_parcela_1\n        , nfe.nfe_dt_emissao\n        , nfe.nfe_dt_entrada\n        , ine.ine_seq\n        , ine.ine_mat_cod\n        , mat.mat_desc_resumida\n        , mat.mat_lma_cod\n        , lma.lma_nome\n        , mat.mat_gmm_cod\n        , gmm.gmm_nome\n        , mat_unm_cod_entrada\n        , ine.ine_qtde AS ine_qtde_entrada\n        , ine.ine_vlr_unit AS ine_vlr_unit_entrada\n        , (\n            SELECT isnull(sum(ipg_valor), 0)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n                AND i.ipg_status IN (''A'', ''R'')\n                AND i.ipg_dt_vcto <= @DT_FIM\n            ) AS nfe_ipg_aberto\n        , mat_unm_cod_saida\n        , '' AS solic\n        , '' AS DATA_solic\n        , convert(VARCHAR, ine_aft_serie) + ''.'' + convert(VARCHAR, ine_aft_num) AS nfe_aft\n        , aft_dthr\n        , ine.ine_qtde * mat_fat_conv_s_v AS ine_qtde_saida\n        , ine.ine_vlr_unit / mat_fat_conv_s_v AS ine_vlr_saida\n        , ine.ine_vlr_ipi\n        , ine.ine_vlr_desconto\n        , (\n            SELECT TOP 1 f.fne_cod\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                          )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                    n.nfe_dt_entrada >= @DT_INICIO\n                    AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_cod\n        , (\n            SELECT TOP 1 f.fne_nome_fantasia\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                        )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                   n.nfe_dt_entrada >= @DT_INICIO\n                 AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_nome_fantasia\n        , replace(replace(replace(emp_cgc, ''.'', ''''), ''/'', ''''), ''-'', '''') AS emp_cgc\n    FROM nfe WITH (NOLOCK)\n    INNER JOIN ine WITH (NOLOCK)\n        ON (\n                nfe.nfe_fne_cod = ine.ine_fne_cod\n                AND nfe.nfe_serie = ine.ine_nfe_serie\n                AND nfe.nfe_num = ine.ine_nfe_num\n                AND nfe.nfe_tipo = ine.ine_nfe_tipo\n                )\n    LEFT OUTER JOIN fne WITH (NOLOCK)\n        ON (convert(VARCHAR, ine.ine_fne_cod) = convert(VARCHAR, fne.fne_cod))\n    LEFT OUTER JOIN mat WITH (NOLOCK)\n        ON (mat.mat_cod = ine.ine_mat_cod)\n    LEFT OUTER JOIN lma WITH (NOLOCK)\n       ON (\n                lma.lma_cod = mat.mat_lma_cod\n                AND lma.lma_gmm_cod = mat.mat_gmm_cod\n                )\n    LEFT OUTER JOIN gmm WITH (NOLOCK)\n        ON (lma.lma_gmm_cod = gmm.gmm_cod)\n    LEFT OUTER JOIN sba WITH (NOLOCK)\n        ON (sba.sba_cod = nfe.nfe_sba_cod)\n    LEFT OUTER JOIN aft WITH (NOLOCK)\n        ON (\n               aft_serie = ine_aft_serie\n                AND aft_num = ine_aft_num\n                )\n    LEFT OUTER JOIN emp WITH (NOLOCK)\n        ON (emp.emp_fne_cod = fne.FNE_COD)\n    LEFT JOIN STR STR WITH (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD    \n    CROSS JOIN cfg\n    WHERE (\n            nfe.nfe_dt_entrada >= @DT_INICIO\n            AND nfe.nfe_dt_entrada <= @DT_FIM\n            )\n        AND (\n            fne.fne_cod IN (''%'')\n            OR (''%'' IN (''%''))\n            )\n    ) AS t1\nORDER BY sba_cod\n    , sba_nome\n    , nfe_tipo\n    , nfe_dt_entrada\n    , nfe_serie\n    , nfe_num\n    , ine_seq\n '\n\n)\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													},
													"sink": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													},
													"sink": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													},
													"sink": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 18
													}
												},
												{
													"source": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													},
													"sink": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													}
												},
												{
													"source": {
														"name": "STR_STR_COD",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "str_str_cod",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_IOF_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_SMART"
											}
										}
									]
								},
								{
									"name": "SMART - NF OFT",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SMART - NF IOF",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat(\n'DECLARE @DT_INICIO AS DATE\n DECLARE @DT_FIM     AS DATE\n\nSET @DT_INICIO = ','''', item().DT_INICIO,'''',\n'SET @DT_FIM = '  , '''', item().DT_FIM,'''',\n' SELECT \n 93 as estabelecimento  ',\n\n '  ,STR_STR_COD\n     ,nfe_dt_emissao\n    , nfe_dt_entrada\n    , nfe_tipo\n    , nfe_serie\n    , nfe_num\n    , fne_cod\n    , fne_nome_fantasia\n    , ine_mat_cod\n    , mat_desc_resumida\n    , gmm_nome\n    , ine_qtde_entrada\n    , mat_unm_cod_entrada\n    , ine_vlr_unit_entrada\n    , nfe_ipg_aberto\n    , ine_vlr_desconto\n    , ine_vlr_ipi\n    , nfe_aft\n    , nfe_vlr_total\n    , ds_nfe_tipo\n    , nfe_crit_venc\n    , nfe_cpg_parcelas\n    , nfe_ipg_dt_vcto\n    , nfe_parcela_1\nFROM (\n    SELECT cfg.cfg_emp\n        ,ISNULL(str_str_cod,''OFT'') AS STR_STR_COD\n        , sba.sba_cod\n        , sba.sba_nome\n        , nfe.nfe_serie\n        , nfe.nfe_num\n        , nfe.nfe_fne_cod\n        , nfe.nfe_tipo\n        , CASE nfe.nfe_tipo\n\n                WHEN ''PR''\n                THEN ''Entrada''\n            WHEN ''SR''\n                THEN ''Simples Remessa''\n            WHEN ''SF''\n                THEN ''Simples Faturamento''\n            WHEN ''DV''\n                THEN ''Devolução''\n            WHEN ''TR''\n                THEN ''Transferência''\n            ELSE ''N/A''\n            END AS ds_nfe_tipo\n        , fne.fne_cod\n        , fne.fne_nome_fantasia\n        , nfe.nfe_vlr_total\n \n \n        , (\n            SELECT TOP 1 i.ipg_dt_vcto\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ORDER BY i.ipg_dt_vcto\n            ) AS nfe_ipg_dt_vcto\n        , (\n            SELECT count(ipg_parc)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ) AS nfe_cpg_parcelas\n        , nfe.nfe_crit_venc\n        , nfe.nfe_parcela_1\n        , nfe.nfe_dt_emissao\n        , nfe.nfe_dt_entrada\n        , ine.ine_seq\n        , ine.ine_mat_cod\n        , mat.mat_desc_resumida\n        , mat.mat_lma_cod\n        , lma.lma_nome\n        , mat.mat_gmm_cod\n        , gmm.gmm_nome\n        , mat_unm_cod_entrada\n        , ine.ine_qtde AS ine_qtde_entrada\n        , ine.ine_vlr_unit AS ine_vlr_unit_entrada\n        , (\n            SELECT isnull(sum(ipg_valor), 0)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n                AND i.ipg_status IN (''A'', ''R'')\n                AND i.ipg_dt_vcto <= @DT_FIM\n            ) AS nfe_ipg_aberto\n        , mat_unm_cod_saida\n        , '' AS solic\n        , '' AS DATA_solic\n        , convert(VARCHAR, ine_aft_serie) + ''.'' + convert(VARCHAR, ine_aft_num) AS nfe_aft\n        , aft_dthr\n        , ine.ine_qtde * mat_fat_conv_s_v AS ine_qtde_saida\n        , ine.ine_vlr_unit / mat_fat_conv_s_v AS ine_vlr_saida\n        , ine.ine_vlr_ipi\n        , ine.ine_vlr_desconto\n        , (\n            SELECT TOP 1 f.fne_cod\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                          )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                    n.nfe_dt_entrada >= @DT_INICIO\n                    AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_cod\n        , (\n            SELECT TOP 1 f.fne_nome_fantasia\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                        )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                   n.nfe_dt_entrada >= @DT_INICIO\n                 AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_nome_fantasia\n        , replace(replace(replace(emp_cgc, ''.'', ''''), ''/'', ''''), ''-'', '''') AS emp_cgc\n    FROM nfe WITH (NOLOCK)\n    INNER JOIN ine WITH (NOLOCK)\n        ON (\n                nfe.nfe_fne_cod = ine.ine_fne_cod\n                AND nfe.nfe_serie = ine.ine_nfe_serie\n                AND nfe.nfe_num = ine.ine_nfe_num\n                AND nfe.nfe_tipo = ine.ine_nfe_tipo\n                )\n    LEFT OUTER JOIN fne WITH (NOLOCK)\n        ON (convert(VARCHAR, ine.ine_fne_cod) = convert(VARCHAR, fne.fne_cod))\n    LEFT OUTER JOIN mat WITH (NOLOCK)\n        ON (mat.mat_cod = ine.ine_mat_cod)\n    LEFT OUTER JOIN lma WITH (NOLOCK)\n       ON (\n                lma.lma_cod = mat.mat_lma_cod\n                AND lma.lma_gmm_cod = mat.mat_gmm_cod\n                )\n    LEFT OUTER JOIN gmm WITH (NOLOCK)\n        ON (lma.lma_gmm_cod = gmm.gmm_cod)\n    LEFT OUTER JOIN sba WITH (NOLOCK)\n        ON (sba.sba_cod = nfe.nfe_sba_cod)\n    LEFT OUTER JOIN aft WITH (NOLOCK)\n        ON (\n               aft_serie = ine_aft_serie\n                AND aft_num = ine_aft_num\n                )\n    LEFT OUTER JOIN emp WITH (NOLOCK)\n        ON (emp.emp_fne_cod = fne.FNE_COD)\n    LEFT JOIN STR STR WITH (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD    \n    CROSS JOIN cfg\n    WHERE (\n            nfe.nfe_dt_entrada >= @DT_INICIO\n            AND nfe.nfe_dt_entrada <= @DT_FIM\n            )\n        AND (\n            fne.fne_cod IN (''%'')\n            OR (''%'' IN (''%''))\n            )\n    ) AS t1\nORDER BY sba_cod\n    , sba_nome\n    , nfe_tipo\n    , nfe_dt_entrada\n    , nfe_serie\n    , nfe_num\n    , ine_seq\n '\n\n)\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													},
													"sink": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													},
													"sink": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 18
													}
												},
												{
													"source": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													},
													"sink": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													}
												},
												{
													"source": {
														"name": "STR_STR_COD",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "str_str_cod",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_SMART"
											}
										}
									]
								},
								{
									"name": "SMART - NF HOSL",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SMART - NF OFT",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat(\n'DECLARE @DT_INICIO AS DATE\n DECLARE @DT_FIM     AS DATE\n\nSET @DT_INICIO = ','''', item().DT_INICIO,'''',\n'SET @DT_FIM = '  , '''', item().DT_FIM,'''',\n' SELECT \n 94 as estabelecimento  ',\n\n '  ,STR_STR_COD\n     ,nfe_dt_emissao\n    , nfe_dt_entrada\n    , nfe_tipo\n    , nfe_serie\n    , nfe_num\n    , fne_cod\n    , fne_nome_fantasia\n    , ine_mat_cod\n    , mat_desc_resumida\n    , gmm_nome\n    , ine_qtde_entrada\n    , mat_unm_cod_entrada\n    , ine_vlr_unit_entrada\n    , nfe_ipg_aberto\n    , ine_vlr_desconto\n    , ine_vlr_ipi\n    , nfe_aft\n    , nfe_vlr_total\n    , ds_nfe_tipo\n    , nfe_crit_venc\n    , nfe_cpg_parcelas\n    , nfe_ipg_dt_vcto\n    , nfe_parcela_1\nFROM (\n    SELECT cfg.cfg_emp\n        ,ISNULL(str_str_cod,''10'') AS STR_STR_COD\n        , sba.sba_cod\n        , sba.sba_nome\n        , nfe.nfe_serie\n        , nfe.nfe_num\n        , nfe.nfe_fne_cod\n        , nfe.nfe_tipo\n        , CASE nfe.nfe_tipo\n\n                WHEN ''PR''\n                THEN ''Entrada''\n            WHEN ''SR''\n                THEN ''Simples Remessa''\n            WHEN ''SF''\n                THEN ''Simples Faturamento''\n            WHEN ''DV''\n                THEN ''Devolução''\n            WHEN ''TR''\n                THEN ''Transferência''\n            ELSE ''N/A''\n            END AS ds_nfe_tipo\n        , fne.fne_cod\n        , fne.fne_nome_fantasia\n        , nfe.nfe_vlr_total\n \n \n        , (\n            SELECT TOP 1 i.ipg_dt_vcto\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ORDER BY i.ipg_dt_vcto\n            ) AS nfe_ipg_dt_vcto\n        , (\n            SELECT count(ipg_parc)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ) AS nfe_cpg_parcelas\n        , nfe.nfe_crit_venc\n        , nfe.nfe_parcela_1\n        , nfe.nfe_dt_emissao\n        , nfe.nfe_dt_entrada\n        , ine.ine_seq\n        , ine.ine_mat_cod\n        , mat.mat_desc_resumida\n        , mat.mat_lma_cod\n        , lma.lma_nome\n        , mat.mat_gmm_cod\n        , gmm.gmm_nome\n        , mat_unm_cod_entrada\n        , ine.ine_qtde AS ine_qtde_entrada\n        , ine.ine_vlr_unit AS ine_vlr_unit_entrada\n        , (\n            SELECT isnull(sum(ipg_valor), 0)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n                AND i.ipg_status IN (''A'', ''R'')\n                AND i.ipg_dt_vcto <= @DT_FIM\n            ) AS nfe_ipg_aberto\n        , mat_unm_cod_saida\n        , '' AS solic\n        , '' AS DATA_solic\n        , convert(VARCHAR, ine_aft_serie) + ''.'' + convert(VARCHAR, ine_aft_num) AS nfe_aft\n        , aft_dthr\n        , ine.ine_qtde * mat_fat_conv_s_v AS ine_qtde_saida\n        , ine.ine_vlr_unit / mat_fat_conv_s_v AS ine_vlr_saida\n        , ine.ine_vlr_ipi\n        , ine.ine_vlr_desconto\n        , (\n            SELECT TOP 1 f.fne_cod\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                          )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                    n.nfe_dt_entrada >= @DT_INICIO\n                    AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_cod\n        , (\n            SELECT TOP 1 f.fne_nome_fantasia\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                        )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                   n.nfe_dt_entrada >= @DT_INICIO\n                 AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_nome_fantasia\n        , replace(replace(replace(emp_cgc, ''.'', ''''), ''/'', ''''), ''-'', '''') AS emp_cgc\n    FROM nfe WITH (NOLOCK)\n    INNER JOIN ine WITH (NOLOCK)\n        ON (\n                nfe.nfe_fne_cod = ine.ine_fne_cod\n                AND nfe.nfe_serie = ine.ine_nfe_serie\n                AND nfe.nfe_num = ine.ine_nfe_num\n                AND nfe.nfe_tipo = ine.ine_nfe_tipo\n                )\n    LEFT OUTER JOIN fne WITH (NOLOCK)\n        ON (convert(VARCHAR, ine.ine_fne_cod) = convert(VARCHAR, fne.fne_cod))\n    LEFT OUTER JOIN mat WITH (NOLOCK)\n        ON (mat.mat_cod = ine.ine_mat_cod)\n    LEFT OUTER JOIN lma WITH (NOLOCK)\n       ON (\n                lma.lma_cod = mat.mat_lma_cod\n                AND lma.lma_gmm_cod = mat.mat_gmm_cod\n                )\n    LEFT OUTER JOIN gmm WITH (NOLOCK)\n        ON (lma.lma_gmm_cod = gmm.gmm_cod)\n    LEFT OUTER JOIN sba WITH (NOLOCK)\n        ON (sba.sba_cod = nfe.nfe_sba_cod)\n    LEFT OUTER JOIN aft WITH (NOLOCK)\n        ON (\n               aft_serie = ine_aft_serie\n                AND aft_num = ine_aft_num\n                )\n    LEFT OUTER JOIN emp WITH (NOLOCK)\n        ON (emp.emp_fne_cod = fne.FNE_COD)\n    LEFT JOIN STR STR WITH (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD    \n    CROSS JOIN cfg\n    WHERE (\n            nfe.nfe_dt_entrada >= @DT_INICIO\n            AND nfe.nfe_dt_entrada <= @DT_FIM\n            )\n        AND (\n            fne.fne_cod IN (''%'')\n            OR (''%'' IN (''%''))\n            )\n    ) AS t1\nORDER BY sba_cod\n    , sba_nome\n    , nfe_tipo\n    , nfe_dt_entrada\n    , nfe_serie\n    , nfe_num\n    , ine_seq\n '\n\n)\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													},
													"sink": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													},
													"sink": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													},
													"sink": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 18
													}
												},
												{
													"source": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													},
													"sink": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													}
												},
												{
													"source": {
														"name": "STR_STR_COD",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "str_str_cod",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_HOSL_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_SMART"
											}
										}
									]
								},
								{
									"name": "TASY - NF Sadalla",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@concat(\n\n'with cate as(\nselect  \n        A.CD_ESTABELECIMENTO,\n        obter_nome_estab(a.cd_estabelecimento) ds_estabelecimento,\n        A.NR_ORDEM_COMPRA,\n        a.dt_entrada_saida,\n        a.dt_emissao,\n        a.nr_nota_fiscal,\n        a.cd_cgc_emitente,\n        substr(obter_nome_pf_pj(null,a.cd_cgc_emitente),1,100) ds_fornecedor,\n        pj.CD_CEP,\n        pj.DS_ENDERECO,\n        pj.DS_BAIRRO,\n        pj.DS_MUNICIPIO,\n        pj.SG_ESTADO,\n        b.cd_material,\n        substr(obter_desc_material(b.cd_material),1,100) ds_material,\n        e.ds_grupo_material,\n        b.cd_local_estoque,\n        b.qt_item_nf,\n        b.cd_unidade_medida_compra,\n        b.vl_unitario_item_nf,\n        b.vl_total_item_nf, \n        b.vl_frete / b.qt_item_nf vl_frete,\n        d.vl_tributo / b.qt_item_nf tributo,\n        dividir(b.vl_liquido, b.qt_item_estoque) vl_custo_medio,\n        ((dividir(b.vl_liquido, b.qt_item_estoque)) *(b.qt_item_nf))total_item,\n        obter_desc_operacao_nota(a.CD_OPERACAO_NF) operacao\n       -- ,obter_desc_local_estoque(b.CD_LOCAL_ESTOQUE) ds_local_estoque\nfrom    nota_fiscal a,\n        nota_fiscal_item b,\n        estrutura_material_v e,\n        nota_fiscal_item_trib d,\n        pessoa_juridica pj\nwhere   b.nr_sequencia = d.nr_sequencia (+)\n        and b.nr_item_nf = d.nr_item_nf (+)\n        and a.nr_sequencia = b.nr_sequencia\n        and b.cd_material = e.cd_material\n        and trunc(a.dt_entrada_saida,''mm'') between to_date(',\n\t\t\n\t\t'''', item().DT_INICIO_ORACLE, '''',\n\t\t\n\t\t\n\t\t\n\t\t',''DD/MM/YYYY'') and to_date(',\n                \n                '''', item().DT_FIM_ORACLE, '''',\n                \n                ',''DD/MM/YYYY'')\n        and a.ie_situacao = 1\n        and a.ie_tipo_nota in (''EF'',''EN'')\n        and a.CD_OPERACAO_NF <> 5\n        and a.dt_atualizacao_estoque is not null\n        and pj.cd_cgc = a.CD_CGC_EMITENTE (+)\n        --and ((a.cd_estabelecimento = :estab) or (:estab = 0))\norder by dt_entrada_saida,\n        nr_nota_fiscal,\n        ds_fornecedor,  \n        ds_material\n)  \nSELECT\n     2 AS ESTABELECIMENTO\n,A.CD_ESTABELECIMENTO\n,A.DS_ESTABELECIMENTO    \n,OC.DT_ORDEM_COMPRA\n,A.NR_ORDEM_COMPRA\n,A.DT_ENTRADA_SAIDA\n,A.DT_EMISSAO\n,A.NR_NOTA_FISCAL\n,A.CD_CGC_EMITENTE\n,A.DS_FORNECEDOR\n,A.CD_CEP\n,A.DS_ENDERECO\n,A.DS_BAIRRO\n,A.DS_MUNICIPIO\n,A.SG_ESTADO\n,A.CD_MATERIAL\n,A.DS_MATERIAL\n,A.DS_GRUPO_MATERIAL\n,A.CD_LOCAL_ESTOQUE\n,A.QT_ITEM_NF\n,A.CD_UNIDADE_MEDIDA_COMPRA\n,A.VL_UNITARIO_ITEM_NF\n,A.VL_TOTAL_ITEM_NF\n,A.VL_FRETE\n,A.TRIBUTO\n,A.VL_CUSTO_MEDIO\n,A.TOTAL_ITEM\n,A.OPERACAO\n,L.DS_LOCAL_ESTOQUE\nFROM CATE A\nLEFT JOIN ORDEM_COMPRA OC ON OC.NR_ORDEM_COMPRA = A.NR_ORDEM_COMPRA\nLEFT JOIN LOCAL_ESTOQUE L ON L.CD_LOCAL_ESTOQUE = A.CD_LOCAL_ESTOQUE'\n\n)\n\n\n \n",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SadallaTasyPrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_TASY"
											}
										}
									]
								},
								{
									"name": "TASY - NF HTML",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "TASY - NF Sadalla",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@CONCAT(\n\n'with cate as(\nselect  \n        A.CD_ESTABELECIMENTO,\n        FAST_OPS.obter_nome_estab(a.cd_estabelecimento) ds_estabelecimento,\n        A.NR_ORDEM_COMPRA,\n        a.dt_entrada_saida,\n        a.dt_emissao,\n        a.nr_nota_fiscal,\n        a.cd_cgc_emitente,\n        substr(FAST_OPS.obter_nome_pf_pj(null,a.cd_cgc_emitente),1,100) ds_fornecedor,\n        pj.CD_CEP,\n        pj.DS_ENDERECO,\n        pj.DS_BAIRRO,\n        pj.DS_MUNICIPIO,\n        pj.SG_ESTADO,\n        b.cd_material,\n        substr(FAST_OPS.obter_desc_material(b.cd_material),1,100) ds_material,\n        e.ds_grupo_material,\n        b.cd_local_estoque,\n        b.qt_item_nf,\n        b.cd_unidade_medida_compra,\n        b.vl_unitario_item_nf,\n        b.vl_total_item_nf, \n        b.vl_frete / b.qt_item_nf vl_frete,\n        d.vl_tributo / b.qt_item_nf tributo,\n        FAST_OPS.dividir(b.vl_liquido, b.qt_item_estoque) vl_custo_medio,\n        ((FAST_OPS.dividir(b.vl_liquido, b.qt_item_estoque)) *(b.qt_item_nf))total_item,\n        FAST_OPS.obter_desc_operacao_nota(a.CD_OPERACAO_NF) operacao\n       -- ,obter_desc_local_estoque(b.CD_LOCAL_ESTOQUE) ds_local_estoque\nfrom    FAST_OPS.nota_fiscal a,\n        FAST_OPS.nota_fiscal_item b,\n        FAST_OPS.estrutura_material_v e,\n        FAST_OPS.nota_fiscal_item_trib d,\n        FAST_OPS.pessoa_juridica pj\nwhere   b.nr_sequencia = d.nr_sequencia (+)\n        and b.nr_item_nf = d.nr_item_nf (+)\n        and a.nr_sequencia = b.nr_sequencia\n        and b.cd_material = e.cd_material\n        and trunc(a.dt_entrada_saida,''mm'') between to_date(',\n\t\t\n\t\t'''', item().DT_INICIO_ORACLE, '''',\n\n\t\t',''DD/MM/YYYY'') and to_date(',\n\t\t\n\t\t'''', item().DT_FIM_ORACLE, '''',\n\t\t\n\t\t',''DD/MM/YYYY'')\n        and a.ie_situacao = 1\n        and a.ie_tipo_nota in (''EF'',''EN'')\n        and a.CD_OPERACAO_NF <> 5\n        and a.dt_atualizacao_estoque is not null\n        and pj.cd_cgc = a.CD_CGC_EMITENTE (+)\n        --and ((a.cd_estabelecimento = :estab) or (:estab = 0))\norder by dt_entrada_saida,\n        nr_nota_fiscal,\n        ds_fornecedor,  \n        ds_material\n)  \nSELECT\n1 AS ESTABELECIMENTO\n,A.CD_ESTABELECIMENTO\n,A.DS_ESTABELECIMENTO    \n,OC.DT_ORDEM_COMPRA\n,A.NR_ORDEM_COMPRA\n,A.DT_ENTRADA_SAIDA\n,A.DT_EMISSAO\n,A.NR_NOTA_FISCAL\n,A.CD_CGC_EMITENTE\n,A.DS_FORNECEDOR\n,A.CD_CEP\n,A.DS_ENDERECO\n,A.DS_BAIRRO\n,A.DS_MUNICIPIO\n,A.SG_ESTADO\n,A.CD_MATERIAL\n,A.DS_MATERIAL\n,A.DS_GRUPO_MATERIAL\n,A.CD_LOCAL_ESTOQUE\n,A.QT_ITEM_NF\n,A.CD_UNIDADE_MEDIDA_COMPRA\n,A.VL_UNITARIO_ITEM_NF\n,A.VL_TOTAL_ITEM_NF\n,A.VL_FRETE\n,A.TRIBUTO\n,A.VL_CUSTO_MEDIO\n,A.TOTAL_ITEM\n,A.OPERACAO\n,L.DS_LOCAL_ESTOQUE\nFROM CATE A\nLEFT JOIN FAST_OPS.ORDEM_COMPRA OC ON OC.NR_ORDEM_COMPRA = A.NR_ORDEM_COMPRA\nLEFT JOIN FAST_OPS.LOCAL_ESTOQUE L ON L.CD_LOCAL_ESTOQUE = A.CD_LOCAL_ESTOQUE'\n\n)",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "CloudTasyPrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_TASY"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Lookup Periodo Inicial",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LIMPA STAGE SMART",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LIMPA STAGE TASY",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "declare @qtde_dias integer\n\nset @qtde_dias = 8\n\n\nSELECT\n\tCASE \n\t\tWHEN day(getdate()) <= @qtde_dias THEN\n\t\t\tconcat(substring(convert(varchar(30),DATEADD(MONTH,-1,getdate()),120),1,8),'01')\n\t\tWHEN day(getdate()) > @qtde_dias THEN\n\t\t\tSubstring(convert(varchar(30),dateadd(day,1,EOMONTH(getdate(),-1))),1,10)\n\tEND as Data_Inicial,\n\n\t\tsubstring(convert(varchar(30),DATEADD(day,-1,getdate()),120),1,10) as 'data_final' ,\n\n\n\tCASE\n\t\tWHEN day(getdate()) <= @qtde_dias THEN\n\t\t\tconcat('01' ,'/',\n\t\t\tsubstring(convert(varchar(20),DATEADD(MONTH,-1,getdate()),120),6,2),'/',\n\t\t\tsubstring(convert(varchar(20),DATEADD(MONTH,-1,getdate())),8,4))\n\n\t\tWHEN day(getdate()) > @qtde_dias THEN\n\t\t\tSubstring(convert(varchar(30),dateadd(day,1,EOMONTH(getdate(),-1)),103),1,10)\n\tEND as Data_Inicial_Oracle,\n        substring(convert(varchar(30),DATEADD(day,-1,getdate()),103),1,10) as 'data_final_Oracle'\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_DIN",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "LIMPA STAGE SMART",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "truncate table STG.SUP_NFS_SMART"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "LIMPA STAGE TASY",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "truncate table STG.SUP_NFS_TASY"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "DELETE NFS",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "DELETE \nFROM DM.TBL_NFS\nWHERE DM.TBL_NFS.DT_ENTRADA_SAIDA IN \n(\nSELECT distinct convert(date,DT_ENTRADA_SAIDA,103) AS DT_ENTRADA from STG.SUP_NFS_TASY  with(nolock) \nUNION\nselect distinct convert(date,NFE_DT_ENTRADA,103) AS DT_ENTRADA  from STG.SUP_NFS_SMART  with(nolock)\n) \n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "INSERT",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DELETE NFS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "WITH TB AS(\nSELECT\nA.estabelecimento AS ESTABELECIMENTO\n,null AS DT_ORDEM_COMPRA\n,CAST(A.ESTABELECIMENTO AS VARCHAR(5)) + '|0' AS FK_NR_ORDEM_COMPRA\n,nfe_dt_entrada AS DT_ENTRADA_SAIDA\n,nfe_dt_emissao AS DT_EMISSAO\n,CAST(A.ESTABELECIMENTO AS VARCHAR(5)) + '|'+ CAST(nfe_tipo AS VARCHAR(10)) + CAST(NFE_SERIE AS VARCHAR(10)) + CAST(nfe_num AS VARCHAR(50)) AS FK_NR_NOTA_FISCAL\n,CASE nfe_tipo\n    WHEN 'PR' THEN 'Entrada'\n    WHEN 'SR' THEN 'Simples Remessa'\n    WHEN 'SF' THEN 'Simples Faturamento'\n    WHEN 'DV' THEN 'Devolução'\n    WHEN 'TR' THEN 'Transferência'\n    ELSE 'N/A'\nEND  TP_OPERACAO\n,CAST(EMP.estabelecimento AS VARCHAR(5)) + '|' + CAST(EMP.emp_cgc AS VARCHAR(255)) AS FK_CD_CGC_EMITENTE\n,CAST(A.ESTABELECIMENTO AS VARCHAR(5)) +'|'+CAST(ine_mat_cod AS varchar(100)) AS FK_CD_MATERIAL\n,CAST(A.ESTABELECIMENTO AS VARCHAR(5)) + '|0' AS FK_CD_LOCAL_ESTOQUE\n,ine_qtde_entrada AS QT_ITEM_NF\n,mat_unm_cod_entrada AS CD_UNIDADE_MEDIDA_COMPRA\n,CAST(ine_vlr_unit_entrada AS money) AS VL_UNITARIO_ITEM_NF\n,CAST(ine_vlr_unit_entrada * ine_qtde_entrada AS MONEY) AS VL_TOTAL_ITEM_NF\n,0 AS VL_FRETE\n,0 AS TRIBUTO\n,0 AS VL_CUSTO_MEDIO\n,0 AS TOTAL_ITEM\nFROM STG.SUP_NFS_SMART A\nLEFT JOIN DW.TBL_EMP EMP WITH(NOLOCK) ON EMP.estabelecimento = A.estabelecimento AND EMP.emp_fne_cod = A.fne_cod\n\nUNION ALL\n\nSELECT\n A.ESTABELECIMENTO\n,A.DT_ORDEM_COMPRA\n,CAST(A.ESTABELECIMENTO AS varchar(5)) + '|' + CAST(A.NR_ORDEM_COMPRA AS VARCHAR(50)) FK_NR_ORGEM_COMPRA\n,A.DT_ENTRADA_SAIDA\n,A.DT_EMISSAO\n,CAST(A.ESTABELECIMENTO AS varchar(5)) + '|' + CAST(A.NR_NOTA_FISCAL AS VARCHAR(50)) FK_NR_NOTA_FISCAL\n,A.OPERACAO AS TP_OPERACAO\n,CAST(A.ESTABELECIMENTO AS VARCHAR(5)) + '|' + CAST(A.CD_CGC_EMITENTE AS VARCHAR(255)) AS FK_CD_CGC_EMITENTE\n,CAST(A.ESTABELECIMENTO AS varchar(5)) + '|' + CAST(A.CD_MATERIAL AS VARCHAR(50)) FK_CD_MATERIAL\n,CAST(A.ESTABELECIMENTO AS varchar(5)) + '|' + CAST(A.CD_LOCAL_ESTOQUE AS VARCHAR(50)) AS FK_CD_LOCAL_ESTOQUE\n,A.QT_ITEM_NF\n,A.CD_UNIDADE_MEDIDA_COMPRA\n,A.VL_UNITARIO_ITEM_NF\n,A.VL_TOTAL_ITEM_NF\n,A.VL_FRETE\n,A.TRIBUTO\n,A.VL_CUSTO_MEDIO\n,A.TOTAL_ITEM\nFROM STG.sup_nfs_tasy A\n\n)\n\nINSERT INTO [DM].[TBL_NFS]\n           ([ESTABELECIMENTO]\n           ,[DT_ORDEM_COMPRA]\n           ,[FK_NR_ORDEM_COMPRA]\n           ,[DT_ENTRADA_SAIDA]\n           ,[DT_EMISSAO]\n           ,[FK_NR_NOTA_FISCAL]\n           ,[TP_OPERACAO]\n           ,[FK_CD_CGC_EMITENTE]\n           ,[FK_CD_MATERIAL]\n           ,[FK_CD_LOCAL_ESTOQUE]\n           ,[QT_ITEM_NF]\n           ,[CD_UNIDADE_MEDIDA_COMPRA]\n           ,[VL_UNITARIO_ITEM_NF]\n           ,[VL_TOTAL_ITEM_NF]\n           ,[VL_FRETE]\n           ,[TRIBUTO]\n           ,[VL_CUSTO_MEDIO]\n           ,[TOTAL_ITEM]\n\t\t   )\n\n\nSELECT      [ESTABELECIMENTO]\n           ,[DT_ORDEM_COMPRA]\n           ,[FK_NR_ORDEM_COMPRA]\n           ,[DT_ENTRADA_SAIDA]\n           ,[DT_EMISSAO]\n           ,[FK_NR_NOTA_FISCAL]\n           ,[TP_OPERACAO]\n           ,[FK_CD_CGC_EMITENTE]\n           ,[FK_CD_MATERIAL]\n           ,[FK_CD_LOCAL_ESTOQUE]\n           ,[QT_ITEM_NF]\n           ,[CD_UNIDADE_MEDIDA_COMPRA]\n           ,[VL_UNITARIO_ITEM_NF]\n           ,[VL_TOTAL_ITEM_NF]\n           ,[VL_FRETE]\n           ,[TRIBUTO]\n           ,[VL_CUSTO_MEDIO]\n           ,[TOTAL_ITEM]\n\t\t   \n\t\t   FROM TB\n\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"DT_INICIO": {
						"type": "String"
					},
					"DT_FIM": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Suprimentos/Nota Fiscal"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NF_ADHOC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Calendario",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DT_INICIO",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DT_FIM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('\nSELECT DISTINCT\n    CAST(MIN(A.TheDate) AS VARCHAR(20)) + '' 00:00:00.000'' AS DT_INICIO\n    ,CAST(MAX(A.TheDate) AS VARCHAR(20)) + '' 23:59:59.000'' AS DT_FIM,\n\n     CONVERT(VARCHAR(20),MIN(A.TheDate)  ,103)  AS DT_INICIO_ORACLE\n    ,CONVERT(VARCHAR(20),Max(A.TheDate) ,103)  AS DT_FIM_ORACLE\n\nFROM calendar A\nWHERE A.TheDate BETWEEN ','''',variables('DT_INICIO'),'''', ' AND  ','''',variables('DT_FIM'),'''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_DIN",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DT_INICIO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LIMPA STAGE TASY",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DT_INICIO",
							"value": "2021-01-01"
						}
					},
					{
						"name": "DT_FIM",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LIMPA STAGE TASY",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DT_FIM",
							"value": "2023-09-30"
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Calendario",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Calendario').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SMART - NF ITG",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "TASY - NF HTML",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat(\n'DECLARE @DT_INICIO AS DATE\n DECLARE @DT_FIM     AS DATE\n\nSET @DT_INICIO = ','''', item().DT_INICIO,'''',\n'SET @DT_FIM = '  , '''', item().DT_FIM,'''',\n' SELECT \n 90 as estabelecimento  ',\n\n '  ,STR_STR_COD\n     ,nfe_dt_emissao\n    , nfe_dt_entrada\n    , nfe_tipo\n    , nfe_serie\n    , nfe_num\n    , fne_cod\n    , fne_nome_fantasia\n    , ine_mat_cod\n    , mat_desc_resumida\n    , gmm_nome\n    , ine_qtde_entrada\n    , mat_unm_cod_entrada\n    , ine_vlr_unit_entrada\n    , nfe_ipg_aberto\n    , ine_vlr_desconto\n    , ine_vlr_ipi\n    , nfe_aft\n    , nfe_vlr_total\n    , ds_nfe_tipo\n    , nfe_crit_venc\n    , nfe_cpg_parcelas\n    , nfe_ipg_dt_vcto\n    , nfe_parcela_1\nFROM (\n    SELECT cfg.cfg_emp\n        ,ISNULL(str_str_cod,''DH'') AS STR_STR_COD\n        , sba.sba_cod\n        , sba.sba_nome\n        , nfe.nfe_serie\n        , nfe.nfe_num\n        , nfe.nfe_fne_cod\n        , nfe.nfe_tipo\n        , CASE nfe.nfe_tipo\n\n                WHEN ''PR''\n                THEN ''Entrada''\n            WHEN ''SR''\n                THEN ''Simples Remessa''\n            WHEN ''SF''\n                THEN ''Simples Faturamento''\n            WHEN ''DV''\n                THEN ''Devolução''\n            WHEN ''TR''\n                THEN ''Transferência''\n            ELSE ''N/A''\n            END AS ds_nfe_tipo\n        , fne.fne_cod\n        , fne.fne_nome_fantasia\n        , nfe.nfe_vlr_total\n \n \n        , (\n            SELECT TOP 1 i.ipg_dt_vcto\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ORDER BY i.ipg_dt_vcto\n            ) AS nfe_ipg_dt_vcto\n        , (\n            SELECT count(ipg_parc)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ) AS nfe_cpg_parcelas\n        , nfe.nfe_crit_venc\n        , nfe.nfe_parcela_1\n        , nfe.nfe_dt_emissao\n        , nfe.nfe_dt_entrada\n        , ine.ine_seq\n        , ine.ine_mat_cod\n        , mat.mat_desc_resumida\n        , mat.mat_lma_cod\n        , lma.lma_nome\n        , mat.mat_gmm_cod\n        , gmm.gmm_nome\n        , mat_unm_cod_entrada\n        , ine.ine_qtde AS ine_qtde_entrada\n        , ine.ine_vlr_unit AS ine_vlr_unit_entrada\n        , (\n            SELECT isnull(sum(ipg_valor), 0)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n                AND i.ipg_status IN (''A'', ''R'')\n                AND i.ipg_dt_vcto <= @DT_FIM\n            ) AS nfe_ipg_aberto\n        , mat_unm_cod_saida\n        , '' AS solic\n        , '' AS DATA_solic\n        , convert(VARCHAR, ine_aft_serie) + ''.'' + convert(VARCHAR, ine_aft_num) AS nfe_aft\n        , aft_dthr\n        , ine.ine_qtde * mat_fat_conv_s_v AS ine_qtde_saida\n        , ine.ine_vlr_unit / mat_fat_conv_s_v AS ine_vlr_saida\n        , ine.ine_vlr_ipi\n        , ine.ine_vlr_desconto\n        , (\n            SELECT TOP 1 f.fne_cod\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                          )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                    n.nfe_dt_entrada >= @DT_INICIO\n                    AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_cod\n        , (\n            SELECT TOP 1 f.fne_nome_fantasia\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                        )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                   n.nfe_dt_entrada >= @DT_INICIO\n                 AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_nome_fantasia\n        , replace(replace(replace(emp_cgc, ''.'', ''''), ''/'', ''''), ''-'', '''') AS emp_cgc\n    FROM nfe WITH (NOLOCK)\n    INNER JOIN ine WITH (NOLOCK)\n        ON (\n                nfe.nfe_fne_cod = ine.ine_fne_cod\n                AND nfe.nfe_serie = ine.ine_nfe_serie\n                AND nfe.nfe_num = ine.ine_nfe_num\n                AND nfe.nfe_tipo = ine.ine_nfe_tipo\n                )\n    LEFT OUTER JOIN fne WITH (NOLOCK)\n        ON (convert(VARCHAR, ine.ine_fne_cod) = convert(VARCHAR, fne.fne_cod))\n    LEFT OUTER JOIN mat WITH (NOLOCK)\n        ON (mat.mat_cod = ine.ine_mat_cod)\n    LEFT OUTER JOIN lma WITH (NOLOCK)\n       ON (\n                lma.lma_cod = mat.mat_lma_cod\n                AND lma.lma_gmm_cod = mat.mat_gmm_cod\n                )\n    LEFT OUTER JOIN gmm WITH (NOLOCK)\n        ON (lma.lma_gmm_cod = gmm.gmm_cod)\n    LEFT OUTER JOIN sba WITH (NOLOCK)\n        ON (sba.sba_cod = nfe.nfe_sba_cod)\n    LEFT OUTER JOIN aft WITH (NOLOCK)\n        ON (\n               aft_serie = ine_aft_serie\n                AND aft_num = ine_aft_num\n                )\n    LEFT JOIN STR STR WITH (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD            \n    LEFT OUTER JOIN emp WITH (NOLOCK)\n        ON (emp.emp_fne_cod = fne.FNE_COD)\n    CROSS JOIN cfg\n    WHERE (\n            nfe.nfe_dt_entrada >= @DT_INICIO\n            AND nfe.nfe_dt_entrada <= @DT_FIM\n            )\n        AND (\n            fne.fne_cod IN (''%'')\n            OR (''%'' IN (''%''))\n            )\n    ) AS t1\nORDER BY sba_cod\n    , sba_nome\n    , nfe_tipo\n    , nfe_dt_entrada\n    , nfe_serie\n    , nfe_num\n    , ine_seq\n '\n\n)\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													},
													"sink": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													},
													"sink": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													},
													"sink": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 18
													},
													"sink": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 18
													}
												},
												{
													"source": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													},
													"sink": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													}
												},
												{
													"source": {
														"name": "STR_STR_COD",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "str_str_cod",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_ITAIGARA_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_SMART"
											}
										}
									]
								},
								{
									"name": "SMART - NF ITB",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SMART - NF ITG",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat(\n'DECLARE @DT_INICIO AS DATE\n DECLARE @DT_FIM     AS DATE\n\nSET @DT_INICIO = ','''', item().DT_INICIO,'''',\n'SET @DT_FIM = '  , '''', item().DT_FIM,'''',\n' SELECT \n 91 as estabelecimento  ',\n\n '      \n    ,STR_STR_COD\n     ,nfe_dt_emissao\n    , nfe_dt_entrada\n    , nfe_tipo\n    , nfe_serie\n    , nfe_num\n    , fne_cod\n    , fne_nome_fantasia\n    , ine_mat_cod\n    , mat_desc_resumida\n    , gmm_nome\n    , ine_qtde_entrada\n    , mat_unm_cod_entrada\n    , ine_vlr_unit_entrada\n    , nfe_ipg_aberto\n    , ine_vlr_desconto\n    , ine_vlr_ipi\n    , nfe_aft\n    , nfe_vlr_total\n    , ds_nfe_tipo\n    , nfe_crit_venc\n    , nfe_cpg_parcelas\n    , nfe_ipg_dt_vcto\n    , nfe_parcela_1\nFROM (\n    SELECT cfg.cfg_emp\n        ,ISNULL(str_str_cod,''DHI'') AS STR_STR_COD\n        , sba.sba_cod\n        , sba.sba_nome\n        , nfe.nfe_serie\n        , nfe.nfe_num\n        , nfe.nfe_fne_cod\n        , nfe.nfe_tipo\n        , CASE nfe.nfe_tipo\n\n                WHEN ''PR''\n                THEN ''Entrada''\n            WHEN ''SR''\n                THEN ''Simples Remessa''\n            WHEN ''SF''\n                THEN ''Simples Faturamento''\n            WHEN ''DV''\n                THEN ''Devolução''\n            WHEN ''TR''\n                THEN ''Transferência''\n            ELSE ''N/A''\n            END AS ds_nfe_tipo\n        , fne.fne_cod\n        , fne.fne_nome_fantasia\n        , nfe.nfe_vlr_total\n \n \n        , (\n            SELECT TOP 1 i.ipg_dt_vcto\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ORDER BY i.ipg_dt_vcto\n            ) AS nfe_ipg_dt_vcto\n        , (\n            SELECT count(ipg_parc)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ) AS nfe_cpg_parcelas\n        , nfe.nfe_crit_venc\n        , nfe.nfe_parcela_1\n        , nfe.nfe_dt_emissao\n        , nfe.nfe_dt_entrada\n        , ine.ine_seq\n        , ine.ine_mat_cod\n        , mat.mat_desc_resumida\n        , mat.mat_lma_cod\n        , lma.lma_nome\n        , mat.mat_gmm_cod\n        , gmm.gmm_nome\n        , mat_unm_cod_entrada\n        , ine.ine_qtde AS ine_qtde_entrada\n        , ine.ine_vlr_unit AS ine_vlr_unit_entrada\n        , (\n            SELECT isnull(sum(ipg_valor), 0)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n                AND i.ipg_status IN (''A'', ''R'')\n                AND i.ipg_dt_vcto <= @DT_FIM\n            ) AS nfe_ipg_aberto\n        , mat_unm_cod_saida\n        , '' AS solic\n        , '' AS DATA_solic\n        , convert(VARCHAR, ine_aft_serie) + ''.'' + convert(VARCHAR, ine_aft_num) AS nfe_aft\n        , aft_dthr\n        , ine.ine_qtde * mat_fat_conv_s_v AS ine_qtde_saida\n        , ine.ine_vlr_unit / mat_fat_conv_s_v AS ine_vlr_saida\n        , ine.ine_vlr_ipi\n        , ine.ine_vlr_desconto\n        , (\n            SELECT TOP 1 f.fne_cod\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                          )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                    n.nfe_dt_entrada >= @DT_INICIO\n                    AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_cod\n        , (\n            SELECT TOP 1 f.fne_nome_fantasia\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                        )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                   n.nfe_dt_entrada >= @DT_INICIO\n                 AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_nome_fantasia\n        , replace(replace(replace(emp_cgc, ''.'', ''''), ''/'', ''''), ''-'', '''') AS emp_cgc\n    FROM nfe WITH (NOLOCK)\n    INNER JOIN ine WITH (NOLOCK)\n        ON (\n                nfe.nfe_fne_cod = ine.ine_fne_cod\n                AND nfe.nfe_serie = ine.ine_nfe_serie\n                AND nfe.nfe_num = ine.ine_nfe_num\n                AND nfe.nfe_tipo = ine.ine_nfe_tipo\n                )\n    LEFT OUTER JOIN fne WITH (NOLOCK)\n        ON (convert(VARCHAR, ine.ine_fne_cod) = convert(VARCHAR, fne.fne_cod))\n    LEFT OUTER JOIN mat WITH (NOLOCK)\n        ON (mat.mat_cod = ine.ine_mat_cod)\n    LEFT OUTER JOIN lma WITH (NOLOCK)\n       ON (\n                lma.lma_cod = mat.mat_lma_cod\n                AND lma.lma_gmm_cod = mat.mat_gmm_cod\n                )\n    LEFT OUTER JOIN gmm WITH (NOLOCK)\n        ON (lma.lma_gmm_cod = gmm.gmm_cod)\n    LEFT OUTER JOIN sba WITH (NOLOCK)\n        ON (sba.sba_cod = nfe.nfe_sba_cod)\n    LEFT OUTER JOIN aft WITH (NOLOCK)\n        ON (\n               aft_serie = ine_aft_serie\n                AND aft_num = ine_aft_num\n                )\n    LEFT OUTER JOIN emp WITH (NOLOCK)\n        ON (emp.emp_fne_cod = fne.FNE_COD)\n    LEFT JOIN STR STR WITH (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD    \n    CROSS JOIN cfg\n    WHERE (\n            nfe.nfe_dt_entrada >= @DT_INICIO\n            AND nfe.nfe_dt_entrada <= @DT_FIM\n            )\n        AND (\n            fne.fne_cod IN (''%'')\n            OR (''%'' IN (''%''))\n            )\n    ) AS t1\nORDER BY sba_cod\n    , sba_nome\n    , nfe_tipo\n    , nfe_dt_entrada\n    , nfe_serie\n    , nfe_num\n    , ine_seq\n '\n\n)\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													},
													"sink": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													},
													"sink": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 18
													}
												},
												{
													"source": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													},
													"sink": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													}
												},
												{
													"source": {
														"name": "STR_STR_COD",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "str_str_cod",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_ITABUNA_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_SMART"
											}
										}
									]
								},
								{
									"name": "SMART - NF IOF",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SMART - NF ITB",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat(\n'DECLARE @DT_INICIO AS DATE\n DECLARE @DT_FIM     AS DATE\n\nSET @DT_INICIO = ','''', item().DT_INICIO,'''',\n'SET @DT_FIM = '  , '''', item().DT_FIM,'''',\n' SELECT \n 92 as estabelecimento  ',\n\n '  ,STR_STR_COD\n     ,nfe_dt_emissao\n    , nfe_dt_entrada\n    , nfe_tipo\n    , nfe_serie\n    , nfe_num\n    , fne_cod\n    , fne_nome_fantasia\n    , ine_mat_cod\n    , mat_desc_resumida\n    , gmm_nome\n    , ine_qtde_entrada\n    , mat_unm_cod_entrada\n    , ine_vlr_unit_entrada\n    , nfe_ipg_aberto\n    , ine_vlr_desconto\n    , ine_vlr_ipi\n    , nfe_aft\n    , nfe_vlr_total\n    , ds_nfe_tipo\n    , nfe_crit_venc\n    , nfe_cpg_parcelas\n    , nfe_ipg_dt_vcto\n    , nfe_parcela_1\nFROM (\n    SELECT cfg.cfg_emp\n        , ISNULL(str_str_cod,''IOF'') AS STR_STR_COD\n        , sba.sba_cod\n        , sba.sba_nome\n        , nfe.nfe_serie\n        , nfe.nfe_num\n        , nfe.nfe_fne_cod\n        , nfe.nfe_tipo\n        , CASE nfe.nfe_tipo\n\n                WHEN ''PR''\n                THEN ''Entrada''\n            WHEN ''SR''\n                THEN ''Simples Remessa''\n            WHEN ''SF''\n                THEN ''Simples Faturamento''\n            WHEN ''DV''\n                THEN ''Devolução''\n            WHEN ''TR''\n                THEN ''Transferência''\n            ELSE ''N/A''\n            END AS ds_nfe_tipo\n        , fne.fne_cod\n        , fne.fne_nome_fantasia\n        , nfe.nfe_vlr_total\n \n \n        , (\n            SELECT TOP 1 i.ipg_dt_vcto\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ORDER BY i.ipg_dt_vcto\n            ) AS nfe_ipg_dt_vcto\n        , (\n            SELECT count(ipg_parc)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ) AS nfe_cpg_parcelas\n        , nfe.nfe_crit_venc\n        , nfe.nfe_parcela_1\n        , nfe.nfe_dt_emissao\n        , nfe.nfe_dt_entrada\n        , ine.ine_seq\n        , ine.ine_mat_cod\n        , mat.mat_desc_resumida\n        , mat.mat_lma_cod\n        , lma.lma_nome\n        , mat.mat_gmm_cod\n        , gmm.gmm_nome\n        , mat_unm_cod_entrada\n        , ine.ine_qtde AS ine_qtde_entrada\n        , ine.ine_vlr_unit AS ine_vlr_unit_entrada\n        , (\n            SELECT isnull(sum(ipg_valor), 0)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n                AND i.ipg_status IN (''A'', ''R'')\n                AND i.ipg_dt_vcto <= @DT_FIM\n            ) AS nfe_ipg_aberto\n        , mat_unm_cod_saida\n        , '' AS solic\n        , '' AS DATA_solic\n        , convert(VARCHAR, ine_aft_serie) + ''.'' + convert(VARCHAR, ine_aft_num) AS nfe_aft\n        , aft_dthr\n        , ine.ine_qtde * mat_fat_conv_s_v AS ine_qtde_saida\n        , ine.ine_vlr_unit / mat_fat_conv_s_v AS ine_vlr_saida\n        , ine.ine_vlr_ipi\n        , ine.ine_vlr_desconto\n        , (\n            SELECT TOP 1 f.fne_cod\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                          )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                    n.nfe_dt_entrada >= @DT_INICIO\n                    AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_cod\n        , (\n            SELECT TOP 1 f.fne_nome_fantasia\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                        )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                   n.nfe_dt_entrada >= @DT_INICIO\n                 AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_nome_fantasia\n        , replace(replace(replace(emp_cgc, ''.'', ''''), ''/'', ''''), ''-'', '''') AS emp_cgc\n    FROM nfe WITH (NOLOCK)\n    INNER JOIN ine WITH (NOLOCK)\n        ON (\n                nfe.nfe_fne_cod = ine.ine_fne_cod\n                AND nfe.nfe_serie = ine.ine_nfe_serie\n                AND nfe.nfe_num = ine.ine_nfe_num\n                AND nfe.nfe_tipo = ine.ine_nfe_tipo\n                )\n    LEFT OUTER JOIN fne WITH (NOLOCK)\n        ON (convert(VARCHAR, ine.ine_fne_cod) = convert(VARCHAR, fne.fne_cod))\n    LEFT OUTER JOIN mat WITH (NOLOCK)\n        ON (mat.mat_cod = ine.ine_mat_cod)\n    LEFT OUTER JOIN lma WITH (NOLOCK)\n       ON (\n                lma.lma_cod = mat.mat_lma_cod\n                AND lma.lma_gmm_cod = mat.mat_gmm_cod\n                )\n    LEFT OUTER JOIN gmm WITH (NOLOCK)\n        ON (lma.lma_gmm_cod = gmm.gmm_cod)\n    LEFT OUTER JOIN sba WITH (NOLOCK)\n        ON (sba.sba_cod = nfe.nfe_sba_cod)\n    LEFT OUTER JOIN aft WITH (NOLOCK)\n        ON (\n               aft_serie = ine_aft_serie\n                AND aft_num = ine_aft_num\n                )\n    LEFT OUTER JOIN emp WITH (NOLOCK)\n        ON (emp.emp_fne_cod = fne.FNE_COD)\n    LEFT JOIN STR STR WITH (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD    \n    CROSS JOIN cfg\n    WHERE (\n            nfe.nfe_dt_entrada >= @DT_INICIO\n            AND nfe.nfe_dt_entrada <= @DT_FIM\n            )\n        AND (\n            fne.fne_cod IN (''%'')\n            OR (''%'' IN (''%''))\n            )\n    ) AS t1\nORDER BY sba_cod\n    , sba_nome\n    , nfe_tipo\n    , nfe_dt_entrada\n    , nfe_serie\n    , nfe_num\n    , ine_seq\n '\n\n)\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													},
													"sink": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													},
													"sink": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													},
													"sink": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 18
													}
												},
												{
													"source": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													},
													"sink": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													}
												},
												{
													"source": {
														"name": "STR_STR_COD",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "str_str_cod",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_IOF_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_SMART"
											}
										}
									]
								},
								{
									"name": "SMART - NF OFT",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SMART - NF IOF",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat(\n'DECLARE @DT_INICIO AS DATE\n DECLARE @DT_FIM     AS DATE\n\nSET @DT_INICIO = ','''', item().DT_INICIO,'''',\n'SET @DT_FIM = '  , '''', item().DT_FIM,'''',\n' SELECT \n 93 as estabelecimento  ',\n\n '  ,STR_STR_COD\n     ,nfe_dt_emissao\n    , nfe_dt_entrada\n    , nfe_tipo\n    , nfe_serie\n    , nfe_num\n    , fne_cod\n    , fne_nome_fantasia\n    , ine_mat_cod\n    , mat_desc_resumida\n    , gmm_nome\n    , ine_qtde_entrada\n    , mat_unm_cod_entrada\n    , ine_vlr_unit_entrada\n    , nfe_ipg_aberto\n    , ine_vlr_desconto\n    , ine_vlr_ipi\n    , nfe_aft\n    , nfe_vlr_total\n    , ds_nfe_tipo\n    , nfe_crit_venc\n    , nfe_cpg_parcelas\n    , nfe_ipg_dt_vcto\n    , nfe_parcela_1\nFROM (\n    SELECT cfg.cfg_emp\n        ,ISNULL(str_str_cod,''OFT'') AS STR_STR_COD\n        , sba.sba_cod\n        , sba.sba_nome\n        , nfe.nfe_serie\n        , nfe.nfe_num\n        , nfe.nfe_fne_cod\n        , nfe.nfe_tipo\n        , CASE nfe.nfe_tipo\n\n                WHEN ''PR''\n                THEN ''Entrada''\n            WHEN ''SR''\n                THEN ''Simples Remessa''\n            WHEN ''SF''\n                THEN ''Simples Faturamento''\n            WHEN ''DV''\n                THEN ''Devolução''\n            WHEN ''TR''\n                THEN ''Transferência''\n            ELSE ''N/A''\n            END AS ds_nfe_tipo\n        , fne.fne_cod\n        , fne.fne_nome_fantasia\n        , nfe.nfe_vlr_total\n \n \n        , (\n            SELECT TOP 1 i.ipg_dt_vcto\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ORDER BY i.ipg_dt_vcto\n            ) AS nfe_ipg_dt_vcto\n        , (\n            SELECT count(ipg_parc)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ) AS nfe_cpg_parcelas\n        , nfe.nfe_crit_venc\n        , nfe.nfe_parcela_1\n        , nfe.nfe_dt_emissao\n        , nfe.nfe_dt_entrada\n        , ine.ine_seq\n        , ine.ine_mat_cod\n        , mat.mat_desc_resumida\n        , mat.mat_lma_cod\n        , lma.lma_nome\n        , mat.mat_gmm_cod\n        , gmm.gmm_nome\n        , mat_unm_cod_entrada\n        , ine.ine_qtde AS ine_qtde_entrada\n        , ine.ine_vlr_unit AS ine_vlr_unit_entrada\n        , (\n            SELECT isnull(sum(ipg_valor), 0)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n                AND i.ipg_status IN (''A'', ''R'')\n                AND i.ipg_dt_vcto <= @DT_FIM\n            ) AS nfe_ipg_aberto\n        , mat_unm_cod_saida\n        , '' AS solic\n        , '' AS DATA_solic\n        , convert(VARCHAR, ine_aft_serie) + ''.'' + convert(VARCHAR, ine_aft_num) AS nfe_aft\n        , aft_dthr\n        , ine.ine_qtde * mat_fat_conv_s_v AS ine_qtde_saida\n        , ine.ine_vlr_unit / mat_fat_conv_s_v AS ine_vlr_saida\n        , ine.ine_vlr_ipi\n        , ine.ine_vlr_desconto\n        , (\n            SELECT TOP 1 f.fne_cod\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                          )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                    n.nfe_dt_entrada >= @DT_INICIO\n                    AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_cod\n        , (\n            SELECT TOP 1 f.fne_nome_fantasia\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                        )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                   n.nfe_dt_entrada >= @DT_INICIO\n                 AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_nome_fantasia\n        , replace(replace(replace(emp_cgc, ''.'', ''''), ''/'', ''''), ''-'', '''') AS emp_cgc\n    FROM nfe WITH (NOLOCK)\n    INNER JOIN ine WITH (NOLOCK)\n        ON (\n                nfe.nfe_fne_cod = ine.ine_fne_cod\n                AND nfe.nfe_serie = ine.ine_nfe_serie\n                AND nfe.nfe_num = ine.ine_nfe_num\n                AND nfe.nfe_tipo = ine.ine_nfe_tipo\n                )\n    LEFT OUTER JOIN fne WITH (NOLOCK)\n        ON (convert(VARCHAR, ine.ine_fne_cod) = convert(VARCHAR, fne.fne_cod))\n    LEFT OUTER JOIN mat WITH (NOLOCK)\n        ON (mat.mat_cod = ine.ine_mat_cod)\n    LEFT OUTER JOIN lma WITH (NOLOCK)\n       ON (\n                lma.lma_cod = mat.mat_lma_cod\n                AND lma.lma_gmm_cod = mat.mat_gmm_cod\n                )\n    LEFT OUTER JOIN gmm WITH (NOLOCK)\n        ON (lma.lma_gmm_cod = gmm.gmm_cod)\n    LEFT OUTER JOIN sba WITH (NOLOCK)\n        ON (sba.sba_cod = nfe.nfe_sba_cod)\n    LEFT OUTER JOIN aft WITH (NOLOCK)\n        ON (\n               aft_serie = ine_aft_serie\n                AND aft_num = ine_aft_num\n                )\n    LEFT OUTER JOIN emp WITH (NOLOCK)\n        ON (emp.emp_fne_cod = fne.FNE_COD)\n    LEFT JOIN STR STR WITH (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD    \n    CROSS JOIN cfg\n    WHERE (\n            nfe.nfe_dt_entrada >= @DT_INICIO\n            AND nfe.nfe_dt_entrada <= @DT_FIM\n            )\n        AND (\n            fne.fne_cod IN (''%'')\n            OR (''%'' IN (''%''))\n            )\n    ) AS t1\nORDER BY sba_cod\n    , sba_nome\n    , nfe_tipo\n    , nfe_dt_entrada\n    , nfe_serie\n    , nfe_num\n    , ine_seq\n '\n\n)\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													},
													"sink": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													},
													"sink": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 18
													}
												},
												{
													"source": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													},
													"sink": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													}
												},
												{
													"source": {
														"name": "STR_STR_COD",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "str_str_cod",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_SMART"
											}
										}
									]
								},
								{
									"name": "SMART - NF HOSL",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SMART - NF OFT",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat(\n'DECLARE @DT_INICIO AS DATE\n DECLARE @DT_FIM     AS DATE\n\nSET @DT_INICIO = ','''', item().DT_INICIO,'''',\n'SET @DT_FIM = '  , '''', item().DT_FIM,'''',\n' SELECT \n 94 as estabelecimento  ',\n\n '  ,STR_STR_COD\n     ,nfe_dt_emissao\n    , nfe_dt_entrada\n    , nfe_tipo\n    , nfe_serie\n    , nfe_num\n    , fne_cod\n    , fne_nome_fantasia\n    , ine_mat_cod\n    , mat_desc_resumida\n    , gmm_nome\n    , ine_qtde_entrada\n    , mat_unm_cod_entrada\n    , ine_vlr_unit_entrada\n    , nfe_ipg_aberto\n    , ine_vlr_desconto\n    , ine_vlr_ipi\n    , nfe_aft\n    , nfe_vlr_total\n    , ds_nfe_tipo\n    , nfe_crit_venc\n    , nfe_cpg_parcelas\n    , nfe_ipg_dt_vcto\n    , nfe_parcela_1\nFROM (\n    SELECT cfg.cfg_emp\n        ,ISNULL(str_str_cod,''10'') AS STR_STR_COD\n        , sba.sba_cod\n        , sba.sba_nome\n        , nfe.nfe_serie\n        , nfe.nfe_num\n        , nfe.nfe_fne_cod\n        , nfe.nfe_tipo\n        , CASE nfe.nfe_tipo\n\n                WHEN ''PR''\n                THEN ''Entrada''\n            WHEN ''SR''\n                THEN ''Simples Remessa''\n            WHEN ''SF''\n                THEN ''Simples Faturamento''\n            WHEN ''DV''\n                THEN ''Devolução''\n            WHEN ''TR''\n                THEN ''Transferência''\n            ELSE ''N/A''\n            END AS ds_nfe_tipo\n        , fne.fne_cod\n        , fne.fne_nome_fantasia\n        , nfe.nfe_vlr_total\n \n \n        , (\n            SELECT TOP 1 i.ipg_dt_vcto\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ORDER BY i.ipg_dt_vcto\n            ) AS nfe_ipg_dt_vcto\n        , (\n            SELECT count(ipg_parc)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ) AS nfe_cpg_parcelas\n        , nfe.nfe_crit_venc\n        , nfe.nfe_parcela_1\n        , nfe.nfe_dt_emissao\n        , nfe.nfe_dt_entrada\n        , ine.ine_seq\n        , ine.ine_mat_cod\n        , mat.mat_desc_resumida\n        , mat.mat_lma_cod\n        , lma.lma_nome\n        , mat.mat_gmm_cod\n        , gmm.gmm_nome\n        , mat_unm_cod_entrada\n        , ine.ine_qtde AS ine_qtde_entrada\n        , ine.ine_vlr_unit AS ine_vlr_unit_entrada\n        , (\n            SELECT isnull(sum(ipg_valor), 0)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n                AND i.ipg_status IN (''A'', ''R'')\n                AND i.ipg_dt_vcto <= @DT_FIM\n            ) AS nfe_ipg_aberto\n        , mat_unm_cod_saida\n        , '' AS solic\n        , '' AS DATA_solic\n        , convert(VARCHAR, ine_aft_serie) + ''.'' + convert(VARCHAR, ine_aft_num) AS nfe_aft\n        , aft_dthr\n        , ine.ine_qtde * mat_fat_conv_s_v AS ine_qtde_saida\n        , ine.ine_vlr_unit / mat_fat_conv_s_v AS ine_vlr_saida\n        , ine.ine_vlr_ipi\n        , ine.ine_vlr_desconto\n        , (\n            SELECT TOP 1 f.fne_cod\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                          )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                    n.nfe_dt_entrada >= @DT_INICIO\n                    AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_cod\n        , (\n            SELECT TOP 1 f.fne_nome_fantasia\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                        )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                   n.nfe_dt_entrada >= @DT_INICIO\n                 AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_nome_fantasia\n        , replace(replace(replace(emp_cgc, ''.'', ''''), ''/'', ''''), ''-'', '''') AS emp_cgc\n    FROM nfe WITH (NOLOCK)\n    INNER JOIN ine WITH (NOLOCK)\n        ON (\n                nfe.nfe_fne_cod = ine.ine_fne_cod\n                AND nfe.nfe_serie = ine.ine_nfe_serie\n                AND nfe.nfe_num = ine.ine_nfe_num\n                AND nfe.nfe_tipo = ine.ine_nfe_tipo\n                )\n    LEFT OUTER JOIN fne WITH (NOLOCK)\n        ON (convert(VARCHAR, ine.ine_fne_cod) = convert(VARCHAR, fne.fne_cod))\n    LEFT OUTER JOIN mat WITH (NOLOCK)\n        ON (mat.mat_cod = ine.ine_mat_cod)\n    LEFT OUTER JOIN lma WITH (NOLOCK)\n       ON (\n                lma.lma_cod = mat.mat_lma_cod\n                AND lma.lma_gmm_cod = mat.mat_gmm_cod\n                )\n    LEFT OUTER JOIN gmm WITH (NOLOCK)\n        ON (lma.lma_gmm_cod = gmm.gmm_cod)\n    LEFT OUTER JOIN sba WITH (NOLOCK)\n        ON (sba.sba_cod = nfe.nfe_sba_cod)\n    LEFT OUTER JOIN aft WITH (NOLOCK)\n        ON (\n               aft_serie = ine_aft_serie\n                AND aft_num = ine_aft_num\n                )\n    LEFT OUTER JOIN emp WITH (NOLOCK)\n        ON (emp.emp_fne_cod = fne.FNE_COD)\n    LEFT JOIN STR STR WITH (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD    \n    CROSS JOIN cfg\n    WHERE (\n            nfe.nfe_dt_entrada >= @DT_INICIO\n            AND nfe.nfe_dt_entrada <= @DT_FIM\n            )\n        AND (\n            fne.fne_cod IN (''%'')\n            OR (''%'' IN (''%''))\n            )\n    ) AS t1\nORDER BY sba_cod\n    , sba_nome\n    , nfe_tipo\n    , nfe_dt_entrada\n    , nfe_serie\n    , nfe_num\n    , ine_seq\n '\n\n)\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "estabelecimento",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_emissao",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_dt_entrada",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_serie",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_num",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_cod",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "fne_nome_fantasia",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ine_mat_cod",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_desc_resumida",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "gmm_nome",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													},
													"sink": {
														"name": "ine_qtde_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "mat_unm_cod_entrada",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													},
													"sink": {
														"name": "ine_vlr_unit_entrada",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 20
													}
												},
												{
													"source": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													},
													"sink": {
														"name": "nfe_ipg_aberto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_desconto",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "ine_vlr_ipi",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													}
												},
												{
													"source": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "nfe_aft",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 2,
														"precision": 10
													},
													"sink": {
														"name": "nfe_vlr_total",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 4,
														"precision": 18
													}
												},
												{
													"source": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "ds_nfe_tipo",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "nfe_crit_venc",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "nfe_cpg_parcelas",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "nfe_ipg_dt_vcto",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													},
													"sink": {
														"name": "nfe_parcela_1",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													}
												},
												{
													"source": {
														"name": "STR_STR_COD",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "str_str_cod",
														"type": "String",
														"physicalType": "varchar"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_HOSL_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_SMART"
											}
										}
									]
								},
								{
									"name": "TASY - NF Sadalla",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@concat(\n\n'with cate as(\nselect  \n        A.CD_ESTABELECIMENTO,\n        obter_nome_estab(a.cd_estabelecimento) ds_estabelecimento,\n        A.NR_ORDEM_COMPRA,\n        a.dt_entrada_saida,\n        a.dt_emissao,\n        a.nr_nota_fiscal,\n        a.cd_cgc_emitente,\n        substr(obter_nome_pf_pj(null,a.cd_cgc_emitente),1,100) ds_fornecedor,\n        pj.CD_CEP,\n        pj.DS_ENDERECO,\n        pj.DS_BAIRRO,\n        pj.DS_MUNICIPIO,\n        pj.SG_ESTADO,\n        b.cd_material,\n        substr(obter_desc_material(b.cd_material),1,100) ds_material,\n        e.ds_grupo_material,\n        b.cd_local_estoque,\n        b.qt_item_nf,\n        b.cd_unidade_medida_compra,\n        b.vl_unitario_item_nf,\n        b.vl_total_item_nf, \n        b.vl_frete / b.qt_item_nf vl_frete,\n        d.vl_tributo / b.qt_item_nf tributo,\n        dividir(b.vl_liquido, b.qt_item_estoque) vl_custo_medio,\n        ((dividir(b.vl_liquido, b.qt_item_estoque)) *(b.qt_item_nf))total_item,\n        obter_desc_operacao_nota(a.CD_OPERACAO_NF) operacao\n       -- ,obter_desc_local_estoque(b.CD_LOCAL_ESTOQUE) ds_local_estoque\nfrom    nota_fiscal a,\n        nota_fiscal_item b,\n        estrutura_material_v e,\n        nota_fiscal_item_trib d,\n        pessoa_juridica pj\nwhere   b.nr_sequencia = d.nr_sequencia (+)\n        and b.nr_item_nf = d.nr_item_nf (+)\n        and a.nr_sequencia = b.nr_sequencia\n        and b.cd_material = e.cd_material\n        and trunc(a.dt_entrada_saida,''mm'') between to_date(',\n\t\t\n\t\t'''', item().DT_INICIO_ORACLE, '''',\n\t\t\n\t\t\n\t\t\n\t\t',''DD/MM/YYYY'') and to_date(',\n                \n                '''', item().DT_FIM_ORACLE, '''',\n                \n                ',''DD/MM/YYYY'')\n        and a.ie_situacao = 1\n        and a.ie_tipo_nota in (''EF'',''EN'')\n        and a.CD_OPERACAO_NF <> 5\n        and a.dt_atualizacao_estoque is not null\n        and pj.cd_cgc = a.CD_CGC_EMITENTE (+)\n        --and ((a.cd_estabelecimento = :estab) or (:estab = 0))\norder by dt_entrada_saida,\n        nr_nota_fiscal,\n        ds_fornecedor,  \n        ds_material\n)  \nSELECT\n     2 AS ESTABELECIMENTO\n,A.CD_ESTABELECIMENTO\n,A.DS_ESTABELECIMENTO    \n,OC.DT_ORDEM_COMPRA\n,A.NR_ORDEM_COMPRA\n,A.DT_ENTRADA_SAIDA\n,A.DT_EMISSAO\n,A.NR_NOTA_FISCAL\n,A.CD_CGC_EMITENTE\n,A.DS_FORNECEDOR\n,A.CD_CEP\n,A.DS_ENDERECO\n,A.DS_BAIRRO\n,A.DS_MUNICIPIO\n,A.SG_ESTADO\n,A.CD_MATERIAL\n,A.DS_MATERIAL\n,A.DS_GRUPO_MATERIAL\n,A.CD_LOCAL_ESTOQUE\n,A.QT_ITEM_NF\n,A.CD_UNIDADE_MEDIDA_COMPRA\n,A.VL_UNITARIO_ITEM_NF\n,A.VL_TOTAL_ITEM_NF\n,A.VL_FRETE\n,A.TRIBUTO\n,A.VL_CUSTO_MEDIO\n,A.TOTAL_ITEM\n,A.OPERACAO\n,L.DS_LOCAL_ESTOQUE\nFROM CATE A\nLEFT JOIN ORDEM_COMPRA OC ON OC.NR_ORDEM_COMPRA = A.NR_ORDEM_COMPRA\nLEFT JOIN LOCAL_ESTOQUE L ON L.CD_LOCAL_ESTOQUE = A.CD_LOCAL_ESTOQUE'\n\n)\n\n\n \n",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SadallaTasyPrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_TASY"
											}
										}
									]
								},
								{
									"name": "TASY - NF HTML",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "TASY - NF Sadalla",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@CONCAT(\n\n'with cate as(\nselect  \n        A.CD_ESTABELECIMENTO,\n        FAST_OPS.obter_nome_estab(a.cd_estabelecimento) ds_estabelecimento,\n        A.NR_ORDEM_COMPRA,\n        a.dt_entrada_saida,\n        a.dt_emissao,\n        a.nr_nota_fiscal,\n        a.cd_cgc_emitente,\n        substr(FAST_OPS.obter_nome_pf_pj(null,a.cd_cgc_emitente),1,100) ds_fornecedor,\n        pj.CD_CEP,\n        pj.DS_ENDERECO,\n        pj.DS_BAIRRO,\n        pj.DS_MUNICIPIO,\n        pj.SG_ESTADO,\n        b.cd_material,\n        substr(FAST_OPS.obter_desc_material(b.cd_material),1,100) ds_material,\n        e.ds_grupo_material,\n        b.cd_local_estoque,\n        b.qt_item_nf,\n        b.cd_unidade_medida_compra,\n        b.vl_unitario_item_nf,\n        b.vl_total_item_nf, \n        b.vl_frete / b.qt_item_nf vl_frete,\n        d.vl_tributo / b.qt_item_nf tributo,\n        FAST_OPS.dividir(b.vl_liquido, b.qt_item_estoque) vl_custo_medio,\n        ((FAST_OPS.dividir(b.vl_liquido, b.qt_item_estoque)) *(b.qt_item_nf))total_item,\n        FAST_OPS.obter_desc_operacao_nota(a.CD_OPERACAO_NF) operacao\n       -- ,obter_desc_local_estoque(b.CD_LOCAL_ESTOQUE) ds_local_estoque\nfrom    FAST_OPS.nota_fiscal a,\n        FAST_OPS.nota_fiscal_item b,\n        FAST_OPS.estrutura_material_v e,\n        FAST_OPS.nota_fiscal_item_trib d,\n        FAST_OPS.pessoa_juridica pj\nwhere   b.nr_sequencia = d.nr_sequencia (+)\n        and b.nr_item_nf = d.nr_item_nf (+)\n        and a.nr_sequencia = b.nr_sequencia\n        and b.cd_material = e.cd_material\n        and trunc(a.dt_entrada_saida,''mm'') between to_date(',\n\t\t\n\t\t'''', item().DT_INICIO_ORACLE, '''',\n\n\t\t',''DD/MM/YYYY'') and to_date(',\n\t\t\n\t\t'''', item().DT_FIM_ORACLE, '''',\n\t\t\n\t\t',''DD/MM/YYYY'')\n        and a.ie_situacao = 1\n        and a.ie_tipo_nota in (''EF'',''EN'')\n        and a.CD_OPERACAO_NF <> 5\n        and a.dt_atualizacao_estoque is not null\n        and pj.cd_cgc = a.CD_CGC_EMITENTE (+)\n        --and ((a.cd_estabelecimento = :estab) or (:estab = 0))\norder by dt_entrada_saida,\n        nr_nota_fiscal,\n        ds_fornecedor,  \n        ds_material\n)  \nSELECT\n1 AS ESTABELECIMENTO\n,A.CD_ESTABELECIMENTO\n,A.DS_ESTABELECIMENTO    \n,OC.DT_ORDEM_COMPRA\n,A.NR_ORDEM_COMPRA\n,A.DT_ENTRADA_SAIDA\n,A.DT_EMISSAO\n,A.NR_NOTA_FISCAL\n,A.CD_CGC_EMITENTE\n,A.DS_FORNECEDOR\n,A.CD_CEP\n,A.DS_ENDERECO\n,A.DS_BAIRRO\n,A.DS_MUNICIPIO\n,A.SG_ESTADO\n,A.CD_MATERIAL\n,A.DS_MATERIAL\n,A.DS_GRUPO_MATERIAL\n,A.CD_LOCAL_ESTOQUE\n,A.QT_ITEM_NF\n,A.CD_UNIDADE_MEDIDA_COMPRA\n,A.VL_UNITARIO_ITEM_NF\n,A.VL_TOTAL_ITEM_NF\n,A.VL_FRETE\n,A.TRIBUTO\n,A.VL_CUSTO_MEDIO\n,A.TOTAL_ITEM\n,A.OPERACAO\n,L.DS_LOCAL_ESTOQUE\nFROM CATE A\nLEFT JOIN FAST_OPS.ORDEM_COMPRA OC ON OC.NR_ORDEM_COMPRA = A.NR_ORDEM_COMPRA\nLEFT JOIN FAST_OPS.LOCAL_ESTOQUE L ON L.CD_LOCAL_ESTOQUE = A.CD_LOCAL_ESTOQUE'\n\n)",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "CloudTasyPrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_TASY"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "LIMPA STAGE SMART",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "truncate table STG.SUP_NFS_SMART"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "LIMPA STAGE TASY",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "LIMPA STAGE SMART",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "truncate table STG.SUP_NFS_TASY"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"DT_INICIO": {
						"type": "String"
					},
					"DT_FIM": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Suprimentos/Nota Fiscal"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Nota Fiscal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que extrai informações de notas fiscais das unidades para compor relatório ao setor de FP&A.",
				"activities": [
					{
						"name": "Nota Fiscal Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select obter_cgc_estabelecimento(n.cd_estabelecimento) as CNPJ,\nobter_nome_estab(n.cd_estabelecimento) as DS_UNIDADE ,\nn.DT_EMISSAO,\ndt_entrada_saida as dt_entrada_saida,\nn.nr_sequencia, \nn.nr_nota_fiscal, \ni.cd_conta_contabil, \nc.ds_conta_contabil, \nobter_nome_pj(n.cd_cgc) as fornecedor,\t\nsum(i.vl_total_item_nf) as vl_total_item_nf,\nSUBSTR(n.ds_observacao,1,100) AS ds_observacao\nfrom nota_fiscal n,\nnota_fiscal_item i,\nconta_contabil c,\noperacao_nota a\nwhere n.nr_sequencia = i.nr_sequencia\nand i.cd_conta_contabil = c.cd_conta_contabil (+)\nand n.cd_operacao_nf = a.cd_operacao_nf (+)\nand a.ie_operacao_fiscal = 'E'\nand n.ie_situacao = 1\ngroup by n.cd_estabelecimento,\nn.cd_estabelecimento ,\nn.DT_EMISSAO,\ndt_entrada_saida,\nn.nr_sequencia, \nn.nr_nota_fiscal, \ni.cd_conta_contabil, \nc.ds_conta_contabil, \nn.cd_cgc,\t\nn.ds_observacao\norder by 5",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Notas_Fiscais",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Nota Fiscal HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select obter_cgc_estabelecimento(n.cd_estabelecimento) as CNPJ,\nobter_nome_estab(n.cd_estabelecimento) as DS_UNIDADE ,\nn.DT_EMISSAO,\ndt_entrada_saida as dt_entrada_saida,\nn.nr_sequencia, \nn.nr_nota_fiscal, \ni.cd_conta_contabil, \nc.ds_conta_contabil, \nobter_nome_pj(n.cd_cgc) as fornecedor,\t\nsum(i.vl_total_item_nf) as vl_total_item_nf,\nSUBSTR(n.ds_observacao,1,100) AS ds_observacao\nfrom nota_fiscal n,\nnota_fiscal_item i,\nconta_contabil c,\noperacao_nota a\nwhere n.nr_sequencia = i.nr_sequencia\nand i.cd_conta_contabil = c.cd_conta_contabil (+)\nand n.cd_operacao_nf = a.cd_operacao_nf (+)\nand a.ie_operacao_fiscal = 'E'\nand n.ie_situacao = 1\ngroup by n.cd_estabelecimento,\nn.cd_estabelecimento ,\nn.DT_EMISSAO,\ndt_entrada_saida,\nn.nr_sequencia, \nn.nr_nota_fiscal, \ni.cd_conta_contabil, \nc.ds_conta_contabil, \nn.cd_cgc,\t\nn.ds_observacao\norder by 5",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Notas_Fiscais",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Nota Fiscal Itaigara",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "  select emp_1.emp_cgc as CNPJ,\n  gcc_descr as DS_UNIDADE,\n  nfe.nfe_dt_entrada as DT_ENTRADA_SAIDA,\n  nfe_dt_emissao AS DT_EMISSAO, \n  convert(varchar,(nfe_serie)) + convert(varchar,(nfe.nfe_num)) as NR_SEQUENCIA,\n  nfe.nfe_num AS NR_NOTA_FISCAL,\n  mcc.mcc_cfo_cod AS CD_CONTA_CONTABIL,\n  cfo_nome AS DS_CONTA_CONTABIL,\n  EMP.EMP_NOME_FANTASIA AS FORNECEDOR,\n  mcc_deb AS VL_TOTAL_ITEM_NF,\n  nfe_obs AS DS_OBSERVACAO\n  from nfe \n\n  LEFT OUTER JOIN CPG ON NFE.NFE_SERIE = CPG.CPG_NFE_SERIE \n  AND NFE.NFE_NUM = CPG.CPG_NFE_NUM \n  AND NFE.NFE_FNE_COD = CPG.CPG_NFE_FNE_COD \n  AND NFE.NFE_TIPO = CPG.CPG_NFE_TIPO \n\n  inner join mcc on mcc_cpg_num = cpg_num and mcc_cpg_serie = cpg_serie\n  inner join cfo on mcc_cfo_cod = cfo_cod\n  inner join emp on emp_cod = cpg_emp_cod\n  inner join ipg on cpg_num = ipg_cpg_num and cpg_serie = ipg_cpg_serie\n  inner join gcc on gcc_cod = IPG_GCC_COD_COLIG\n  inner join str on gcc_str_cod = str_cod\n  inner join emp emp_1 on emp_1.emp_cod = str_emp_cod\n\n  where MCC.MCC_IPG_PARC = 1 \n  and MCC.MCC_TIPO = 'P' \n  and MCC.MCC_IND_CPG_GERACAO IS not NULL ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Notas_Fiscais",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Nota Fiscal HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "  select emp_1.emp_cgc as CNPJ,\n  gcc_descr as DS_UNIDADE,\n  nfe.nfe_dt_entrada as DT_ENTRADA_SAIDA,\n  nfe_dt_emissao AS DT_EMISSAO, \n  convert(varchar,(nfe_serie)) + convert(varchar,(nfe.nfe_num)) as NR_SEQUENCIA,\n  nfe.nfe_num AS NR_NOTA_FISCAL,\n  mcc.mcc_cfo_cod AS CD_CONTA_CONTABIL,\n  cfo_nome AS DS_CONTA_CONTABIL,\n  EMP.EMP_NOME_FANTASIA AS FORNECEDOR,\n  mcc_deb AS VL_TOTAL_ITEM_NF,\n  nfe_obs AS DS_OBSERVACAO\n  from nfe \n\n  LEFT OUTER JOIN CPG ON NFE.NFE_SERIE = CPG.CPG_NFE_SERIE \n  AND NFE.NFE_NUM = CPG.CPG_NFE_NUM \n  AND NFE.NFE_FNE_COD = CPG.CPG_NFE_FNE_COD \n  AND NFE.NFE_TIPO = CPG.CPG_NFE_TIPO \n\n  inner join mcc on mcc_cpg_num = cpg_num and mcc_cpg_serie = cpg_serie\n  inner join cfo on mcc_cfo_cod = cfo_cod\n  inner join emp on emp_cod = cpg_emp_cod\n  inner join ipg on cpg_num = ipg_cpg_num and cpg_serie = ipg_cpg_serie\n  inner join gcc on gcc_cod = IPG_GCC_COD_COLIG\n  inner join str on gcc_str_cod = str_cod\n  inner join emp emp_1 on emp_1.emp_cod = str_emp_cod\n\n  where MCC.MCC_IPG_PARC = 1 \n  and MCC.MCC_TIPO = 'P' \n  and MCC.MCC_IND_CPG_GERACAO IS not NULL ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Notas_Fiscais",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Nota Fiscal Itabuna",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "  select emp_1.emp_cgc as CNPJ,\n  gcc_descr as DS_UNIDADE,\n  nfe.nfe_dt_entrada as DT_ENTRADA_SAIDA,\n  nfe_dt_emissao AS DT_EMISSAO, \n  convert(varchar,(nfe_serie)) + convert(varchar,(nfe.nfe_num)) as NR_SEQUENCIA,\n  nfe.nfe_num AS NR_NOTA_FISCAL,\n  mcc.mcc_cfo_cod AS CD_CONTA_CONTABIL,\n  cfo_nome AS DS_CONTA_CONTABIL,\n  EMP.EMP_NOME_FANTASIA AS FORNECEDOR,\n  mcc_deb AS VL_TOTAL_ITEM_NF,\n  nfe_obs AS DS_OBSERVACAO\n  from nfe \n\n  LEFT OUTER JOIN CPG ON NFE.NFE_SERIE = CPG.CPG_NFE_SERIE \n  AND NFE.NFE_NUM = CPG.CPG_NFE_NUM \n  AND NFE.NFE_FNE_COD = CPG.CPG_NFE_FNE_COD \n  AND NFE.NFE_TIPO = CPG.CPG_NFE_TIPO \n\n  inner join mcc on mcc_cpg_num = cpg_num and mcc_cpg_serie = cpg_serie\n  inner join cfo on mcc_cfo_cod = cfo_cod\n  inner join emp on emp_cod = cpg_emp_cod\n  inner join ipg on cpg_num = ipg_cpg_num and cpg_serie = ipg_cpg_serie\n  inner join gcc on gcc_cod = IPG_GCC_COD_COLIG\n  inner join str on gcc_str_cod = str_cod\n  inner join emp emp_1 on emp_1.emp_cod = str_emp_cod\n\n  where MCC.MCC_IPG_PARC = 1 \n  and MCC.MCC_TIPO = 'P' \n  and MCC.MCC_IND_CPG_GERACAO IS not NULL ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Notas_Fiscais",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Nota Fiscal INOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "  select emp_1.emp_cgc as CNPJ,\n  gcc_descr as DS_UNIDADE,\n  nfe.nfe_dt_entrada as DT_ENTRADA_SAIDA,\n  nfe_dt_emissao AS DT_EMISSAO, \n  convert(varchar,(nfe_serie)) + convert(varchar,(nfe.nfe_num)) as NR_SEQUENCIA,\n  nfe.nfe_num AS NR_NOTA_FISCAL,\n  mcc.mcc_cfo_cod AS CD_CONTA_CONTABIL,\n  cfo_nome AS DS_CONTA_CONTABIL,\n  EMP.EMP_NOME_FANTASIA AS FORNECEDOR,\n  mcc_deb AS VL_TOTAL_ITEM_NF,\n  nfe_obs AS DS_OBSERVACAO\n  from nfe \n\n  LEFT OUTER JOIN CPG ON NFE.NFE_SERIE = CPG.CPG_NFE_SERIE \n  AND NFE.NFE_NUM = CPG.CPG_NFE_NUM \n  AND NFE.NFE_FNE_COD = CPG.CPG_NFE_FNE_COD \n  AND NFE.NFE_TIPO = CPG.CPG_NFE_TIPO \n\n  inner join mcc on mcc_cpg_num = cpg_num and mcc_cpg_serie = cpg_serie\n  inner join cfo on mcc_cfo_cod = cfo_cod\n  inner join emp on emp_cod = cpg_emp_cod\n  inner join ipg on cpg_num = ipg_cpg_num and cpg_serie = ipg_cpg_serie\n  inner join gcc on gcc_cod = IPG_GCC_COD_COLIG\n  inner join str on gcc_str_cod = str_cod\n  inner join emp emp_1 on emp_1.emp_cod = str_emp_cod\n\n  where MCC.MCC_IPG_PARC = 1 \n  and MCC.MCC_TIPO = 'P' \n  and MCC.MCC_IND_CPG_GERACAO IS not NULL ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_INOB_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Notas_Fiscais",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Nota Fiscal IOF",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "  select emp_1.emp_cgc as CNPJ,\n  gcc_descr as DS_UNIDADE,\n  nfe.nfe_dt_entrada as DT_ENTRADA_SAIDA,\n  nfe_dt_emissao AS DT_EMISSAO, \n  convert(varchar,(nfe_serie)) + convert(varchar,(nfe.nfe_num)) as NR_SEQUENCIA,\n  nfe.nfe_num AS NR_NOTA_FISCAL,\n  mcc.mcc_cfo_cod AS CD_CONTA_CONTABIL,\n  cfo_nome AS DS_CONTA_CONTABIL,\n  EMP.EMP_NOME_FANTASIA AS FORNECEDOR,\n  mcc_deb AS VL_TOTAL_ITEM_NF,\n  nfe_obs AS DS_OBSERVACAO\n  from nfe \n\n  LEFT OUTER JOIN CPG ON NFE.NFE_SERIE = CPG.CPG_NFE_SERIE \n  AND NFE.NFE_NUM = CPG.CPG_NFE_NUM \n  AND NFE.NFE_FNE_COD = CPG.CPG_NFE_FNE_COD \n  AND NFE.NFE_TIPO = CPG.CPG_NFE_TIPO \n\n  inner join mcc on mcc_cpg_num = cpg_num and mcc_cpg_serie = cpg_serie\n  inner join cfo on mcc_cfo_cod = cfo_cod\n  inner join emp on emp_cod = cpg_emp_cod\n  inner join ipg on cpg_num = ipg_cpg_num and cpg_serie = ipg_cpg_serie\n  inner join gcc on gcc_cod = IPG_GCC_COD_COLIG\n  inner join str on gcc_str_cod = str_cod\n  inner join emp emp_1 on emp_1.emp_cod = str_emp_cod\n\n  where MCC.MCC_IPG_PARC = 1 \n  and MCC.MCC_TIPO = 'P' \n  and MCC.MCC_IND_CPG_GERACAO IS not NULL ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Notas_Fiscais",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Nota Fiscal Oftalmoclin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "  select emp_1.emp_cgc as CNPJ,\n  gcc_descr as DS_UNIDADE,\n  nfe.nfe_dt_entrada as DT_ENTRADA_SAIDA,\n  nfe_dt_emissao AS DT_EMISSAO, \n  convert(varchar,(nfe_serie)) + convert(varchar,(nfe.nfe_num)) as NR_SEQUENCIA,\n  nfe.nfe_num AS NR_NOTA_FISCAL,\n  mcc.mcc_cfo_cod AS CD_CONTA_CONTABIL,\n  cfo_nome AS DS_CONTA_CONTABIL,\n  EMP.EMP_NOME_FANTASIA AS FORNECEDOR,\n  mcc_deb AS VL_TOTAL_ITEM_NF,\n  nfe_obs AS DS_OBSERVACAO\n  from nfe \n\n  LEFT OUTER JOIN CPG ON NFE.NFE_SERIE = CPG.CPG_NFE_SERIE \n  AND NFE.NFE_NUM = CPG.CPG_NFE_NUM \n  AND NFE.NFE_FNE_COD = CPG.CPG_NFE_FNE_COD \n  AND NFE.NFE_TIPO = CPG.CPG_NFE_TIPO \n\n  inner join mcc on mcc_cpg_num = cpg_num and mcc_cpg_serie = cpg_serie\n  inner join cfo on mcc_cfo_cod = cfo_cod\n  inner join emp on emp_cod = cpg_emp_cod\n  inner join ipg on cpg_num = ipg_cpg_num and cpg_serie = ipg_cpg_serie\n  inner join gcc on gcc_cod = IPG_GCC_COD_COLIG\n  inner join str on gcc_str_cod = str_cod\n  inner join emp emp_1 on emp_1.emp_cod = str_emp_cod\n\n  where MCC.MCC_IPG_PARC = 1 \n  and MCC.MCC_TIPO = 'P' \n  and MCC.MCC_IND_CPG_GERACAO IS not NULL ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Notas_Fiscais",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Fiscal"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:25Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OFTALMODIAGNOSE_ADF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LISTA ORIGEM DESTINO",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino]",
								"storedProcedureParameters": {
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"plataforma": {
										"type": "String",
										"value": {
											"value": "SMART_OFTALMODIAGONOSE",
											"type": "Expression"
										}
									},
									"COD_TABELA": {
										"type": "String",
										"value": null
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPA TABELAS DESTINO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "DATA_HORA_INICIO_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "Data Inicio Banco",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 2,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OdbcSource",
														"query": {
															"value": "@concat(\n'select * from ',item().NOME_TABELA_ORIGEM,' where SUBSTRING(', item().nome_coluna_referencia,',1,10) >= ',variables('DT_INICIO') \n\n )",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "Oftalmodiagnose_ODBC",
														"type": "DatasetReference",
														"parameters": {
															"schema_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"table_name": "@item().NOME_TABELA_ORIGEM"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA PARCIAL').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Data Inicio Banco",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "DT_INICIO",
													"value": {
														"value": "@concat('''',string(formatDateTime(adddays(utcnow(), -30), 'yyyy-MM-dd')),'''')",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "DATA_HORA_INICIO_COMPLETA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OdbcSource",
														"query": {
															"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_OFTALMODIAGNOSE_ODBC_WITH_PARAM",
														"type": "DatasetReference",
														"parameters": {
															"schema_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"table_name": {
																"value": "@item().NOME_TABELA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA COMPLETA').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "LIMPA TABELAS DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA ORIGEM DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "LIMPA TABELA DESTINO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('truncate table ',\nitem().NOME_SCHEMA_DESTINO,\n'.',\nitem().NOME_TABELA_DESTINO,\n' SELECT 0')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					},
					{
						"name": "MERGE",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Script_Merge",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "@concat('EXEC ',item().NOME_PROC)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"DT_INICIO": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OFTALMODIAGNOSE_ADF_BLOB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LISTA ORIGEM DESTINO",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino]",
								"storedProcedureParameters": {
									"COD_TABELA": {
										"type": "String",
										"value": null
									},
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"plataforma": {
										"type": "String",
										"value": "SMART_OFTALMODIAGONOSE"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach_GERA ARQUIVOS",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Apaga Arquivos Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "GERA ARQUIVOS",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "GERA ARQUIVOS_PARCIAL",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OdbcSource",
														"query": {
															"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_OFTALMODIAGNOSE_ODBC_WITH_PARAM",
														"type": "DatasetReference",
														"parameters": {
															"schema_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"table_name": {
																"value": "@item().NOME_TABELA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "Parquet_Oftalmodiagnose",
														"type": "DatasetReference",
														"parameters": {
															"nome_tabela": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											}
										],
										"ifTrueActivities": [
											{
												"name": "GERA ARQUIVOS_COMPLETA",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OdbcSource",
														"query": {
															"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_OFTALMODIAGNOSE_ODBC_WITH_PARAM",
														"type": "DatasetReference",
														"parameters": {
															"schema_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"table_name": {
																"value": "@item().NOME_TABELA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "Parquet_Oftalmodiagnose",
														"type": "DatasetReference",
														"parameters": {
															"nome_tabela": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "LIMPA TABELAS DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ForEach_GERA ARQUIVOS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "LIMPA TABELA DESTINO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('IF  EXISTS (SELECT * FROM sys.objects WHERE name = ','''', item().NOME_TABELA_DESTINO,'''',' AND type =' ,'''U''',')', ' \nTRUNCATE TABLE ', item().NOME_SCHEMA_DESTINO, '.', item().NOME_TABELA_DESTINO, \n' select 0')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPA TABELAS DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "DATA_HORA_INICIO_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "Data Inicio Banco",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 2,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "CSV_OFTALMODIAGNOSE",
														"type": "DatasetReference",
														"parameters": {
															"nome_tabela": {
																"value": "@concat(item().NOME_TABELA_DESTINO,'.csv')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA PARCIAL').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Data Inicio Banco",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "DT_INICIO",
													"value": {
														"value": "@concat('''',string(formatDateTime(adddays(utcnow(), -30), 'yyyy-MM-dd')),'''')",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "DATA_HORA_INICIO_COMPLETA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "CSV_OFTALMODIAGNOSE",
														"type": "DatasetReference",
														"parameters": {
															"nome_tabela": {
																"value": "@concat(item().NOME_TABELA_DESTINO,'.csv')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA COMPLETA').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "CARGA DW",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_OFT_SMART_CARGA_DW"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Apaga Arquivos Blob",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA ORIGEM DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "CSV_OFTALMODIAGNOSE",
											"type": "DatasetReference",
											"parameters": {
												"nome_tabela": {
													"value": "@concat(item().NOME_TABELA_DESTINO,'.csv')",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"DT_INICIO": {
						"type": "String"
					},
					"NM_ARQ": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ORTOCITY_CARGA_DINAMICA_ADF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LISTA ORIGEM DESTINO",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino]",
								"storedProcedureParameters": {
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"plataforma": {
										"type": "String",
										"value": "ORTOCITY"
									},
									"COD_TABELA": {
										"type": "String",
										"value": null
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPA TABELAS DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "DATA_HORA_INICIO_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 2,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat(\n'select * from ', item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' where ', item().nome_coluna_referencia,' >= ''',\nitem().Data_Inicio, ''' and ', item().nome_coluna_referencia, ' <= ''', item().Data_Fim, ''''\n\n )",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SQL_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"schema_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"table_name": {
																"value": "@item().NOME_TABELA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA PARCIAL').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "DATA_HORA_INICIO_COMPLETA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 2,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
															"type": "Expression"
														},
														"partitionOption": "None",
														"convertDecimalToInteger": false,
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_ORTOCITY_WITH_PARAM",
														"type": "DatasetReference",
														"parameters": {
															"schema_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"table_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_HMAISDATADRIVEN",
														"type": "DatasetReference",
														"parameters": {
															"Filesystem": "ortocity",
															"File": "arquivo.csv"
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA COMPLETA').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "LIMPA TABELAS DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA ORIGEM DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "LIMPA TABELA DESTINO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('truncate table ',\nitem().NOME_SCHEMA_DESTINO,\n'.',\nitem().NOME_TABELA_DESTINO,\n' SELECT 0')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					},
					{
						"name": "ProducaoDiaria_Ortocity",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Ano_Inicio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@concat(\n'SELECT \nTMP.PK_ARQUIVO,\nTMP.CD_ESTABELECIMENTO,\nTMP.DS_ESTABELECIMENTO,\nTMP.NR_ATENDIMENTO,\nTMP.NR_INTERNO_CONTA,\nTMP.CD_PESSOA_FISICA,\nTMP.NM_PESSOA_FISICA,\nTMP.DT_NASCIMENTO,\nTMP.CNPJ_CONVENIO,\nTMP.CD_CONVENIO,\nTMP.DS_CONVENIO,\nTMP.CD_MEDICO_EXECUTANTE,\nTMP.NM_MEDICO_EXECUTANTE,\nTMP.CD_SETOR_EXECUTANTE,\nTMP.DS_SETOR_EXECUTANTE,\nTMP.DT_ENTRADA,\nTMP.DT_ITEM,\nCASE\n    WHEN tmp.CD_ITEM_CO IS NOT NULL THEN  tmp.CD_ITEM_CO\n    WHEN tmp.CD_ITEM_PR IS NOT NULL THEN  tmp.CD_ITEM_PR\n    WHEN tmp.CD_ITEM_RX1 IS NOT NULL THEN tmp.CD_ITEM_RX1\n    WHEN tmp.CD_ITEM_RX2 IS NOT NULL THEN tmp.CD_ITEM_RX2\nEND as CD_ITEM,\nCASE\n    WHEN tmp.DS_ITEM_CO IS NOT NULL THEN  tmp.DS_ITEM_CO\n    WHEN tmp.DS_ITEM_PR IS NOT NULL THEN  tmp.DS_ITEM_PR\n    WHEN tmp.DS_ITEM_RX1 IS NOT NULL THEN tmp.DS_ITEM_RX1\n    WHEN tmp.DS_ITEM_RX2 IS NOT NULL THEN tmp.DS_ITEM_RX2\nEND as DS_ITEM,\nCASE\n    WHEN tmp.TP_ITEM_CO IS NOT NULL THEN  tmp.TP_ITEM_CO\n    WHEN tmp.TP_ITEM_PR IS NOT NULL THEN  tmp.TP_ITEM_PR\n    WHEN tmp.TP_ITEM_RX1 IS NOT NULL THEN tmp.TP_ITEM_RX1\n    WHEN tmp.TP_ITEM_RX2 IS NOT NULL THEN tmp.TP_ITEM_RX2\nEND as TP_ITEM,\nQTD,\nVL_FINAL\nFROM \n(\nselect f.codfat as pk_arquivo\n,a.unidade as cd_estabelecimento\n,a.unidade as ds_estabelecimento\n,f.numficha as nr_atendimento\n,f.numficha as nr_interno_conta\n,f.numreg as cd_pessoa_fisica\n,(select nome from cadpac where cadpac.numreg=f.numreg) as nm_pessoa_fisica\n,(select datanasc from cadpac where cadpac.numreg=f.numreg) as dt_nascimento\n,(select cnpj from cadnome where cadnome.codigo=a.codconv) as cnpj_convenio\n,a.codconv as cd_convenio\n,(select nome from cadconv where cadconv.codconv=a.codconv) as ds_convenio\n,a.resp1 as cd_medico_executante\n,(select nome from cadmedresp where cadmedresp.codmed=a.resp1) as nm_medico_executante\n,a.tipo as cd_setor_executante\n,a.tipo as ds_setor_executante\n,a.DATAFICHA AS dt_entrada\n,f.data as dt_item\n,case when f.tipo=','''CO''',' and f.consulta=','''S''',' and f.valor_cons>0 then ','''10101012''',' else NULL end as cod_tuss_co\n,case when f.tipo=','''CO''',' and f.consulta=','''S''',' and f.valor_cons>0 then ','''CO14''',' else NULL end as cd_item_co\n,case when f.tipo=','''CO''',' and f.consulta=','''S''',' and f.valor_cons>0 then ','''CONSULTA''',' else NULL end as ds_item_co\n,case when f.tipo=','''CO''',' and f.consulta=','''S''',' and f.valor_cons>0 then ','''PROCEDIMENTO''',' else NULL end as tp_item_co\n,f.codigo_tuss as cod_tuss_pr\n,f.codigo_m as cd_item_pr\n,f.exame as ds_item_pr\n,case when f.valor_honor>0 then ','''PROCEDIMENTO''',' else NULL end as tp_item_pr\n,f.rx as cod_tuss_rx1\n,f.mrx as cd_item_rx1\n,case when NVL(f.mrx,','''x''',')<>','''x''',' and f.valor_rx>0 then (select exame from tabexame where tabexame.codigo_m=f.mrx and rownum<=1) else NULL end as ds_item_rx1\n,case when NVL(f.mrx,','''x''',')<>','''x''',' and f.valor_rx>0 then ','''RAIO-X''',' else NULL end as tp_item_rx1\n,f.rx2 as cod_tuss_rx2\n,f.mrx2 as cd_item_rx2\n,case when NVL(f.mrx2,','''x''',')<>','''x''',' and f.valor_rx2>0 then (select exame from tabexame where tabexame.codigo_m=f.mrx2 and rownum<=1) else NULL end as ds_item_rx2\n,case when NVL(f.mrx2,','''x''',')<>','''x''',' and f.valor_rx2>0 then ','''RAIO-X''',' else NULL end as tp_item_rx2\n,case when NVL(f.codnome,','''x''',')<>','''x''',' and f.valor_mat1>0 then (select nome from tabkit1 where tabkit1.codkit=f.codnome and rownum<=1) else NULL end as ds_item_kit1\n,case when NVL(f.codnome,','''x''',')<>','''x''',' and f.valor_mat1>0 then ','''MAT/MED''',' else NULL end as tp_item_kit1\n,case when NVL(f.codnome2,','''x''',')<>','''x''',' and f.valor_mat2>0 then (select nome from tabkit1 where tabkit1.codkit=f.codnome2 and rownum<=1) else NULL end as ds_item_kit2\n,case when NVL(f.codnome2,','''x''',')<>','''x''',' and f.valor_mat2>0 then ','''MAT/MED''',' else NULL end as tp_item_kit2\n,case when NVL(f.codnome3,','''x''',')<>','''x''',' and f.valor_mat3>0 then (select nome from tabkit1 where tabkit1.codkit=f.codnome3 and rownum<=1) else NULL end as ds_item_kit3\n,case when NVL(f.codnome3,','''x''',')<>','''x''',' and f.valor_mat3>0 then ','''MAT/MED''',' else NULL end as tp_item_kit3\n,case when NVL(f.codnome4,','''x''',')<>','''x''',' and f.valor_mat4>0 then (select nome from tabkit1 where tabkit1.codkit=f.codnome4 and rownum<=1) else NULL end as ds_item_kit4\n,case when NVL(f.codnome4,','''x''',')<>','''x''',' and f.valor_mat4>0 then ','''MAT/MED''',' else NULL end as tp_item_kit4\n,case when NVL(f.tx,','''x''',')<>','''x''',' and f.valor_tx>0 then (select nome from cadtaxa1 where cadtaxa1.codigo_m=f.tx and rownum<=1) else NULL end as ds_item_tx1\n,case when NVL(f.tx,','''x''',')<>','''x''',' and f.valor_tx>0 then ','''TAXA''',' else NULL end as tp_item_tx1\n,case when NVL(f.tx2,','''x''',')<>','''x''',' and f.valor_tx2>0 then (select nome from cadtaxa1 where cadtaxa1.codigo_m=f.tx2 and rownum<=1) else NULL end as ds_item_tx2\n,case when NVL(f.tx2,','''x''',')<>','''x''',' and f.valor_tx2>0 then ','''TAXA''',' else NULL end as tp_item_tx2\n,case when f.tipo=','''CO''',' and f.consulta=','''S''',' and f.valor_cons>0 then 1 else f.quant end as qtd\n,F.VALOR AS VL_FINAL\nfrom FERNANDO.ARQFAT f\ninner join FERNANDO.CADATEND a on f.numficha=a.numficha \n)tmp',' WHERE tmp.DT_ITEM>=','''',variables('ANO_INICIO'),'''')",
									"type": "Expression"
								},
								"partitionOption": "None",
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE dw.ortocity_prod_diaria",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ORTOCITY",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DESTINO_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {
									"Schema_Destino": "dw",
									"Tabela_Destino": "ortocity_prod_diaria"
								}
							}
						]
					},
					{
						"name": "Ano_Inicio",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "LIMPA TABELAS DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "ANO_INICIO",
							"value": {
								"value": "@concat(string(sub(int(formatDateTime(utcnow(),'yyyy')),2)),'-01-01')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CARGA DW",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_SLFW_CARGA_DW"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"ANO_INICIO": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ORTOCITY_STORAGE_ACCOUNT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lista arquivos",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "GERA ARQUIVO QUERY ORTOCITY",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_HMAISDATADRIVEN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": "ortocity"
								}
							},
							"fieldList": [
								"childItems",
								"itemType",
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filtro",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lista arquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista arquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endsWith(item().name, 'csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filtro",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filtro').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copia dados para a STG",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('Drop table stg.',activity('Lista arquivos').output.itemName)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_SQL_STG",
											"type": "DatasetReference",
											"parameters": {
												"SCHEMA": "stg",
												"TABELA": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Move arquivo para PROCESSADOS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Palativo Stg DW",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@concat(activity('Lista arquivos').output.itemName,'\\Processados')",
													"type": "Expression"
												},
												"File": {
													"value": "@concat(item().name,'-',utcnow())",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Apaga arquivo",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move arquivo para PROCESSADOS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "sv_hmaisbrasildatadriven",
												"type": "LinkedServiceReference"
											},
											"path": "ceop/logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "STG DW",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copia dados para a STG",
											"dependencyConditions": [
												"Skipped"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SQL_DESTINO",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": "WITH REF AS(\n\nSELECT \nPK_ARQUIVO\n\t\t\t,CD_ESTABELECIMENTO\n\t\t\t,DS_ESTABELECIMENTO\n\t\t\t,NR_ATENDIMENTO\n\t\t\t,NR_INTERNO_CONTA\n\t\t\t,CD_PESSOA_FISICA\n\t\t\t,NM_PESSOA_FISICA\n\t\t\t,DT_NASCIMENTO\n\t\t\t,CNPJ_CONVENIO\n\t\t\t,CD_CONVENIO\n\t\t\t,DS_CONVENIO\n\t\t\t,CRM\n\t\t\t,CD_MEDICO_EXECUTANTE\n\t\t\t,NM_MEDICO_EXECUTANTE\n\t\t\t,CD_SETOR_EXECUTANTE\n\t\t\t,DS_SETOR_EXECUTANTE\n\t\t\t,DT_ENTRADA\n\t\t\t,[COD TUSS ou AMB]\n\t\t\t,CD_ITEM\n\t\t\t,DS_ITEM\n\t\t\t,DT_LANC_ITEM\n\t\t\t,QT\n\t\t\t,VALOR\n\n FROM \n\t\t( SELECT \n\t\t\tPK_ARQUIVO\n\t\t\t,CD_ESTABELECIMENTO\n\t\t\t,DS_ESTABELECIMENTO\n\t\t\t,NR_ATENDIMENTO\n\t\t\t,NR_INTERNO_CONTA\n\t\t\t,CD_PESSOA_FISICA\n\t\t\t,NM_PESSOA_FISICA\n\t\t\t,DT_NASCIMENTO\n\t\t\t,CNPJ_CONVENIO\n\t\t\t,CD_CONVENIO\n\t\t\t,DS_CONVENIO\n\t\t\t,CRM\n\t\t\t,CD_MEDICO_EXECUTANTE\n\t\t\t,NM_MEDICO_EXECUTANTE\n\t\t\t,CD_SETOR_EXECUTANTE\n\t\t\t,DS_SETOR_EXECUTANTE\n\t\t\t,DT_ENTRADA\n\t\t\t,[COD TUSS ou AMB]\n\t\t\t,CD_ITEM\n\t\t\t,DS_ITEM\n\t\t\t,DT_LANC_ITEM\n\t\t\t,SUM(CAST(QT AS MONEY)) AS QT\n\t\t\t,SUM(cast(replace(VALOR,',','.') as decimal(19,2))) as VALOR\n\t\t\t\n\n\t\tFROM STG.ortocity\n\t\tGROUP BY\n\t\t\tPK_ARQUIVO\n\t\t\t,CD_ESTABELECIMENTO\n\t\t\t,DS_ESTABELECIMENTO\n\t\t\t,NR_ATENDIMENTO\n\t\t\t,NR_INTERNO_CONTA\n\t\t\t,CD_PESSOA_FISICA\n\t\t\t,NM_PESSOA_FISICA\n\t\t\t,DT_NASCIMENTO\n\t\t\t,CNPJ_CONVENIO\n\t\t\t,CD_CONVENIO\n\t\t\t,DS_CONVENIO\n\t\t\t,CRM\n\t\t\t,CD_MEDICO_EXECUTANTE\n\t\t\t,NM_MEDICO_EXECUTANTE\n\t\t\t,CD_SETOR_EXECUTANTE\n\t\t\t,DS_SETOR_EXECUTANTE\n\t\t\t,DT_ENTRADA\n\t\t\t,[COD TUSS ou AMB]\n\t\t\t,CD_ITEM\n\t\t\t,DS_ITEM\n\t\t\t,DT_LANC_ITEM\n\n\t\t\t) AS A\n\n)\n\n\nMERGE               \n    dw.ortocity AS destino           \nUSING            \n    REF AS ORIGEM           \n           \n    ON(    \n    destino.PK_ARQUIVO    = ORIGEM.PK_ARQUIVO    AND\n    destino.CD_ITEM        = ORIGEM.CD_ITEM     AND\n    destino.NR_ATENDIMENTO = ORIGEM.NR_ATENDIMENTO AND\n    destino.CD_SETOR_EXECUTANTE = ORIGEM.CD_SETOR_EXECUTANTE\n\n)        \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET         \n\n\n\ndestino.PK_ARQUIVO                = ORIGEM.PK_ARQUIVO                ,\ndestino.CD_ESTABELECIMENTO        = ORIGEM.CD_ESTABELECIMENTO        ,\ndestino.DS_ESTABELECIMENTO        = ORIGEM.DS_ESTABELECIMENTO        ,\ndestino.NR_ATENDIMENTO            = ORIGEM.NR_ATENDIMENTO            ,\ndestino.NR_INTERNO_CONTA        = ORIGEM.NR_INTERNO_CONTA        ,\ndestino.CD_PESSOA_FISICA        = ORIGEM.CD_PESSOA_FISICA        ,\ndestino.NM_PESSOA_FISICA        = ORIGEM.NM_PESSOA_FISICA        ,\ndestino.DT_NASCIMENTO            = ORIGEM.DT_NASCIMENTO            ,\ndestino.CNPJ_CONVENIO            = ORIGEM.CNPJ_CONVENIO            ,\ndestino.CD_CONVENIO                = ORIGEM.CD_CONVENIO            ,\ndestino.DS_CONVENIO                = ORIGEM.DS_CONVENIO            ,\ndestino.CRM                        = ORIGEM.CRM                    ,\ndestino.CD_MEDICO_EXECUTANTE    = ORIGEM.CD_MEDICO_EXECUTANTE    ,\ndestino.NM_MEDICO_EXECUTANTE    = ORIGEM.NM_MEDICO_EXECUTANTE    ,\ndestino.CD_SETOR_EXECUTANTE        = ORIGEM.CD_SETOR_EXECUTANTE    ,\ndestino.DS_SETOR_EXECUTANTE        = ORIGEM.DS_SETOR_EXECUTANTE    ,\ndestino.DT_ENTRADA                = ORIGEM.DT_ENTRADA                ,\ndestino.[COD TUSS ou AMB]        = ORIGEM.[COD TUSS ou AMB]        ,        \ndestino.CD_ITEM                    = ORIGEM.CD_ITEM                ,\ndestino.DS_ITEM                    = ORIGEM.DS_ITEM                ,\ndestino.DT_LANC_ITEM            = ORIGEM.DT_LANC_ITEM            ,\ndestino.QT                        = ORIGEM.QT                        ,\ndestino.VALOR                    = ORIGEM.VALOR\n\n\n\n \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n    VALUES (\n\nORIGEM.PK_ARQUIVO                ,\nORIGEM.CD_ESTABELECIMENTO        ,\nORIGEM.DS_ESTABELECIMENTO        ,\nORIGEM.NR_ATENDIMENTO            ,\nORIGEM.NR_INTERNO_CONTA            ,\nORIGEM.CD_PESSOA_FISICA            ,\nORIGEM.NM_PESSOA_FISICA            ,\nORIGEM.DT_NASCIMENTO            ,\nORIGEM.CNPJ_CONVENIO            ,\nORIGEM.CD_CONVENIO                ,\nORIGEM.DS_CONVENIO                ,\nORIGEM.CRM                        ,\nORIGEM.CD_MEDICO_EXECUTANTE        ,\nORIGEM.NM_MEDICO_EXECUTANTE        ,\nORIGEM.CD_SETOR_EXECUTANTE        ,\nORIGEM.DS_SETOR_EXECUTANTE        ,\nORIGEM.DT_ENTRADA                ,\nORIGEM.[COD TUSS ou AMB]        ,    \nORIGEM.CD_ITEM                    ,\nORIGEM.DS_ITEM                    ,\nORIGEM.DT_LANC_ITEM                ,\nORIGEM.QT                        ,\nORIGEM.VALOR\n);\n"
											}
										]
									}
								},
								{
									"name": "Palativo Stg DW",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copia dados para a STG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": "BEGIN\n  TRUNCATE TABLE DW.ORTOCITY\nEND;\n\nBEGIN\n  INSERT INTO DW.ortocity\n  SELECT \n  PK_ARQUIVO\n  \t\t\t,CD_ESTABELECIMENTO\n  \t\t\t,DS_ESTABELECIMENTO\n  \t\t\t,NR_ATENDIMENTO\n  \t\t\t,NR_INTERNO_CONTA\n  \t\t\t,CD_PESSOA_FISICA\n  \t\t\t,NM_PESSOA_FISICA\n  \t\t\t,DT_NASCIMENTO\n  \t\t\t,CNPJ_CONVENIO\n  \t\t\t,CD_CONVENIO\n  \t\t\t,DS_CONVENIO\n  \t\t\t,CRM\n  \t\t\t,CD_MEDICO_EXECUTANTE\n  \t\t\t,NM_MEDICO_EXECUTANTE\n  \t\t\t,CD_SETOR_EXECUTANTE\n  \t\t\t,DS_SETOR_EXECUTANTE\n  \t\t\t,DT_ENTRADA\n  \t\t\t,[COD TUSS ou AMB]\n  \t\t\t,CD_ITEM\n  \t\t\t,DS_ITEM\n  \t\t\t,DT_LANC_ITEM\n  \t\t\t,QT\n  \t\t\t,VALOR\n\n   FROM \n  \t\t( SELECT \n  \t\t\tPK_ARQUIVO\n  \t\t\t,CD_ESTABELECIMENTO\n  \t\t\t,DS_ESTABELECIMENTO\n  \t\t\t,NR_ATENDIMENTO\n  \t\t\t,NR_INTERNO_CONTA\n  \t\t\t,CD_PESSOA_FISICA\n  \t\t\t,NM_PESSOA_FISICA\n  \t\t\t,DT_NASCIMENTO\n  \t\t\t,CNPJ_CONVENIO\n  \t\t\t,CD_CONVENIO\n  \t\t\t,DS_CONVENIO\n  \t\t\t,CRM\n  \t\t\t,CD_MEDICO_EXECUTANTE\n  \t\t\t,NM_MEDICO_EXECUTANTE\n  \t\t\t,CD_SETOR_EXECUTANTE\n  \t\t\t,DS_SETOR_EXECUTANTE\n  \t\t\t,DT_ENTRADA\n  \t\t\t,[COD TUSS ou AMB]\n  \t\t\t,CD_ITEM\n  \t\t\t,DS_ITEM\n  \t\t\t,DT_LANC_ITEM\n  \t\t\t,SUM(CAST(QT AS MONEY)) AS QT\n  \t\t\t,SUM(cast(replace(VALOR,',','.') as decimal(19,2))) as VALOR\n  \n\n  \t\tFROM STG.ortocity\n  \t\tGROUP BY\n  \t\t\tPK_ARQUIVO\n  \t\t\t,CD_ESTABELECIMENTO\n  \t\t\t,DS_ESTABELECIMENTO\n  \t\t\t,NR_ATENDIMENTO\n  \t\t\t,NR_INTERNO_CONTA\n  \t\t\t,CD_PESSOA_FISICA\n  \t\t\t,NM_PESSOA_FISICA\n  \t\t\t,DT_NASCIMENTO\n  \t\t\t,CNPJ_CONVENIO\n  \t\t\t,CD_CONVENIO\n  \t\t\t,DS_CONVENIO\n  \t\t\t,CRM\n  \t\t\t,CD_MEDICO_EXECUTANTE\n  \t\t\t,NM_MEDICO_EXECUTANTE\n  \t\t\t,CD_SETOR_EXECUTANTE\n  \t\t\t,DS_SETOR_EXECUTANTE\n  \t\t\t,DT_ENTRADA\n  \t\t\t,[COD TUSS ou AMB]\n  \t\t\t,CD_ITEM\n  \t\t\t,DS_ITEM\n  \t\t\t,DT_LANC_ITEM\n\n  \t\t\t) AS A\nEND;        \n\n\n"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "GERA ARQUIVO QUERY ORTOCITY",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "SELECT \nPK_ARQUIVO,\nCD_ESTABELECIMENTO,\nDS_ESTABELECIMENTO,\nNR_ATENDIMENTO,\nNR_INTERNO_CONTA,\nCD_PESSOA_FISICA,\nNM_PESSOA_FISICA,\nDT_NASCIMENTO,\nCNPJ_CONVENIO,\nCD_CONVENIO,\nDS_CONVENIO,\nCRM,\nCD_MEDICO_EXECUTANTE,\nNM_MEDICO_EXECUTANTE,\nCD_SETOR_EXECUTANTE,\nDS_SETOR_EXECUTANTE,\nDT_ENTRADA,\nCOD_TUSS_CO as \"COD TUSS ou AMB\",\nCD_ITEM_CO as  CD_ITEM,\nDS_ITEM_CO as  DS_ITEM,\nTP_ITEM_CO as  TP_ITEM,\nDT_LANC_ITEM_CO as  DT_LANC_ITEM,\nSUM(NVL(QT_CO,0))+SUM(NVL(QT_PR,0))+SUM(NVL(QT_RX1,0))+SUM(NVL(QT_RX2,0))+SUM(NVL(QT_KIT1,0))+SUM(NVL(QT_KIT2,0))+SUM(NVL(QT_KIT3,0))+SUM(NVL(QT_KIT4,0))+SUM(NVL(QT_TX1,0))+SUM(NVL(QT_TX2,0)) as  QT\n,SUM(NVL(VALOR_CO,0))+SUM(NVL(VALOR_PR,0))+SUM(NVL(VALOR_RX1,0))+SUM(NVL(VALOR_RX2,0))+SUM(NVL(VALOR_KIT1,0))+SUM(NVL(VALOR_KIT2,0))+SUM(NVL(VALOR_KIT3,0))+SUM(NVL(VALOR_KIT4,0))+SUM(NVL(VALOR_TX1,0))+SUM(NVL(VALOR_TX2,0)) as  VALOR\nFROM \n(\n\nselect f.codfat as pk_arquivo\n,a.unidade as cd_estabelecimento\n,a.unidade as ds_estabelecimento\n,f.numficha as nr_atendimento\n,f.numficha as nr_interno_conta\n,f.numreg as cd_pessoa_fisica\n,(select nome from cadpac where cadpac.numreg=f.numreg) as nm_pessoa_fisica\n,(select datanasc from cadpac where cadpac.numreg=f.numreg) as dt_nascimento\n,(select cnpj from cadnome where cadnome.codigo=a.codconv) as cnpj_convenio\n,a.codconv as cd_convenio\n,(select nome from cadconv where cadconv.codconv=a.codconv) as ds_convenio\n,(select crm from cadnome where cadnome.codigo=a.resp1) as crm\n,a.resp1 as cd_medico_executante\n,(select nome from cadmedresp where cadmedresp.codmed=a.resp1) as nm_medico_executante\n,a.tipo as cd_setor_executante\n,a.tipo as ds_setor_executante\n,a.DATAFICHA AS dt_entrada\n--,a.data as dt_entrada\n/* consulta */\n,case when f.tipo='CO' and f.consulta='S' and f.valor_cons>0 then '10101012' else '' end as cod_tuss_co\n,case when f.tipo='CO' and f.consulta='S' and f.valor_cons>0 then 'CO14' else '' end as cd_item_co\n,case when f.tipo='CO' and f.consulta='S' and f.valor_cons>0 then 'CONSULTA' else '' end as ds_item_co\n,case when f.tipo='CO' and f.consulta='S' and f.valor_cons>0 then 'PROCEDIMENTO' else '' end as tp_item_co\n,case when f.tipo='CO' and f.consulta='S' and f.valor_cons>0 then a.datafatura else '' end as dt_lanc_item_co\n,case when f.tipo='CO' and f.consulta='S' and f.valor_cons>0 then '1' else '' end as qt_co\n,case when f.tipo='CO' and f.consulta='S' and f.valor_cons>0 then TO_CHAR(f.valor_cons) else '' end as valor_co\n/* honorario (procedimento) */\n,f.codigo_tuss as cod_tuss_pr\n,f.codigo_m as cd_item_pr\n,f.exame as ds_item_pr\n,case when f.valor_honor>0 then 'PRPOCEDIMENTO' else '' end as tp_item_pr\n,case when f.valor_honor>0 then a.datafatura else '' end as dt_lanc_item_pr\n,case when f.valor_honor>0 then TO_CHAR(f.quant) else '' end as qt_pr\n,case when f.valor_honor>0 then TO_CHAR(f.valor_honor) else '' end as valor_pr\n/* rx1 */\n,f.rx as cod_tuss_rx1\n,f.mrx as cd_item_rx1\n,case when NVL(f.mrx,'x')<>'x' and f.valor_rx>0 then (select exame from tabexame where tabexame.codigo_m=f.mrx and rownum<=1) else '' end as ds_item_rx1\n,case when NVL(f.mrx,'x')<>'x' and f.valor_rx>0 then 'RAIO-X' else '' end as tp_item_rx1\n,case when NVL(f.mrx,'x')<>'x' and f.valor_rx>0 then a.datafatura else '' end as dt_lanc_item_rx1\n,case when NVL(f.mrx,'x')<>'x' and f.valor_rx>0 then TO_CHAR(f.quant) else '' end as qt_rx1\n,case when NVL(f.mrx,'x')<>'x' and f.valor_rx>0 then TO_CHAR(f.valor_rx) else '' end as valor_rx1\n/* rx2 */\n,f.rx2 as cod_tuss_rx2\n,f.mrx2 as cd_item_rx2\n,case when NVL(f.mrx2,'x')<>'x' and f.valor_rx2>0 then (select exame from tabexame where tabexame.codigo_m=f.mrx2 and rownum<=1) else '' end as ds_item_rx2\n,case when NVL(f.mrx2,'x')<>'x' and f.valor_rx2>0 then 'RAIO-X' else '' end as tp_item_rx2\n,case when NVL(f.mrx2,'x')<>'x' and f.valor_rx2>0 then a.datafatura else '' end as dt_lanc_item_rx2\n,case when NVL(f.mrx2,'x')<>'x' and f.valor_rx2>0 then TO_CHAR(f.quant) else '' end as qt_rx2\n,case when NVL(f.mrx2,'x')<>'x' and f.valor_rx2>0 then TO_CHAR(f.valor_rx2) else '' end as valor_rx2\n/* kit1 */\n,case when NVL(f.codnome,'x')<>'x' and f.valor_mat1>0 then (select nome from tabkit1 where tabkit1.codkit=f.codnome and rownum<=1) else '' end as ds_item_kit1\n,case when NVL(f.codnome,'x')<>'x' and f.valor_mat1>0 then 'MAT/MED' else '' end as tp_item_kit1\n,case when NVL(f.codnome,'x')<>'x' and f.valor_mat1>0 then a.datafatura else '' end as dt_lanc_item_kit1\n,case when NVL(f.codnome,'x')<>'x' and f.valor_mat1>0 then TO_CHAR(f.quant) else '' end as qt_kit1\n,case when NVL(f.codnome,'x')<>'x' and f.valor_mat1>0 then TO_CHAR(f.valor_mat1) else '' end as valor_kit1\n/* kit2 */\n,case when NVL(f.codnome2,'x')<>'x' and f.valor_mat2>0 then (select nome from tabkit1 where tabkit1.codkit=f.codnome2 and rownum<=1) else '' end as ds_item_kit2\n,case when NVL(f.codnome2,'x')<>'x' and f.valor_mat2>0 then 'MAT/MED' else '' end as tp_item_kit2\n,case when NVL(f.codnome2,'x')<>'x' and f.valor_mat2>0 then a.datafatura else '' end as dt_lanc_item_kit2\n,case when NVL(f.codnome2,'x')<>'x' and f.valor_mat2>0 then TO_CHAR(f.quant) else '' end as qt_kit2\n,case when NVL(f.codnome2,'x')<>'x' and f.valor_mat2>0 then TO_CHAR(f.valor_mat2) else '' end as valor_kit2\n/* kit3 */\n,case when NVL(f.codnome3,'x')<>'x' and f.valor_mat3>0 then (select nome from tabkit1 where tabkit1.codkit=f.codnome3 and rownum<=1) else '' end as ds_item_kit3\n,case when NVL(f.codnome3,'x')<>'x' and f.valor_mat3>0 then 'MAT/MED' else '' end as tp_item_kit3\n,case when NVL(f.codnome3,'x')<>'x' and f.valor_mat3>0 then a.datafatura else '' end as dt_lanc_item_kit3\n,case when NVL(f.codnome3,'x')<>'x' and f.valor_mat3>0 then TO_CHAR(f.quant) else '' end as qt_kit3\n,case when NVL(f.codnome3,'x')<>'x' and f.valor_mat3>0 then TO_CHAR(f.valor_mat3) else '' end as valor_kit3\n/* kit4 */\n,case when NVL(f.codnome4,'x')<>'x' and f.valor_mat4>0 then (select nome from tabkit1 where tabkit1.codkit=f.codnome4 and rownum<=1) else '' end as ds_item_kit4\n,case when NVL(f.codnome4,'x')<>'x' and f.valor_mat4>0 then 'MAT/MED' else '' end as tp_item_kit4\n,case when NVL(f.codnome4,'x')<>'x' and f.valor_mat4>0 then a.datafatura else '' end as dt_lanc_item_kit4\n,case when NVL(f.codnome4,'x')<>'x' and f.valor_mat4>0 then TO_CHAR(f.quant) else '' end as qt_kit4\n,case when NVL(f.codnome4,'x')<>'x' and f.valor_mat4>0 then TO_CHAR(f.valor_mat4) else '' end as valor_kit4\n/* taxa1 */\n,case when NVL(f.tx,'x')<>'x' and f.valor_tx>0 then (select nome from cadtaxa1 where cadtaxa1.codigo_m=f.tx and rownum<=1) else '' end as ds_item_tx1\n,case when NVL(f.tx,'x')<>'x' and f.valor_tx>0 then 'TAXA' else '' end as tp_item_tx1\n,case when NVL(f.tx,'x')<>'x' and f.valor_tx>0 then a.datafatura else '' end as dt_lanc_item_tx1\n,case when NVL(f.tx,'x')<>'x' and f.valor_tx>0 then TO_CHAR(f.quant) else '' end as qt_tx1\n,case when NVL(f.tx,'x')<>'x' and f.valor_tx>0 then TO_CHAR(f.valor_tx) else '' end as valor_tx1\n/* taxa1 */\n,case when NVL(f.tx2,'x')<>'x' and f.valor_tx2>0 then (select nome from cadtaxa1 where cadtaxa1.codigo_m=f.tx2 and rownum<=1) else '' end as ds_item_tx2\n,case when NVL(f.tx2,'x')<>'x' and f.valor_tx2>0 then 'TAXA' else '' end as tp_item_tx2\n,case when NVL(f.tx2,'x')<>'x' and f.valor_tx2>0 then a.datafatura else '' end as dt_lanc_item_tx2\n,case when NVL(f.tx2,'x')<>'x' and f.valor_tx2>0 then TO_CHAR(f.quant) else '' end as qt_tx2\n,case when NVL(f.tx2,'x')<>'x' and f.valor_tx2>0 then TO_CHAR(f.valor_tx2) else '' end as valor_tx2\n/*  */\nfrom FERNANDO.ARQFAT f\ninner join FERNANDO.CADATEND a on f.numficha=a.numficha\nWHERE a.DATAFICHA  >='2022-01-01'\n--where a.data >= '2022-01-01'\n) \nGROUP BY \nPK_ARQUIVO,\nCD_ESTABELECIMENTO,\nDS_ESTABELECIMENTO,\nNR_ATENDIMENTO,\nNR_INTERNO_CONTA,\nCD_PESSOA_FISICA,\nNM_PESSOA_FISICA,\nDT_NASCIMENTO,\nCNPJ_CONVENIO,\nCD_CONVENIO,\nDS_CONVENIO,\nCRM,\nCD_MEDICO_EXECUTANTE,\nNM_MEDICO_EXECUTANTE,\nCD_SETOR_EXECUTANTE,\nDS_SETOR_EXECUTANTE,\nDT_ENTRADA,\nCOD_TUSS_CO,\nCD_ITEM_CO,\nDS_ITEM_CO,\nTP_ITEM_CO,\nDT_LANC_ITEM_CO",
									"type": "Expression"
								},
								"partitionOption": "None",
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ORTOCITY",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_HMAISDATADRIVEN",
								"type": "DatasetReference",
								"parameters": {
									"Filesystem": "ortocity",
									"File": "QUERY_ORTOCITY.csv"
								}
							}
						]
					},
					{
						"name": "Lista Tabelas",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino]",
								"storedProcedureParameters": {
									"COD_TABELA": {
										"type": "String",
										"value": null
									},
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"plataforma": {
										"type": "String",
										"value": "SLFW"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "LIMPAR TABELA DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lista Tabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista Tabelas').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Limpa Tabela",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('TRUNCATE TABLE ',item().NOME_SCHEMA_DESTINO,'.',item().NOME_TABELA_DESTINO)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPAR TABELA DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista Tabelas').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_INICIO_CARGA_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(\n'select 50 AS ESTABELECIMENTO, A.* from ', item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' A where (', item().nome_coluna_referencia,'INCL >=', \n'''',substring(item().Data_Inicio,0,10),'''',' and ', item().nome_coluna_referencia,'INCL',' <= ', '''',substring(item().Data_Fim,0,10),'''', ') OR (', item().nome_coluna_referencia,'ALTERA',' >= ',\n'''',substring(item().Data_Inicio,0,10),'''', ' and ', item().nome_coluna_referencia,'ALTERA',' <= ', '''',substring(item().Data_Fim,0,10),'''', ')'\n)\n",
															"type": "Expression"
														},
														"partitionOption": "None",
														"convertDecimalToInteger": false,
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SLFW_Dinamico",
														"type": "DatasetReference",
														"parameters": {
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM",
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DATA_INICIO_CARGA_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "Starttime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO_copy1",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('Starttime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": "CARGA PARCIAL",
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": "SUCESSO",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO_copy1",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('Starttime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": "CARGA PARCIAL",
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": "ERRO",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_INICIO_CARGA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(' select 50 AS ESTABELECIMENTO, A.* from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' A')",
															"type": "Expression"
														},
														"partitionOption": "None",
														"convertDecimalToInteger": false,
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SLFW_Dinamico",
														"type": "DatasetReference",
														"parameters": {
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM",
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DATA_INICIO_CARGA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "Starttime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('Starttime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": "CARGA COMPLETA",
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": "SUCESSO",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('Starttime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": "CARGA COMPLETA",
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": "ERRO",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "CARGA DW",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_SLFW_CARGA_DW"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Starttime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/Ajuste DW Tasy/Antigo"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OTORRINOCENTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copia dados para a STG",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "EXEC SP_PROD_DIARIA_GRUPOHMAIS_DATAMART",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'otorrinocenter')\n\n    DROP table stg.otorrinocenter",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Otorrinocenter",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "otorrinocenter"
								}
							}
						]
					},
					{
						"name": "EXEC SP_PROD_DIARIA_GRUPOHMAIS_DATAMART",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CARGA DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].SP_PROD_DIARIA_GRUPOHMAIS_DATAMART",
							"storedProcedureParameters": {
								"CLASSE": {
									"value": null,
									"type": "Int32"
								},
								"CONVENIO": {
									"value": null,
									"type": "Int32"
								},
								"DATA_FINAL": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"DATA_INICIAL": {
									"value": {
										"value": "@adddays(utcnow(),-45,'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"EMPRESA": {
									"value": null,
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_Otorrinocenter",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "MERGE",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copia dados para a STG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SQL_DESTINO",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "-- select * from stg.otorrinocenter with (nolock)\n-- select * from dw.otorrinocenter with (nolock)\n\n\nMERGE\t           \n\tdw.otorrinocenter AS destino           \nUSING            \n\tstg.otorrinocenter AS origem           \n           \n    ON\t(        \n\torigem.pk_otorrinocenter\t\t\t=\tdestino.pk_otorrinocenter\t\t\n\t\t)        \n\n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \n\ndestino.PK_OTORRINOCENTER=origem.PK_OTORRINOCENTER,\ndestino.EMPRESA_ID=origem.EMPRESA_ID,\ndestino.CONVENIO_ID=origem.CONVENIO_ID,\ndestino.EMPRESA=origem.EMPRESA,\ndestino.SETOR=origem.SETOR,\ndestino.CONVENIO=origem.CONVENIO,\ndestino.NOME=origem.NOME,\ndestino.GUIA=origem.GUIA,\ndestino.GUIA_ID=origem.GUIA_ID,\ndestino.STATUS_GUIA=origem.STATUS_GUIA,\ndestino.ESPECIALIDADE=origem.ESPECIALIDADE,\ndestino.DATA_ABERTURA=origem.DATA_ABERTURA,\ndestino.DATA_ENTRADA=origem.DATA_ENTRADA,\ndestino.DATA_SAIDA=origem.DATA_SAIDA,\ndestino.DATA_FECHAMENTO=origem.DATA_FECHAMENTO,\ndestino.DATA_FATURAMENTO=origem.DATA_FATURAMENTO,\ndestino.DATA_ITEM=origem.DATA_ITEM,\ndestino.PROF_RESPONSAVEL=origem.PROF_RESPONSAVEL,\ndestino.PROF_EXECUTANTE=origem.PROF_EXECUTANTE,\ndestino.PROF_SOLICITANTE=origem.PROF_SOLICITANTE,\ndestino.CODIGO_PRODUTO_PRINCIPAL=origem.CODIGO_PRODUTO_PRINCIPAL,\ndestino.PRODUTO_PRINCIPAL=origem.PRODUTO_PRINCIPAL,\ndestino.CODIGO_ITEM=origem.CODIGO_ITEM,\ndestino.ITEM=origem.ITEM,\ndestino.QTD_ITEM=origem.QTD_ITEM,\ndestino.ID_PRODUTOS=origem.ID_PRODUTOS,\ndestino.GRUPO_PRODUTOS=origem.GRUPO_PRODUTOS,\ndestino.VALOR_ATENDIDO=origem.VALOR_ATENDIDO,\ndestino.VALOR_FATURADO=origem.VALOR_FATURADO,\ndestino.VALOR_NAO_FATURADO=origem.VALOR_NAO_FATURADO,\ndestino.VALOR_RECEBIDO=origem.VALOR_RECEBIDO,\ndestino.VALOR_ANALISE=origem.VALOR_ANALISE,\ndestino.VALOR_ACATADO=origem.VALOR_ACATADO,\ndestino.VALOR_REAPRESENTADO=origem.VALOR_REAPRESENTADO,\ndestino.VALOR_RECEBIDO_REAP=origem.VALOR_RECEBIDO_REAP,\ndestino.VALOR_ACATADO_REAP=origem.VALOR_ACATADO_REAP,\ndestino.VALOR_REAPRESENTADO_REAP=origem.VALOR_REAPRESENTADO_REAP,\ndestino.VALOR_ANALISE_REAP=origem.VALOR_ANALISE_REAP,\ndestino.VALOR_FECHAMENTO=origem.VALOR_FECHAMENTO\n\n\n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.PK_OTORRINOCENTER,\norigem.EMPRESA_ID,\norigem.CONVENIO_ID,\norigem.EMPRESA,\norigem.SETOR,\norigem.CONVENIO,\norigem.NOME,\norigem.GUIA,\norigem.GUIA_ID,\norigem.STATUS_GUIA,\norigem.ESPECIALIDADE,\norigem.DATA_ABERTURA,\norigem.DATA_ENTRADA,\norigem.DATA_SAIDA,\norigem.DATA_FECHAMENTO,\norigem.DATA_FATURAMENTO,\norigem.DATA_ITEM,\norigem.PROF_RESPONSAVEL,\norigem.PROF_EXECUTANTE,\norigem.PROF_SOLICITANTE,\norigem.CODIGO_PRODUTO_PRINCIPAL,\norigem.PRODUTO_PRINCIPAL,\norigem.CODIGO_ITEM,\norigem.ITEM,\norigem.QTD_ITEM,\norigem.ID_PRODUTOS,\norigem.GRUPO_PRODUTOS,\norigem.VALOR_ATENDIDO,\norigem.VALOR_FATURADO,\norigem.VALOR_NAO_FATURADO,\norigem.VALOR_RECEBIDO,\norigem.VALOR_ANALISE,\norigem.VALOR_ACATADO,\norigem.VALOR_REAPRESENTADO,\norigem.VALOR_RECEBIDO_REAP,\norigem.VALOR_ACATADO_REAP,\norigem.VALOR_REAPRESENTADO_REAP,\norigem.VALOR_ANALISE_REAP,\norigem.VALOR_FECHAMENTO\n\n); \n\n\n"
								}
							]
						}
					},
					{
						"name": "Lista Tabela",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino]",
								"storedProcedureParameters": {
									"COD_TABELA": {
										"type": "String",
										"value": null
									},
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"plataforma": {
										"type": "String",
										"value": "TECHSALLUS"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPAR TABELAS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista Tabela').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat(\n'select 20 AS ESTABELECIMENTO ,A.* from ', item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' A where ', item().nome_coluna_referencia,' >= ''',\nitem().Data_Inicio, ''' and  ', item().nome_coluna_referencia,' <= ''', item().Data_Fim, ''''\n)",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "TECHSALLUS_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"SCHEMA_NAME": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"TABLE_NAME": {
																"value": "@item().NOME_TABELA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DATA_HORA_INICIO_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "Starttime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA PARCIAL').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_PARCIAL",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('Starttime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_PARCIAL",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat(' select 20 AS ESTABELECIMENTO, A.* from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' A')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "TECHSALLUS_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"SCHEMA_NAME": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"TABLE_NAME": {
																"value": "@item().NOME_TABELA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('Starttime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('Starttime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA COMPLETA').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "DATA_HORA_INICIO_COMPLETA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "Starttime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "CARGA DW",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_TECHSALLUS_CARGA_DW]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LIMPAR TABELAS",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lista Tabela",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista Tabela').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Apagar Stg",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "@concat('TRUNCATE TABLE ',item().NOME_SCHEMA_DESTINO,'.',item().NOME_TABELA_DESTINO)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Apaga Pk NULL",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "MERGE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "DELETE FROM DW.OTORRINOCENTER WHERE PK_OTORRINOCENTER IS NULL"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Starttime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orientacao e Conversao Cirurgicas')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline utilizado para alimentar tabelas do SMC:\n\n",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Orientacoes Cirurgicas Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "-- ORIENTAÇÃO\n\nSELECT Z.DT_AGENDA, Z.CD_AGENDA, Z.CD_PESSOA_FISICA, Z.NM_PESSOA_FISICA,Z.IE_LADO,Z.AUTORIZACAO AS DS_AUTORIZACAO,Z.PROCEDIMENTO, Z.CNPJ, Z.DS_UNIDADE, Z.BASE, Z.NR_SEQ_PROC_INTERNO,\n\n(SELECT COUNT(*)\nFROM AGENDA_PACIENTE AB,\n     PESSOA_FISICA PF_1,\n     AGENDA AG_1\nWHERE AB.CD_PESSOA_FISICA = PF_1.CD_PESSOA_FISICA\nAND AB.CD_AGENDA = AG_1.CD_AGENDA\nAND AB.CD_AGENDA NOT IN (4442,4443,4444,4445,4513,4563,4553,5273,4464,4465,4466,4467,4552,3043,11)\nAND AB.CD_PESSOA_FISICA = Z.CD_PESSOA_FISICA\nAND AG_1.CD_TIPO_AGENDA = 1\nAND AB.DT_AGENDA > Z.DT_AGENDA) AS INDICADOR_CIRURGIA\n\nFROM\n\n(SELECT MAX(A.DT_AGENDA) AS DT_AGENDA, A.CD_AGENDA, A.CD_PESSOA_FISICA, PF.NM_PESSOA_FISICA, \nOBTER_VALOR_DOMINIO(1227,A.IE_AUTORIZACAO) AS AUTORIZACAO, \nOBTER_DESC_PROCEDIMENTO(A.CD_PROCEDIMENTO, A.IE_ORIGEM_PROCED) AS PROCEDIMENTO,\n\nA.IE_LADO,\nES.CD_CGC AS CNPJ,\nES.NM_FANTASIA_ESTAB AS DS_UNIDADE,\n'Tasy Delphi' as BASE,\nA.NR_SEQ_PROC_INTERNO\n\nFROM AGENDA_PACIENTE A,\n     PESSOA_FISICA PF,\n     AGENDA AG,\n     ESTABELECIMENTO ES,\n     EMPRESA EM\nWHERE A.CD_PESSOA_FISICA = PF.CD_PESSOA_FISICA\nAND A.CD_AGENDA = AG.CD_AGENDA\nAND AG.CD_ESTABELECIMENTO = ES.CD_ESTABELECIMENTO\nAND ES.CD_EMPRESA = ES.CD_EMPRESA\nAND A.CD_AGENDA IN (4442,4443,4444,4445,4513,4563,4553,5273,4464,4465,4466,4467,4552,3043,11)\nAND AG.CD_TIPO_AGENDA = 1\nGROUP BY A.CD_PESSOA_FISICA, PF.NM_PESSOA_FISICA,A.IE_LADO, OBTER_VALOR_DOMINIO(1227,A.IE_AUTORIZACAO), OBTER_DESC_PROCEDIMENTO(A.CD_PROCEDIMENTO, A.IE_ORIGEM_PROCED),\nES.CD_CGC, ES.NM_FANTASIA_ESTAB, A.CD_AGENDA, A.NR_SEQ_PROC_INTERNO\nORDER BY 1 desc) Z \nWHERE Z.DT_AGENDA BETWEEN SYSDATE - 365 AND SYSDATE + 365",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DT_AGENDA"
										},
										"sink": {
											"name": "DT_AGENDA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "CD_AGENDA"
										},
										"sink": {
											"name": "CD_AGENDA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NM_PESSOA_FISICA"
										},
										"sink": {
											"name": "NM_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_AUTORIZACAO"
										},
										"sink": {
											"name": "DS_AUTORIZACAO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_LADO"
										},
										"sink": {
											"name": "IE_LADO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PROCEDIMENTO"
										},
										"sink": {
											"name": "PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CNPJ"
										},
										"sink": {
											"name": "CNPJ",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_UNIDADE"
										},
										"sink": {
											"name": "DS_UNIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BASE"
										},
										"sink": {
											"name": "BASE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "INDICADOR_CIRURGIA"
										},
										"sink": {
											"name": "INDICADOR_CIRURGIA",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Orientacao_Cirurgia_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendamento Cirurgico Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "-- AGENDA CIRURGICA\n\nSELECT\nAB.DT_AGENDA, AB.CD_AGENDA,\nAB.CD_PESSOA_FISICA, \nPF_1.NM_PESSOA_FISICA, \nOBTER_VALOR_DOMINIO(1227,AB.IE_AUTORIZACAO) AS DS_AUTORIZACAO, \nOBTER_DESC_PROCEDIMENTO(AB.CD_PROCEDIMENTO, AB.IE_ORIGEM_PROCED) AS PROCEDIMENTO,\nAB.NR_CIRURGIA,\nAB.IE_LADO,\nAB.CD_CONVENIO,\nES.NM_FANTASIA_ESTAB AS DS_UNIDADE,\nES.CD_CGC AS CNPJ,\n'Tasy Delphi' as BASE,\nAB.NR_SEQ_PROC_INTERNO\nFROM AGENDA_PACIENTE AB,\n     PESSOA_FISICA PF_1,\n     AGENDA AG_1,\n     ESTABELECIMENTO ES,\n     EMPRESA EM\nWHERE AB.CD_PESSOA_FISICA = PF_1.CD_PESSOA_FISICA\nAND AB.CD_AGENDA = AG_1.CD_AGENDA\nAND AG_1.CD_ESTABELECIMENTO = ES.CD_ESTABELECIMENTO\nAND AB.DT_AGENDA BETWEEN SYSDATE - 365 AND SYSDATE + 365\nAND ES.CD_EMPRESA = EM.CD_EMPRESA\nAND AB.CD_AGENDA NOT IN (4442,4443,4444,4445,4513,4563,4553,5273,4464,4465,4466,4467,4552,3043,11)\nAND AG_1.CD_TIPO_AGENDA = 1\nORDER BY 1",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento_Cirurgia_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Orientacoes Cirurgicas HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "-- ORIENTAÇÃO\n\nSELECT Z.DT_AGENDA, Z.CD_AGENDA, Z.CD_PESSOA_FISICA, Z.NM_PESSOA_FISICA,Z.IE_LADO,Z.AUTORIZACAO AS DS_AUTORIZACAO,Z.PROCEDIMENTO, Z.CNPJ, Z.DS_UNIDADE, Z.BASE, Z.NR_SEQ_PROC_INTERNO,\n\n(SELECT COUNT(*)\nFROM AGENDA_PACIENTE AB,\n     PESSOA_FISICA PF_1,\n     AGENDA AG_1\nWHERE AB.CD_PESSOA_FISICA = PF_1.CD_PESSOA_FISICA\nAND AB.CD_AGENDA = AG_1.CD_AGENDA\nAND AB.CD_AGENDA NOT IN (549,802,659,776,665,607,663,666,664,662,660,661,609)\nAND AB.CD_PESSOA_FISICA = Z.CD_PESSOA_FISICA\nAND AG_1.CD_TIPO_AGENDA = 1\nAND AB.DT_AGENDA > Z.DT_AGENDA) AS INDICADOR_CIRURGIA\n\nFROM\n\n(SELECT MAX(A.DT_AGENDAMENTO) AS DT_AGENDA, A.CD_AGENDA, A.CD_PESSOA_FISICA, PF.NM_PESSOA_FISICA, \nOBTER_VALOR_DOMINIO(1227,A.IE_AUTORIZACAO) AS AUTORIZACAO, \nOBTER_DESC_PROCEDIMENTO(A.CD_PROCEDIMENTO, A.IE_ORIGEM_PROCED) AS PROCEDIMENTO,\nA.IE_LADO,\nES.CD_CGC AS CNPJ,\nES.NM_FANTASIA_ESTAB AS DS_UNIDADE,\n'Tasy HTML' as BASE,\nA.NR_SEQ_PROC_INTERNO\n\nFROM AGENDA_PACIENTE A,\n     PESSOA_FISICA PF,\n     AGENDA AG,\n     ESTABELECIMENTO ES,\n     EMPRESA EM\nWHERE A.CD_PESSOA_FISICA = PF.CD_PESSOA_FISICA\nAND A.CD_AGENDA = AG.CD_AGENDA\nAND AG.CD_ESTABELECIMENTO = ES.CD_ESTABELECIMENTO\nAND ES.CD_EMPRESA = ES.CD_EMPRESA\nAND A.CD_AGENDA IN (549,802,659,776,665,607,663,666,664,662,660,661,609)\nAND AG.CD_TIPO_AGENDA = 1\nGROUP BY A.CD_PESSOA_FISICA, PF.NM_PESSOA_FISICA,A.IE_LADO, OBTER_VALOR_DOMINIO(1227,A.IE_AUTORIZACAO), OBTER_DESC_PROCEDIMENTO(A.CD_PROCEDIMENTO, A.IE_ORIGEM_PROCED),\nES.CD_CGC, ES.NM_FANTASIA_ESTAB, A.CD_AGENDA, A.NR_SEQ_PROC_INTERNO\nORDER BY 1 desc) Z \nWHERE Z.DT_AGENDA BETWEEN SYSDATE - 365 AND SYSDATE + 365",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Orientacao_Cirurgia_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendamento Cirurgico HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "-- AGENDA CIRURGICA\n\nSELECT\nAB.DT_AGENDA, AB.CD_AGENDA,\nAB.CD_PESSOA_FISICA, \nPF_1.NM_PESSOA_FISICA, \nOBTER_VALOR_DOMINIO(1227,AB.IE_AUTORIZACAO) AS DS_AUTORIZACAO, \nOBTER_DESC_PROCEDIMENTO(AB.CD_PROCEDIMENTO, AB.IE_ORIGEM_PROCED) AS PROCEDIMENTO,\nAB.NR_CIRURGIA,\nAB.IE_LADO,\nAB.CD_CONVENIO,\nES.NM_FANTASIA_ESTAB AS DS_UNIDADE,\nES.CD_CGC AS CNPJ,\n'Tasy HTML' as BASE,\nAB.NR_SEQ_PROC_INTERNO\nFROM AGENDA_PACIENTE AB,\n     PESSOA_FISICA PF_1,\n     AGENDA AG_1,\n     ESTABELECIMENTO ES,\n     EMPRESA EM\nWHERE AB.CD_PESSOA_FISICA = PF_1.CD_PESSOA_FISICA\nAND AB.CD_AGENDA = AG_1.CD_AGENDA\nAND AG_1.CD_ESTABELECIMENTO = ES.CD_ESTABELECIMENTO\nAND AB.DT_AGENDA BETWEEN SYSDATE - 365 AND SYSDATE + 365\nAND ES.CD_EMPRESA = EM.CD_EMPRESA\nAND AB.CD_AGENDA NOT IN (549,802,659,776,665,607,663,666,664,662,660,661,609)\nAND AG_1.CD_TIPO_AGENDA = 1\nORDER BY 1",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento_Cirurgia_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Cirurgias"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-12T14:12:16Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pacientes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Carregamento das informações de pacientes de todas as unidades do sistema Tasy e Smart.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Clear Base",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Pacientes DH",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select pac_reg as CD_PESSOA_FISICA, \nrtrim(ltrim(pac_nome)) AS NM_PESSOA_FISICA, \npac_numcpf AS NR_CPF, \nconvert(char(10),pac_nasc,121) as DT_NASCIMENTO, \nPAC_CELULAR AS NR_TELEFONE_CELULAR,\npac_fone AS NR_TELEFONE, \n'13188370000227' AS CNPJ,\n'DAYHORC -  UNIDADE ITAIGARA' as DS_UNIDADE,\n'DH' as MARCA,\npac_reg as NR_PRONTUARIO,\npac_dreg as DT_CADASTRO_ORIGINAL,\npac_dult as DT_ATUALIZACAO,\nPAC_SEXO as IE_SEXO,\npac_cep as CD_CEP,\n'Smart DH Itaigara' as BASE\nfrom pac\ninner join usr on USR_LOGIN = PAC_USR_LOGIN_CAD",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NM_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "NM_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_TELEFONE_CELULAR",
											"type": "String"
										},
										"sink": {
											"name": "NR_TELEFONE_CELULAR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_TELEFONE",
											"type": "String"
										},
										"sink": {
											"name": "NR_TELEFONE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CNPJ",
											"type": "String"
										},
										"sink": {
											"name": "CNPJ",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_UNIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_UNIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_PRONTUARIO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_PRONTUARIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_CADASTRO_ORIGINAL",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_CADASTRO_ORIGINAL",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Pacientes_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Pacientes HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select pac_reg as CD_PESSOA_FISICA, \nrtrim(ltrim(pac_nome)) AS NM_PESSOA_FISICA, \npac_numcpf AS NR_CPF, \nconvert(char(10),pac_nasc,121) as DT_NASCIMENTO, \npac_celular AS NR_TELEFONE_CELULAR,\npac_fone AS NR_TELEFONE, \n'12305371000160' AS CNPJ,\n'HOSPITAL DE OLHOS SANTA LUZIA SS LTDA' as DS_UNIDADE,\n'HOSL' as MARCA,\npac_reg as NR_PRONTUARIO,\npac_dreg as DT_CADASTRO_ORIGINAL,\npac_dult as DT_ATUALIZACAO,\nPAC_SEXO as IE_SEXO,\npac_cep as CD_CEP,\n'Smart HOSL' as BASE\nfrom pac\ninner join usr on USR_LOGIN = PAC_USR_LOGIN_CAD",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Pacientes_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Pacientes INOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select pac_reg as CD_PESSOA_FISICA, \nrtrim(ltrim(pac_nome)) AS NM_PESSOA_FISICA, \npac_numcpf AS NR_CPF, \nconvert(char(10),pac_nasc,121) as DT_NASCIMENTO, \npac_celular AS NR_TELEFONE_CELULAR,\npac_fone AS NR_TELEFONE, \n'00363702000130' AS CNPJ,\n'INOB' as DS_UNIDADE,\n'INOB' as MARCA,\npac_reg as NR_PRONTUARIO,\npac_dreg as DT_CADASTRO_ORIGINAL,\npac_dult as DT_ATUALIZACAO,\nPAC_SEXO as IE_SEXO,\npac_cep as CD_CEP,\n'Smart INOB' as BASE\nfrom pac\ninner join usr on USR_LOGIN = PAC_USR_LOGIN_CAD",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Pacientes_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Pacientes IOF",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select pac_reg as CD_PESSOA_FISICA, \nrtrim(ltrim(pac_nome)) AS NM_PESSOA_FISICA, \npac_numcpf AS NR_CPF, \nconvert(char(10),pac_nasc,121) as DT_NASCIMENTO, \npac_celular AS NR_TELEFONE_CELULAR,\npac_fone AS NR_TELEFONE, \n'40514432000305' AS CNPJ,\n'INSTITUTO DE OLHOS FREITAS LF' as DS_UNIDADE,\n'INSTITUTO DE OLHOS FREITAS LF' as MARCA,\npac_reg as NR_PRONTUARIO,\npac_dreg as DT_CADASTRO_ORIGINAL,\npac_dult as DT_ATUALIZACAO,\nPAC_SEXO as IE_SEXO,\npac_cep as CD_CEP,\n'Smart IOF' as BASE\nfrom pac\ninner join usr on USR_LOGIN = PAC_USR_LOGIN_CAD",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Pacientes_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Pacientes Itabuna",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select pac_reg as CD_PESSOA_FISICA, \nrtrim(ltrim(pac_nome)) AS NM_PESSOA_FISICA, \npac_numcpf AS NR_CPF, \nconvert(char(10),pac_nasc,121) as DT_NASCIMENTO, \npac_celular AS NR_TELEFONE_CELULAR,\npac_fone AS NR_TELEFONE, \n'13188370000146' AS CNPJ,\n'DayHORC ITABUNA' as DS_UNIDADE,\n'DayHORC' as MARCA,\npac_reg as NR_PRONTUARIO,\npac_dreg as DT_CADASTRO_ORIGINAL,\npac_dult as DT_ATUALIZACAO,\nPAC_SEXO as IE_SEXO,\npac_cep as CD_CEP,\n'Smart DH Itabuna' as BASE\nfrom pac\ninner join usr on USR_LOGIN = PAC_USR_LOGIN_CAD",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Pacientes_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Pacientes Oftalmoclin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select pac_reg as CD_PESSOA_FISICA, \nrtrim(ltrim(pac_nome)) AS NM_PESSOA_FISICA, \npac_numcpf AS NR_CPF, \nconvert(char(10),pac_nasc,121) as DT_NASCIMENTO, \npac_celular AS NR_TELEFONE_CELULAR,\npac_fone AS NR_TELEFONE, \n'OFTALMOCLIN Hospital de Olhos da Bahia' AS CNPJ,\n'OFTALMOCLIN' as DS_UNIDADE,\n'OFTALMOCLIN' as MARCA,\npac_reg as NR_PRONTUARIO,\npac_dreg as DT_CADASTRO_ORIGINAL,\npac_dult as DT_ATUALIZACAO,\nPAC_SEXO as IE_SEXO,\npac_cep as CD_CEP,\n'Smart Oftalmoclin' as BASE\nfrom pac\ninner join usr on USR_LOGIN = PAC_USR_LOGIN_CAD",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Pacientes_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Paciente Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select pf.cd_pessoa_fisica,\n       pf.nm_pessoa_fisica,\n       pf.nr_cpf,\n       to_char((pf.dt_nascimento) , 'dd/mm/yyyy') as dt_nascimento,\n       pf.nr_ddd_celular||''||substr(replace(LTRIM(translate(pf.nr_telefone_celular, translate(pf.nr_telefone_celular, '1234567890', ' ') , ' ')),' ',''),1,100) as nr_telefone_celular,\n       obter_compl_pf(pf.cd_pessoa_fisica,1,'DDT')||''||obter_compl_pf(pf.cd_pessoa_fisica,1,'T') as nr_telefone,\n       obter_cnpj_estabelecimento(decode(pf.cd_estabelecimento,null,1,pf.cd_estabelecimento)) as CNPJ,\n       e.nm_fantasia_estab as DS_UNIDADE,\n       em.nm_razao_social as MARCA,\n       pf.nr_prontuario,\n       pf.dt_cadastro_original ,\n       pf.dt_atualizacao,\n       pf.ie_sexo,\n       obter_compl_pf(pf.cd_pessoa_fisica, 1, 'CEP') as cd_cep,\n'Tasy Delphi' as BASE\nfrom pessoa_fisica pf,\n     estabelecimento e,\n     empresa em\nwhere decode(pf.cd_estabelecimento,null,1,pf.cd_estabelecimento) = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Pacientes",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Paciente HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select pf.cd_pessoa_fisica,\n       pf.nm_pessoa_fisica,\n       pf.nr_cpf,\n       to_char((pf.dt_nascimento) , 'dd/mm/yyyy') as dt_nascimento,\n       pf.nr_ddd_celular||''||substr(replace(LTRIM(translate(pf.nr_telefone_celular, translate(pf.nr_telefone_celular, '1234567890', ' ') , ' ')),' ',''),1,100) as nr_telefone_celular,\n       obter_compl_pf(pf.cd_pessoa_fisica,1,'DDT')||''||obter_compl_pf(pf.cd_pessoa_fisica,1,'T') as nr_telefone,\n       obter_cnpj_estabelecimento(decode(pf.cd_estabelecimento,null,1,pf.cd_estabelecimento)) as CNPJ,\n       e.nm_fantasia_estab as DS_UNIDADE,\n       em.nm_razao_social as MARCA,\n       pf.nr_prontuario,\n       pf.dt_cadastro_original ,\n       pf.dt_atualizacao,\n       pf.ie_sexo,\n       obter_compl_pf(pf.cd_pessoa_fisica, 1, 'CEP') as cd_cep,\n'Tasy HTML' as BASE\nfrom pessoa_fisica pf,\n     estabelecimento e,\n     empresa em\nwhere decode(pf.cd_estabelecimento,null,1,pf.cd_estabelecimento) = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Pacientes",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Clear Base",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[CLEARBASEPACIENTES]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Clientes"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipeline Principal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipelines desenvolvidos em conjunto com a empresa Class para a extração das informações de produção. Atualmente desativado.",
				"activities": [
					{
						"name": "Sadalla_Tasy_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\n\n'Tasy Sadalla' as BASE,\n--x.nr_seq_proc_pacote,\n7 as cd_marca,\n'Hospital de Olhos Sadalla Amin Ghanem' as marca,\n17 as cd_estabelecimento,\nc.nr_atendimento,\n'7'||'17'||c.nr_atendimento as nr_registro_unico,\nx.dt_atualizacao,\nat.dt_entrada,\nc.nr_interno_conta,\nnull as ds_estabelecimento,\npf.cd_pessoa_fisica,\n\npf.dt_nascimento,\npf.nr_cpf,\npf.ie_sexo,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CEP') as nr_cep,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CI') as ds_cidade,\n--pf.cd_pessoa_fisica as cd_pessoa_fisica,\nobter_nome_pf(at.cd_pessoa_fisica) as ds_pessoa_fisica,\nc.cd_convenio_parametro as cd_convenio,\nobter_nome_convenio(c.cd_convenio_parametro) as ds_convenio,\nx.cd_medico_executor,\nobter_nome_pf(x.cd_medico_executor) as ds_medico_executor,\nx.cd_medico_req as cd_medico_requisitante,\nobter_nome_pf(x.cd_medico_req) as ds_medico_requisitante,\nx.ie_origem_proced,\nx.cd_procedimento,\nx.ds_procedimento as ds_procedimento,\nx.classif as ds_classificacao,\n\n(select r.ds_grupo_receita from grupo_receita r where r.nr_sequencia = x.nr_seq_grupo_rec) as ds_classif_procedimento,\n\ncase\nwhen (select r.nr_sequencia from grupo_receita r where r.nr_sequencia = x.nr_seq_grupo_rec) = 12 then x.cd_procedimento\nelse\n\n(select z.cd_procedimento as valor \n from procedimento_paciente z \n where z.nr_atendimento = c.nr_atendimento \n and z.nr_interno_conta = c.nr_interno_conta \n --and z.vl_medico = (select max(w.vl_medico) \n and z.nr_sequencia = (select min(w.nr_sequencia)\n                          from procedimento_paciente w \n                          where w.nr_atendimento = z.nr_atendimento \n                          and w.nr_interno_conta = z.nr_interno_conta\n                          and w.cd_motivo_exc_conta is null\n                          ) \n group by z.cd_procedimento) end cd_proced_principal,\n\ncase\nwhen (select r.nr_sequencia from grupo_receita r where r.nr_sequencia = x.nr_seq_grupo_rec) = 12 then obter_desc_procedimento(x.cd_procedimento, x.ie_origem_proced)\nelse\n\nobter_desc_procedimento(\n\n(select z.cd_procedimento as valor \n   from procedimento_paciente z \n   where z.nr_atendimento = c.nr_atendimento \n   and z.nr_interno_conta = c.nr_interno_conta \n   --and z.vl_medico = (select max(w.vl_medico) \n    and z.nr_sequencia = (select min(w.nr_sequencia)\n                            from procedimento_paciente w \n                            where w.nr_atendimento = z.nr_atendimento \n                            and w.nr_interno_conta = z.nr_interno_conta\n                            and w.cd_motivo_exc_conta is null\n                            ) \n                            group by z.cd_procedimento),\n\n(select min(z.ie_origem_proced) as ie_origem_proced \n   from procedimento_paciente z \n   where z.nr_atendimento = c.nr_atendimento \n   and z.nr_interno_conta = c.nr_interno_conta \n   --and z.vl_medico = (select max(w.vl_medico) \n    and z.nr_sequencia = (select min(w.nr_sequencia)\n                         from procedimento_paciente w \n                         where w.nr_atendimento = z.nr_atendimento \n                         and w.nr_interno_conta = z.nr_interno_conta\n                         and w.cd_motivo_exc_conta is null\n                         ) \n group by z.ie_origem_proced)\n\n)end ds_proced_principal,\n\nx.qt_procedimento,\nc.vl_conta,\nx.vl_procedimento,\nc.ie_status_acerto,\ndecode(c.ie_status_acerto, 1,'Provisorio' , 2 ,'Definitivo') as status_conta,\nx.tuss as cd_tuss,\n(select x.ds_estrutura from  mat_estrutura x, mat_estrutura_cadastro y where x.nr_sequencia = y.nr_seq_estrutura and y.cd_material = x.cd_procedimento) as ds_classif_lio\nfrom atendimento_paciente at,\nconta_paciente c,\npessoa_fisica pf,\n\n(select p.nr_interno_conta, \np.cd_procedimento, \nobter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced) as ds_procedimento, \nobter_valor_dominio(19,pr.ie_classificacao) as classif,\np.cd_medico_executor,\np.cd_medico_req,\np.ie_origem_proced,\np.qt_procedimento,\np.vl_procedimento,\np.vl_medico,\np.nr_sequencia,\np.cd_edicao_amb,\np.cd_convenio,\np.nr_atendimento,\np.cd_motivo_exc_conta,\np.nr_seq_proc_crit_repasse,\nobter_codigo_tuss(p.nr_seq_proc_interno) as tuss,\np.dt_atualizacao,\npr.nr_seq_grupo_rec\nfrom procedimento_paciente p,\n     procedimento pr\nwhere p.cd_procedimento = pr.cd_procedimento\nand p.ie_origem_proced = pr.ie_origem_proced\n\nunion all\nselect mp.nr_interno_conta, \nmp.cd_material as cd_procedimento, \nm.ds_material as ds_procedimento,\nobter_dados_material(m.cd_material,'GRU') as classif,\nobter_medico_resp_atend(mp.nr_atendimento,'C') as cd_medico_executor,\nobter_medico_resp_atend(mp.nr_atendimento,'C') as cd_medico_req,\n0 as ie_origem_proced,\nmp.qt_material,\nmp.vl_material,\n0 vl_medico,\nmp.nr_sequencia,\n'0' as cd_edicao_amb,\nmp.cd_convenio,\nmp.nr_atendimento,\nmp.cd_motivo_exc_conta,\n0 nr_seq_proc_crit_repasse,\n0 tuss,\nmp.dt_atualizacao,\n0 nr_seq_grupo_rec\nfrom material_atend_paciente mp,\n     material m\nwhere mp.cd_material = m.cd_material) x\n\nwhere at.nr_atendimento = c.nr_atendimento\nand c.nr_interno_conta = x.nr_interno_conta\nand at.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand c.ie_cancelamento is null\nand x.cd_motivo_exc_conta is null\nand c.cd_estabelecimento = 1\nand at.dt_entrada BETWEEN sysdate -2 and sysdate\nand c.vl_conta > 0\ngroup by \nc.nr_atendimento,\nat.dt_entrada,\nc.nr_interno_conta,\nc.cd_estabelecimento,\nat.cd_pessoa_fisica,\nc.cd_convenio_parametro,\nc.vl_conta,\nx.nr_sequencia,\nx.vl_medico,\nx.vl_procedimento,\nx.ie_origem_proced,\nx.cd_procedimento,\nx.ds_procedimento,\nx.qt_procedimento,\nx.cd_edicao_amb,\nx.cd_medico_executor,\nc.ie_status_acerto,\nx.nr_atendimento,\nx.cd_convenio,\nat.ie_tipo_atendimento,\nx.nr_interno_conta,\npf.dt_nascimento,\npf.nr_cpf,\nx.cd_medico_req,\npf.ie_sexo,\npf.cd_pessoa_fisica,\nx.classif,\nx.tuss,\nx.nr_seq_grupo_rec,\nx.dt_atualizacao,\nat.nr_atendimento\n\norder by 5,3 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Processa Itens",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Sadalla_Tasy_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SMART_ITAIGARA_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SMART_INOB_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SMART_HOSL_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SMART_ITABUNA_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ProcessTempItems]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Tabela Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processa Itens",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from TEMPTASY\nWhere Processed = 'Sim'",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MARCA",
											"type": "String"
										},
										"sink": {
											"name": "DS_MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "Int64"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										},
										"sink": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MEDICO_EXECUTOR_PARCEIRO",
											"type": "String"
										},
										"sink": {
											"name": "MEDICO_EXECUTOR_PARCEIRO",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlProcedimentosTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Temp Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Tabela Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[TRUNCATETEMPTABLE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SMART_ITAIGARA_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        'Smart DayHorc Itaigara' as BASE\n        ,3 as CD_MARCA\n        ,'DAYHORC' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 7\n            when '9' then 7\n            when '13' then 7\n            when 'SCL' then 7\n            when '901' then 7\n            when 'IOF' then 7\n            when '13' then 8\n            when 'DHI' then 9\n        end as CD_ESTABELECIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 'HBA'\n            when '9' then 'HBA'\n            when '13' then 'HBA'\n            when 'SCL' then 'HBA'\n            when '901' then 'HBA'\n            when 'IOF' then 'HBA'\n            when '13' then 'Itaigara'\n            when 'DHI' then 'Itabuna'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,'') as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,'' as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and osm_dthr >= '2019-02-26'\n        and osm_dthr <= '2019-02-26 23:59:000'\n)\n\nselect \n    CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\n    -- ,smm_rci_serie\n    -- ,smm_rci_num\n    -- ,smm_p_osm_serie\n    -- ,smm_p_osm_num\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "String"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SMART_INOB_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        'Smart INOB' as BASE\n        ,3 as CD_MARCA\n        ,'DAYHORC' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 7\n            when '9' then 7\n            when '13' then 7\n            when 'SCL' then 7\n            when '901' then 7\n            when 'IOF' then 7\n            when '13' then 8\n            when 'DHI' then 9\n        end as CD_ESTABELECIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 'HBA'\n            when '9' then 'HBA'\n            when '13' then 'HBA'\n            when 'SCL' then 'HBA'\n            when '901' then 'HBA'\n            when 'IOF' then 'HBA'\n            when '13' then 'Itaigara'\n            when 'DHI' then 'Itabuna'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,'') as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,'' as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and osm_dthr >= '2019-02-26'\n        and osm_dthr <= '2019-02-26 23:59:000'\n)\n\nselect \n    CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\n    -- ,smm_rci_serie\n    -- ,smm_rci_num\n    -- ,smm_p_osm_serie\n    -- ,smm_p_osm_num\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "String"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_INOB_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SMART_HOSL_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        'Smart HOSL' as BASE\n        ,3 as CD_MARCA\n        ,'DAYHORC' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 7\n            when '9' then 7\n            when '13' then 7\n            when 'SCL' then 7\n            when '901' then 7\n            when 'IOF' then 7\n            when '13' then 8\n            when 'DHI' then 9\n        end as CD_ESTABELECIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 'HBA'\n            when '9' then 'HBA'\n            when '13' then 'HBA'\n            when 'SCL' then 'HBA'\n            when '901' then 'HBA'\n            when 'IOF' then 'HBA'\n            when '13' then 'Itaigara'\n            when 'DHI' then 'Itabuna'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,'') as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,'' as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and osm_dthr >= '2019-02-26'\n        and osm_dthr <= '2019-02-26 23:59:000'\n)\n\nselect \n    CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\n    -- ,smm_rci_serie\n    -- ,smm_rci_num\n    -- ,smm_p_osm_serie\n    -- ,smm_p_osm_num\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "String"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SMART_ITABUNA_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        'Smart DayHorc Itabuna' as BASE\n        ,3 as CD_MARCA\n        ,'DAYHORC' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 7\n            when '9' then 7\n            when '13' then 7\n            when 'SCL' then 7\n            when '901' then 7\n            when 'IOF' then 7\n            when '13' then 8\n            when 'DHI' then 9\n        end as CD_ESTABELECIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 'HBA'\n            when '9' then 'HBA'\n            when '13' then 'HBA'\n            when 'SCL' then 'HBA'\n            when '901' then 'HBA'\n            when 'IOF' then 'HBA'\n            when '13' then 'Itaigara'\n            when 'DHI' then 'Itabuna'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,'') as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,'' as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and osm_dthr >= '2019-02-26'\n        and osm_dthr <= '2019-02-26 23:59:000'\n)\n\nselect \n    CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\n    -- ,smm_rci_serie\n    -- ,smm_rci_num\n    -- ,smm_p_osm_serie\n    -- ,smm_p_osm_num\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "String"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Producao Medica/Produção"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Posicao Estoque Tasy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lista Query",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[SP_ADF_SEARCH_STORAGE_QUERY_SYS]",
								"storedProcedureParameters": {
									"nm_plataforma": {
										"type": "String",
										"value": "TASY"
									},
									"nm_query": {
										"type": "String",
										"value": "SUPRIMENTOS_MOVIMENTO_ESTOQUE"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "QUERY_DINAMICO",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "EXTRACAO DADOS ORIGEM",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPA TABELA DESTINO",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "PERIODO INICIAL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "PERIODO FINAL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista Query').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CARGA TASY",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@concat(item().DS_SQL,' WHERE A.DT_MOVIMENTO_ESTOQUE BETWEEN ','''',variables('DT_INICIO'),'''',' AND ','''',variables('DT_FINAL'),'''')",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ORACLE_LOG",
											"type": "DatasetReference",
											"parameters": {
												"nm_keyvault": {
													"value": "@item().NOME_KEYVAULT_SECRET",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": "stg",
												"Tabela_Destino": {
													"value": "@replace(item().NOME_TABELA_DESTINO,'stg.','')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "LIMPA TABELA DESTINO",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Lista Query",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "TRUNCATE TABLE stg.movimento_estoque_tasy",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "PERIODO INICIAL",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DT_INICIO",
							"value": "01/01/2023"
						}
					},
					{
						"name": "PERIODO FINAL",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DT_FINAL",
							"value": "01/02/2023"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"DT_INICIO": {
						"type": "String"
					},
					"DT_FINAL": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/Suprimentos"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Posicao Estoque')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DT_INICIO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup Periodo Inicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DT_INICIO",
							"value": {
								"value": "@activity('Lookup Periodo Inicial').output.firstRow.Data_Inicial",
								"type": "Expression"
							}
						}
					},
					{
						"name": "DT_FIM",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup Periodo Inicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DT_FIM",
							"value": {
								"value": "@activity('Lookup Periodo Inicial').output.firstRow.data_final",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LIMPA STAGE SMART",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "truncate table stg.posicao_estoque_smart",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "LIMPA STAGE TASY",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "truncate table stg.posicao_estoque_tasy",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Lookup Periodo Inicial",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LIMPA STAGE SMART",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LIMPA STAGE TASY",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "declare @qtde_dias integer\n\nset @qtde_dias = 8\n\n\nSELECT\n\tCASE \n\t\tWHEN day(getdate()) <= @qtde_dias THEN\n\t\t\tconcat(substring(convert(varchar(30),DATEADD(MONTH,-1,getdate()),120),1,8),'01')\n\t\tWHEN day(getdate()) > @qtde_dias THEN\n\t\t\tSubstring(convert(varchar(30),dateadd(day,1,EOMONTH(getdate(),-1))),1,10)\n\tEND as Data_Inicial,\n\n\t\tsubstring(convert(varchar(30),DATEADD(day,-1,getdate()),120),1,10) as 'data_final' ,\n\n\n\tCASE\n\t\tWHEN day(getdate()) <= @qtde_dias THEN\n\t\t\tconcat('01' ,'/',\n\t\t\tsubstring(convert(varchar(20),DATEADD(MONTH,-1,getdate()),120),6,2),'/',\n\t\t\tsubstring(convert(varchar(20),DATEADD(MONTH,-1,getdate())),8,4))\n\n\t\tWHEN day(getdate()) > @qtde_dias THEN\n\t\t\tSubstring(convert(varchar(30),dateadd(day,1,EOMONTH(getdate(),-1)),103),1,10)\n\tEND as Data_Inicial_Oracle,\n        substring(convert(varchar(30),DATEADD(day,-1,getdate()),103),1,10) as 'data_final_Oracle'\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_DIN",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Posicao Estoque Tasy HTML",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DT_INICIO",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DT_FIM",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@concat(\n    'SELECT ',\n    '''1''', ' as ESTABELECIMENTO\n    ,TO_CHAR(SE.DT_MESANO_REFERENCIA,''YYYY-MM-DD'') AS DT_MESANO_REFERENCIA\n    ,SE.CD_ESTABELECIMENTO\t  \n    ,ESTB.NM_FANTASIA_ESTAB                        AS DS_ESTABELECIMENTO\n    ,SE.CD_LOCAL_ESTOQUE\n    ,LE.DS_LOCAL_ESTOQUE\n    ,SE.CD_MATERIAL\n    ,MAT.DS_MATERIAL                            AS DS_MATERIAL\n    ,MAT_G.CD_GRUPO_MATERIAL\n    ,MAT_G.DS_GRUPO_MATERIAL\n    ,MAT_C.CD_CLASSE_MATERIAL\n    ,MAT_C.DS_CLASSE_MATERIAL\n    ,SUM(SE.QT_ESTOQUE)                          AS QT_ESTOQUE\n    ,SUM(SE.QT_ESTOQUE * SE.VL_CUSTO_MEDIO)      AS VL_ESTOQUE\n    ,SE.VL_CUSTO_MEDIO\n    ,SE.VL_PRECO_ULT_COMPRA\n    ,TO_CHAR(SE.dt_ult_compra, ', '''YYYY-MM-DD''', ') dt_ult_compra\nFROM FAST_OPS.SALDO_ESTOQUE SE\nINNER JOIN FAST_OPS.LOCAL_ESTOQUE LE                                 ON LE.CD_LOCAL_ESTOQUE = SE.CD_LOCAL_ESTOQUE\nLEFT JOIN  FAST_OPS.ESTABELECIMENTO ESTB                              ON ESTB.CD_ESTABELECIMENTO = SE.CD_ESTABELECIMENTO\nINNER JOIN FAST_OPS.MATERIAL MAT                                     ON MAT.CD_MATERIAL = SE.CD_MATERIAL\nLEFT JOIN  FAST_OPS.CLASSE_MATERIAL  MAT_C                            ON MAT_C.CD_CLASSE_MATERIAL = MAT.CD_CLASSE_MATERIAL\nLEFT JOIN  FAST_OPS.SUBGRUPO_MATERIAL MAT_S                           ON MAT_S.CD_SUBGRUPO_MATERIAL = MAT_C.CD_SUBGRUPO_MATERIAL\nLEFT JOIN  FAST_OPS.GRUPO_MATERIAL    MAT_G                           ON MAT_G.CD_GRUPO_MATERIAL = MAT_S.CD_GRUPO_MATERIAL\n\nWHERE TO_CHAR(SE.DT_MESANO_REFERENCIA,', '''YYYY-MM-DD''', ') BETWEEN ','''', variables('DT_INICIO'), '''', ' AND ', '''', variables('DT_FIM'), '''',\n\n'GROUP BY\n    TO_CHAR(SE.DT_MESANO_REFERENCIA, ', '''YYYY-MM-DD''', ')\n    ,SE.CD_ESTABELECIMENTO\t\n    ,ESTB.NM_FANTASIA_ESTAB\n    ,SE.CD_LOCAL_ESTOQUE\n    ,LE.DS_LOCAL_ESTOQUE\n    ,SE.CD_MATERIAL\n    ,MAT.DS_MATERIAL\n    ,MAT_G.CD_GRUPO_MATERIAL\n    ,MAT_G.DS_GRUPO_MATERIAL\n    ,MAT_C.CD_CLASSE_MATERIAL\n    ,MAT_C.DS_CLASSE_MATERIAL    \n    ,SE.VL_CUSTO_MEDIO\n    ,SE.VL_PRECO_ULT_COMPRA\n    ,TO_CHAR(SE.dt_ult_compra, ', '''YYYY-MM-DD''', ' ) '\n    )",
									"type": "Expression"
								},
								"partitionOption": "None",
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_DINAMICO",
								"type": "DatasetReference",
								"parameters": {
									"schema_destino": "stg",
									"tabela_destino": "posicao_estoque_tasy"
								}
							}
						]
					},
					{
						"name": "Posicao Estoque Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Posicao Estoque Tasy HTML",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@concat(\n'SELECT\t',\n    '''2''' ,' as ESTABELECIMENTO\t\n    ,TO_CHAR(SE.DT_MESANO_REFERENCIA,','''YYYY-MM-DD''', ') AS DT_MESANO_REFERENCIA\t\n    ,SE.CD_ESTABELECIMENTO\t  \n    ,ESTB.NM_FANTASIA_ESTAB                        AS DS_ESTABELECIMENTO\t\n    ,SE.CD_LOCAL_ESTOQUE\t\n    ,LE.DS_LOCAL_ESTOQUE\t\n    ,SE.CD_MATERIAL\t\n    ,MAT.DS_MATERIAL                            AS DS_MATERIAL\t\n    ,MAT_G.CD_GRUPO_MATERIAL\t\n    ,MAT_G.DS_GRUPO_MATERIAL\t\n    ,MAT_C.CD_CLASSE_MATERIAL\t\n    ,MAT_C.DS_CLASSE_MATERIAL\t\n    ,SUM(SE.QT_ESTOQUE)                          AS QT_ESTOQUE\t\n    ,SUM(SE.QT_ESTOQUE * SE.VL_CUSTO_MEDIO)      AS VL_ESTOQUE\t\n    ,SE.VL_CUSTO_MEDIO\t\n    ,SE.VL_PRECO_ULT_COMPRA\t\n    ,TO_CHAR(SE.dt_ult_compra,', '''YYYY-MM-DD''',') dt_ult_compra\t\nFROM SALDO_ESTOQUE SE\t\nINNER JOIN LOCAL_ESTOQUE LE                                 ON LE.CD_LOCAL_ESTOQUE = SE.CD_LOCAL_ESTOQUE\t\nLEFT JOIN  ESTABELECIMENTO ESTB                              ON ESTB.CD_ESTABELECIMENTO = SE.CD_ESTABELECIMENTO\t\nINNER JOIN MATERIAL MAT                                     ON MAT.CD_MATERIAL = SE.CD_MATERIAL\t\nLEFT JOIN  CLASSE_MATERIAL  MAT_C                            ON MAT_C.CD_CLASSE_MATERIAL = MAT.CD_CLASSE_MATERIAL\t\nLEFT JOIN  SUBGRUPO_MATERIAL MAT_S                           ON MAT_S.CD_SUBGRUPO_MATERIAL = MAT_C.CD_SUBGRUPO_MATERIAL\t\nLEFT JOIN  GRUPO_MATERIAL    MAT_G                           ON MAT_G.CD_GRUPO_MATERIAL = MAT_S.CD_GRUPO_MATERIAL\t\n\t\nWHERE TO_CHAR(SE.DT_MESANO_REFERENCIA,','''YYYY-MM-DD''', ') BETWEEN ' ,'''', variables('DT_INICIO'), '''',' AND ', '''', variables('DT_FIM'), '''',\n\n' GROUP BY\t\n    TO_CHAR(SE.DT_MESANO_REFERENCIA,','''YYYY-MM-DD''',')\t\n    ,SE.CD_ESTABELECIMENTO\t\n    ,ESTB.NM_FANTASIA_ESTAB\t\n    ,SE.CD_LOCAL_ESTOQUE\t\n    ,LE.DS_LOCAL_ESTOQUE\t\n    ,SE.CD_MATERIAL\t\n    ,MAT.DS_MATERIAL\t\n    ,MAT_G.CD_GRUPO_MATERIAL\t\n    ,MAT_G.DS_GRUPO_MATERIAL\t\n    ,MAT_C.CD_CLASSE_MATERIAL\t\n    ,MAT_C.DS_CLASSE_MATERIAL    \t\n    ,SE.VL_CUSTO_MEDIO\t\n    ,SE.VL_PRECO_ULT_COMPRA\t\n    ,TO_CHAR(SE.dt_ult_compra,','''YYYY-MM-DD''',')'\t\n\n)",
									"type": "Expression"
								},
								"partitionOption": "None",
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_DINAMICO",
								"type": "DatasetReference",
								"parameters": {
									"schema_destino": "stg",
									"tabela_destino": "posicao_estoque_tasy"
								}
							}
						]
					},
					{
						"name": "DELETE MOVIMENTO",
						"description": "Apaga o movimento com base na faixa de data definida no início do processo",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Posicao Estoque Sadalla",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "DELETE  DM.TBL_POSICAO_ESTOQUE \nFROM DM.TBL_POSICAO_ESTOQUE\nINNER JOIN \n(\nSELECT distinct ESTABELECIMENTO, DT_MESANO_REFERENCIA  from stg.posicao_estoque_tasy  with(nolock) \nUNION\nSELECT DISTINCT id_sys as 'ESTABELECIMENTO', concat(MES_REF,'-01') as DT_MESANO_REFERENCIA  from stg.posicao_estoque_smart with(nolock)\n) AS STG ON \n\tCONVERT(varchar(10),DM.TBL_POSICAO_ESTOQUE.ESTABELECIMENTO) = CONVERT(varchar(10),STG.ESTABELECIMENTO) AND \n\tCONVERT(varchar(20),DM.TBL_POSICAO_ESTOQUE.DT_MESANO_REFERENCIA) = CONVERT(varchar(20),STG.DT_MESANO_REFERENCIA)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "INSERT",
						"description": "Insere o movimento com base na faixa de data definida no início do processo",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DELETE MOVIMENTO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "WITH REF AS(\n\nSELECT \nCAST(ESTABELECIMENTO AS VARCHAR(5)) ESTABELECIMENTO\n,CAST(DT_MESANO_REFERENCIA AS DATE) DT_MESANO_REFERENCIA\n,CAST(DT_ULT_COMPRA AS DATE)DT_ULT_COMPRA\n,CAST(ESTABELECIMENTO AS VARCHAR(5)) + '|' + cast(CD_ESTABELECIMENTO as varchar(50)) AS FK_CD_ESTABELECIMENTO\n,CAST(ESTABELECIMENTO AS VARCHAR(5)) + '|' + CAST(CD_LOCAL_ESTOQUE AS VARCHAR(50)) AS FK_CD_LOCAL_ESTOQUE\n,CAST(ESTABELECIMENTO AS VARCHAR(5)) + '|' + CAST(CD_MATERIAL AS VARCHAR(50)) FK_CD_MATERIAL\n,CAST(ESTABELECIMENTO AS VARCHAR(5)) + '|' + CAST(CD_GRUPO_MATERIAL AS VARCHAR(50)) FK_CD_GRUPO_MATERIAL\n,CAST(ESTABELECIMENTO AS VARCHAR(5)) + '|' + CAST(CD_CLASSE_MATERIAL AS VARCHAR(50))FK_CD_CLASSE_MATERIAL\n,CAST(QT_ESTOQUE AS INT) QT_ESTOQUE\n,CAST(VL_ESTOQUE AS MONEY) VL_ESTOQUE\n,CAST(VL_CUSTO_MEDIO AS MONEY) VL_CUSTO_MEDIO \n,CAST(VL_PRECO_ULT_COMPRA AS MONEY) VL_PRECO_ULT_COMPRA\nFROM STG.POSICAO_ESTOQUE_TASY WITH(NOLOCK)\n\nUNION ALL\n\nSELECT \nCAST(ID_SYS AS VARCHAR(5)) AS ESTABELECIMENTO\n,CAST(MES_REF + '-01' AS DATE) AS DT_MESANO_REFERENCIA\n,NULL AS DT_ULT_COMPRA\n,CAST(ID_SYS AS VARCHAR(5)) + '|' + CAST(CD_ESTABELECIMENTO AS VARCHAR(50)) AS FK_CD_ESTABELECIMENTO\n,CAST(ID_SYS AS VARCHAR(5)) + '|' + CAST(CD_LOCAL_ESTOQUE AS VARCHAR(50)) AS FK_CD_LOCAL_ESTOQUE\n,CAST(ID_SYS AS VARCHAR(5)) + '|' + CAST(CD_MATERIAL AS VARCHAR(50)) AS FK_CD_MATERIAL\n,CAST(ID_SYS AS VARCHAR(5)) + '|' + CAST(CD_GRUPO_MATERIAL AS VARCHAR(50)) AS FK_CD_GRUPO_MATERIAL\n,CAST(ID_SYS AS VARCHAR(5)) + '|' + CAST(CD_CLASSE_MATERIAL AS VARCHAR(50)) AS FK_CD_CLASSE_MATERIAL\n,CAST(QT_ESTOQUE AS INT) AS QT_ESTOQUE\n,CAST(VL_TOTAL AS MONEY) AS VL_ESTOQUE\n,CAST(VL_MED_UNIT AS MONEY) AS VL_CUSTO_MEDIO\n,NULL AS VL_PRECO_ULT_COMPRA\nFROM STG.POSICAO_ESTOQUE_SMART )\n\nINSERT INTO  DM.TBL_POSICAO_ESTOQUE\nSELECT *  FROM REF",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Lookup Periodo",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Lookup Periodo Inicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "declare @qtde_dias integer\nset @qtde_dias = 8\n\nSelect \n\nconcat(SUBSTRING(data_Inicial,1,7),'-01') as Mes_Ano\n\nfrom \n\n(\nSELECT\n\tCASE \n\t\tWHEN day(getdate()) <= @qtde_dias THEN\n\t\t\tconcat(substring(convert(varchar(30),DATEADD(MONTH,-1,getdate()),120),1,8),'01')\n\t\tWHEN day(getdate()) > @qtde_dias THEN\n\t\t\tSubstring(convert(varchar(30),dateadd(day,1,EOMONTH(getdate(),-1))),1,10)\n\tEND as Data_Inicial,\n\n\t\tsubstring(convert(varchar(30),DATEADD(day,-1,getdate()),120),1,10) as 'data_final' ,\n\n\n\tCASE\n\t\tWHEN day(getdate()) <= @qtde_dias THEN\n\t\t\tconcat('01' ,'/',\n\t\t\tsubstring(convert(varchar(20),DATEADD(MONTH,-1,getdate()),120),6,2),'/',\n\t\t\tsubstring(convert(varchar(20),DATEADD(MONTH,-1,getdate())),8,4))\n\n\t\tWHEN day(getdate()) > @qtde_dias THEN\n\t\t\tSubstring(convert(varchar(30),dateadd(day,1,EOMONTH(getdate(),-1)),103),1,10)\n\tEND as Data_Inicial_Oracle,\n        substring(convert(varchar(30),DATEADD(day,-1,getdate()),103),1,10) as 'data_final_Oracle'\n) as DT_INI \n\nUNION\n\n\nSelect \n\nconcat(SUBSTRING(data_Final,1,7),'-01')  as Mes_Ano\nfrom \n\n(\nSELECT\n\tCASE \n\t\tWHEN day(getdate()) <= @qtde_dias THEN\n\t\t\tconcat(substring(convert(varchar(30),DATEADD(MONTH,-1,getdate()),120),1,8),'01')\n\t\tWHEN day(getdate()) > @qtde_dias THEN\n\t\t\tSubstring(convert(varchar(30),dateadd(day,1,EOMONTH(getdate(),-1))),1,10)\n\tEND as Data_Inicial,\n\n\t\tsubstring(convert(varchar(30),DATEADD(day,-1,getdate()),120),1,10) as 'data_final' ,\n\n\n\tCASE\n\t\tWHEN day(getdate()) <= @qtde_dias THEN\n\t\t\tconcat('01' ,'/',\n\t\t\tsubstring(convert(varchar(20),DATEADD(MONTH,-1,getdate()),120),6,2),'/',\n\t\t\tsubstring(convert(varchar(20),DATEADD(MONTH,-1,getdate())),8,4))\n\n\t\tWHEN day(getdate()) > @qtde_dias THEN\n\t\t\tSubstring(convert(varchar(30),dateadd(day,1,EOMONTH(getdate(),-1)),103),1,10)\n\tEND as Data_Inicial_Oracle,\n        substring(convert(varchar(30),DATEADD(day,-1,getdate()),103),1,10) as 'data_final_Oracle'\n) as DT_FIM ",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_DIN",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Periodo",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Periodo').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "v_Mes_Ano",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Mes_Ano",
										"value": {
											"value": "@item().Mes_Ano",
											"type": "Expression"
										}
									}
								},
								{
									"name": "IOF Posicao Estoque",
									"description": "Primeiro a rodar q deleta o mês ref do dbo.posicao_estoque",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "v_Mes_Ano",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('\n\nWITH AUX AS(\n\nSELECT \n    NULL AS mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE) AS estoque\n    , ROUND((\n            SUM(CASE \n                    WHEN etq.etq_cml_preco_medio IS NULL\n                        THEN 0\n                    ELSE etq.etq_cml_preco_medio\n                    END * etq.etq_quantidade) / SUM(ETQ.ETQ_QUANTIDADE)\n            ) * 1.0000000000, 10) etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10) AS valor_total\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END AS consignado\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n   \nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) <> 0\n\nUNION ALL\n\nSELECT \n    NULL AS mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE)\n    , mat.mat_vlr_pm etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10)\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n\nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) = 0\n\nUNION ALL\n\nSELECT \n    mma.mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , sum(mma_qtd * mma_tipo_es_fator * - 1)\n    , 0\n    , ROUND(sum(mma_valor * mma_tipo_es_fator * - 1), 10)\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN mma.mma_ind_consig = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END AS consignado\n    , MMA.MMA_IND_APLIC_DIRETA\nFROM MMA (nolock)\nLEFT OUTER JOIN ETQ  (nolock)  ON (mma.mma_mat_cod = etq.etq_mat_cod AND mma.mma_sba_cod = etq.etq_sba_cod)\n        , MAT   (nolock)\n        , cfg   (nolock)\n        , gmm   (nolock)\n        , LMA   (nolock)   \nWHERE (mma.mma_data_mov >= ''', variables('Mes_Ano'),' 00:00:00', ''')','\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (MMA.MMA_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (gmm.gmm_cod = mma.mma_gmm_cod)\n    AND (7 = 7)\nGROUP BY \n    mma.mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN mma.mma_ind_consig = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MMA.MMA_IND_APLIC_DIRETA\n\n)\n\n,DADO AS(\nSELECT \n    GCC.gcc_cod                                                                 AS CD_ESTABELECIMENTO,\n    a.cfg_emp                                                                   AS DS_ESTABELECIMENTO,\n    SBA_COD                                                                     as CD_LOCAL_ESTOQUE,\n    SBA_NOME                                                                    AS DS_LOCAL_ESTOQUE,\n    A.MAT_COD                                                                   AS CD_MATERIAL\n    ,A.MAT_DESC_RESUMIDA                                                        AS DS_MATERIAL_SHORT\n    ,A.LMA_COD                                                                  AS CD_CLASSE_MATERIAL\n    ,A.LMA_NOME                                                                 AS DS_CLASSE_MATERIAL\n    ,A.gmm_cod                                                                  AS CD_GRUPO_MATERIAL\n    ,A.gmm_nome                                                                 AS DS_GRUPO_MATERIAL\n    ,sum(A.estoque)                                                             AS QT_ESTOQUE\n    ,avg(A.etq_etq_cml_preco_medio)                                             AS VL_MED_UNIT\n    ,sum(A.valor_total)                                                         AS VL_TOTAL\n    -- ,A.consignado                                                            AS IE_CONSIGNADO\nFROM AUX A\nLEFT JOIN SBA SBA (NOLOCK) ON SBA.SBA_COD = A.etq_sba_cod\nLEFT JOIN STR STR (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD\nLEFT JOIN GCC GCC (NOLOCK) ON GCC.gcc_str_cod = STR.str_str_cod \n\nGROUP BY\n-- SUBSTRING(CAST(CAST(GETDATE()-30 AS DATE) AS VARCHAR(30)),1,7)\nGCC.gcc_cod                                                   \n,a.cfg_emp                                                 \n,STR.str_cod                                                   \n,STR.str_nome                                                  \n,SBA_COD                                                       \n,SBA_NOME                                                      \n,A.MAT_COD                                                     \n,A.MAT_DESC_RESUMIDA                                          \n,A.LMA_COD                                                    \n,A.LMA_NOME                                                   \n,A.gmm_cod                                                    \n,A.gmm_nome\n-- ,A.consignado          \n\n)\n\nSELECT SUBSTRING( ''',variables('Mes_Ano'),'''',',1,7)',' as MES_REF,'\n,'''92''', 'AS ID_SYS'\n,',null', ' as IE_CONSIGNADO'\n,',X.*\n\nFROM DADO X\nWHERE X.VL_MED_UNIT > 0\n')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "MES_REF",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "MES_REF",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "ID_SYS",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "ID_SYS",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "IE_CONSIGNADO",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "IE_CONSIGNADO",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_MATERIAL",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MATERIAL",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "DS_MATERIAL_SHORT",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_MATERIAL_SHORT",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "QT_ESTOQUE",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 38
													},
													"sink": {
														"name": "QT_ESTOQUE",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "VL_MED_UNIT",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 7,
														"precision": 38
													},
													"sink": {
														"name": "VL_MED_UNIT",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 7,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "VL_TOTAL",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 38
													},
													"sink": {
														"name": "VL_TOTAL",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 38
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_IOF_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "stg",
												"tabela_destino": "posicao_estoque_smart"
											}
										}
									]
								},
								{
									"name": "ITG Posicao Estoque",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "IOF Posicao Estoque",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('\n\nWITH AUX AS(\n\nSELECT \n    NULL AS mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE) AS estoque\n    , ROUND((\n            SUM(CASE \n                    WHEN etq.etq_cml_preco_medio IS NULL\n                        THEN 0\n                    ELSE etq.etq_cml_preco_medio\n                    END * etq.etq_quantidade) / SUM(ETQ.ETQ_QUANTIDADE)\n            ) * 1.0000000000, 10) etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10) AS valor_total\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END AS consignado\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n   \nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) <> 0\n\nUNION ALL\n\nSELECT \n    NULL AS mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE)\n    , mat.mat_vlr_pm etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10)\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n\nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) = 0\n\nUNION ALL\n\nSELECT \n    mma.mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , sum(mma_qtd * mma_tipo_es_fator * - 1)\n    , 0\n    , ROUND(sum(mma_valor * mma_tipo_es_fator * - 1), 10)\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN mma.mma_ind_consig = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END AS consignado\n    , MMA.MMA_IND_APLIC_DIRETA\nFROM MMA (nolock)\nLEFT OUTER JOIN ETQ  (nolock)  ON (mma.mma_mat_cod = etq.etq_mat_cod AND mma.mma_sba_cod = etq.etq_sba_cod)\n        , MAT   (nolock)\n        , cfg   (nolock)\n        , gmm   (nolock)\n        , LMA   (nolock)   \nWHERE (mma.mma_data_mov >= ''', variables('Mes_Ano'),' 00:00:00', ''')','\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (MMA.MMA_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (gmm.gmm_cod = mma.mma_gmm_cod)\n    AND (7 = 7)\nGROUP BY \n    mma.mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN mma.mma_ind_consig = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MMA.MMA_IND_APLIC_DIRETA\n\n)\n\n,DADO AS(\nSELECT \n    GCC.gcc_cod                                                                 AS CD_ESTABELECIMENTO,\n    a.cfg_emp                                                                   AS DS_ESTABELECIMENTO,\n    SBA_COD                                                                     as CD_LOCAL_ESTOQUE,\n    SBA_NOME                                                                    AS DS_LOCAL_ESTOQUE,\n    A.MAT_COD                                                                   AS CD_MATERIAL\n    ,A.MAT_DESC_RESUMIDA                                                        AS DS_MATERIAL_SHORT\n    ,A.LMA_COD                                                                  AS CD_CLASSE_MATERIAL\n    ,A.LMA_NOME                                                                 AS DS_CLASSE_MATERIAL\n    ,A.gmm_cod                                                                  AS CD_GRUPO_MATERIAL\n    ,A.gmm_nome                                                                 AS DS_GRUPO_MATERIAL\n    ,sum(A.estoque)                                                             AS QT_ESTOQUE\n    ,avg(A.etq_etq_cml_preco_medio)                                             AS VL_MED_UNIT\n    ,sum(A.valor_total)                                                         AS VL_TOTAL\n    -- ,A.consignado                                                            AS IE_CONSIGNADO\nFROM AUX A\nLEFT JOIN SBA SBA (NOLOCK) ON SBA.SBA_COD = A.etq_sba_cod\nLEFT JOIN STR STR (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD\nLEFT JOIN GCC GCC (NOLOCK) ON GCC.gcc_str_cod = STR.str_str_cod \n\nGROUP BY\n-- SUBSTRING(CAST(CAST(GETDATE()-30 AS DATE) AS VARCHAR(30)),1,7)\nGCC.gcc_cod                                                   \n,a.cfg_emp                                                 \n,STR.str_cod                                                   \n,STR.str_nome                                                  \n,SBA_COD                                                       \n,SBA_NOME                                                      \n,A.MAT_COD                                                     \n,A.MAT_DESC_RESUMIDA                                          \n,A.LMA_COD                                                    \n,A.LMA_NOME                                                   \n,A.gmm_cod                                                    \n,A.gmm_nome\n-- ,A.consignado          \n\n)\n\nSELECT SUBSTRING( ''',variables('Mes_Ano'),'''',',1,7)',' as MES_REF,'\n,'''90''', 'AS ID_SYS'\n,',null', ' as IE_CONSIGNADO'\n,',X.*\n\nFROM DADO X\nWHERE X.VL_MED_UNIT > 0\n')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "MES_REF",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "MES_REF",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "ID_SYS",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "ID_SYS",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "IE_CONSIGNADO",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "IE_CONSIGNADO",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_MATERIAL",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MATERIAL",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "DS_MATERIAL_SHORT",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_MATERIAL_SHORT",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "QT_ESTOQUE",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 38
													},
													"sink": {
														"name": "QT_ESTOQUE",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "VL_MED_UNIT",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 7,
														"precision": 38
													},
													"sink": {
														"name": "VL_MED_UNIT",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 7,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "VL_TOTAL",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 38
													},
													"sink": {
														"name": "VL_TOTAL",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 38
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_ITAIGARA_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "stg",
												"tabela_destino": "posicao_estoque_smart"
											}
										}
									]
								},
								{
									"name": "ITB Posicao Estoque",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ITG Posicao Estoque",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('\n\nWITH AUX AS(\n\nSELECT \n    NULL AS mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE) AS estoque\n    , ROUND((\n            SUM(CASE \n                    WHEN etq.etq_cml_preco_medio IS NULL\n                        THEN 0\n                    ELSE etq.etq_cml_preco_medio\n                    END * etq.etq_quantidade) / SUM(ETQ.ETQ_QUANTIDADE)\n            ) * 1.0000000000, 10) etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10) AS valor_total\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END AS consignado\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n   \nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) <> 0\n\nUNION ALL\n\nSELECT \n    NULL AS mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE)\n    , mat.mat_vlr_pm etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10)\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n\nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) = 0\n\nUNION ALL\n\nSELECT \n    mma.mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , sum(mma_qtd * mma_tipo_es_fator * - 1)\n    , 0\n    , ROUND(sum(mma_valor * mma_tipo_es_fator * - 1), 10)\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN mma.mma_ind_consig = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END AS consignado\n    , MMA.MMA_IND_APLIC_DIRETA\nFROM MMA (nolock)\nLEFT OUTER JOIN ETQ  (nolock)  ON (mma.mma_mat_cod = etq.etq_mat_cod AND mma.mma_sba_cod = etq.etq_sba_cod)\n        , MAT   (nolock)\n        , cfg   (nolock)\n        , gmm   (nolock)\n        , LMA   (nolock)   \nWHERE (mma.mma_data_mov >= ''', variables('Mes_Ano'),' 00:00:00', ''')','\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (MMA.MMA_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (gmm.gmm_cod = mma.mma_gmm_cod)\n    AND (7 = 7)\nGROUP BY \n    mma.mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN mma.mma_ind_consig = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MMA.MMA_IND_APLIC_DIRETA\n\n)\n\n,DADO AS(\nSELECT \n    GCC.gcc_cod                                                                 AS CD_ESTABELECIMENTO,\n    a.cfg_emp                                                                   AS DS_ESTABELECIMENTO,\n    SBA_COD                                                                     as CD_LOCAL_ESTOQUE,\n    SBA_NOME                                                                    AS DS_LOCAL_ESTOQUE,\n    A.MAT_COD                                                                   AS CD_MATERIAL\n    ,A.MAT_DESC_RESUMIDA                                                        AS DS_MATERIAL_SHORT\n    ,A.LMA_COD                                                                  AS CD_CLASSE_MATERIAL\n    ,A.LMA_NOME                                                                 AS DS_CLASSE_MATERIAL\n    ,A.gmm_cod                                                                  AS CD_GRUPO_MATERIAL\n    ,A.gmm_nome                                                                 AS DS_GRUPO_MATERIAL\n    ,sum(A.estoque)                                                             AS QT_ESTOQUE\n    ,avg(A.etq_etq_cml_preco_medio)                                             AS VL_MED_UNIT\n    ,sum(A.valor_total)                                                         AS VL_TOTAL\n    -- ,A.consignado                                                            AS IE_CONSIGNADO\nFROM AUX A\nLEFT JOIN SBA SBA (NOLOCK) ON SBA.SBA_COD = A.etq_sba_cod\nLEFT JOIN STR STR (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD\nLEFT JOIN GCC GCC (NOLOCK) ON GCC.gcc_str_cod = STR.str_str_cod \n\nGROUP BY\n-- SUBSTRING(CAST(CAST(GETDATE()-30 AS DATE) AS VARCHAR(30)),1,7)\nGCC.gcc_cod                                                   \n,a.cfg_emp                                                 \n,STR.str_cod                                                   \n,STR.str_nome                                                  \n,SBA_COD                                                       \n,SBA_NOME                                                      \n,A.MAT_COD                                                     \n,A.MAT_DESC_RESUMIDA                                          \n,A.LMA_COD                                                    \n,A.LMA_NOME                                                   \n,A.gmm_cod                                                    \n,A.gmm_nome\n-- ,A.consignado          \n\n)\n\nSELECT SUBSTRING( ''',variables('Mes_Ano'),'''',',1,7)',' as MES_REF,'\n,'''91''', 'AS ID_SYS'\n,',null', ' as IE_CONSIGNADO'\n,',X.*\n\nFROM DADO X\nWHERE X.VL_MED_UNIT > 0\n')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "MES_REF",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "MES_REF",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "ID_SYS",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "ID_SYS",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "IE_CONSIGNADO",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "IE_CONSIGNADO",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_MATERIAL",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MATERIAL",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "DS_MATERIAL_SHORT",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_MATERIAL_SHORT",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "QT_ESTOQUE",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 38
													},
													"sink": {
														"name": "QT_ESTOQUE",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "VL_MED_UNIT",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 7,
														"precision": 38
													},
													"sink": {
														"name": "VL_MED_UNIT",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 7,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "VL_TOTAL",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 38
													},
													"sink": {
														"name": "VL_TOTAL",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 38
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_ITABUNA_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "stg",
												"tabela_destino": "posicao_estoque_smart"
											}
										}
									]
								},
								{
									"name": "OFTALMOCLIN Posicao Estoque",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ITB Posicao Estoque",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('\n\nWITH AUX AS(\n\nSELECT \n    NULL AS mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE) AS estoque\n    , ROUND((\n            SUM(CASE \n                    WHEN etq.etq_cml_preco_medio IS NULL\n                        THEN 0\n                    ELSE etq.etq_cml_preco_medio\n                    END * etq.etq_quantidade) / SUM(ETQ.ETQ_QUANTIDADE)\n            ) * 1.0000000000, 10) etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10) AS valor_total\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END AS consignado\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n   \nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) <> 0\n\nUNION ALL\n\nSELECT \n    NULL AS mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE)\n    , mat.mat_vlr_pm etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10)\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n\nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) = 0\n\nUNION ALL\n\nSELECT \n    mma.mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , sum(mma_qtd * mma_tipo_es_fator * - 1)\n    , 0\n    , ROUND(sum(mma_valor * mma_tipo_es_fator * - 1), 10)\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN mma.mma_ind_consig = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END AS consignado\n    , MMA.MMA_IND_APLIC_DIRETA\nFROM MMA (nolock)\nLEFT OUTER JOIN ETQ  (nolock)  ON (mma.mma_mat_cod = etq.etq_mat_cod AND mma.mma_sba_cod = etq.etq_sba_cod)\n        , MAT   (nolock)\n        , cfg   (nolock)\n        , gmm   (nolock)\n        , LMA   (nolock)   \nWHERE (mma.mma_data_mov >= ''', variables('Mes_Ano'),' 00:00:00', ''')',' \n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (MMA.MMA_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (gmm.gmm_cod = mma.mma_gmm_cod)\n    AND (7 = 7)\nGROUP BY \n    mma.mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN mma.mma_ind_consig = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MMA.MMA_IND_APLIC_DIRETA\n\n)\n\n,DADO AS(\nSELECT \n    GCC.gcc_cod                                                                 AS CD_ESTABELECIMENTO,\n    a.cfg_emp                                                                   AS DS_ESTABELECIMENTO,\n    SBA_COD                                                                     as CD_LOCAL_ESTOQUE,\n    SBA_NOME                                                                    AS DS_LOCAL_ESTOQUE,\n    A.MAT_COD                                                                   AS CD_MATERIAL\n    ,A.MAT_DESC_RESUMIDA                                                        AS DS_MATERIAL_SHORT\n    ,A.LMA_COD                                                                  AS CD_CLASSE_MATERIAL\n    ,A.LMA_NOME                                                                 AS DS_CLASSE_MATERIAL\n    ,A.gmm_cod                                                                  AS CD_GRUPO_MATERIAL\n    ,A.gmm_nome                                                                 AS DS_GRUPO_MATERIAL\n    ,sum(A.estoque)                                                             AS QT_ESTOQUE\n    ,avg(A.etq_etq_cml_preco_medio)                                             AS VL_MED_UNIT\n    ,sum(A.valor_total)                                                         AS VL_TOTAL\n    -- ,A.consignado                                                            AS IE_CONSIGNADO\nFROM AUX A\nLEFT JOIN SBA SBA (NOLOCK) ON SBA.SBA_COD = A.etq_sba_cod\nLEFT JOIN STR STR (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD\nLEFT JOIN GCC GCC (NOLOCK) ON GCC.gcc_str_cod = STR.str_str_cod \n\nGROUP BY\n-- SUBSTRING(CAST(CAST(GETDATE()-30 AS DATE) AS VARCHAR(30)),1,7)\nGCC.gcc_cod                                                   \n,a.cfg_emp                                                 \n,STR.str_cod                                                   \n,STR.str_nome                                                  \n,SBA_COD                                                       \n,SBA_NOME                                                      \n,A.MAT_COD                                                     \n,A.MAT_DESC_RESUMIDA                                          \n,A.LMA_COD                                                    \n,A.LMA_NOME                                                   \n,A.gmm_cod                                                    \n,A.gmm_nome\n-- ,A.consignado          \n\n)\n\nSELECT SUBSTRING( ''',variables('Mes_Ano'),'''',',1,7)',' as MES_REF,'\n,'''93''', 'AS ID_SYS'\n,',null', ' as IE_CONSIGNADO'\n,',X.*\n\nFROM DADO X\nWHERE X.VL_MED_UNIT > 0\n')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "MES_REF",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "MES_REF",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "ID_SYS",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "ID_SYS",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "IE_CONSIGNADO",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "IE_CONSIGNADO",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_MATERIAL",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MATERIAL",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "DS_MATERIAL_SHORT",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_MATERIAL_SHORT",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "QT_ESTOQUE",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 38
													},
													"sink": {
														"name": "QT_ESTOQUE",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "VL_MED_UNIT",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 7,
														"precision": 38
													},
													"sink": {
														"name": "VL_MED_UNIT",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 7,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "VL_TOTAL",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 38
													},
													"sink": {
														"name": "VL_TOTAL",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 38
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "stg",
												"tabela_destino": "posicao_estoque_smart"
											}
										}
									]
								},
								{
									"name": "HOSL Posicao Estoque",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "OFTALMOCLIN Posicao Estoque",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat('\n\nWITH AUX AS(\n\nSELECT \n    NULL AS mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE) AS estoque\n    , ROUND((\n            SUM(CASE \n                    WHEN etq.etq_cml_preco_medio IS NULL\n                        THEN 0\n                    ELSE etq.etq_cml_preco_medio\n                    END * etq.etq_quantidade) / SUM(ETQ.ETQ_QUANTIDADE)\n            ) * 1.0000000000, 10) etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10) AS valor_total\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END AS consignado\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n   \nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) <> 0\n\nUNION ALL\n\nSELECT \n    NULL AS mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE)\n    , mat.mat_vlr_pm etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10)\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n\nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN MAT.MAT_IND_CONSIGNADO = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) = 0\n\nUNION ALL\n\nSELECT \n    mma.mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , sum(mma_qtd * mma_tipo_es_fator * - 1)\n    , 0\n    , ROUND(sum(mma_valor * mma_tipo_es_fator * - 1), 10)\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN mma.mma_ind_consig = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END AS consignado\n    , MMA.MMA_IND_APLIC_DIRETA\nFROM MMA (nolock)\nLEFT OUTER JOIN ETQ  (nolock)  ON (mma.mma_mat_cod = etq.etq_mat_cod AND mma.mma_sba_cod = etq.etq_sba_cod)\n        , MAT   (nolock)\n        , cfg   (nolock)\n        , gmm   (nolock)\n        , LMA   (nolock)   \nWHERE (mma.mma_data_mov >= ''', variables('Mes_Ano'),' 00:00:00', ''')','\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (MMA.MMA_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (gmm.gmm_cod = mma.mma_gmm_cod)\n    AND (7 = 7)\nGROUP BY \n    mma.mma_data_mov\n    ,ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    -- , CASE \n    --     WHEN mma.mma_ind_consig = \"S\"\n    --         THEN \"S\"\n    --     ELSE \"N\"\n    --     END\n    , MMA.MMA_IND_APLIC_DIRETA\n\n)\n\n,DADO AS(\nSELECT \n    GCC.gcc_cod                                                                 AS CD_ESTABELECIMENTO,\n    a.cfg_emp                                                                   AS DS_ESTABELECIMENTO,\n    SBA_COD                                                                     as CD_LOCAL_ESTOQUE,\n    SBA_NOME                                                                    AS DS_LOCAL_ESTOQUE,\n    A.MAT_COD                                                                   AS CD_MATERIAL\n    ,A.MAT_DESC_RESUMIDA                                                        AS DS_MATERIAL_SHORT\n    ,A.LMA_COD                                                                  AS CD_CLASSE_MATERIAL\n    ,A.LMA_NOME                                                                 AS DS_CLASSE_MATERIAL\n    ,A.gmm_cod                                                                  AS CD_GRUPO_MATERIAL\n    ,A.gmm_nome                                                                 AS DS_GRUPO_MATERIAL\n    ,sum(A.estoque)                                                             AS QT_ESTOQUE\n    ,avg(A.etq_etq_cml_preco_medio)                                             AS VL_MED_UNIT\n    ,sum(A.valor_total)                                                         AS VL_TOTAL\n    -- ,A.consignado                                                            AS IE_CONSIGNADO\nFROM AUX A\nLEFT JOIN SBA SBA (NOLOCK) ON SBA.SBA_COD = A.etq_sba_cod\nLEFT JOIN STR STR (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD\nLEFT JOIN GCC GCC (NOLOCK) ON GCC.gcc_str_cod = STR.str_str_cod \n\nGROUP BY\n-- SUBSTRING(CAST(CAST(GETDATE()-30 AS DATE) AS VARCHAR(30)),1,7)\nGCC.gcc_cod                                                   \n,a.cfg_emp                                                 \n,STR.str_cod                                                   \n,STR.str_nome                                                  \n,SBA_COD                                                       \n,SBA_NOME                                                      \n,A.MAT_COD                                                     \n,A.MAT_DESC_RESUMIDA                                          \n,A.LMA_COD                                                    \n,A.LMA_NOME                                                   \n,A.gmm_cod                                                    \n,A.gmm_nome\n-- ,A.consignado          \n\n)\n\nSELECT SUBSTRING( ''',variables('Mes_Ano'),'''',',1,7)',' as MES_REF,'\n,'''94''', 'AS ID_SYS'\n,',null', ' as IE_CONSIGNADO'\n,',X.*\n\nFROM DADO X\nWHERE X.VL_MED_UNIT > 0\n')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "MES_REF",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "MES_REF",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "ID_SYS",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "ID_SYS",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "IE_CONSIGNADO",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "IE_CONSIGNADO",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_LOCAL_ESTOQUE",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_MATERIAL",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MATERIAL",
														"type": "Int64",
														"physicalType": "bigint"
													}
												},
												{
													"source": {
														"name": "DS_MATERIAL_SHORT",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_MATERIAL_SHORT",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_CLASSE_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DS_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_GRUPO_MATERIAL",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "QT_ESTOQUE",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 38
													},
													"sink": {
														"name": "QT_ESTOQUE",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "VL_MED_UNIT",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 7,
														"precision": 38
													},
													"sink": {
														"name": "VL_MED_UNIT",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 7,
														"precision": 38
													}
												},
												{
													"source": {
														"name": "VL_TOTAL",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 38
													},
													"sink": {
														"name": "VL_TOTAL",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 10,
														"precision": 38
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_HOSL_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "stg",
												"tabela_destino": "posicao_estoque_smart"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"DT_INICIO": {
						"type": "String"
					},
					"DT_FIM": {
						"type": "String"
					},
					"Mes_Ano": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Suprimentos/Estoque"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Posicao_Estoque')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Posicao Estoque HTML",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select distinct \n    TO_CHAR(SLE.Dt_Mesano_Referencia,'YYYY-MM-DD')           AS MES_REF,\n    TO_CHAR(SLE.cd_estabelecimento)                          AS CD_ESTABELECIMENTO,\n    ESTB.nm_fantasia_estab                                   AS DS_ESTABELECIMENTO,\n    TO_CHAR(SLE.cd_local_estoque)                            AS CD_LOCAL_ESTOQUE,\n    LE.ds_local_estoque,\n    0                                                       AS CD_ALMOXERIFADO,\n    ''                                                      AS DS_ALMOXERIFADO,\n    CAST(SLE.cd_material AS INT)                            AS CD_MATERIAL,\n    MAT.ds_reduzida                                         AS DS_MATERIAL_SHORT,\n    TO_CHAR(MAT_C.CD_CLASSE_MATERIAL)                       AS CD_CLASSE_MATERIAL,    \n    MAT_C.ds_classe_material                                AS DS_CLASSE_MATERIAL,\n    TO_CHAR(MAT_GRP.CD_GRUPO_MATERIAL)                      AS CD_GRUPO_MATERIAL,\n    MAT_GRP.ds_grupo_material                               AS DS_GRUPO_MATERIAL,\n   -- ds_fabricante Fabricante,       \n    SLE.qt_estoque                                          AS QT_ESTOQUE,\n    ROUND(SLE.vl_custo_medio)                               AS VL_MED_UNIT,\n    ROUND(SLE.vl_custo_medio * QT_ESTOQUE,2)                AS VL_TOTAL,\n    TO_CHAR(MAT.IE_CONSIGNADO)                              AS IE_CONSIGNADO\n    from saldo_estoque SLE\n    \n    left join estabelecimento ESTB\n    on (SLE.cd_estabelecimento = ESTB.cd_estabelecimento)\n    \n    left join local_estoque LE\n    on (LE.cd_estabelecimento = SLE.cd_estabelecimento AND\n        LE.cd_local_estoque = SLE.cd_local_estoque)\n        \n    left join material MAT\n    on (SLE.cd_material = MAT.cd_material) \n    \n    left join material_familia MAT_F\n    on (MAT.nr_seq_familia = MAT_F.nr_sequencia)\n    \n    left join classe_material MAT_C\n    on (MAT.cd_classe_material = MAT_C.cd_classe_material)\n    \n    left join subgrupo_material MAT_SUB\n    on (MAT_C.cd_subgrupo_material = MAT_SUB.cd_subgrupo_material)\n    \n    left join grupo_material MAT_GRP\n    on (MAT_SUB.cd_grupo_material = MAT_GRP.cd_grupo_material)\n    \n    left join mat_fabricante MAT_FAB\n    on MAT.nr_seq_fabric =  MAT_FAB.nr_sequencia    \n  \n    --Where To_Char(SLE.Dt_Mesano_Referencia,'DD/MM/YYYY') = TO_CHAR(TRUNC(SYSDATE,'MM')-30,'DD/MM/YYYY')\n    Where To_Char(SLE.Dt_Mesano_Referencia,'DD/MM/YYYY') = TO_CHAR(TRUNC(SYSDATE,'MM'),'DD/MM/YYYY') ",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM ESTOQUE_POSICAO\nWHERE MES_REF = CAST(SUBSTRING(CAST(CAST(GETDATE() AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE)",
								"writeBehavior": "insert",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MES_REF"
										},
										"sink": {
											"name": "MES_REF",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOQUE"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ALMOXERIFADO"
										},
										"sink": {
											"name": "CD_ALMOXERIFADO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_ALMOXERIFADO"
										},
										"sink": {
											"name": "DS_ALMOXERIFADO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_ESTOQUE"
										},
										"sink": {
											"name": "QT_ESTOQUE",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "VL_MED_UNIT"
										},
										"sink": {
											"name": "VL_MED_UNIT",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "VL_TOTAL"
										},
										"sink": {
											"name": "VL_TOTAL",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "IE_CONSIGNADO"
										},
										"sink": {
											"name": "IE_CONSIGNADO",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_ESTOQUE_POSICAO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Posicao Estoque Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Posicao Estoque HTML",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select distinct \n    TO_CHAR(SLE.Dt_Mesano_Referencia,'YYYY-MM-DD')           AS MES_REF,\n    TO_CHAR(SLE.cd_estabelecimento)                          AS CD_ESTABELECIMENTO,\n    ESTB.nm_fantasia_estab                                   AS DS_ESTABELECIMENTO,\n    TO_CHAR(SLE.cd_local_estoque)                            AS CD_LOCAL_ESTOQUE,\n    LE.ds_local_estoque,\n    0                                                       AS CD_ALMOXERIFADO,\n    ''                                                      AS DS_ALMOXERIFADO,\n    CAST(SLE.cd_material AS INT)                            AS CD_MATERIAL,\n    MAT.ds_reduzida                                         AS DS_MATERIAL_SHORT,\n    TO_CHAR(MAT_C.CD_CLASSE_MATERIAL)                       AS CD_CLASSE_MATERIAL,    \n    MAT_C.ds_classe_material                                AS DS_CLASSE_MATERIAL,\n    TO_CHAR(MAT_GRP.CD_GRUPO_MATERIAL)                      AS CD_GRUPO_MATERIAL,\n    MAT_GRP.ds_grupo_material                               AS DS_GRUPO_MATERIAL,\n   -- ds_fabricante Fabricante,       \n    SLE.qt_estoque                                          AS QT_ESTOQUE,\n    ROUND(SLE.vl_custo_medio)                               AS VL_MED_UNIT,\n    ROUND(SLE.vl_custo_medio * QT_ESTOQUE,2)                AS VL_TOTAL,\n    TO_CHAR(MAT.IE_CONSIGNADO)                              AS IE_CONSIGNADO\n    from saldo_estoque SLE\n    \n    left join estabelecimento ESTB\n    on (SLE.cd_estabelecimento = ESTB.cd_estabelecimento)\n    \n    left join local_estoque LE\n    on (LE.cd_estabelecimento = SLE.cd_estabelecimento AND\n        LE.cd_local_estoque = SLE.cd_local_estoque)\n        \n    left join material MAT\n    on (SLE.cd_material = MAT.cd_material) \n    \n    left join material_familia MAT_F\n    on (MAT.nr_seq_familia = MAT_F.nr_sequencia)\n    \n    left join classe_material MAT_C\n    on (MAT.cd_classe_material = MAT_C.cd_classe_material)\n    \n    left join subgrupo_material MAT_SUB\n    on (MAT_C.cd_subgrupo_material = MAT_SUB.cd_subgrupo_material)\n    \n    left join grupo_material MAT_GRP\n    on (MAT_SUB.cd_grupo_material = MAT_GRP.cd_grupo_material)\n    \n    left join mat_fabricante MAT_FAB\n    on MAT.nr_seq_fabric =  MAT_FAB.nr_sequencia    \n  \n    --Where To_Char(SLE.Dt_Mesano_Referencia,'DD/MM/YYYY') = TO_CHAR(TRUNC(SYSDATE,'MM')-30,'DD/MM/YYYY')\n    Where To_Char(SLE.Dt_Mesano_Referencia,'DD/MM/YYYY') = TO_CHAR(TRUNC(SYSDATE,'MM'),'DD/MM/YYYY') ",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MES_REF"
										},
										"sink": {
											"name": "MES_REF",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOQUE"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ALMOXERIFADO"
										},
										"sink": {
											"name": "CD_ALMOXERIFADO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_ALMOXERIFADO"
										},
										"sink": {
											"name": "DS_ALMOXERIFADO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_ESTOQUE"
										},
										"sink": {
											"name": "QT_ESTOQUE",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "VL_MED_UNIT"
										},
										"sink": {
											"name": "VL_MED_UNIT",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "VL_TOTAL"
										},
										"sink": {
											"name": "VL_TOTAL",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "IE_CONSIGNADO"
										},
										"sink": {
											"name": "IE_CONSIGNADO",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_ESTOQUE_POSICAO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Posicao DH ITG",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Posicao Estoque Sadalla",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF = CAST(SUBSTRING(CAST(CAST(GETDATE() AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE);\n\nWITH AUX AS(\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE) AS estoque\n    , ROUND((\n            SUM(CASE \n                    WHEN etq.etq_cml_preco_medio IS NULL\n                        THEN 0\n                    ELSE etq.etq_cml_preco_medio\n                    END * etq.etq_quantidade) / SUM(ETQ.ETQ_QUANTIDADE)\n            ) * 1.0000000000, 10) etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10) AS valor_total\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n   \nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) <> 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE)\n    , mat.mat_vlr_pm etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10)\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n\nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) = 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , sum(mma_qtd * mma_tipo_es_fator * - 1)\n    , 0\n    , ROUND(sum(mma_valor * mma_tipo_es_fator * - 1), 10)\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MMA.MMA_IND_APLIC_DIRETA\nFROM MMA (nolock)\nLEFT OUTER JOIN ETQ  (nolock)  ON (mma.mma_mat_cod = etq.etq_mat_cod AND mma.mma_sba_cod = etq.etq_sba_cod)\n        , MAT   (nolock)\n        , cfg   (nolock)\n        , gmm   (nolock)\n        , LMA   (nolock)   \n-- WHERE (cast(mma.mma_data_mov as date) BETWEEN '2021-04-01' and '2021-04-30')\nWHERE (cast(mma.mma_data_mov as date) >= @MES_REF)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (MMA.MMA_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (gmm.gmm_cod = mma.mma_gmm_cod)\n    AND (7 = 7)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MMA.MMA_IND_APLIC_DIRETA\n\n)\n\nSELECT \n    @MES_REF                                                                                AS MES_REF,\n    GCC.gcc_cod                                                                             AS CD_ESTABELECIMENTO,\n    GCC.gcc_descr                                                                           AS DS_ESTABELECIMENTO,\n    STR.str_cod                                                                             AS CD_LOCAL_ESTOQUE,\n    STR.str_nome                                                                            AS DS_LOCAL_ESTOQUE,\n    SBA_COD                                                                                 as CD_ALMOXERIFADO,\n    SBA_NOME                                                                                AS DS_ALMOXERIFADO,\n    A.MAT_COD                                                                               AS CD_MATERIAL\n    ,A.MAT_DESC_RESUMIDA                                                                    AS DS_MATERIAL_SHORT\n    ,A.LMA_COD                                                                              AS CD_CLASSE_MATERIAL\n    ,A.LMA_NOME                                                                             AS DS_CLASSE_MATERIAL\n    ,A.gmm_cod                                                                              AS CD_GRUPO_MATERIAL\n    ,A.gmm_nome                                                                             AS DS_GRUPO_MATERIAL\n    ,A.estoque                                                                              AS QT_ESTOQUE\n    ,A.etq_etq_cml_preco_medio                                                              AS VL_MED_UNIT\n    ,A.valor_total                                                                          AS VL_TOTAL\n    ,A.consignado                                                                           AS IE_CONSIGNADO\nFROM AUX A  \nLEFT JOIN SBA SBA (NOLOCK) ON SBA.SBA_COD = A.etq_sba_cod\nLEFT JOIN STR STR (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD\nLEFT JOIN GCC GCC (NOLOCK) ON GCC.gcc_str_cod = STR.str_str_cod ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 38
										},
										"sink": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 38
										},
										"sink": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 38
										},
										"sink": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "IE_CONSIGNADO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "IE_CONSIGNADO",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_ESTOQUE_POSICAO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Posicao DH ITB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Posicao DH ITG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF = CAST(SUBSTRING(CAST(CAST(GETDATE() AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE);\n\nWITH AUX AS(\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE) AS estoque\n    , ROUND((\n            SUM(CASE \n                    WHEN etq.etq_cml_preco_medio IS NULL\n                        THEN 0\n                    ELSE etq.etq_cml_preco_medio\n                    END * etq.etq_quantidade) / SUM(ETQ.ETQ_QUANTIDADE)\n            ) * 1.0000000000, 10) etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10) AS valor_total\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n   \nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) <> 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE)\n    , mat.mat_vlr_pm etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10)\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n\nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) = 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , sum(mma_qtd * mma_tipo_es_fator * - 1)\n    , 0\n    , ROUND(sum(mma_valor * mma_tipo_es_fator * - 1), 10)\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MMA.MMA_IND_APLIC_DIRETA\nFROM MMA (nolock)\nLEFT OUTER JOIN ETQ  (nolock)  ON (mma.mma_mat_cod = etq.etq_mat_cod AND mma.mma_sba_cod = etq.etq_sba_cod)\n        , MAT   (nolock)\n        , cfg   (nolock)\n        , gmm   (nolock)\n        , LMA   (nolock)   \n-- WHERE (cast(mma.mma_data_mov as date) BETWEEN '2021-04-01' and '2021-04-30')\nWHERE (cast(mma.mma_data_mov as date) >= @MES_REF)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (MMA.MMA_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (gmm.gmm_cod = mma.mma_gmm_cod)\n    AND (7 = 7)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MMA.MMA_IND_APLIC_DIRETA\n\n)\n\nSELECT \n    @MES_REF                                                                                AS MES_REF,\n    GCC.gcc_cod                                                                             AS CD_ESTABELECIMENTO,\n    GCC.gcc_descr                                                                           AS DS_ESTABELECIMENTO,\n    STR.str_cod                                                                             AS CD_LOCAL_ESTOQUE,\n    STR.str_nome                                                                            AS DS_LOCAL_ESTOQUE,\n    SBA_COD                                                                                 as CD_ALMOXERIFADO,\n    SBA_NOME                                                                                AS DS_ALMOXERIFADO,\n    A.MAT_COD                                                                               AS CD_MATERIAL\n    ,A.MAT_DESC_RESUMIDA                                                                    AS DS_MATERIAL_SHORT\n    ,A.LMA_COD                                                                              AS CD_CLASSE_MATERIAL\n    ,A.LMA_NOME                                                                             AS DS_CLASSE_MATERIAL\n    ,A.gmm_cod                                                                              AS CD_GRUPO_MATERIAL\n    ,A.gmm_nome                                                                             AS DS_GRUPO_MATERIAL\n    ,A.estoque                                                                              AS QT_ESTOQUE\n    ,A.etq_etq_cml_preco_medio                                                              AS VL_MED_UNIT\n    ,A.valor_total                                                                          AS VL_TOTAL\n    ,A.consignado                                                                           AS IE_CONSIGNADO\nFROM AUX A  \nLEFT JOIN SBA SBA (NOLOCK) ON SBA.SBA_COD = A.etq_sba_cod\nLEFT JOIN STR STR (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD\nLEFT JOIN GCC GCC (NOLOCK) ON GCC.gcc_str_cod = STR.str_str_cod ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 38
										},
										"sink": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 38
										},
										"sink": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 38
										},
										"sink": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "IE_CONSIGNADO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "IE_CONSIGNADO",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_ESTOQUE_POSICAO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Posicao HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Posicao DH ITB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF = CAST(SUBSTRING(CAST(CAST(GETDATE() AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE);\n\nWITH AUX AS(\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE) AS estoque\n    , ROUND((\n            SUM(CASE \n                    WHEN etq.etq_cml_preco_medio IS NULL\n                        THEN 0\n                    ELSE etq.etq_cml_preco_medio\n                    END * etq.etq_quantidade) / SUM(ETQ.ETQ_QUANTIDADE)\n            ) * 1.0000000000, 10) etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10) AS valor_total\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n   \nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) <> 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE)\n    , mat.mat_vlr_pm etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10)\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n\nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) = 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , sum(mma_qtd * mma_tipo_es_fator * - 1)\n    , 0\n    , ROUND(sum(mma_valor * mma_tipo_es_fator * - 1), 10)\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MMA.MMA_IND_APLIC_DIRETA\nFROM MMA (nolock)\nLEFT OUTER JOIN ETQ  (nolock)  ON (mma.mma_mat_cod = etq.etq_mat_cod AND mma.mma_sba_cod = etq.etq_sba_cod)\n        , MAT   (nolock)\n        , cfg   (nolock)\n        , gmm   (nolock)\n        , LMA   (nolock)   \n-- WHERE (cast(mma.mma_data_mov as date) BETWEEN '2021-04-01' and '2021-04-30')\nWHERE (cast(mma.mma_data_mov as date) >= @MES_REF)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (MMA.MMA_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (gmm.gmm_cod = mma.mma_gmm_cod)\n    AND (7 = 7)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MMA.MMA_IND_APLIC_DIRETA\n\n)\n\nSELECT \n    @MES_REF                                                                                AS MES_REF,\n    GCC.gcc_cod                                                                             AS CD_ESTABELECIMENTO,\n    GCC.gcc_descr                                                                           AS DS_ESTABELECIMENTO,\n    STR.str_cod                                                                             AS CD_LOCAL_ESTOQUE,\n    STR.str_nome                                                                            AS DS_LOCAL_ESTOQUE,\n    SBA_COD                                                                                 as CD_ALMOXERIFADO,\n    SBA_NOME                                                                                AS DS_ALMOXERIFADO,\n    A.MAT_COD                                                                               AS CD_MATERIAL\n    ,A.MAT_DESC_RESUMIDA                                                                    AS DS_MATERIAL_SHORT\n    ,A.LMA_COD                                                                              AS CD_CLASSE_MATERIAL\n    ,A.LMA_NOME                                                                             AS DS_CLASSE_MATERIAL\n    ,A.gmm_cod                                                                              AS CD_GRUPO_MATERIAL\n    ,A.gmm_nome                                                                             AS DS_GRUPO_MATERIAL\n    ,A.estoque                                                                              AS QT_ESTOQUE\n    ,A.etq_etq_cml_preco_medio                                                              AS VL_MED_UNIT\n    ,A.valor_total                                                                          AS VL_TOTAL\n    ,A.consignado                                                                           AS IE_CONSIGNADO\nFROM AUX A  \nLEFT JOIN SBA SBA (NOLOCK) ON SBA.SBA_COD = A.etq_sba_cod\nLEFT JOIN STR STR (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD\nLEFT JOIN GCC GCC (NOLOCK) ON GCC.gcc_str_cod = STR.str_str_cod ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 38
										},
										"sink": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 38
										},
										"sink": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 38
										},
										"sink": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "IE_CONSIGNADO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "IE_CONSIGNADO",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_ESTOQUE_POSICAO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Posicao Oftalmoclin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Posicao HOSL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF = CAST(SUBSTRING(CAST(CAST(GETDATE() AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE);\n\nWITH AUX AS(\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE) AS estoque\n    , ROUND((\n            SUM(CASE \n                    WHEN etq.etq_cml_preco_medio IS NULL\n                        THEN 0\n                    ELSE etq.etq_cml_preco_medio\n                    END * etq.etq_quantidade) / SUM(ETQ.ETQ_QUANTIDADE)\n            ) * 1.0000000000, 10) etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10) AS valor_total\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n   \nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) <> 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE)\n    , mat.mat_vlr_pm etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10)\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n\nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) = 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , sum(mma_qtd * mma_tipo_es_fator * - 1)\n    , 0\n    , ROUND(sum(mma_valor * mma_tipo_es_fator * - 1), 10)\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MMA.MMA_IND_APLIC_DIRETA\nFROM MMA (nolock)\nLEFT OUTER JOIN ETQ  (nolock)  ON (mma.mma_mat_cod = etq.etq_mat_cod AND mma.mma_sba_cod = etq.etq_sba_cod)\n        , MAT   (nolock)\n        , cfg   (nolock)\n        , gmm   (nolock)\n        , LMA   (nolock)   \n-- WHERE (cast(mma.mma_data_mov as date) BETWEEN '2021-04-01' and '2021-04-30')\nWHERE (cast(mma.mma_data_mov as date) >= @MES_REF)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (MMA.MMA_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (gmm.gmm_cod = mma.mma_gmm_cod)\n    AND (7 = 7)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MMA.MMA_IND_APLIC_DIRETA\n\n)\n\nSELECT \n    @MES_REF                                                                                AS MES_REF,\n    GCC.gcc_cod                                                                             AS CD_ESTABELECIMENTO,\n    GCC.gcc_descr                                                                           AS DS_ESTABELECIMENTO,\n    STR.str_cod                                                                             AS CD_LOCAL_ESTOQUE,\n    STR.str_nome                                                                            AS DS_LOCAL_ESTOQUE,\n    SBA_COD                                                                                 as CD_ALMOXERIFADO,\n    SBA_NOME                                                                                AS DS_ALMOXERIFADO,\n    A.MAT_COD                                                                               AS CD_MATERIAL\n    ,A.MAT_DESC_RESUMIDA                                                                    AS DS_MATERIAL_SHORT\n    ,A.LMA_COD                                                                              AS CD_CLASSE_MATERIAL\n    ,A.LMA_NOME                                                                             AS DS_CLASSE_MATERIAL\n    ,A.gmm_cod                                                                              AS CD_GRUPO_MATERIAL\n    ,A.gmm_nome                                                                             AS DS_GRUPO_MATERIAL\n    ,A.estoque                                                                              AS QT_ESTOQUE\n    ,A.etq_etq_cml_preco_medio                                                              AS VL_MED_UNIT\n    ,A.valor_total                                                                          AS VL_TOTAL\n    ,A.consignado                                                                           AS IE_CONSIGNADO\nFROM AUX A  \nLEFT JOIN SBA SBA (NOLOCK) ON SBA.SBA_COD = A.etq_sba_cod\nLEFT JOIN STR STR (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD\nLEFT JOIN GCC GCC (NOLOCK) ON GCC.gcc_str_cod = STR.str_str_cod ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 38
										},
										"sink": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 38
										},
										"sink": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 38
										},
										"sink": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "IE_CONSIGNADO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "IE_CONSIGNADO",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_ESTOQUE_POSICAO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Posicao IOF",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Posicao Oftalmoclin",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF = CAST(SUBSTRING(CAST(CAST(GETDATE() AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE);\n\nWITH AUX AS(\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE) AS estoque\n    , ROUND((\n            SUM(CASE \n                    WHEN etq.etq_cml_preco_medio IS NULL\n                        THEN 0\n                    ELSE etq.etq_cml_preco_medio\n                    END * etq.etq_quantidade) / SUM(ETQ.ETQ_QUANTIDADE)\n            ) * 1.0000000000, 10) etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10) AS valor_total\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n   \nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) <> 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE)\n    , mat.mat_vlr_pm etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10)\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n\nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) = 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , sum(mma_qtd * mma_tipo_es_fator * - 1)\n    , 0\n    , ROUND(sum(mma_valor * mma_tipo_es_fator * - 1), 10)\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MMA.MMA_IND_APLIC_DIRETA\nFROM MMA (nolock)\nLEFT OUTER JOIN ETQ  (nolock)  ON (mma.mma_mat_cod = etq.etq_mat_cod AND mma.mma_sba_cod = etq.etq_sba_cod)\n        , MAT   (nolock)\n        , cfg   (nolock)\n        , gmm   (nolock)\n        , LMA   (nolock)   \n-- WHERE (cast(mma.mma_data_mov as date) BETWEEN '2021-04-01' and '2021-04-30')\nWHERE (cast(mma.mma_data_mov as date) >= @MES_REF)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (MMA.MMA_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (gmm.gmm_cod = mma.mma_gmm_cod)\n    AND (7 = 7)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MMA.MMA_IND_APLIC_DIRETA\n\n)\n\nSELECT \n    @MES_REF                                                                                AS MES_REF,\n    GCC.gcc_cod                                                                             AS CD_ESTABELECIMENTO,\n    GCC.gcc_descr                                                                           AS DS_ESTABELECIMENTO,\n    STR.str_cod                                                                             AS CD_LOCAL_ESTOQUE,\n    STR.str_nome                                                                            AS DS_LOCAL_ESTOQUE,\n    SBA_COD                                                                                 as CD_ALMOXERIFADO,\n    SBA_NOME                                                                                AS DS_ALMOXERIFADO,\n    A.MAT_COD                                                                               AS CD_MATERIAL\n    ,A.MAT_DESC_RESUMIDA                                                                    AS DS_MATERIAL_SHORT\n    ,A.LMA_COD                                                                              AS CD_CLASSE_MATERIAL\n    ,A.LMA_NOME                                                                             AS DS_CLASSE_MATERIAL\n    ,A.gmm_cod                                                                              AS CD_GRUPO_MATERIAL\n    ,A.gmm_nome                                                                             AS DS_GRUPO_MATERIAL\n    ,A.estoque                                                                              AS QT_ESTOQUE\n    ,A.etq_etq_cml_preco_medio                                                              AS VL_MED_UNIT\n    ,A.valor_total                                                                          AS VL_TOTAL\n    ,A.consignado                                                                           AS IE_CONSIGNADO\nFROM AUX A  \nLEFT JOIN SBA SBA (NOLOCK) ON SBA.SBA_COD = A.etq_sba_cod\nLEFT JOIN STR STR (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD\nLEFT JOIN GCC GCC (NOLOCK) ON GCC.gcc_str_cod = STR.str_str_cod ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 38
										},
										"sink": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 38
										},
										"sink": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 38
										},
										"sink": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "IE_CONSIGNADO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "IE_CONSIGNADO",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_ESTOQUE_POSICAO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Estoque"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-20T18:04:45Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Producao Medica Sadalla')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline desenvolvido para extração de informações de produção medica das unidades com o sistema Tasy e Smart.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Producao Procedimentos Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select \n\n'Tasy Delphi' as BASE,\ne.cd_cgc as CNPJ,\ne.nm_fantasia_estab as marca,\np.dt_atualizacao,\np.nr_atendimento,\nat.dt_entrada,\np.nr_interno_conta,\n--obter_nome_estab(c.cd_estabelecimento) as ds_estabelecimento,\npf.cd_pessoa_fisica,\npf.dt_nascimento,\npf.nr_cpf,\npf.ie_sexo,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CEP') as nr_cep,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CI') as ds_cidade,\nobter_nome_pf(at.cd_pessoa_fisica) as ds_pessoa_fisica,\np.cd_convenio as cd_convenio,\nobter_nome_convenio(c.cd_convenio_parametro) as ds_convenio,\np.cd_medico_executor,\nobter_nome_pf(p.cd_medico_executor) as ds_medico_executor,\np.cd_medico_req as cd_medico_requisitante,\nobter_nome_pf(p.cd_medico_req) as ds_medico_requisitante,\np.ie_origem_proced as ie_origem_procedimento,\np.cd_procedimento,\nobter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced) as ds_procedimento, \nobter_valor_dominio(19,pr.ie_classificacao) as ds_classificacao,\np.qt_procedimento,\n--c.vl_conta,\np.vl_procedimento,\nc.ie_status_acerto,\ndecode(c.ie_status_acerto, 1,'Provisorio' , 2 ,'Definitivo') as status_conta,\n'' as cd_tuss,\np.nr_seq_proc_interno\nfrom procedimento_paciente p,\natendimento_paciente at,\npessoa_fisica pf,\nprocedimento pr,\nconta_paciente c,\nestabelecimento e,\nempresa em\nwhere p.nr_atendimento = at.nr_atendimento\nand at.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand p.cd_procedimento = pr.cd_procedimento\nand p.ie_origem_proced = pr.ie_origem_proced\nand p.nr_interno_conta = c.nr_interno_conta\nand at.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa\nand p.cd_motivo_exc_conta is null\nand c.ie_cancelamento is null\nand at.dt_entrada between sysdate - 730 and sysdate",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Unidade_Producao_Medica",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Producao Materiais Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select 'Tasy Delphi' as BASE,\ne.cd_cgc as CNPJ,\ne.nm_fantasia_estab as marca,\nmp.dt_atualizacao,\nmp.nr_atendimento,\nat.dt_entrada,\nmp.nr_interno_conta,\npf.cd_pessoa_fisica,\npf.dt_nascimento,\npf.nr_cpf,\npf.ie_sexo,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CEP') as nr_cep,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CI') as ds_cidade,\nobter_nome_pf(at.cd_pessoa_fisica) as ds_pessoa_fisica,\nmp.cd_convenio as cd_convenio,\nobter_nome_convenio(c.cd_convenio_parametro) as ds_convenio,\nat.cd_medico_atendimento as cd_medico_executor,\nobter_nome_pf(at.cd_medico_atendimento) as ds_medico_executor,\nmp.cd_medico_prescritor as cd_medico_requisitante,\nobter_nome_pf(mp.cd_medico_prescritor) as ds_medico_requisitante,\n' ' as ie_origem_procedimento,\nmp.cd_material as cd_procedimento,\nm.ds_material as ds_procedimento, \n'Material'  ds_classificacao,\nmp.qt_material as qt_procedimento,\nmp.vl_material as vl_procedimento,\nc.ie_status_acerto,\ndecode(c.ie_status_acerto, 1,'Provisorio' , 2 ,'Definitivo') as status_conta,\n'' as cd_tuss,\n0 as nr_seq_proc_interno\nfrom  conta_paciente c,\n      material_atend_paciente mp,\n      material m,\n      estabelecimento e,\n      atendimento_paciente at,\n      pessoa_fisica pf\nwhere c.nr_atendimento = mp.nr_atendimento\nand c.nr_interno_conta = mp.nr_interno_conta\nand mp.cd_material = m.cd_material\nand c.cd_estabelecimento = e.cd_estabelecimento\nand mp.nr_atendimento = at.nr_atendimento\nand at.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand at.dt_entrada between sysdate - 730 and sysdate\nand mp.cd_motivo_exc_conta is null",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Unidade_Producao_Medica",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Convenios",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select cn.cd_convenio, cn.ds_convenio, e.cd_estabelecimento, e.cd_cgc as cnpj\nfrom convenio cn,\n     convenio_estabelecimento ce,\n     estabelecimento e\nwhere cn.cd_convenio = ce.cd_convenio\nand ce.cd_estabelecimento = e.cd_estabelecimento\norder by 2",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Convenio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Setor",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select a.cd_setor_atendimento, a.ds_setor_atendimento, e.cd_cgc as cnpj\nfrom setor_atendimento a,\nestabelecimento e\nwhere a.cd_estabelecimento = e.cd_estabelecimento\nand e.ie_situacao = 'A'",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Setor",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Produção Médica CSI"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:25Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Retornos HOB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Ret_Pacientes_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select at.nr_atendimento as ultimo_atendimento, \npf.cd_pessoa_fisica, \nsubstr(pf.nm_pessoa_fisica,1,200) as nm_pessoa_fisica,\nsubstr(replace(LTRIM(translate(pf.nr_telefone_celular, translate(pf.nr_telefone_celular, '1234567890', ' ') , ' ')),' ',''),1,100) as nr_telefone_celular,\nsubstr(replace(LTRIM(translate(cpf.nr_telefone, translate(cpf.nr_telefone, '1234567890', ' ') , ' ')),' ',''),1,100) as nr_telefone,\nsubstr(cpf.ds_email,1,100) as ds_email,\n\nobter_cgc_estabelecimento(decode(pf.cd_estabelecimento, null, 1, pf.cd_estabelecimento)) as cnpj,\n'Nao informado' marca,\n'Nao informado' sigla_unidade,\n\npf.dt_nascimento,\npf.nr_cpf\n\nfrom pessoa_fisica pf,\natendimento_paciente at,\ncompl_pessoa_fisica cpf\nwhere pf.cd_pessoa_fisica = at.cd_pessoa_fisica (+)\nand pf.cd_pessoa_fisica = cpf.cd_pessoa_fisica\nand cpf.ie_tipo_complemento = 1\nand pf.ie_funcionario = 'N'\nand at.nr_atendimento = (select max(x.nr_atendimento) from atendimento_paciente x where x.cd_pessoa_fisica = pf.cd_pessoa_fisica)",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Ret_Pacientes_unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Ret_Atendimento_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select  at.nr_atendimento, at.cd_medico_resp as cd_medico, at.dt_entrada, at.cd_estabelecimento, e.cd_cgc, pf.nm_pessoa_fisica as nm_medico, e.nm_fantasia_estab, \n        cn.ds_convenio, at.cd_pessoa_fisica\nfrom atendimento_paciente at, \n     estabelecimento e,\n     pessoa_fisica pf,\n     atend_categoria_convenio c,\n     convenio cn\nwhere pf.cd_pessoa_fisica = at.cd_medico_resp\nand at.nr_atendimento = (select max(x.nr_atendimento) from atendimento_paciente x where x.cd_pessoa_fisica = at.cd_pessoa_fisica)\nand at.nr_atendimento = c.nr_atendimento\nand c.cd_convenio = cn.cd_convenio\nand at.cd_estabelecimento = e.cd_estabelecimento",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Ret_Atendimentos_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Ret_Agendamento_Futuros_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select  a.cd_pessoa_fisica, a.cd_convenio, \nto_char((a.hr_inicio) , 'dd/mm/yyyy') as data_agenda,\nto_char((a.hr_inicio) , 'hh24:mi:ss') as hora_agenda,\nag.cd_tipo_agenda,\npf.nm_pessoa_fisica as nm_medico,\nsubstr(obter_desc_procedimento(a.cd_procedimento, a.ie_origem_proced),1,200) as ds_procedimento_princ,\n\nsubstr((select Listagg(Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced), ' ;') within GROUP (ORDER BY Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced))  from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia),1,1000) as ds_procedimento_adic,\n\n1 + (select count(1)from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia) as ie_quantidade,\n\nobter_nome_usuario(a.nm_usuario_orig) as nm_usuario\n\nfrom agenda_paciente a,\n     agenda ag,\n     pessoa_fisica pf\nwhere a.cd_agenda = ag.cd_agenda\nand ag.cd_pessoa_fisica = pf.cd_pessoa_fisica \nand a.dt_agenda between inicio_dia(sysdate) and fim_dia(sysdate + 720)\nand a.cd_pessoa_fisica is not null\nand a.hr_inicio = (select max(x.hr_inicio) from agenda_paciente x where x.cd_pessoa_fisica = a.cd_pessoa_fisica)\nand ag.cd_tipo_agenda = 2\ngroup by \na.cd_pessoa_fisica, \na.cd_convenio, \nag.cd_tipo_agenda,\npf.nm_pessoa_fisica,\na.hr_inicio,\na.cd_procedimento,\na.ie_origem_proced,\na.nr_sequencia,\na.nm_usuario_orig",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Ret_Agendamentos_Futuros_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Ret_Consulta_Paciente_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select max(o.nr_sequencia) as nr_sequencia, o.dt_atualizacao, o.nr_atendimento, o.cd_medico as cd_medico ,obter_nome_pf(o.cd_medico) as nm_medico, c.qt_periodo||' '||c.ie_periodo as ds_retorno,  substr(z.conduta,1,1000) as ds_conduta,\nobter_pessoa_atendimento(o.nr_atendimento, 'C') as cd_pessoa_fisica\nfrom oft_consulta o,\n     (SELECT a.nr_seq_consulta, b.ds_resultado as conduta\n      FROM   med_avaliacao_paciente a \n      inner join med_avaliacao_result b ON b.nr_seq_avaliacao = a.nr_sequencia \n      WHERE  a.nr_seq_tipo_avaliacao = 34 \n      and  b.nr_seq_item = 457 --456, 458 ) \n      GROUP  BY a.nr_seq_consulta, b.ds_resultado) z,\n      oft_conduta c\nwhere o.nr_sequencia = z.nr_seq_consulta\nand o.nr_sequencia = c.nr_seq_consulta\nand o.nr_atendimento is not null\ngroup by o.nr_atendimento, o.dt_atualizacao, o.cd_pessoa_fisica, o.cd_medico, obter_nome_pf(o.cd_medico), z.conduta, c.qt_periodo, c.ie_periodo",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Ret_Consulta_Oft_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Create_Proximas_Consultas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Ret_Pacientes_Unidade",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Ret_Atendimento_Unidade",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Ret_Agendamento_Futuros_Unidade",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Ret_Consulta_Paciente_Unidade",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[CREATEPROXIMASCONSULTAS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera_tipo_agendas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Altera_marca",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERTIPOAGENDAS]",
							"storedProcedureParameters": {
								"FIELDNAME_DEST": {
									"value": "CD_TIPO_AGENDA",
									"type": "String"
								},
								"FIELDNAME_ORIG": {
									"value": "CD_TIPO_AGENDA",
									"type": "String"
								},
								"TABLENAME": {
									"value": "Ret_Proximas_Consultas",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera_marca",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Create_Proximas_Consultas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "sp_UPDATETRADEMARKV2",
							"storedProcedureParameters": {
								"CNPJ_FIELDNAME": {
									"value": "CNPJ",
									"type": "String"
								},
								"INITIALS_FIELDNAME": {
									"value": "SIGLA_UNIDADE",
									"type": "String"
								},
								"MARK_FIELDNAME": {
									"value": "MARCA",
									"type": "String"
								},
								"TABLENAME": {
									"value": "Ret_Proximas_Consultas",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera_telefones",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Altera_tipo_agendas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERTELEPHONEMASK]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera_marca_TBPacientes",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Ret_Pacientes_Unidade",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "sp_UPDATETRADEMARKV2",
							"storedProcedureParameters": {
								"CNPJ_FIELDNAME": {
									"value": "CNPJ",
									"type": "String"
								},
								"INITIALS_FIELDNAME": {
									"value": "SIGLA_UNIDADE",
									"type": "String"
								},
								"MARK_FIELDNAME": {
									"value": "MARCA",
									"type": "String"
								},
								"TABLENAME": {
									"value": "Ret_Pacientes_Unidade",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Atendimento/Retornos"
				},
				"annotations": [],
				"lastPublishTime": "2019-10-25T19:04:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Retornos Sadalla')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Ret_Pacientes_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select at.nr_atendimento as ultimo_atendimento, \npf.cd_pessoa_fisica, \nsubstr(pf.nm_pessoa_fisica,1,200) as nm_pessoa_fisica,\nsubstr(replace(LTRIM(translate(pf.nr_telefone_celular, translate(pf.nr_telefone_celular, '1234567890', ' ') , ' ')),' ',''),1,100) as nr_telefone_celular,\nsubstr(replace(LTRIM(translate(cpf.nr_telefone, translate(cpf.nr_telefone, '1234567890', ' ') , ' ')),' ',''),1,100) as nr_telefone,\nsubstr(cpf.ds_email,1,100) as ds_email,\n\nobter_cgc_estabelecimento(decode(pf.cd_estabelecimento, null, 1, pf.cd_estabelecimento)) as cnpj,\n'Nao informado' marca,\n'Nao informado' sigla_unidade,\n\npf.dt_nascimento,\npf.nr_cpf\n\nfrom pessoa_fisica pf,\natendimento_paciente at,\ncompl_pessoa_fisica cpf\nwhere pf.cd_pessoa_fisica = at.cd_pessoa_fisica (+)\nand pf.cd_pessoa_fisica = cpf.cd_pessoa_fisica\nand cpf.ie_tipo_complemento = 1\nand pf.ie_funcionario = 'N'\nand at.nr_atendimento = (select max(x.nr_atendimento) from atendimento_paciente x where x.cd_pessoa_fisica = pf.cd_pessoa_fisica)",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Ret_Pacientes_unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Ret_Agendamento_Futuros_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select a.cd_pessoa_fisica, a.cd_convenio, \nto_char(a.dt_agenda, 'dd/mm/yyyy') as data_agenda,\nto_char(a.dt_agenda, 'hh24:mi:ss') as hora_agenda,\nag.cd_tipo_agenda,\npf.nm_pessoa_fisica as nm_medico,\nobter_desc_procedimento(10502, 1) as ds_procedimento_princ,\n'' ds_procedimento_adic,\n1 as ie_quantidade,\nobter_nome_usuario(a.nm_usuario_origem) as nm_usuario\nfrom agenda_consulta a,\n     agenda ag,\n     pessoa_fisica pf\nwhere a.cd_agenda = ag.cd_agenda\nand ag.cd_pessoa_fisica = pf.cd_pessoa_fisica \nand a.dt_agenda between inicio_dia(sysdate) and fim_dia(sysdate + 720)\nand a.cd_pessoa_fisica is not null\nand a.dt_agenda = (select max(x.dt_agenda) from agenda_consulta x where x.cd_pessoa_fisica = a.cd_pessoa_fisica)",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Ret_Agendamentos_Futuros_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Ret_Consulta_Paciente_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select max(o.nr_sequencia) as nr_sequencia, o.dt_atualizacao, o.nr_atendimento, o.cd_profissional as cd_medico ,obter_nome_pf(o.cd_profissional) as nm_medico, r.ds_retorno, substr(o.ds_conduta,1,1000) as ds_conduta,\nobter_pessoa_atendimento(o.nr_atendimento, 'C') as cd_pessoa_fisica\nfrom oft_consulta_medica o,\n     oft_retorno r\nwhere o.nr_seq_retorno = r.nr_sequencia\nand o.nr_atendimento is not null\ngroup by o.dt_atualizacao ,o.nr_atendimento, o.cd_profissional,obter_nome_pf(o.cd_profissional), r.ds_retorno, o.ds_conduta",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Ret_Consulta_Oft_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Clear_Base",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Ret_Agendamentos_Fututos_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select a.cd_pessoa_fisica, a.cd_convenio, \nto_char(a.dt_agenda, 'dd/mm/yyyy') as data_agenda,\nto_char(a.dt_agenda, 'hh24:mi:ss') as hora_agenda,\nag.cd_tipo_agenda,\npf.nm_pessoa_fisica as nm_medico,\nobter_desc_procedimento(10502, 1) as ds_procedimento_princ,\n'' ds_procedimento_adic,\n1 as ie_quantidade,\nobter_nome_usuario(a.nm_usuario_origem) as nm_usuario\nfrom agenda_consulta a,\n     agenda ag,\n     pessoa_fisica pf\nwhere a.cd_agenda = ag.cd_agenda\nand ag.cd_pessoa_fisica = pf.cd_pessoa_fisica \nand a.dt_agenda between inicio_dia(sysdate) and fim_dia(sysdate + 720)\nand a.cd_pessoa_fisica is not null\nand a.dt_agenda = (select max(x.dt_agenda) from agenda_consulta x where x.cd_pessoa_fisica = a.cd_pessoa_fisica)",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Ret_Agendamentos_Futuros_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Pacientes_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select pf.cd_pessoa_fisica,\n       pf.nm_pessoa_fisica,\n       pf.nr_cpf,\n       to_char((pf.dt_nascimento) , 'dd/mm/yyyy') as dt_nascimento,\n       substr(replace(LTRIM(translate(pf.nr_telefone_celular, translate(pf.nr_telefone_celular, '1234567890', ' ') , ' ')),' ',''),1,100) as nr_telefone_celular,\n       substr(replace(LTRIM(translate(cpf.nr_telefone, translate(cpf.nr_telefone, '1234567890', ' ') , ' ')),' ',''),1,100) as nr_telefone\nfrom pessoa_fisica pf,\n     compl_pessoa_fisica cpf\nwhere pf.cd_pessoa_fisica = cpf.cd_pessoa_fisica\nand cpf.ie_tipo_complemento = 1\nand pf.ie_funcionario = 'N'",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Pacientes_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendamentos_Fututos_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select  a.cd_pessoa_fisica, a.cd_convenio, \nobter_cnpj_estabelecimento(ag.cd_estabelecimento) as cnpj,\nto_char((a.dt_agenda) , 'dd/mm/yyyy') as data_agenda,\nto_char((a.dt_agenda) , 'hh24:mi:ss') as hora_agenda,\nag.cd_tipo_agenda,\npf.nm_pessoa_fisica as nm_paciente,\nobter_desc_procedimento(10502, 1) as ds_procedimento_princ,\nsubstr((select Listagg(Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced), ' ;') within GROUP (ORDER BY Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced))  from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia),1,1000) as ds_procedimento_adic,\n1 + (select count(1)from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia) as ie_quantidade,\nobter_nome_usuario(a.nm_usuario_origem) as nm_usuario,\nobter_nome_pf(ag.cd_pessoa_fisica) as nm_medico,\n'NAO ENCONTRADO' SIGLA_UNIDADE,\n'NAO ENCONTRADO' MARCA,\nobter_valor_dominio(83,a.ie_status_agenda) as status_agenda\nfrom agenda ag,\n     agenda_consulta a,\n     pessoa_fisica pf\nwhere ag.cd_agenda = a.cd_agenda\nand   pf.cd_pessoa_fisica  = a.cd_pessoa_fisica\nand a.dt_agenda between inicio_dia(sysdate) and fim_dia(sysdate + 720)\nand   a.cd_pessoa_fisica is not null",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Agendamentos_Futuros_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Clear_Base",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[CLEARBASERETORNOS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Atendimento/Retornos"
				},
				"annotations": [],
				"lastPublishTime": "2019-10-17T21:38:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SALDO_RECEBIMENTO_BANCARIO')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SADALLA - SALDO_RECEBIMENTO_BANCARIO",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "TASY HTML - SALDO_RECEBIMENTO_BANCARIO_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select * from Tasy.VW_SALDO_RECEBIMENTO_BANCARIO",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete DW.TBL_SALDO_RECEBIMENTO_BANCARIO  WHERE ESTABELECIMENTO = '2'",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_DINAMICO",
								"type": "DatasetReference",
								"parameters": {
									"schema_destino": "DW",
									"tabela_destino": "TBL_SALDO_RECEBIMENTO_BANCARIO"
								}
							}
						]
					},
					{
						"name": "TASY HTML - SALDO_RECEBIMENTO_BANCARIO_copy1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT /*+ first_rows(100) */ \n'1' as ESTABELECIMENTO,\n DT_RECEBIMENTO ,\n  VL_RECEBIMENTO ,\n  VL_DESPESA_BANCARIA ,\n  VL_DEPOSITO ,\n  IE_STATUS ,\n  NR_SEQ_CONTA_BANCO ,\n  NR_SEQ_TRANS_FIN ,\n  NR_LOTE_CONTABIL ,\n  DT_FLUXO_CAIXA ,\n  DT_LIBERACAO ,\n  NR_SEQ_COBRANCA ,\n  IE_INTEGRAR_CB_FLUXO ,\n  DS_OBSERVACAO ,\n  NR_SEQUENCIA ,\n  IE_TIPO_GLOSA ,\n  NM_USUARIO ,\n  NR_ADIANTAMENTO ,\n  TX_CAMBIAL ,\n  VL_MOEDA_ORIGINAL ,\n  CD_ESTABELECIMENTO ,\n  CD_CONVENIO ,\n  DT_ATUALIZACAO ,\n  IE_DEDUZIR_ADIC ,\n  CD_MOEDA,\n  to_number(vl_recebimento - FAST_OPS.obter_baixa_conrece(nr_sequencia)) VL_SALDO,\n  substr(FAST_OPS.obter_dados_convenio_receb(nr_sequencia,'AD'),1,255) DS_ADIANTAMENTO,\n  substr(FAST_OPS.obter_ds_moeda_estrangeira(cd_moeda),1,255) DS_MOEDA_ESTRANGEIRA\nFROM FAST_OPS.CONVENIO_RECEB a\nWHERE 1 = 1 \n",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete DW.TBL_SALDO_RECEBIMENTO_BANCARIO  WHERE ESTABELECIMENTO = '1'",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_DINAMICO",
								"type": "DatasetReference",
								"parameters": {
									"schema_destino": "DW",
									"tabela_destino": "TBL_SALDO_RECEBIMENTO_BANCARIO"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART - HOSL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipelines desenvolvidos em conjunto com a empresa Class para a extração das informações de produção. Atualmente desativado.",
				"activities": [
					{
						"name": "SMART_HOSL_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        'Smart HOSL' as BASE\n        ,6 as CD_MARCA\n        ,'HOSL' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case str_emp.str_cod\n            when '10' then 13\n            when '70' then 15\n            when '11' then 14\n            when '910' then 13\n            when '191' then 16\n            when '91' then 13\n        end as CD_ESTABELECIMENTO\n        ,case str_emp.str_cod\n            when '10' then 'Gruta'\n            when '70' then 'Patio'\n            when '11' then 'Harmony'\n            when '910' then 'Gruta'\n            when '191' then 'Parque'\n            when '91' then 'Gruta'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,0) as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,0 as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and convert(varchar(10), osm_dthr, 103) = convert(varchar(10), getdate(), 103)\n)\n\nselect \n    BASE\n    ,CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' ))\n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCED_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCED_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BASE",
											"type": "String"
										},
										"sink": {
											"name": "BASE",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Processa Itens",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SMART_HOSL_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ProcessTempItems]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Tasy - Tabela Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processa Itens",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from TEMPTASY\nWhere Processed = 'Sim'",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MARCA",
											"type": "String"
										},
										"sink": {
											"name": "DS_MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PROCED_PRINCIPAL"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO_PRINCIPAL"
										}
									},
									{
										"source": {
											"name": "DS_PROCED_PRINCIPAL"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										},
										"sink": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "TIPO_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "TIPO_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CRM",
											"type": "String"
										},
										"sink": {
											"name": "CRM_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MPE",
											"type": "String"
										},
										"sink": {
											"name": "MPE_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "INTERCOMPANY",
											"type": "String"
										},
										"sink": {
											"name": "INTERCOMPANY_EXECUTOR",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlProcedimentosTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Temp Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Tasy - Tabela Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[TRUNCATETEMPTABLE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Producao Medica/Desenvolvimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART - IOF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipelines desenvolvidos em conjunto com a empresa Class para a extração das informações de produção. Atualmente desativado.",
				"activities": [
					{
						"name": "Processa Itens",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SMART_IOF_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ProcessTempItems]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Tasy - Tabela Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processa Itens",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from TEMPTASY\nWhere Processed = 'Sim'",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MARCA",
											"type": "String"
										},
										"sink": {
											"name": "DS_MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PROCED_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCED_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										},
										"sink": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "TIPO_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "TIPO_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CRM",
											"type": "String"
										},
										"sink": {
											"name": "CRM_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MPE",
											"type": "String"
										},
										"sink": {
											"name": "MPE_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "INTERCOMPANY",
											"type": "String"
										},
										"sink": {
											"name": "INTERCOMPANY_EXECUTOR",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlProcedimentosTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Temp Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Tasy - Tabela Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[TRUNCATETEMPTABLE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SMART_IOF_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        'Smart IOF' as BASE\n        ,3 as CD_MARCA\n        ,'DAYHORC' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case str_emp.str_cod \n            when '008' then 11\n        end as CD_ESTABELECIMENTO\n        ,case str_emp.str_cod \n            when '008' then 'IOF'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,0) as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,0 as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and convert(varchar(10), osm_dthr, 103) = convert(varchar(10), getdate(), 103)\n)\n\nselect \n    BASE\n    ,CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCED_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCED_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BASE",
											"type": "String"
										},
										"sink": {
											"name": "BASE",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Producao Medica/Desenvolvimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": []
		}
	]
}