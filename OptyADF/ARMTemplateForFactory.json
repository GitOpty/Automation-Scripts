{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "OptyADF"
		},
		"Az_blob_UPO_FPA_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Az_blob_UPO_FPA'"
		},
		"AzureBlobStorage_ANS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_ANS'"
		},
		"AzureBlobStorage_Oftalmodiagnose_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_Oftalmodiagnose'"
		},
		"AzureBlobStorage_Recebimento_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_Recebimento'"
		},
		"AzureBlobStorage_RepasseMedico_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_RepasseMedico'"
		},
		"AzureBlobStorage_VisaoDF_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage_VisaoDF'"
		},
		"AzureSQL_DB_Procedimentos_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSQL_DB_Procedimentos'"
		},
		"AzureSqlDatabase_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase'"
		},
		"AzureTableStorage_Oftalmodiagnose_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureTableStorage_Oftalmodiagnose'"
		},
		"DEV_SMART_ITAIGARA_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'DEV_SMART_ITAIGARA'"
		},
		"Five9_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Five9'"
		},
		"Historicos_Bilhetes_INOB_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'Historicos_Bilhetes_INOB'"
		},
		"LS_IRIS_ODBC_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_IRIS_ODBC'"
		},
		"LS_IRIS_ODBC_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_IRIS_ODBC'"
		},
		"LS_OFTALMODIAGNOSE_ODBC_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_OFTALMODIAGNOSE_ODBC'"
		},
		"LS_OFTALMODIAGNOSE_ODBC_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_OFTALMODIAGNOSE_ODBC'"
		},
		"SMART_HOSL_NEW_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SMART_HOSL_NEW'"
		},
		"SMART_INOB_NEW_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SMART_INOB_NEW'"
		},
		"SMART_IOF_NEW_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SMART_IOF_NEW'"
		},
		"SMART_ITABUNA_NEW_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SMART_ITABUNA_NEW'"
		},
		"SMART_ITAIGARA_NEW_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SMART_ITAIGARA_NEW'"
		},
		"SMART_Oftalmoclin_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SMART_Oftalmoclin'"
		},
		"SQL_CONTROLE_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQL_CONTROLE'"
		},
		"SQL_DESTINO_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQL_DESTINO'"
		},
		"SQL_ORIGEM_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQL_ORIGEM'"
		},
		"SadallaSeniorProd_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SadallaSeniorProd'"
		},
		"SadallaSeniorTeste_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SadallaSeniorTeste'"
		},
		"SadallaTasyProd_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SadallaTasyProd'"
		},
		"SadallaTasyProd_NEW_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SadallaTasyProd_NEW'"
		},
		"blob_din_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'blob_din'"
		},
		"sv_hmaisbrasildatadriven_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'sv_hmaisbrasildatadriven'"
		},
		"AzureDatabricks_properties_typeProperties_existingClusterId": {
			"type": "string",
			"defaultValue": "0914-173138-dl7s1vxp"
		},
		"CloudTasyProd_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "CLOUDTASY"
		},
		"Con_Files_VM_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Pasta repositório BI\\"
		},
		"Con_Files_VM_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\serv.corp.sa"
		},
		"Five9_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://api.five9.com/wsadmin/AdminWebService?wsdl&user=%27"
		},
		"Five9_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "api@opty"
		},
		"Folder_Nexcore_Consolidado_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Consolidado"
		},
		"Folder_Nexcore_Consolidado_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\serv.corp.sa"
		},
		"Folder_Requestia_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Requestia"
		},
		"Folder_Requestia_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\serv.corp.sa"
		},
		"Folder_StorageVM_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "c:\\Storage\\StorageVM"
		},
		"Folder_StorageVM_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\serv.corp.sa"
		},
		"Folder_VM_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Pasta repositório BI"
		},
		"Folder_VM_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\serv.corp.sa"
		},
		"HMO_SIMAH_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "HMOSimah"
		},
		"Historicos_AgentesPorDia_CSI_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\CSI\\AgentesPorDia"
		},
		"Historicos_AgentesPorDia_CSI_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_AgentesPorDia_DAYHORC_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\DAYHORC\\AgentesPorDia"
		},
		"Historicos_AgentesPorDia_DAYHORC_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_AgentesPorDia_HOBL2_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\HOBL2\\AgentesPorDia"
		},
		"Historicos_AgentesPorDia_HOBL2_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_AgentesPorDia_HOSL_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\HOSL\\AgentesPorDia"
		},
		"Historicos_AgentesPorDia_HOSL_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_AgentesPorDia_INOB_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\INOB\\AgentesPorDia"
		},
		"Historicos_AgentesPorDia_INOB_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_AgentesPorDia_SADALLA_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\SADALLA\\AgentesPorDia"
		},
		"Historicos_AgentesPorDia_SADALLA_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_AgentesPorHora_CSI_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\CSI\\AgentesPorHora"
		},
		"Historicos_AgentesPorHora_CSI_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_AgentesPorHora_DAYHORC_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\DAYHORC\\AgentesPorHora"
		},
		"Historicos_AgentesPorHora_DAYHORC_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_AgentesPorHora_HOBL2_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\HOBL2\\AgentesPorHora"
		},
		"Historicos_AgentesPorHora_HOBL2_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_AgentesPorHora_HOSL_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\HOSL\\AgentesPorHora"
		},
		"Historicos_AgentesPorHora_HOSL_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_AgentesPorHora_INOB_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\INOB\\AgentesPorHora"
		},
		"Historicos_AgentesPorHora_INOB_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_AgentesPorHora_SADALLA_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\SADALLA\\AgentesPorHora"
		},
		"Historicos_AgentesPorHora_SADALLA_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_Bilhetes_CSI_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\CSI\\BilheteLigacoes\\Novo"
		},
		"Historicos_Bilhetes_CSI_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_Bilhetes_DAYHORC_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\CSI\\BilheteLigacoes\\Novo"
		},
		"Historicos_Bilhetes_DAYHORC_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_Bilhetes_HOBL2_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\HOBL2\\BilheteLigacoes\\Novo"
		},
		"Historicos_Bilhetes_HOBL2_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_Bilhetes_HOSL_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\HOSL\\BilheteLigacoes\\Novo"
		},
		"Historicos_Bilhetes_HOSL_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_Bilhetes_INOB_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\INOB\\BilheteLigacoes\\Novo"
		},
		"Historicos_Bilhetes_INOB_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_Bilhetes_SADALLA_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\SADALLA\\BilheteLigacoes\\Novo"
		},
		"Historicos_Bilhetes_SADALLA_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_FIlasPorHoras_CSI_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\CSI\\FilasPorHoras"
		},
		"Historicos_FIlasPorHoras_CSI_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_FIlasPorHoras_DAYHORC_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\DAYHORC\\FilasPorHoras"
		},
		"Historicos_FIlasPorHoras_DAYHORC_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_FIlasPorHoras_HOBL2_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\HOBL2\\FilasPorHoras"
		},
		"Historicos_FIlasPorHoras_HOBL2_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_FIlasPorHoras_HOSL_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\HOSL\\FilasPorHoras"
		},
		"Historicos_FIlasPorHoras_HOSL_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_FIlasPorHoras_INOB_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\INOB\\FilasPorHoras"
		},
		"Historicos_FIlasPorHoras_INOB_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"Historicos_FIlasPorHoras_SADALLA_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files\\Nexcore\\Historicos NEXCORE\\SADALLA\\FilasPorHoras"
		},
		"Historicos_FIlasPorHoras_SADALLA_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\sa.automation"
		},
		"INST_DR_OSMAR_AGENDAMENTO_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaAgendamento?token=0da757e08fb5cddabf3cd3eb2ed59a68"
		},
		"INST_DR_OSMAR_AGENDAMENTO_DIARIO_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaAgendamento?token=0da757e08fb5cddabf3cd3eb2ed59a68&leituraDiaria=S"
		},
		"INST_DR_OSMAR_ATENDIMENTO_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaAtendimento?token=0da757e08fb5cddabf3cd3eb2ed59a68"
		},
		"INST_DR_OSMAR_ATENDIMENTO_DIARIO_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaAtendimento?token=0da757e08fb5cddabf3cd3eb2ed59a68&leituraDiaria=S"
		},
		"INST_DR_OSMAR_CAIXA_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaCaixa?token=0da757e08fb5cddabf3cd3eb2ed59a68"
		},
		"INST_DR_OSMAR_CAIXA_DIARIO_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaCaixa?token=0da757e08fb5cddabf3cd3eb2ed59a68&leituraDiaria=S"
		},
		"INST_DR_OSMAR_CONTASPAGARRECEBER_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaContasPagarReceber?token=0da757e08fb5cddabf3cd3eb2ed59a68"
		},
		"INST_DR_OSMAR_CONTASPAGARRECEBER_DIARIAS_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaContasPagarReceber?token=0da757e08fb5cddabf3cd3eb2ed59a68&leituraDiaria=S"
		},
		"INST_DR_OSMAR_FATURAMENTO_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaFaturamento?token=0da757e08fb5cddabf3cd3eb2ed59a68"
		},
		"INST_DR_OSMAR_FATURAMENTO_DIARIO_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaFaturamento?token=0da757e08fb5cddabf3cd3eb2ed59a68&leituraDiaria=S"
		},
		"INST_DR_OSMAR_FINANCEIRO_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaFinanceiro?token=0da757e08fb5cddabf3cd3eb2ed59a68"
		},
		"INST_DR_OSMAR_FINANCEIRO_DIARIO_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaFinanceiro?token=0da757e08fb5cddabf3cd3eb2ed59a68&leituraDiaria=S"
		},
		"INST_DR_OSMAR_PACIENTE_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaPaciente?token=0da757e08fb5cddabf3cd3eb2ed59a68"
		},
		"INST_DR_OSMAR_PACIENTE_DIARIO_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaPaciente?token=0da757e08fb5cddabf3cd3eb2ed59a68&leituraDiaria=S"
		},
		"INST_DR_OSMAR_PROFISSIONAL_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaProfissional?token=0da757e08fb5cddabf3cd3eb2ed59a68"
		},
		"INST_DR_OSMAR_PROFISSIONAL_DIARIO_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaProfissional?token=0da757e08fb5cddabf3cd3eb2ed59a68&leituraDiaria=S"
		},
		"INST_DR_OSMAR_QUESTIONARIO_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaQuestionario?token=0da757e08fb5cddabf3cd3eb2ed59a68"
		},
		"INST_DR_OSMAR_QUESTIONARIO_DIARIO_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaQuestionario?token=0da757e08fb5cddabf3cd3eb2ed59a68&leituraDiaria=S"
		},
		"INST_DR_OSMAR_REPASSE_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaRepasse?token=0da757e08fb5cddabf3cd3eb2ed59a68"
		},
		"INST_DR_OSMAR_REPASSE_DIARIO_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaRepasse?token=0da757e08fb5cddabf3cd3eb2ed59a68&leituraDiaria=S"
		},
		"INST_DR_OSMAR_TELEORIENTACAO_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaTeleorientacao?token=0da757e08fb5cddabf3cd3eb2ed59a68"
		},
		"INST_DR_OSMAR_TELEORIENTACAO_DIARIO_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaTeleorientacao?token=0da757e08fb5cddabf3cd3eb2ed59a68&leituraDiaria=S"
		},
		"INST_DR_OSMAR_VENDA_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaVenda?token=0da757e08fb5cddabf3cd3eb2ed59a68"
		},
		"INST_DR_OSMAR_VENDA_DIARIA_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://osmardeoliveira.clientetdsa.com.br/osmardeoliveira/api/IntegracaoBi/ConsultaVenda?token=0da757e08fb5cddabf3cd3eb2ed59a68&leituraDiaria=S"
		},
		"LINK_PASTA_BI_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Power BI Gateway Files"
		},
		"LINK_PASTA_BI_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "hobrasil\\serv.corp.sa"
		},
		"LS_IRIS_ODBC_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "BI"
		},
		"LS_OFTALMODIAGNOSE_ODBC_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "DBA"
		},
		"LS_Otorrinocenter_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "otorrinocenter"
		},
		"Naja Server_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "NajaPE"
		},
		"Oracle_Log_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "@linkedService().NOME_KEYVAULT"
		},
		"Ortoity_Oracle_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "Ortocity"
		},
		"SLFW_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "@linkedService().NOME_KEYVAULT_SECRET"
		},
		"SV_OptyKeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://OptyKeyVault.vault.azure.net/"
		},
		"Smart_Connections_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "@linkedService().NOME_KEYVAULT_SECRET"
		},
		"TECHSALLUS_DINAMICO_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "otorrinocenter"
		},
		"Tasy_Connections_properties_typeProperties_connectionString_secretName": {
			"type": "string",
			"defaultValue": "@linkedService().NOME_KEYVAULT_SECRET"
		},
		"UROBRASIL_Agendamento_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaAgendamento?token=536948100cf9fa52cf678e2ea20e02ed"
		},
		"UROBRASIL_Agendamento_Diario_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaAgendamento?token=536948100cf9fa52cf678e2ea20e02ed&leituraDiaria=S"
		},
		"UROBRASIL_Atendimento_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaAtendimento?token=536948100cf9fa52cf678e2ea20e02ed"
		},
		"UROBRASIL_Atendimento_Diario_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaAtendimento?token=536948100cf9fa52cf678e2ea20e02ed&leituraDiaria=S"
		},
		"UROBRASIL_Caixa_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaCaixa?token=536948100cf9fa52cf678e2ea20e02ed"
		},
		"UROBRASIL_Caixa_Diario_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaCaixa?token=536948100cf9fa52cf678e2ea20e02ed&leituraDiaria=S"
		},
		"UROBRASIL_ContasPagarReceber_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaContasPagarReceber?token=536948100cf9fa52cf678e2ea20e02ed"
		},
		"UROBRASIL_ContasPagarReceber_Diarias_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaContasPagarReceber?token=536948100cf9fa52cf678e2ea20e02ed&leituraDiaria=S"
		},
		"UROBRASIL_Faturamento_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaFaturamento?token=536948100cf9fa52cf678e2ea20e02ed"
		},
		"UROBRASIL_Faturamento_Diario_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaFaturamento?token=536948100cf9fa52cf678e2ea20e02ed&leituraDiaria=S"
		},
		"UROBRASIL_Financeiro_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaFinanceiro?token=536948100cf9fa52cf678e2ea20e02ed"
		},
		"UROBRASIL_Financeiro_Diario_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaFinanceiro?token=536948100cf9fa52cf678e2ea20e02ed&leituraDiaria=S"
		},
		"UROBRASIL_Paciente_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaPaciente?token=536948100cf9fa52cf678e2ea20e02ed"
		},
		"UROBRASIL_Paciente_Diario_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaPaciente?token=536948100cf9fa52cf678e2ea20e02ed&leituraDiaria=S"
		},
		"UROBRASIL_Profissional_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaProfissional?token=536948100cf9fa52cf678e2ea20e02ed"
		},
		"UROBRASIL_Profissional_Diario_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaProfissional?token=536948100cf9fa52cf678e2ea20e02ed&leituraDiaria=S"
		},
		"UROBRASIL_Questionario_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaQuestionario?token=536948100cf9fa52cf678e2ea20e02ed"
		},
		"UROBRASIL_Questionario_Diario_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaQuestionario?token=536948100cf9fa52cf678e2ea20e02ed&leituraDiaria=S"
		},
		"UROBRASIL_Repasse_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaRepasse?token=536948100cf9fa52cf678e2ea20e02ed"
		},
		"UROBRASIL_Repasse_Diario_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaRepasse?token=536948100cf9fa52cf678e2ea20e02ed&leituraDiaria=S"
		},
		"UROBRASIL_Teleorientacao_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaTeleorientacao?token=536948100cf9fa52cf678e2ea20e02ed"
		},
		"UROBRASIL_Teleorientacao_Diaria_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaTeleorientacao?token=536948100cf9fa52cf678e2ea20e02ed&leituraDiaria=S"
		},
		"UROBRASIL_Venda_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaVenda?token=536948100cf9fa52cf678e2ea20e02ed"
		},
		"UROBRASIL_VendaDiaria_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://urobrasil.tdsasistemas.com.br/Urobrasil/api/IntegracaoBi/ConsultaVenda?token=536948100cf9fa52cf678e2ea20e02ed&leituraDiaria=S"
		},
		"sv_hmaisbrasildatadriven_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://hmaisbrasildatadriven.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/AJ_MATERIAL_ATEND_PACIENTE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DW_GERA_BUSCA_DT_MAT_ATEND_PAC",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_AJ_DW_GERA_BUSCA_DT_MATERIAL_ATEND_PACIENTE"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Busca Dt Reprocessar Mat",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DW_GERA_BUSCA_DT_MAT_ATEND_PAC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT\n    A.ESTABELECIMENTO\n    ,A.NOME_KEYVAULT_SECRET\n    ,CAST(A.INICIO_MES AS VARCHAR(200)) as INICIO_MES\n    ,CAST(A.FIM_MES AS VARCHAR(200)) as FIM_MES\n    ,'MATERIAL_ATEND_PACIENTE' AS NM_PROCESSO\nFROM STG.tmp_aj_dw_material_atend_paciente  A",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AZ_SQL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Carga Dados Novos",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Limpa Tabela Material Atendimento",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Busca Dt Reprocessar Mat').output.value",
								"type": "Expression"
							},
							"batchCount": 8,
							"activities": [
								{
									"name": "Gerar Dados",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@concat('SELECT * FROM VW_MATERIAL_ATEND_PACIENTE WHERE DT_ATUALIZACAO BETWEEN','''',item().INICIO_MES,'''',' and ','''',item().FIM_MES,'''')",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ORACLE_LOG",
											"type": "DatasetReference",
											"parameters": {
												"nm_keyvault": {
													"value": "@item().NOME_KEYVAULT_SECRET",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "stg",
												"tabela_destino": {
													"value": "@concat('AJ_',item().NM_PROCESSO)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Merge Dw Mat Atend Paciente",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Carga Dados Novos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "\t \n--Sincronize a tabela de destino com dados atualizados da tabela de origem \nMERGE \n\t[dw].[TBL_MATERIAL_ATEND_PACIENTE] AS destino \nUSING  \n\tstg.AJ_MATERIAL_ATEND_PACIENTE AS origem \n \n\tON (destino.NR_SEQUENCIA = origem.NR_SEQUENCIA AND destino.estabelecimento = origem.estabelecimento) \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração \nWHEN MATCHED  \nTHEN UPDATE SET       \ndestino.[ESTABELECIMENTO] = origem.[ESTABELECIMENTO], \ndestino.[NR_SEQUENCIA] = origem.[NR_SEQUENCIA], \ndestino.[NR_ATENDIMENTO] = origem.[NR_ATENDIMENTO], \ndestino.[DT_ENTRADA_UNIDADE] = origem.[DT_ENTRADA_UNIDADE], \ndestino.[CD_MATERIAL] = origem.[CD_MATERIAL], \ndestino.[DT_ATENDIMENTO] = origem.[DT_ATENDIMENTO], \ndestino.[CD_UNIDADE_MEDIDA] = origem.[CD_UNIDADE_MEDIDA], \ndestino.[QT_MATERIAL] = origem.[QT_MATERIAL], \ndestino.[DT_ATUALIZACAO] = origem.[DT_ATUALIZACAO], \ndestino.[NM_USUARIO] = origem.[NM_USUARIO], \ndestino.[CD_CONVENIO] = origem.[CD_CONVENIO], \ndestino.[CD_CATEGORIA] = origem.[CD_CATEGORIA], \ndestino.[DT_PRESCRICAO] = origem.[DT_PRESCRICAO], \ndestino.[CD_MATERIAL_PRESCRICAO] = origem.[CD_MATERIAL_PRESCRICAO], \ndestino.[IE_VIA_APLICACAO] = origem.[IE_VIA_APLICACAO], \ndestino.[DS_OBSERVACAO] = origem.[DS_OBSERVACAO], \ndestino.[VL_MATERIAL] = origem.[VL_MATERIAL], \ndestino.[CD_TAB_PRECO_MATERIAL] = origem.[CD_TAB_PRECO_MATERIAL], \ndestino.[DT_VIGENCIA_TABELA] = origem.[DT_VIGENCIA_TABELA], \ndestino.[DT_ACERTO_CONTA] = origem.[DT_ACERTO_CONTA], \ndestino.[DT_ACERTO_CONVENIO] = origem.[DT_ACERTO_CONVENIO], \ndestino.[NR_PRESCRICAO] = origem.[NR_PRESCRICAO], \ndestino.[NR_SEQUENCIA_PRESCRICAO] = origem.[NR_SEQUENCIA_PRESCRICAO], \ndestino.[CD_MOTIVO_EXC_CONTA] = origem.[CD_MOTIVO_EXC_CONTA], \ndestino.[DS_COMPL_MOTIVO_EXCON] = origem.[DS_COMPL_MOTIVO_EXCON], \ndestino.[CD_LOCAL_ESTOQUE] = origem.[CD_LOCAL_ESTOQUE], \ndestino.[DT_ATUALIZACAO_ESTOQUE] = origem.[DT_ATUALIZACAO_ESTOQUE], \ndestino.[CD_ACAO] = origem.[CD_ACAO], \ndestino.[CD_SETOR_ATENDIMENTO] = origem.[CD_SETOR_ATENDIMENTO], \ndestino.[QT_DEVOLVIDA] = origem.[QT_DEVOLVIDA], \ndestino.[CD_MOTIVO_DEVOLUCAO] = origem.[CD_MOTIVO_DEVOLUCAO], \ndestino.[NR_CIRURGIA] = origem.[NR_CIRURGIA], \ndestino.[NR_DOC_CONVENIO] = origem.[NR_DOC_CONVENIO], \ndestino.[QT_EXECUTADA] = origem.[QT_EXECUTADA], \ndestino.[DT_CONTA] = origem.[DT_CONTA], \ndestino.[VL_UNITARIO] = origem.[VL_UNITARIO], \ndestino.[CD_PROCED_REFERENCIA] = origem.[CD_PROCED_REFERENCIA], \ndestino.[CD_CONTA_CONTABIL] = origem.[CD_CONTA_CONTABIL], \ndestino.[QT_AJUSTE_CONTA] = origem.[QT_AJUSTE_CONTA], \ndestino.[NR_AIH] = origem.[NR_AIH], \ndestino.[IE_VALOR_INFORMADO] = origem.[IE_VALOR_INFORMADO], \ndestino.[CD_ESTABELECIMENTO_CUSTO] = origem.[CD_ESTABELECIMENTO_CUSTO], \ndestino.[CD_TABELA_CUSTO] = origem.[CD_TABELA_CUSTO], \ndestino.[CD_SITUACAO_GLOSA] = origem.[CD_SITUACAO_GLOSA], \ndestino.[NR_LOTE_CONTABIL] = origem.[NR_LOTE_CONTABIL], \ndestino.[CD_MATERIAL_CONVENIO] = origem.[CD_MATERIAL_CONVENIO], \ndestino.[NR_SEQ_AUTORIZACAO] = origem.[NR_SEQ_AUTORIZACAO], \ndestino.[NR_INTERNO_CONTA] = origem.[NR_INTERNO_CONTA], \ndestino.[NR_SEQ_PROC_PRINC] = origem.[NR_SEQ_PROC_PRINC], \ndestino.[IE_GUIA_INFORMADA] = origem.[IE_GUIA_INFORMADA], \ndestino.[CD_ESPECIALIDADE] = origem.[CD_ESPECIALIDADE], \ndestino.[NM_USUARIO_ORIGINAL] = origem.[NM_USUARIO_ORIGINAL], \ndestino.[NR_SEQ_PROC_PACOTE] = origem.[NR_SEQ_PROC_PACOTE], \ndestino.[VL_TABELA_ORIGINAL] = origem.[VL_TABELA_ORIGINAL], \ndestino.[IE_EMITE_CONTA] = origem.[IE_EMITE_CONTA], \ndestino.[CD_SETOR_RECEITA] = origem.[CD_SETOR_RECEITA], \ndestino.[CD_CGC_FORNECEDOR] = origem.[CD_CGC_FORNECEDOR], \ndestino.[NR_SEQ_LOTE_FORNEC] = origem.[NR_SEQ_LOTE_FORNEC], \ndestino.[CD_MATERIAL_EXEC] = origem.[CD_MATERIAL_EXEC], \ndestino.[NR_SEQ_ATEPACU] = origem.[NR_SEQ_ATEPACU], \ndestino.[IE_TIPO_GUIA] = origem.[IE_TIPO_GUIA], \ndestino.[NR_DOC_INTERNO] = origem.[NR_DOC_INTERNO], \ndestino.[IE_AUDITORIA] = origem.[IE_AUDITORIA], \ndestino.[NR_SEQ_GRUPO_REC] = origem.[NR_SEQ_GRUPO_REC], \ndestino.[CD_MOTIVO_AJUSTE] = origem.[CD_MOTIVO_AJUSTE], \ndestino.[NR_SEQ_TIPO_BAIXA] = origem.[NR_SEQ_TIPO_BAIXA], \ndestino.[NR_SEQ_COR_EXEC] = origem.[NR_SEQ_COR_EXEC], \ndestino.[NR_SEQ_ORIGEM] = origem.[NR_SEQ_ORIGEM], \ndestino.[IE_DISPERSAO] = origem.[IE_DISPERSAO], \ndestino.[NR_SEQ_CONTA_ORIGEM] = origem.[NR_SEQ_CONTA_ORIGEM], \ndestino.[CD_SETOR_PACIENTE] = origem.[CD_SETOR_PACIENTE], \ndestino.[NR_SEQ_PARCIAL] = origem.[NR_SEQ_PARCIAL], \ndestino.[CD_CGC_PRESTADOR] = origem.[CD_CGC_PRESTADOR], \ndestino.[NR_SEQ_AIH] = origem.[NR_SEQ_AIH], \ndestino.[DT_CONFERENCIA] = origem.[DT_CONFERENCIA], \ndestino.[NR_SERIE_MATERIAL] = origem.[NR_SERIE_MATERIAL], \ndestino.[NR_SEQ_ORDEM_PROD] = origem.[NR_SEQ_ORDEM_PROD], \ndestino.[NR_RECEITA] = origem.[NR_RECEITA], \ndestino.[DT_ATUALIZACAO_NREC] = origem.[DT_ATUALIZACAO_NREC], \ndestino.[NM_USUARIO_NREC] = origem.[NM_USUARIO_NREC], \ndestino.[IE_ORIGEM_PRECO] = origem.[IE_ORIGEM_PRECO], \ndestino.[QT_ESTOQUE] = origem.[QT_ESTOQUE], \ndestino.[NR_SEQ_REGRA_LANC] = origem.[NR_SEQ_REGRA_LANC], \ndestino.[NR_SEQ_TISS_TABELA] = origem.[NR_SEQ_TISS_TABELA], \ndestino.[IE_RESPONSAVEL_CREDITO] = origem.[IE_RESPONSAVEL_CREDITO], \ndestino.[IE_TISS_TIPO_GUIA_DESP] = origem.[IE_TISS_TIPO_GUIA_DESP], \ndestino.[IE_TISS_TIPO_DESPESA] = origem.[IE_TISS_TIPO_DESPESA], \ndestino.[CD_CGC_PRESTADOR_TISS] = origem.[CD_CGC_PRESTADOR_TISS], \ndestino.[CD_SENHA] = origem.[CD_SENHA], \ndestino.[IE_ESTORNO_CONTA] = origem.[IE_ESTORNO_CONTA], \ndestino.[CD_MATERIAL_TISS] = origem.[CD_MATERIAL_TISS], \ndestino.[DS_MATERIAL_TISS] = origem.[DS_MATERIAL_TISS], \ndestino.[CD_KIT_MATERIAL] = origem.[CD_KIT_MATERIAL], \ndestino.[CD_TAB_CUSTO_PRECO] = origem.[CD_TAB_CUSTO_PRECO], \ndestino.[NR_SEQ_MAT_AUTOR] = origem.[NR_SEQ_MAT_AUTOR], \ndestino.[TX_MATERIAL] = origem.[TX_MATERIAL], \ndestino.[CD_PRESTADOR_TISS] = origem.[CD_PRESTADOR_TISS], \ndestino.[NR_SEQ_MAT_HOR] = origem.[NR_SEQ_MAT_HOR], \ndestino.[CD_CGC_PREST_SOLIC_TISS] = origem.[CD_CGC_PREST_SOLIC_TISS], \ndestino.[NR_SEQ_LOTE_AP] = origem.[NR_SEQ_LOTE_AP], \ndestino.[NR_SEQ_PROCESSO] = origem.[NR_SEQ_PROCESSO], \ndestino.[IE_TISS_DESP_HONOR] = origem.[IE_TISS_DESP_HONOR], \ndestino.[NR_SEQ_MAT_EST] = origem.[NR_SEQ_MAT_EST], \ndestino.[NR_SEQ_MAT_CRIT_REPASSE] = origem.[NR_SEQ_MAT_CRIT_REPASSE], \ndestino.[CD_MEDICO_PRESCRITOR] = origem.[CD_MEDICO_PRESCRITOR], \ndestino.[NR_DEVOLUCAO] = origem.[NR_DEVOLUCAO], \ndestino.[NR_SEQ_ITEM_DEVOL] = origem.[NR_SEQ_ITEM_DEVOL], \ndestino.[DS_PRESTADOR_TISS] = origem.[DS_PRESTADOR_TISS], \ndestino.[CD_FUNCAO] = origem.[CD_FUNCAO], \ndestino.[CD_PERFIL] = origem.[CD_PERFIL], \ndestino.[NR_SEQ_REG_TEMPLATE] = origem.[NR_SEQ_REG_TEMPLATE], \ndestino.[NR_SEQ_REGRA_AJUSTE_MAT] = origem.[NR_SEQ_REGRA_AJUSTE_MAT], \ndestino.[CD_MEDICO_EXEC_TISS] = origem.[CD_MEDICO_EXEC_TISS], \ndestino.[IE_GLOSADO] = origem.[IE_GLOSADO], \ndestino.[VL_CUSTO_MAT_REPASSE] = origem.[VL_CUSTO_MAT_REPASSE], \ndestino.[NR_SEQ_JUST_VALOR_INF] = origem.[NR_SEQ_JUST_VALOR_INF], \ndestino.[NR_SEQ_MAT_GLOSA] = origem.[NR_SEQ_MAT_GLOSA], \ndestino.[CD_LABORATORIO] = origem.[CD_LABORATORIO], \ndestino.[CD_MEDICAMENTO] = origem.[CD_MEDICAMENTO], \ndestino.[CD_APRESENTACAO] = origem.[CD_APRESENTACAO], \ndestino.[VL_MATERIAL_TISS] = origem.[VL_MATERIAL_TISS], \ndestino.[VL_REPASSE_CALC] = origem.[VL_REPASSE_CALC], \ndestino.[NR_SEQ_KIT_ESTOQUE] = origem.[NR_SEQ_KIT_ESTOQUE], \ndestino.[CD_PRESTADOR_SOLIC_TISS] = origem.[CD_PRESTADOR_SOLIC_TISS], \ndestino.[DS_PRESTADOR_SOLIC_TISS] = origem.[DS_PRESTADOR_SOLIC_TISS], \ndestino.[NR_SEQ_ENTREGA_MEDIC_FA] = origem.[NR_SEQ_ENTREGA_MEDIC_FA], \ndestino.[IE_OPME_INTEGRACAO] = origem.[IE_OPME_INTEGRACAO], \ndestino.[NR_SEQ_DEVOL_EXEC] = origem.[NR_SEQ_DEVOL_EXEC], \ndestino.[IE_VERSAO_ATUAL] = origem.[IE_VERSAO_ATUAL], \ndestino.[NM_USUARIO_ATEND_FAR] = origem.[NM_USUARIO_ATEND_FAR], \ndestino.[NM_USUARIO_ATEND_ENF] = origem.[NM_USUARIO_ATEND_ENF], \ndestino.[NM_USUARIO_RETIRANTE] = origem.[NM_USUARIO_RETIRANTE], \ndestino.[DS_JUSTIFICATIVA] = origem.[DS_JUSTIFICATIVA], \ndestino.[IE_TRAT_CONTA_RN] = origem.[IE_TRAT_CONTA_RN], \ndestino.[NR_SEQ_AGENDA_PAC_OPME] = origem.[NR_SEQ_AGENDA_PAC_OPME], \ndestino.[NR_SEQ_DOACAO] = origem.[NR_SEQ_DOACAO], \ndestino.[NR_SEQ_DIALISADOR] = origem.[NR_SEQ_DIALISADOR], \ndestino.[NR_SEQ_PEPO] = origem.[NR_SEQ_PEPO], \ndestino.[NR_SEQ_MOTIVO_INCL] = origem.[NR_SEQ_MOTIVO_INCL], \ndestino.[IE_STATUS_ITEM_TABELA] = origem.[IE_STATUS_ITEM_TABELA], \ndestino.[DT_CONVERSAO_MANUAL] = origem.[DT_CONVERSAO_MANUAL], \ndestino.[NR_SEQ_RESERVA] = origem.[NR_SEQ_RESERVA], \ndestino.[NR_SEQ_TRANSFUSAO] = origem.[NR_SEQ_TRANSFUSAO], \ndestino.[DT_DESDOBRAMENTO] = origem.[DT_DESDOBRAMENTO], \ndestino.[CD_CENTRO_CUSTO_RECEITA] = origem.[CD_CENTRO_CUSTO_RECEITA], \ndestino.[CD_SIMPRO] = origem.[CD_SIMPRO], \ndestino.[DS_JUST_VALOR_INF] = origem.[DS_JUST_VALOR_INF], \ndestino.[IE_FAT_DIRETO] = origem.[IE_FAT_DIRETO], \ndestino.[DS_JUST_ALTER_DATA] = origem.[DS_JUST_ALTER_DATA], \ndestino.[NR_SEQ_ORIG_AUDIT] = origem.[NR_SEQ_ORIG_AUDIT], \ndestino.[CD_MEDICO_AUTENTICACAO] = origem.[CD_MEDICO_AUTENTICACAO], \ndestino.[DT_AUTENTICACAO] = origem.[DT_AUTENTICACAO], \ndestino.[DS_BIOMETRIA] = origem.[DS_BIOMETRIA], \ndestino.[NR_SEQ_GEDIPA_ETAPA_DISP] = origem.[NR_SEQ_GEDIPA_ETAPA_DISP], \ndestino.[IE_RATEAR_ITEM] = origem.[IE_RATEAR_ITEM], \ndestino.[NR_SEQ_BRAS_PRECO] = origem.[NR_SEQ_BRAS_PRECO], \ndestino.[NR_SEQ_CONV_BRAS] = origem.[NR_SEQ_CONV_BRAS], \ndestino.[NR_SEQ_MAT_BRAS] = origem.[NR_SEQ_MAT_BRAS], \ndestino.[CD_MATERIAL_TUSS] = origem.[CD_MATERIAL_TUSS], \ndestino.[NR_SEQ_TUSS_MAT_ITEM] = origem.[NR_SEQ_TUSS_MAT_ITEM], \ndestino.[NR_REGISTRO_ANVISA_TISS] = origem.[NR_REGISTRO_ANVISA_TISS], \ndestino.[IE_OPME] = origem.[IE_OPME], \ndestino.[DS_STACK] = origem.[DS_STACK], \ndestino.[NR_SEQ_MAT_SIMP] = origem.[NR_SEQ_MAT_SIMP], \ndestino.[NR_SEQ_CONV_SIMP] = origem.[NR_SEQ_CONV_SIMP], \ndestino.[NR_SEQ_SIMP_PRECO] = origem.[NR_SEQ_SIMP_PRECO], \ndestino.[NR_SEQ_MAT_DESDOB] = origem.[NR_SEQ_MAT_DESDOB], \ndestino.[DS_MATERIAL_TUSS] = origem.[DS_MATERIAL_TUSS], \ndestino.[IE_VALOR_AUTORIZADO] = origem.[IE_VALOR_AUTORIZADO], \ndestino.[CD_JUSTI_CONTRASTE] = origem.[CD_JUSTI_CONTRASTE], \ndestino.[NR_SEQ_CONTA_REVERSAO] = origem.[NR_SEQ_CONTA_REVERSAO], \ndestino.[CD_UNID_MEDIDA_CONV] = origem.[CD_UNID_MEDIDA_CONV], \ndestino.[TX_CONVERSAO_QTDE] = origem.[TX_CONVERSAO_QTDE], \ndestino.[NR_SEQ_REGRA_PEPO] = origem.[NR_SEQ_REGRA_PEPO] \n \n\t\t\t\t \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino \nWHEN NOT MATCHED BY TARGET  \nTHEN INSERT  \n\tVALUES (   \norigem.[ESTABELECIMENTO], \norigem.[NR_SEQUENCIA], \norigem.[NR_ATENDIMENTO], \norigem.[DT_ENTRADA_UNIDADE], \norigem.[CD_MATERIAL], \norigem.[DT_ATENDIMENTO], \norigem.[CD_UNIDADE_MEDIDA], \norigem.[QT_MATERIAL], \norigem.[DT_ATUALIZACAO], \norigem.[NM_USUARIO], \norigem.[CD_CONVENIO], \norigem.[CD_CATEGORIA], \norigem.[DT_PRESCRICAO], \norigem.[CD_MATERIAL_PRESCRICAO], \norigem.[IE_VIA_APLICACAO], \norigem.[DS_OBSERVACAO], \norigem.[VL_MATERIAL], \norigem.[CD_TAB_PRECO_MATERIAL], \norigem.[DT_VIGENCIA_TABELA], \norigem.[DT_ACERTO_CONTA], \norigem.[DT_ACERTO_CONVENIO], \norigem.[NR_PRESCRICAO], \norigem.[NR_SEQUENCIA_PRESCRICAO], \norigem.[CD_MOTIVO_EXC_CONTA], \norigem.[DS_COMPL_MOTIVO_EXCON], \norigem.[CD_LOCAL_ESTOQUE], \norigem.[DT_ATUALIZACAO_ESTOQUE], \norigem.[CD_ACAO], \norigem.[CD_SETOR_ATENDIMENTO], \norigem.[QT_DEVOLVIDA], \norigem.[CD_MOTIVO_DEVOLUCAO], \norigem.[NR_CIRURGIA], \norigem.[NR_DOC_CONVENIO], \norigem.[QT_EXECUTADA], \norigem.[DT_CONTA], \norigem.[VL_UNITARIO], \norigem.[CD_PROCED_REFERENCIA], \norigem.[CD_CONTA_CONTABIL], \norigem.[QT_AJUSTE_CONTA], \norigem.[NR_AIH], \norigem.[IE_VALOR_INFORMADO], \norigem.[CD_ESTABELECIMENTO_CUSTO], \norigem.[CD_TABELA_CUSTO], \norigem.[CD_SITUACAO_GLOSA], \norigem.[NR_LOTE_CONTABIL], \norigem.[CD_MATERIAL_CONVENIO], \norigem.[NR_SEQ_AUTORIZACAO], \norigem.[NR_INTERNO_CONTA], \norigem.[NR_SEQ_PROC_PRINC], \norigem.[IE_GUIA_INFORMADA], \norigem.[CD_ESPECIALIDADE], \norigem.[NM_USUARIO_ORIGINAL], \norigem.[NR_SEQ_PROC_PACOTE], \norigem.[VL_TABELA_ORIGINAL], \norigem.[IE_EMITE_CONTA], \norigem.[CD_SETOR_RECEITA], \norigem.[CD_CGC_FORNECEDOR], \norigem.[NR_SEQ_LOTE_FORNEC], \norigem.[CD_MATERIAL_EXEC], \norigem.[NR_SEQ_ATEPACU], \norigem.[IE_TIPO_GUIA], \norigem.[NR_DOC_INTERNO], \norigem.[IE_AUDITORIA], \norigem.[NR_SEQ_GRUPO_REC], \norigem.[CD_MOTIVO_AJUSTE], \norigem.[NR_SEQ_TIPO_BAIXA], \norigem.[NR_SEQ_COR_EXEC], \norigem.[NR_SEQ_ORIGEM], \norigem.[IE_DISPERSAO], \norigem.[NR_SEQ_CONTA_ORIGEM], \norigem.[CD_SETOR_PACIENTE], \norigem.[NR_SEQ_PARCIAL], \norigem.[CD_CGC_PRESTADOR], \norigem.[NR_SEQ_AIH], \norigem.[DT_CONFERENCIA], \norigem.[NR_SERIE_MATERIAL], \norigem.[NR_SEQ_ORDEM_PROD], \norigem.[NR_RECEITA], \norigem.[DT_ATUALIZACAO_NREC], \norigem.[NM_USUARIO_NREC], \norigem.[IE_ORIGEM_PRECO], \norigem.[QT_ESTOQUE], \norigem.[NR_SEQ_REGRA_LANC], \norigem.[NR_SEQ_TISS_TABELA], \norigem.[IE_RESPONSAVEL_CREDITO], \norigem.[IE_TISS_TIPO_GUIA_DESP], \norigem.[IE_TISS_TIPO_DESPESA], \norigem.[CD_CGC_PRESTADOR_TISS], \norigem.[CD_SENHA], \norigem.[IE_ESTORNO_CONTA], \norigem.[CD_MATERIAL_TISS], \norigem.[DS_MATERIAL_TISS], \norigem.[CD_KIT_MATERIAL], \norigem.[CD_TAB_CUSTO_PRECO], \norigem.[NR_SEQ_MAT_AUTOR], \norigem.[TX_MATERIAL], \norigem.[CD_PRESTADOR_TISS], \norigem.[NR_SEQ_MAT_HOR], \norigem.[CD_CGC_PREST_SOLIC_TISS], \norigem.[NR_SEQ_LOTE_AP], \norigem.[NR_SEQ_PROCESSO], \norigem.[IE_TISS_DESP_HONOR], \norigem.[NR_SEQ_MAT_EST], \norigem.[NR_SEQ_MAT_CRIT_REPASSE], \norigem.[CD_MEDICO_PRESCRITOR], \norigem.[NR_DEVOLUCAO], \norigem.[NR_SEQ_ITEM_DEVOL], \norigem.[DS_PRESTADOR_TISS], \norigem.[CD_FUNCAO], \norigem.[CD_PERFIL], \norigem.[NR_SEQ_REG_TEMPLATE], \norigem.[NR_SEQ_REGRA_AJUSTE_MAT], \norigem.[CD_MEDICO_EXEC_TISS], \norigem.[IE_GLOSADO], \norigem.[VL_CUSTO_MAT_REPASSE], \norigem.[NR_SEQ_JUST_VALOR_INF], \norigem.[NR_SEQ_MAT_GLOSA], \norigem.[CD_LABORATORIO], \norigem.[CD_MEDICAMENTO], \norigem.[CD_APRESENTACAO], \norigem.[VL_MATERIAL_TISS], \norigem.[VL_REPASSE_CALC], \norigem.[NR_SEQ_KIT_ESTOQUE], \norigem.[CD_PRESTADOR_SOLIC_TISS], \norigem.[DS_PRESTADOR_SOLIC_TISS], \norigem.[NR_SEQ_ENTREGA_MEDIC_FA], \norigem.[IE_OPME_INTEGRACAO], \norigem.[NR_SEQ_DEVOL_EXEC], \norigem.[IE_VERSAO_ATUAL], \norigem.[NM_USUARIO_ATEND_FAR], \norigem.[NM_USUARIO_ATEND_ENF], \norigem.[NM_USUARIO_RETIRANTE], \norigem.[DS_JUSTIFICATIVA], \norigem.[IE_TRAT_CONTA_RN], \norigem.[NR_SEQ_AGENDA_PAC_OPME], \norigem.[NR_SEQ_DOACAO], \norigem.[NR_SEQ_DIALISADOR], \norigem.[NR_SEQ_PEPO], \norigem.[NR_SEQ_MOTIVO_INCL], \norigem.[IE_STATUS_ITEM_TABELA], \norigem.[DT_CONVERSAO_MANUAL], \norigem.[NR_SEQ_RESERVA], \norigem.[NR_SEQ_TRANSFUSAO], \norigem.[DT_DESDOBRAMENTO], \norigem.[CD_CENTRO_CUSTO_RECEITA], \norigem.[CD_SIMPRO], \norigem.[DS_JUST_VALOR_INF], \norigem.[IE_FAT_DIRETO], \norigem.[DS_JUST_ALTER_DATA], \norigem.[NR_SEQ_ORIG_AUDIT], \norigem.[CD_MEDICO_AUTENTICACAO], \norigem.[DT_AUTENTICACAO], \norigem.[DS_BIOMETRIA], \norigem.[NR_SEQ_GEDIPA_ETAPA_DISP], \norigem.[IE_RATEAR_ITEM], \norigem.[NR_SEQ_BRAS_PRECO], \norigem.[NR_SEQ_CONV_BRAS], \norigem.[NR_SEQ_MAT_BRAS], \norigem.[CD_MATERIAL_TUSS], \norigem.[NR_SEQ_TUSS_MAT_ITEM], \norigem.[NR_REGISTRO_ANVISA_TISS], \norigem.[IE_OPME], \norigem.[DS_STACK], \norigem.[NR_SEQ_MAT_SIMP], \norigem.[NR_SEQ_CONV_SIMP], \norigem.[NR_SEQ_SIMP_PRECO], \norigem.[NR_SEQ_MAT_DESDOB], \norigem.[DS_MATERIAL_TUSS], \norigem.[IE_VALOR_AUTORIZADO], \norigem.[CD_JUSTI_CONTRASTE], \norigem.[NR_SEQ_CONTA_REVERSAO], \norigem.[CD_UNID_MEDIDA_CONV], \norigem.[TX_CONVERSAO_QTDE], \norigem.[NR_SEQ_REGRA_PEPO] \n \n\t         );"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Limpa Tabela Material Atendimento",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Busca Dt Reprocessar Mat",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "BEGIN TRY\n    TRUNCATE TABLE  stg.AJ_MATERIAL_ATEND_PACIENTE\nEND TRY\nBEGIN CATCH\n    PRINT 0\nEND CATCH        "
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/Ajuste DW Tasy/Antigo"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL')]",
				"[concat(variables('factoryId'), '/datasets/ORACLE_LOG')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_DINAMICO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AJ_PROCEDIMENTO_PACIENTE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DW_GERA_BUSCA_DT_PROCEDIMENTO_PACIENTE",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_AJ_DW_GERA_BUSCA_DT_PROCEDIMENTO_PACIENTE"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Busca Dt Reprocessar Proc",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DW_GERA_BUSCA_DT_PROCEDIMENTO_PACIENTE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "\nSELECT\n    A.ESTABELECIMENTO\n    ,A.NOME_KEYVAULT_SECRET\n    ,CAST(A.INICIO_MES AS VARCHAR(200)) as INICIO_MES\n    ,CAST(A.FIM_MES AS VARCHAR(200)) as FIM_MES\n    ,'PROCEDIMENTO_PACIENTE' AS NM_PROCESSO\n   ,'DT_PROCEDIMENTO' AS NM_COLUMN\nFROM STG.tmp_aj_dw_procedimento_paciente  A",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AZ_SQL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Carga Dados Novos",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Limpa Tabela Procedimento",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Busca Dt Reprocessar Proc').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 10,
							"activities": [
								{
									"name": "Gerar Dados",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@concat('SELECT * FROM VW_PROCEDIMENTO_PACIENTE WHERE DT_ATUALIZACAO BETWEEN','''',item().INICIO_MES,'''',' and ','''',item().FIM_MES,'''')",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ORACLE_LOG",
											"type": "DatasetReference",
											"parameters": {
												"nm_keyvault": {
													"value": "@item().NOME_KEYVAULT_SECRET",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "stg",
												"tabela_destino": {
													"value": "@concat('AJ_',item().NM_PROCESSO)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Merge Dw Proc Paciente",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Delete Periodo DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "--Sincronize a tabela de destino com dados atualizados da tabela de origem\n\nMERGE\n\t[dw].[TBL_PROCEDIMENTO_PACIENTE] AS destino\nUSING \n\tstg.AJ_PROCEDIMENTO_PACIENTE AS origem\n\n\tON (destino.NR_SEQUENCIA = origem.NR_SEQUENCIA AND destino.estabelecimento = origem.estabelecimento)\n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração\nWHEN MATCHED \nTHEN UPDATE SET      \ndestino.[ESTABELECIMENTO] = origem.[ESTABELECIMENTO],\ndestino.[NR_SEQUENCIA] = origem.[NR_SEQUENCIA],\ndestino.[NR_ATENDIMENTO] = origem.[NR_ATENDIMENTO],\ndestino.[DT_ENTRADA_UNIDADE] = origem.[DT_ENTRADA_UNIDADE],\ndestino.[CD_PROCEDIMENTO] = origem.[CD_PROCEDIMENTO],\ndestino.[DT_PROCEDIMENTO] = origem.[DT_PROCEDIMENTO],\ndestino.[QT_PROCEDIMENTO] = origem.[QT_PROCEDIMENTO],\ndestino.[DT_ATUALIZACAO] = origem.[DT_ATUALIZACAO],\ndestino.[NM_USUARIO] = origem.[NM_USUARIO],\ndestino.[CD_MEDICO] = origem.[CD_MEDICO],\ndestino.[CD_CONVENIO] = origem.[CD_CONVENIO],\ndestino.[CD_CATEGORIA] = origem.[CD_CATEGORIA],\ndestino.[CD_PESSOA_FISICA] = origem.[CD_PESSOA_FISICA],\ndestino.[DT_PRESCRICAO] = origem.[DT_PRESCRICAO],\ndestino.[DS_OBSERVACAO] = origem.[DS_OBSERVACAO],\ndestino.[VL_PROCEDIMENTO] = origem.[VL_PROCEDIMENTO],\ndestino.[VL_MEDICO] = origem.[VL_MEDICO],\ndestino.[VL_ANESTESISTA] = origem.[VL_ANESTESISTA],\ndestino.[VL_MATERIAIS] = origem.[VL_MATERIAIS],\ndestino.[CD_EDICAO_AMB] = origem.[CD_EDICAO_AMB],\ndestino.[CD_TABELA_SERVICO] = origem.[CD_TABELA_SERVICO],\ndestino.[DT_VIGENCIA_PRECO] = origem.[DT_VIGENCIA_PRECO],\ndestino.[CD_PROCEDIMENTO_PRINC] = origem.[CD_PROCEDIMENTO_PRINC],\ndestino.[DT_PROCEDIMENTO_PRINC] = origem.[DT_PROCEDIMENTO_PRINC],\ndestino.[DT_ACERTO_CONTA] = origem.[DT_ACERTO_CONTA],\ndestino.[DT_ACERTO_CONVENIO] = origem.[DT_ACERTO_CONVENIO],\ndestino.[DT_ACERTO_MEDICO] = origem.[DT_ACERTO_MEDICO],\ndestino.[VL_AUXILIARES] = origem.[VL_AUXILIARES],\ndestino.[VL_CUSTO_OPERACIONAL] = origem.[VL_CUSTO_OPERACIONAL],\ndestino.[TX_MEDICO] = origem.[TX_MEDICO],\ndestino.[TX_ANESTESIA] = origem.[TX_ANESTESIA],\ndestino.[NR_PRESCRICAO] = origem.[NR_PRESCRICAO],\ndestino.[NR_SEQUENCIA_PRESCRICAO] = origem.[NR_SEQUENCIA_PRESCRICAO],\ndestino.[CD_MOTIVO_EXC_CONTA] = origem.[CD_MOTIVO_EXC_CONTA],\ndestino.[DS_COMPL_MOTIVO_EXCON] = origem.[DS_COMPL_MOTIVO_EXCON],\ndestino.[CD_ACAO] = origem.[CD_ACAO],\ndestino.[QT_DEVOLVIDA] = origem.[QT_DEVOLVIDA],\ndestino.[CD_MOTIVO_DEVOLUCAO] = origem.[CD_MOTIVO_DEVOLUCAO],\ndestino.[NR_CIRURGIA] = origem.[NR_CIRURGIA],\ndestino.[NR_DOC_CONVENIO] = origem.[NR_DOC_CONVENIO],\ndestino.[CD_MEDICO_EXECUTOR] = origem.[CD_MEDICO_EXECUTOR],\ndestino.[IE_COBRA_PF_PJ] = origem.[IE_COBRA_PF_PJ],\ndestino.[NR_LAUDO] = origem.[NR_LAUDO],\ndestino.[DT_CONTA] = origem.[DT_CONTA],\ndestino.[CD_SETOR_ATENDIMENTO] = origem.[CD_SETOR_ATENDIMENTO],\ndestino.[CD_CONTA_CONTABIL] = origem.[CD_CONTA_CONTABIL],\ndestino.[CD_PROCEDIMENTO_AIH] = origem.[CD_PROCEDIMENTO_AIH],\ndestino.[IE_ORIGEM_PROCED] = origem.[IE_ORIGEM_PROCED],\ndestino.[NR_AIH] = origem.[NR_AIH],\ndestino.[IE_RESPONSAVEL_CREDITO] = origem.[IE_RESPONSAVEL_CREDITO],\ndestino.[TX_PROCEDIMENTO] = origem.[TX_PROCEDIMENTO],\ndestino.[CD_EQUIPAMENTO] = origem.[CD_EQUIPAMENTO],\ndestino.[IE_VALOR_INFORMADO] = origem.[IE_VALOR_INFORMADO],\ndestino.[CD_ESTABELECIMENTO_CUSTO] = origem.[CD_ESTABELECIMENTO_CUSTO],\ndestino.[CD_TABELA_CUSTO] = origem.[CD_TABELA_CUSTO],\ndestino.[CD_SITUACAO_GLOSA] = origem.[CD_SITUACAO_GLOSA],\ndestino.[NR_LOTE_CONTABIL] = origem.[NR_LOTE_CONTABIL],\ndestino.[CD_PROCEDIMENTO_CONVENIO] = origem.[CD_PROCEDIMENTO_CONVENIO],\ndestino.[NR_SEQ_AUTORIZACAO] = origem.[NR_SEQ_AUTORIZACAO],\ndestino.[IE_TIPO_SERVICO_SUS] = origem.[IE_TIPO_SERVICO_SUS],\ndestino.[IE_TIPO_ATO_SUS] = origem.[IE_TIPO_ATO_SUS],\ndestino.[CD_CGC_PRESTADOR] = origem.[CD_CGC_PRESTADOR],\ndestino.[NR_NF_PRESTADOR] = origem.[NR_NF_PRESTADOR],\ndestino.[CD_ATIVIDADE_PROF_BPA] = origem.[CD_ATIVIDADE_PROF_BPA],\ndestino.[NR_INTERNO_CONTA] = origem.[NR_INTERNO_CONTA],\ndestino.[NR_SEQ_PROC_PRINC] = origem.[NR_SEQ_PROC_PRINC],\ndestino.[IE_GUIA_INFORMADA] = origem.[IE_GUIA_INFORMADA],\ndestino.[DT_INICIO_PROCEDIMENTO] = origem.[DT_INICIO_PROCEDIMENTO],\ndestino.[IE_EMITE_CONTA] = origem.[IE_EMITE_CONTA],\ndestino.[IE_FUNCAO_MEDICO] = origem.[IE_FUNCAO_MEDICO],\ndestino.[IE_CLASSIF_SUS] = origem.[IE_CLASSIF_SUS],\ndestino.[CD_ESPECIALIDADE] = origem.[CD_ESPECIALIDADE],\ndestino.[NM_USUARIO_ORIGINAL] = origem.[NM_USUARIO_ORIGINAL],\ndestino.[NR_SEQ_PROC_PACOTE] = origem.[NR_SEQ_PROC_PACOTE],\ndestino.[IE_TIPO_PROC_SUS] = origem.[IE_TIPO_PROC_SUS],\ndestino.[CD_SETOR_RECEITA] = origem.[CD_SETOR_RECEITA],\ndestino.[VL_ADIC_PLANT] = origem.[VL_ADIC_PLANT],\ndestino.[QT_PORTE_ANESTESICO] = origem.[QT_PORTE_ANESTESICO],\ndestino.[TX_HORA_EXTRA] = origem.[TX_HORA_EXTRA],\ndestino.[IE_EMITE_CONTA_HONOR] = origem.[IE_EMITE_CONTA_HONOR],\ndestino.[NR_SEQ_ATEPACU] = origem.[NR_SEQ_ATEPACU],\ndestino.[IE_PROC_PRINC_ATEND] = origem.[IE_PROC_PRINC_ATEND],\ndestino.[CD_MEDICO_REQ] = origem.[CD_MEDICO_REQ],\ndestino.[IE_TIPO_GUIA] = origem.[IE_TIPO_GUIA],\ndestino.[IE_VIDEO] = origem.[IE_VIDEO],\ndestino.[NR_DOC_INTERNO] = origem.[NR_DOC_INTERNO],\ndestino.[IE_AUDITORIA] = origem.[IE_AUDITORIA],\ndestino.[NR_SEQ_GRUPO_REC] = origem.[NR_SEQ_GRUPO_REC],\ndestino.[CD_MEDICO_CONVENIO] = origem.[CD_MEDICO_CONVENIO],\ndestino.[CD_MOTIVO_AJUSTE] = origem.[CD_MOTIVO_AJUSTE],\ndestino.[IE_VIA_ACESSO] = origem.[IE_VIA_ACESSO],\ndestino.[NR_SEQ_COR_EXEC] = origem.[NR_SEQ_COR_EXEC],\ndestino.[NR_SEQ_EXAME] = origem.[NR_SEQ_EXAME],\ndestino.[IE_INTERCORRENCIA] = origem.[IE_INTERCORRENCIA],\ndestino.[NR_SEQ_ORIGEM] = origem.[NR_SEQ_ORIGEM],\ndestino.[IE_DISPERSAO] = origem.[IE_DISPERSAO],\ndestino.[CD_SETOR_PACIENTE] = origem.[CD_SETOR_PACIENTE],\ndestino.[NR_SEQ_CONTA_ORIGEM] = origem.[NR_SEQ_CONTA_ORIGEM],\ndestino.[NR_SEQ_PARCIAL] = origem.[NR_SEQ_PARCIAL],\ndestino.[NR_SEQ_PROC_INTERNO] = origem.[NR_SEQ_PROC_INTERNO],\ndestino.[CD_SENHA] = origem.[CD_SENHA],\ndestino.[NR_SEQ_AIH] = origem.[NR_SEQ_AIH],\ndestino.[NR_DOC_HONOR_CONV] = origem.[NR_DOC_HONOR_CONV],\ndestino.[DT_CONFERENCIA] = origem.[DT_CONFERENCIA],\ndestino.[IE_TIPO_ATEND_BPA] = origem.[IE_TIPO_ATEND_BPA],\ndestino.[IE_GRUPO_ATEND_BPA] = origem.[IE_GRUPO_ATEND_BPA],\ndestino.[CD_CGC_PRESTADOR_CONTA] = origem.[CD_CGC_PRESTADOR_CONTA],\ndestino.[CD_MEDICO_EXEC_CONTA] = origem.[CD_MEDICO_EXEC_CONTA],\ndestino.[NR_SEQ_PQ_PROC] = origem.[NR_SEQ_PQ_PROC],\ndestino.[QT_FILME] = origem.[QT_FILME],\ndestino.[NR_SEQ_PROC_CRIT_REPASSE] = origem.[NR_SEQ_PROC_CRIT_REPASSE],\ndestino.[CD_SENHA_AUTOR] = origem.[CD_SENHA_AUTOR],\ndestino.[CD_AUTOR_CONVENIO] = origem.[CD_AUTOR_CONVENIO],\ndestino.[NR_SEQ_REGRA_LANC] = origem.[NR_SEQ_REGRA_LANC],\ndestino.[IE_TISS_TIPO_GUIA] = origem.[IE_TISS_TIPO_GUIA],\ndestino.[NR_SEQ_TISS_TABELA] = origem.[NR_SEQ_TISS_TABELA],\ndestino.[NR_MINUTO_DURACAO] = origem.[NR_MINUTO_DURACAO],\ndestino.[IE_TISS_TIPO_GUIA_HONOR] = origem.[IE_TISS_TIPO_GUIA_HONOR],\ndestino.[NR_SEQ_REGRA_PRECO] = origem.[NR_SEQ_REGRA_PRECO],\ndestino.[IE_TISS_TIPO_GUIA_DESP] = origem.[IE_TISS_TIPO_GUIA_DESP],\ndestino.[IE_TECNICA_UTILIZADA] = origem.[IE_TECNICA_UTILIZADA],\ndestino.[IE_TISS_TIPO_DESPESA] = origem.[IE_TISS_TIPO_DESPESA],\ndestino.[CD_CGC_PRESTADOR_TISS] = origem.[CD_CGC_PRESTADOR_TISS],\ndestino.[CD_CGC_HONORARIO_TISS] = origem.[CD_CGC_HONORARIO_TISS],\ndestino.[IE_INTEGRACAO] = origem.[IE_INTEGRACAO],\ndestino.[NR_SEQ_PROC_ACERTO] = origem.[NR_SEQ_PROC_ACERTO],\ndestino.[VL_ORIGINAL_TABELA] = origem.[VL_ORIGINAL_TABELA],\ndestino.[CD_DOENCA_CID] = origem.[CD_DOENCA_CID],\ndestino.[NR_SEQ_APAC] = origem.[NR_SEQ_APAC],\ndestino.[NR_SEQ_AJUSTE_PROC] = origem.[NR_SEQ_AJUSTE_PROC],\ndestino.[CD_TAB_CUSTO_PRECO] = origem.[CD_TAB_CUSTO_PRECO],\ndestino.[NR_SEQ_PROC_AUTOR] = origem.[NR_SEQ_PROC_AUTOR],\ndestino.[IE_DOC_EXECUTOR] = origem.[IE_DOC_EXECUTOR],\ndestino.[NR_SEQ_REGRA_DOC] = origem.[NR_SEQ_REGRA_DOC],\ndestino.[CD_CBO] = origem.[CD_CBO],\ndestino.[CD_PRESTADOR_TISS] = origem.[CD_PRESTADOR_TISS],\ndestino.[CD_CGC_PREST_SOLIC_TISS] = origem.[CD_CGC_PREST_SOLIC_TISS],\ndestino.[CD_SETOR_RESP] = origem.[CD_SETOR_RESP],\ndestino.[DT_FINAL_PROCEDIMENTO] = origem.[DT_FINAL_PROCEDIMENTO],\ndestino.[IE_TISS_DESP_HONOR] = origem.[IE_TISS_DESP_HONOR],\ndestino.[NR_SEQ_PROC_EST] = origem.[NR_SEQ_PROC_EST],\ndestino.[CD_PREST_RESP] = origem.[CD_PREST_RESP],\ndestino.[CD_MEDICO_EXEC_TISS] = origem.[CD_MEDICO_EXEC_TISS],\ndestino.[DS_PROC_TISS] = origem.[DS_PROC_TISS],\ndestino.[NR_SEQ_TAMANHO_FILME] = origem.[NR_SEQ_TAMANHO_FILME],\ndestino.[DS_PRESTADOR_TISS] = origem.[DS_PRESTADOR_TISS],\ndestino.[NR_SEQ_PROC_CRIT_HOR] = origem.[NR_SEQ_PROC_CRIT_HOR],\ndestino.[NR_SEQ_REG_TEMPLATE] = origem.[NR_SEQ_REG_TEMPLATE],\ndestino.[CD_PROCEDIMENTO_TUSS] = origem.[CD_PROCEDIMENTO_TUSS],\ndestino.[IE_RATEAR_ITEM] = origem.[IE_RATEAR_ITEM],\ndestino.[IE_COMPLEXIDADE] = origem.[IE_COMPLEXIDADE],\ndestino.[IE_TIPO_FINANCIAMENTO] = origem.[IE_TIPO_FINANCIAMENTO],\ndestino.[CD_FUNCAO] = origem.[CD_FUNCAO],\ndestino.[CD_PERFIL] = origem.[CD_PERFIL],\ndestino.[NR_SEQ_REGRA_QTDE_EXEC] = origem.[NR_SEQ_REGRA_QTDE_EXEC],\ndestino.[CD_CENTRO_CUSTO_RECEITA] = origem.[CD_CENTRO_CUSTO_RECEITA],\ndestino.[NR_SEQ_REGRA_GUIA_TISS] = origem.[NR_SEQ_REGRA_GUIA_TISS],\ndestino.[NR_SEQ_REGRA_HONOR_TISS] = origem.[NR_SEQ_REGRA_HONOR_TISS],\ndestino.[IE_TIPO_ATEND_TISS] = origem.[IE_TIPO_ATEND_TISS],\ndestino.[VL_DESP_TISS] = origem.[VL_DESP_TISS],\ndestino.[IE_RESP_CRED_MANUAL] = origem.[IE_RESP_CRED_MANUAL],\ndestino.[NR_SEQ_JUST_VALOR_INF] = origem.[NR_SEQ_JUST_VALOR_INF],\ndestino.[CD_MEDICO_SOLIC_TISS] = origem.[CD_MEDICO_SOLIC_TISS],\ndestino.[CD_MEDICO_PROF_SOLIC_TISS] = origem.[CD_MEDICO_PROF_SOLIC_TISS],\ndestino.[VL_REPASSE_CALC] = origem.[VL_REPASSE_CALC],\ndestino.[TX_CUSTO_OPER_QT] = origem.[TX_CUSTO_OPER_QT],\ndestino.[IE_SPECT] = origem.[IE_SPECT],\ndestino.[NR_SEQ_AGENDA_RXT] = origem.[NR_SEQ_AGENDA_RXT],\ndestino.[CD_PRESTADOR_SOLIC_TISS] = origem.[CD_PRESTADOR_SOLIC_TISS],\ndestino.[DS_PRESTADOR_SOLIC_TISS] = origem.[DS_PRESTADOR_SOLIC_TISS],\ndestino.[VL_TX_DESCONTO] = origem.[VL_TX_DESCONTO],\ndestino.[VL_TX_ADM] = origem.[VL_TX_ADM],\ndestino.[CD_MEDICO_HONOR_TISS] = origem.[CD_MEDICO_HONOR_TISS],\ndestino.[NR_CONTROLE] = origem.[NR_CONTROLE],\ndestino.[NR_SEQ_REGRA_TAXA_CIR] = origem.[NR_SEQ_REGRA_TAXA_CIR],\ndestino.[NR_SEQ_PROC_ORIG] = origem.[NR_SEQ_PROC_ORIG],\ndestino.[NR_SEQUENCIA_GAS] = origem.[NR_SEQUENCIA_GAS],\ndestino.[NR_SEQ_ETAPA_CHECKUP] = origem.[NR_SEQ_ETAPA_CHECKUP],\ndestino.[NR_SEQ_CHECKUP_ETAPA] = origem.[NR_SEQ_CHECKUP_ETAPA],\ndestino.[IE_VIA_HEMODINAMICA] = origem.[IE_VIA_HEMODINAMICA],\ndestino.[CD_REGRA_REPASSE] = origem.[CD_REGRA_REPASSE],\ndestino.[IE_TRAT_CONTA_RN] = origem.[IE_TRAT_CONTA_RN],\ndestino.[NR_SEQ_REG_PROCED] = origem.[NR_SEQ_REG_PROCED],\ndestino.[NR_SEQ_PEPO] = origem.[NR_SEQ_PEPO],\ndestino.[NR_SEQ_MOTIVO_INCL] = origem.[NR_SEQ_MOTIVO_INCL],\ndestino.[DT_CONVERSAO_MANUAL] = origem.[DT_CONVERSAO_MANUAL],\ndestino.[NR_SEQ_TRANSFUSAO] = origem.[NR_SEQ_TRANSFUSAO],\ndestino.[NR_SEQ_RESERVA] = origem.[NR_SEQ_RESERVA],\ndestino.[CD_CGC_PREST_HONOR_TISS] = origem.[CD_CGC_PREST_HONOR_TISS],\ndestino.[IE_LADO] = origem.[IE_LADO],\ndestino.[NR_SEQ_HC_EQUIPAMENTO] = origem.[NR_SEQ_HC_EQUIPAMENTO],\ndestino.[DT_VINC_PROCED_ADIC] = origem.[DT_VINC_PROCED_ADIC],\ndestino.[DS_INDICACAO] = origem.[DS_INDICACAO],\ndestino.[CD_TIPO_ANESTESIA] = origem.[CD_TIPO_ANESTESIA],\ndestino.[NR_SEQ_MATERIAL] = origem.[NR_SEQ_MATERIAL],\ndestino.[IE_CARATER_CIRURGIA] = origem.[IE_CARATER_CIRURGIA],\ndestino.[CD_MEDICO_PREV_LAUDO] = origem.[CD_MEDICO_PREV_LAUDO],\ndestino.[DS_JUST_VALOR_INF] = origem.[DS_JUST_VALOR_INF],\ndestino.[NR_FONE_INTEGRACAO] = origem.[NR_FONE_INTEGRACAO],\ndestino.[DT_LIGACAO_INTEGRACAO] = origem.[DT_LIGACAO_INTEGRACAO],\ndestino.[NR_SEQ_LANC_ACAO] = origem.[NR_SEQ_LANC_ACAO],\ndestino.[DS_JUST_ALTER_DATA] = origem.[DS_JUST_ALTER_DATA],\ndestino.[NR_SEQ_ORIG_AUDIT] = origem.[NR_SEQ_ORIG_AUDIT],\ndestino.[NR_SEQ_SERVICO] = origem.[NR_SEQ_SERVICO],\ndestino.[NR_SEQ_SERVICO_CLASSIF] = origem.[NR_SEQ_SERVICO_CLASSIF],\ndestino.[NR_SEQ_SUS_EQUIPE] = origem.[NR_SEQ_SUS_EQUIPE],\ndestino.[NR_SEQ_PROC_DITADO] = origem.[NR_SEQ_PROC_DITADO],\ndestino.[NR_SEQ_CRIT_HONORARIO] = origem.[NR_SEQ_CRIT_HONORARIO],\ndestino.[IE_TX_CIR_TEMPO] = origem.[IE_TX_CIR_TEMPO],\ndestino.[NR_SEQ_PE_PRESCR] = origem.[NR_SEQ_PE_PRESCR],\ndestino.[NR_SEQ_PRESCR_MAT] = origem.[NR_SEQ_PRESCR_MAT],\ndestino.[NR_SEQ_SOLUCAO] = origem.[NR_SEQ_SOLUCAO],\ndestino.[CD_MEDICO_AUTENTICACAO] = origem.[CD_MEDICO_AUTENTICACAO],\ndestino.[DT_AUTENTICACAO] = origem.[DT_AUTENTICACAO],\ndestino.[DS_BIOMETRIA] = origem.[DS_BIOMETRIA],\ndestino.[NR_SEQ_PROC_DESDOB] = origem.[NR_SEQ_PROC_DESDOB],\ndestino.[CD_MEDICO_RESIDENTE] = origem.[CD_MEDICO_RESIDENTE],\ndestino.[IE_RETORNO] = origem.[IE_RETORNO],\ndestino.[NR_ATO_IPASGO] = origem.[NR_ATO_IPASGO],\ndestino.[NR_SEQ_CONTA_REVERSAO] = origem.[NR_SEQ_CONTA_REVERSAO],\ndestino.[NR_SEQ_REGRA_PEPO] = origem.[NR_SEQ_REGRA_PEPO],\ndestino.[DS_PROC_TUSS] = origem.[DS_PROC_TUSS],\ndestino.[NR_SEQ_TUSS_ITEM] = origem.[NR_SEQ_TUSS_ITEM]\n\n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT \n\tVALUES (  \norigem.[ESTABELECIMENTO],\norigem.[NR_SEQUENCIA],\norigem.[NR_ATENDIMENTO],\norigem.[DT_ENTRADA_UNIDADE],\norigem.[CD_PROCEDIMENTO],\norigem.[DT_PROCEDIMENTO],\norigem.[QT_PROCEDIMENTO],\norigem.[DT_ATUALIZACAO],\norigem.[NM_USUARIO],\norigem.[CD_MEDICO],\norigem.[CD_CONVENIO],\norigem.[CD_CATEGORIA],\norigem.[CD_PESSOA_FISICA],\norigem.[DT_PRESCRICAO],\norigem.[DS_OBSERVACAO],\norigem.[VL_PROCEDIMENTO],\norigem.[VL_MEDICO],\norigem.[VL_ANESTESISTA],\norigem.[VL_MATERIAIS],\norigem.[CD_EDICAO_AMB],\norigem.[CD_TABELA_SERVICO],\norigem.[DT_VIGENCIA_PRECO],\norigem.[CD_PROCEDIMENTO_PRINC],\norigem.[DT_PROCEDIMENTO_PRINC],\norigem.[DT_ACERTO_CONTA],\norigem.[DT_ACERTO_CONVENIO],\norigem.[DT_ACERTO_MEDICO],\norigem.[VL_AUXILIARES],\norigem.[VL_CUSTO_OPERACIONAL],\norigem.[TX_MEDICO],\norigem.[TX_ANESTESIA],\norigem.[NR_PRESCRICAO],\norigem.[NR_SEQUENCIA_PRESCRICAO],\norigem.[CD_MOTIVO_EXC_CONTA],\norigem.[DS_COMPL_MOTIVO_EXCON],\norigem.[CD_ACAO],\norigem.[QT_DEVOLVIDA],\norigem.[CD_MOTIVO_DEVOLUCAO],\norigem.[NR_CIRURGIA],\norigem.[NR_DOC_CONVENIO],\norigem.[CD_MEDICO_EXECUTOR],\norigem.[IE_COBRA_PF_PJ],\norigem.[NR_LAUDO],\norigem.[DT_CONTA],\norigem.[CD_SETOR_ATENDIMENTO],\norigem.[CD_CONTA_CONTABIL],\norigem.[CD_PROCEDIMENTO_AIH],\norigem.[IE_ORIGEM_PROCED],\norigem.[NR_AIH],\norigem.[IE_RESPONSAVEL_CREDITO],\norigem.[TX_PROCEDIMENTO],\norigem.[CD_EQUIPAMENTO],\norigem.[IE_VALOR_INFORMADO],\norigem.[CD_ESTABELECIMENTO_CUSTO],\norigem.[CD_TABELA_CUSTO],\norigem.[CD_SITUACAO_GLOSA],\norigem.[NR_LOTE_CONTABIL],\norigem.[CD_PROCEDIMENTO_CONVENIO],\norigem.[NR_SEQ_AUTORIZACAO],\norigem.[IE_TIPO_SERVICO_SUS],\norigem.[IE_TIPO_ATO_SUS],\norigem.[CD_CGC_PRESTADOR],\norigem.[NR_NF_PRESTADOR],\norigem.[CD_ATIVIDADE_PROF_BPA],\norigem.[NR_INTERNO_CONTA],\norigem.[NR_SEQ_PROC_PRINC],\norigem.[IE_GUIA_INFORMADA],\norigem.[DT_INICIO_PROCEDIMENTO],\norigem.[IE_EMITE_CONTA],\norigem.[IE_FUNCAO_MEDICO],\norigem.[IE_CLASSIF_SUS],\norigem.[CD_ESPECIALIDADE],\norigem.[NM_USUARIO_ORIGINAL],\norigem.[NR_SEQ_PROC_PACOTE],\norigem.[IE_TIPO_PROC_SUS],\norigem.[CD_SETOR_RECEITA],\norigem.[VL_ADIC_PLANT],\norigem.[QT_PORTE_ANESTESICO],\norigem.[TX_HORA_EXTRA],\norigem.[IE_EMITE_CONTA_HONOR],\norigem.[NR_SEQ_ATEPACU],\norigem.[IE_PROC_PRINC_ATEND],\norigem.[CD_MEDICO_REQ],\norigem.[IE_TIPO_GUIA],\norigem.[IE_VIDEO],\norigem.[NR_DOC_INTERNO],\norigem.[IE_AUDITORIA],\norigem.[NR_SEQ_GRUPO_REC],\norigem.[CD_MEDICO_CONVENIO],\norigem.[CD_MOTIVO_AJUSTE],\norigem.[IE_VIA_ACESSO],\norigem.[NR_SEQ_COR_EXEC],\norigem.[NR_SEQ_EXAME],\norigem.[IE_INTERCORRENCIA],\norigem.[NR_SEQ_ORIGEM],\norigem.[IE_DISPERSAO],\norigem.[CD_SETOR_PACIENTE],\norigem.[NR_SEQ_CONTA_ORIGEM],\norigem.[NR_SEQ_PARCIAL],\norigem.[NR_SEQ_PROC_INTERNO],\norigem.[CD_SENHA],\norigem.[NR_SEQ_AIH],\norigem.[NR_DOC_HONOR_CONV],\norigem.[DT_CONFERENCIA],\norigem.[IE_TIPO_ATEND_BPA],\norigem.[IE_GRUPO_ATEND_BPA],\norigem.[CD_CGC_PRESTADOR_CONTA],\norigem.[CD_MEDICO_EXEC_CONTA],\norigem.[NR_SEQ_PQ_PROC],\norigem.[QT_FILME],\norigem.[NR_SEQ_PROC_CRIT_REPASSE],\norigem.[CD_SENHA_AUTOR],\norigem.[CD_AUTOR_CONVENIO],\norigem.[NR_SEQ_REGRA_LANC],\norigem.[IE_TISS_TIPO_GUIA],\norigem.[NR_SEQ_TISS_TABELA],\norigem.[NR_MINUTO_DURACAO],\norigem.[IE_TISS_TIPO_GUIA_HONOR],\norigem.[NR_SEQ_REGRA_PRECO],\norigem.[IE_TISS_TIPO_GUIA_DESP],\norigem.[IE_TECNICA_UTILIZADA],\norigem.[IE_TISS_TIPO_DESPESA],\norigem.[CD_CGC_PRESTADOR_TISS],\norigem.[CD_CGC_HONORARIO_TISS],\norigem.[IE_INTEGRACAO],\norigem.[NR_SEQ_PROC_ACERTO],\norigem.[VL_ORIGINAL_TABELA],\norigem.[CD_DOENCA_CID],\norigem.[NR_SEQ_APAC],\norigem.[NR_SEQ_AJUSTE_PROC],\norigem.[CD_TAB_CUSTO_PRECO],\norigem.[NR_SEQ_PROC_AUTOR],\norigem.[IE_DOC_EXECUTOR],\norigem.[NR_SEQ_REGRA_DOC],\norigem.[CD_CBO],\norigem.[CD_PRESTADOR_TISS],\norigem.[CD_CGC_PREST_SOLIC_TISS],\norigem.[CD_SETOR_RESP],\norigem.[DT_FINAL_PROCEDIMENTO],\norigem.[IE_TISS_DESP_HONOR],\norigem.[NR_SEQ_PROC_EST],\norigem.[CD_PREST_RESP],\norigem.[CD_MEDICO_EXEC_TISS],\norigem.[DS_PROC_TISS],\norigem.[NR_SEQ_TAMANHO_FILME],\norigem.[DS_PRESTADOR_TISS],\norigem.[NR_SEQ_PROC_CRIT_HOR],\norigem.[NR_SEQ_REG_TEMPLATE],\norigem.[CD_PROCEDIMENTO_TUSS],\norigem.[IE_RATEAR_ITEM],\norigem.[IE_COMPLEXIDADE],\norigem.[IE_TIPO_FINANCIAMENTO],\norigem.[CD_FUNCAO],\norigem.[CD_PERFIL],\norigem.[NR_SEQ_REGRA_QTDE_EXEC],\norigem.[CD_CENTRO_CUSTO_RECEITA],\norigem.[NR_SEQ_REGRA_GUIA_TISS],\norigem.[NR_SEQ_REGRA_HONOR_TISS],\norigem.[IE_TIPO_ATEND_TISS],\norigem.[VL_DESP_TISS],\norigem.[IE_RESP_CRED_MANUAL],\norigem.[NR_SEQ_JUST_VALOR_INF],\norigem.[CD_MEDICO_SOLIC_TISS],\norigem.[CD_MEDICO_PROF_SOLIC_TISS],\norigem.[VL_REPASSE_CALC],\norigem.[TX_CUSTO_OPER_QT],\norigem.[IE_SPECT],\norigem.[NR_SEQ_AGENDA_RXT],\norigem.[CD_PRESTADOR_SOLIC_TISS],\norigem.[DS_PRESTADOR_SOLIC_TISS],\norigem.[VL_TX_DESCONTO],\norigem.[VL_TX_ADM],\norigem.[CD_MEDICO_HONOR_TISS],\norigem.[NR_CONTROLE],\norigem.[NR_SEQ_REGRA_TAXA_CIR],\norigem.[NR_SEQ_PROC_ORIG],\norigem.[NR_SEQUENCIA_GAS],\norigem.[NR_SEQ_ETAPA_CHECKUP],\norigem.[NR_SEQ_CHECKUP_ETAPA],\norigem.[IE_VIA_HEMODINAMICA],\norigem.[CD_REGRA_REPASSE],\norigem.[IE_TRAT_CONTA_RN],\norigem.[NR_SEQ_REG_PROCED],\norigem.[NR_SEQ_PEPO],\norigem.[NR_SEQ_MOTIVO_INCL],\norigem.[DT_CONVERSAO_MANUAL],\norigem.[NR_SEQ_TRANSFUSAO],\norigem.[NR_SEQ_RESERVA],\norigem.[CD_CGC_PREST_HONOR_TISS],\norigem.[IE_LADO],\norigem.[NR_SEQ_HC_EQUIPAMENTO],\norigem.[DT_VINC_PROCED_ADIC],\norigem.[DS_INDICACAO],\norigem.[CD_TIPO_ANESTESIA],\norigem.[NR_SEQ_MATERIAL],\norigem.[IE_CARATER_CIRURGIA],\norigem.[CD_MEDICO_PREV_LAUDO],\norigem.[DS_JUST_VALOR_INF],\norigem.[NR_FONE_INTEGRACAO],\norigem.[DT_LIGACAO_INTEGRACAO],\norigem.[NR_SEQ_LANC_ACAO],\norigem.[DS_JUST_ALTER_DATA],\norigem.[NR_SEQ_ORIG_AUDIT],\norigem.[NR_SEQ_SERVICO],\norigem.[NR_SEQ_SERVICO_CLASSIF],\norigem.[NR_SEQ_SUS_EQUIPE],\norigem.[NR_SEQ_PROC_DITADO],\norigem.[NR_SEQ_CRIT_HONORARIO],\norigem.[IE_TX_CIR_TEMPO],\norigem.[NR_SEQ_PE_PRESCR],\norigem.[NR_SEQ_PRESCR_MAT],\norigem.[NR_SEQ_SOLUCAO],\norigem.[CD_MEDICO_AUTENTICACAO],\norigem.[DT_AUTENTICACAO],\norigem.[DS_BIOMETRIA],\norigem.[NR_SEQ_PROC_DESDOB],\norigem.[CD_MEDICO_RESIDENTE],\norigem.[IE_RETORNO],\norigem.[NR_ATO_IPASGO],\norigem.[NR_SEQ_CONTA_REVERSAO],\norigem.[NR_SEQ_REGRA_PEPO],\norigem.[DS_PROC_TUSS],\norigem.[NR_SEQ_TUSS_ITEM]\n\t         ) ;\n \n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Limpa Tabela Procedimento",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Busca Dt Reprocessar Proc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "truncate table stg.AJ_PROCEDIMENTO_PACIENTE"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Delete Periodo DW",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Limpa Tabela Procedimento",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Busca Dt Reprocessar Proc').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "DELETE FROM DW",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "@concat('DELETE FROM DW.TBL_',item().NM_PROCESSO,' WHERE CAST(',item().NM_COLUMN,' as date) BETWEEN ','''',item().INICIO_MES,'''',' and ','''',item().FIM_MES,'''', ' and ESTABELECIMENTO=',item().ESTABELECIMENTO)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "20:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/Ajuste DW Tasy/Antigo"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL')]",
				"[concat(variables('factoryId'), '/datasets/ORACLE_LOG')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_DINAMICO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ANTERIOR_Movimento_Estoque')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Mov Estoque HTML",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "WITH AUX AS(\nselect operacao_estoque.cd_operacao_estoque,\n    dt_movimento_estoque,\n    movimento_estoque.cd_local_estoque,\n    ds_local_estoque,\n    movimento_estoque.cd_estabelecimento,\n    nm_fantasia_estab,\n    movimento_estoque.nr_documento,\n    movimento_estoque.cd_material,\n    /*case \n        when ds_familia is null then 'Sem classificação'\n        else ds_familia\n        end familia_padrao,*/\n    MATERIAL.CD_CLASSE_MATERIAL,   \n    ds_classe_material classe_material,\n    ds_subgrupo_material Subgrupo,\n    grupo_material.cd_grupo_material    as CD_GRUPO_MATERIAL,\n    ds_grupo_material DS_GRUPO_MATERIAL,\n    ds_fabricante Fabricante,\n    ds_reduzida,\n    ds_operacao,\n    ie_entrada_saida,\n    cd_acao,\n    case \n        when ds_operacao in ('Consumo', 'Execução Prescrição', 'Consumo da Produção')\n        then sum(qt_movimento)/(avg(QT_CONV_ESTOQUE_CONSUMO))\n        else sum(qt_movimento)\n        end qt_movimento,\n    sum(case when movimento_estoque_valor.cd_tipo_valor = 5 then - movimento_estoque_valor.vl_movimento else + movimento_estoque_valor.vl_movimento end ) valor_movimento\n    \n    from movimento_estoque\n    left join operacao_estoque\n    on movimento_estoque.cd_operacao_estoque = operacao_estoque.cd_operacao_estoque\n    \n    left join estabelecimento\n    on (movimento_estoque.cd_estabelecimento = estabelecimento.cd_estabelecimento)\n    \n    left join local_estoque\n    on (local_estoque.cd_estabelecimento = movimento_estoque.cd_estabelecimento AND\n        local_estoque.cd_local_estoque = movimento_estoque.cd_local_estoque)\n        \n    left join material\n    on (movimento_estoque.cd_material = material.cd_material) \n    \n    left join material_familia\n    on (material.nr_seq_familia = material_familia.nr_sequencia)\n    \n    left join classe_material\n    on (material.cd_classe_material = classe_material.cd_classe_material)\n    \n    left join subgrupo_material\n    on (classe_material.cd_subgrupo_material = subgrupo_material.cd_subgrupo_material)\n    \n    left join grupo_material\n    on (subgrupo_material.cd_grupo_material = grupo_material.cd_grupo_material)\n    \n    left join mat_fabricante\n    on material.nr_seq_fabric =  mat_fabricante.nr_sequencia\n    \n    left join movimento_estoque_valor\n    on movimento_estoque_valor.nr_movimento_estoque = movimento_estoque.nr_movimento_estoque\n\n    --where dt_movimento_estoque >= '01/01/2020' \n\n    GROUP BY operacao_estoque.cd_operacao_estoque,\n        dt_movimento_estoque,\n        movimento_estoque.cd_local_estoque,\n        ds_local_estoque,\n        movimento_estoque.cd_estabelecimento,\n        nm_fantasia_estab,\n        movimento_estoque.nr_documento,\n        movimento_estoque.cd_material,\n        --case when ds_familia is null then 'Sem classificação' else ds_familia end,\n        material.cd_classe_material,\n        ds_classe_material,\n        ds_subgrupo_material,\n        grupo_material.cd_grupo_material,\n        ds_grupo_material,\n        ds_fabricante,\n        ds_reduzida,\n        ds_operacao,\n        ie_entrada_saida,\n        cd_acao\n)\nSELECT \n    TO_CHAR(A.DT_MOVIMENTO_ESTOQUE,'YYYY-MM-DD') AS DATA_MOVIMENTO\n    ,A.CD_LOCAL_ESTOQUE\n    ,A.DS_LOCAL_ESTOQUE\n    ,A.CD_ESTABELECIMENTO\n    ,A.nm_fantasia_estab                         AS DS_ESTABELECIMENTO\n    ,A.CD_MATERIAL\n    ,A.DS_REDUZIDA                                AS DS_MATERIAL_SHORT\n    ,A.CD_GRUPO_MATERIAL\n    ,A.DS_GRUPO_MATERIAL\n    ,A.CD_CLASSE_MATERIAL\n    ,A.CLASSE_MATERIAL                           AS DS_CLASSE_MATERIAL\n    ,A.cd_operacao_estoque\n    ,A.DS_OPERACAO\n    ,A.QT_MOVIMENTO\n    ,CASE \n        WHEN A.CD_ACAO = 2 THEN A.VALOR_MOVIMENTO * -1\n        ELSE A.VALOR_MOVIMENTO\n     END VL_MOVIMENTO   \nFROM AUX A\n--WHERE TO_CHAR(TRUNC(A.DT_MOVIMENTO_ESTOQUE,'MM'),'YYYY-MM-DD') = TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYY-MM-DD')\nWHERE TO_CHAR(TRUNC(A.DT_MOVIMENTO_ESTOQUE,'MM'),'YYYY-MM-DD') BETWEEN '2020-01-01' AND '2021-06-01'",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_MOVIMENTO"
										},
										"sink": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOQUE"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_OPERACAO_ESTOQUE"
										},
										"sink": {
											"name": "CD_OPERACAO_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_OPERACAO"
										},
										"sink": {
											"name": "DS_OPERACAO_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_MOVIMENTO"
										},
										"sink": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "VL_MOVIMENTO"
										},
										"sink": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_MOVIMENTO_ESTOQUE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Mov Estoque Delphi",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Mov Estoque HTML",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "WITH AUX AS(\nselect operacao_estoque.cd_operacao_estoque,\n    dt_movimento_estoque,\n    movimento_estoque.cd_local_estoque,\n    ds_local_estoque,\n    movimento_estoque.cd_estabelecimento,\n    nm_fantasia_estab,\n    movimento_estoque.nr_documento,\n    movimento_estoque.cd_material,\n    /*case \n        when ds_familia is null then 'Sem classificação'\n        else ds_familia\n        end familia_padrao,*/\n    MATERIAL.CD_CLASSE_MATERIAL,   \n    ds_classe_material classe_material,\n    ds_subgrupo_material Subgrupo,\n    grupo_material.cd_grupo_material    as CD_GRUPO_MATERIAL,\n    ds_grupo_material DS_GRUPO_MATERIAL,\n    ds_fabricante Fabricante,\n    ds_reduzida,\n    ds_operacao,\n    ie_entrada_saida,\n    cd_acao,\n    case \n        when ds_operacao in ('Consumo', 'Execução Prescrição', 'Consumo da Produção')\n        then sum(qt_movimento)/(avg(QT_CONV_ESTOQUE_CONSUMO))\n        else sum(qt_movimento)\n        end qt_movimento,\n    sum(case when movimento_estoque_valor.cd_tipo_valor = 5 then - movimento_estoque_valor.vl_movimento else + movimento_estoque_valor.vl_movimento end ) valor_movimento\n    \n    from movimento_estoque\n    left join operacao_estoque\n    on movimento_estoque.cd_operacao_estoque = operacao_estoque.cd_operacao_estoque\n    \n    left join estabelecimento\n    on (movimento_estoque.cd_estabelecimento = estabelecimento.cd_estabelecimento)\n    \n    left join local_estoque\n    on (local_estoque.cd_estabelecimento = movimento_estoque.cd_estabelecimento AND\n        local_estoque.cd_local_estoque = movimento_estoque.cd_local_estoque)\n        \n    left join material\n    on (movimento_estoque.cd_material = material.cd_material) \n    \n    left join material_familia\n    on (material.nr_seq_familia = material_familia.nr_sequencia)\n    \n    left join classe_material\n    on (material.cd_classe_material = classe_material.cd_classe_material)\n    \n    left join subgrupo_material\n    on (classe_material.cd_subgrupo_material = subgrupo_material.cd_subgrupo_material)\n    \n    left join grupo_material\n    on (subgrupo_material.cd_grupo_material = grupo_material.cd_grupo_material)\n    \n    left join mat_fabricante\n    on material.nr_seq_fabric =  mat_fabricante.nr_sequencia\n    \n    left join movimento_estoque_valor\n    on movimento_estoque_valor.nr_movimento_estoque = movimento_estoque.nr_movimento_estoque\n\n    --where dt_movimento_estoque >= '01/01/2020' \n\n    GROUP BY operacao_estoque.cd_operacao_estoque,\n        dt_movimento_estoque,\n        movimento_estoque.cd_local_estoque,\n        ds_local_estoque,\n        movimento_estoque.cd_estabelecimento,\n        nm_fantasia_estab,\n        movimento_estoque.nr_documento,\n        movimento_estoque.cd_material,\n        --case when ds_familia is null then 'Sem classificação' else ds_familia end,\n        material.cd_classe_material,\n        ds_classe_material,\n        ds_subgrupo_material,\n        grupo_material.cd_grupo_material,\n        ds_grupo_material,\n        ds_fabricante,\n        ds_reduzida,\n        ds_operacao,\n        ie_entrada_saida,\n        cd_acao\n)\nSELECT \n    TO_CHAR(A.DT_MOVIMENTO_ESTOQUE,'YYYY-MM-DD') AS DATA_MOVIMENTO\n    ,A.CD_LOCAL_ESTOQUE\n    ,A.DS_LOCAL_ESTOQUE\n    ,A.CD_ESTABELECIMENTO\n    ,A.nm_fantasia_estab                         AS DS_ESTABELECIMENTO\n    ,A.CD_MATERIAL\n    ,A.DS_REDUZIDA                                AS DS_MATERIAL_SHORT\n    ,A.CD_GRUPO_MATERIAL\n    ,A.DS_GRUPO_MATERIAL\n    ,A.CD_CLASSE_MATERIAL\n    ,A.CLASSE_MATERIAL                           AS DS_CLASSE_MATERIAL\n    ,A.cd_operacao_estoque\n    ,A.DS_OPERACAO\n    ,A.QT_MOVIMENTO\n    ,CASE \n        WHEN A.CD_ACAO = 2 THEN A.VALOR_MOVIMENTO * -1\n        ELSE A.VALOR_MOVIMENTO\n     END VL_MOVIMENTO   \nFROM AUX A\n--WHERE TO_CHAR(TRUNC(A.DT_MOVIMENTO_ESTOQUE,'MM'),'YYYY-MM-DD') = TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYY-MM-DD')\nWHERE TO_CHAR(TRUNC(A.DT_MOVIMENTO_ESTOQUE,'MM'),'YYYY-MM-DD') BETWEEN '2020-01-01' AND '2021-06-01'",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_MOVIMENTO"
										},
										"sink": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOQUE"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_OPERACAO_ESTOQUE"
										},
										"sink": {
											"name": "CD_OPERACAO_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_OPERACAO"
										},
										"sink": {
											"name": "DS_OPERACAO_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_MOVIMENTO"
										},
										"sink": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "VL_MOVIMENTO"
										},
										"sink": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_MOVIMENTO_ESTOQUE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Mov Estoque ITG - Smart",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Mov Estoque Delphi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF ='2020-01-01';\n\n\nSELECT DISTINCT \n    CAST(MMA_DATA_MOV AS DATE)  as DATA_MOVIMENTO\n    ,MMA_SBA_COD                AS CD_LOCAL_ESTOOUE\n    ,SBA_NOME                   AS DS_LOCAL_ESTOQUE\n    ,GCC.gcc_cod                AS CD_ESTABELECIMENTO\n    ,GCC.gcc_descr              AS DS_ESTABELECIMENTO\n    ,mma_mat_cod                AS CD_MATERIAL\n    ,MAT_DESC_RESUMIDA          AS DS_MATERIAL_SHORT\n    ,LMA.LMA_COD                AS CD_CLASSE_MATERIAL\n    ,LMA.LMA_NOME               AS DS_CLASSE_MATERIAL\n    ,gmm_cod                    as CD_GRUPO_MATERIAL\n    -- , mma_ism_seq\n    -- , MMA_ISM_SEQ\n    -- , mma_lot_num\n    , gmm_nome                  AS DS_GRUPO_MATERIAL    \n    ,MMA_TIPO_OPERACAO          AS CD_OPERACAO\n    , tmm_descr                 AS DS_OPERACAO\n    , mma_qtd                   AS QT_MOVIMENTO\n    ,cast(mma_valor as decimal) AS VL_MOVIMENTO\nFROM mma with (nolock)\nLEFT JOIN tmm  with (nolock)\n    ON tmm_cod = MMA_TIPO_OPERACAO\nLEFT JOIN mat with (nolock)\n    ON mma_mat_cod = mat_cod\nLEFT JOIN gmm with (nolock)\n    ON gmm_cod = mma_gmm_cod\nLEFT JOIN sba with (nolock)\n    ON sba_cod = mma_sba_cod\nLEFT JOIN str with (nolock)\n    ON str_cod = sba_str_cod\nLEFT JOIN str str_e  with (nolock)\n    ON str.str_str_cod = str_e.str_cod\nLEFT JOIN fne  with (nolock)\n    ON mat_fne_ult_entrada = FNE_COD\nLEFT JOIN GCC GCC (NOLOCK) ON gcc_str_cod = STR.str_str_cod\nLEFT JOIN LMA LMA (NOLOCK) ON LMA.LMA_GMM_COD = MAT_GMM_COD          \n\nWHERE CAST(SUBSTRING(CAST(CAST(MMA_DATA_MOV AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE) >= @MES_REF\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOOUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_OPERACAO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_OPERACAO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 14
										},
										"sink": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										},
										"sink": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_MOVIMENTO_ESTOQUE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Mov Estoque ITB - Smart",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Mov Estoque ITG - Smart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF ='2020-01-01';\n\n\nSELECT DISTINCT \n    CAST(MMA_DATA_MOV AS DATE)  as DATA_MOVIMENTO\n    ,MMA_SBA_COD                AS CD_LOCAL_ESTOOUE\n    ,SBA_NOME                   AS DS_LOCAL_ESTOQUE\n    ,GCC.gcc_cod                AS CD_ESTABELECIMENTO\n    ,GCC.gcc_descr              AS DS_ESTABELECIMENTO\n    ,mma_mat_cod                AS CD_MATERIAL\n    ,MAT_DESC_RESUMIDA          AS DS_MATERIAL_SHORT\n    ,LMA.LMA_COD                AS CD_CLASSE_MATERIAL\n    ,LMA.LMA_NOME               AS DS_CLASSE_MATERIAL\n    ,gmm_cod                    as CD_GRUPO_MATERIAL\n    -- , mma_ism_seq\n    -- , MMA_ISM_SEQ\n    -- , mma_lot_num\n    , gmm_nome                  AS DS_GRUPO_MATERIAL    \n    ,MMA_TIPO_OPERACAO          AS CD_OPERACAO\n    , tmm_descr                 AS DS_OPERACAO\n    , mma_qtd                   AS QT_MOVIMENTO\n    ,cast(mma_valor as decimal) AS VL_MOVIMENTO\nFROM mma with (nolock)\nLEFT JOIN tmm  with (nolock)\n    ON tmm_cod = MMA_TIPO_OPERACAO\nLEFT JOIN mat with (nolock)\n    ON mma_mat_cod = mat_cod\nLEFT JOIN gmm with (nolock)\n    ON gmm_cod = mma_gmm_cod\nLEFT JOIN sba with (nolock)\n    ON sba_cod = mma_sba_cod\nLEFT JOIN str with (nolock)\n    ON str_cod = sba_str_cod\nLEFT JOIN str str_e  with (nolock)\n    ON str.str_str_cod = str_e.str_cod\nLEFT JOIN fne  with (nolock)\n    ON mat_fne_ult_entrada = FNE_COD\nLEFT JOIN GCC GCC (NOLOCK) ON gcc_str_cod = STR.str_str_cod\nLEFT JOIN LMA LMA (NOLOCK) ON LMA.LMA_GMM_COD = MAT_GMM_COD          \n\nWHERE CAST(SUBSTRING(CAST(CAST(MMA_DATA_MOV AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE) >= @MES_REF\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOOUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_OPERACAO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_OPERACAO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 14
										},
										"sink": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										},
										"sink": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_MOVIMENTO_ESTOQUE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Mov Estoque IOF - Smart",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Mov Estoque ITB - Smart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF ='2020-01-01';\n\n\nSELECT DISTINCT \n    CAST(MMA_DATA_MOV AS DATE)  as DATA_MOVIMENTO\n    ,MMA_SBA_COD                AS CD_LOCAL_ESTOOUE\n    ,SBA_NOME                   AS DS_LOCAL_ESTOQUE\n    ,GCC.gcc_cod                AS CD_ESTABELECIMENTO\n    ,GCC.gcc_descr              AS DS_ESTABELECIMENTO\n    ,mma_mat_cod                AS CD_MATERIAL\n    ,MAT_DESC_RESUMIDA          AS DS_MATERIAL_SHORT\n    ,LMA.LMA_COD                AS CD_CLASSE_MATERIAL\n    ,LMA.LMA_NOME               AS DS_CLASSE_MATERIAL\n    ,gmm_cod                    as CD_GRUPO_MATERIAL\n    -- , mma_ism_seq\n    -- , MMA_ISM_SEQ\n    -- , mma_lot_num\n    , gmm_nome                  AS DS_GRUPO_MATERIAL    \n    ,MMA_TIPO_OPERACAO          AS CD_OPERACAO\n    , tmm_descr                 AS DS_OPERACAO\n    , mma_qtd                   AS QT_MOVIMENTO\n    ,cast(mma_valor as decimal) AS VL_MOVIMENTO\nFROM mma with (nolock)\nLEFT JOIN tmm  with (nolock)\n    ON tmm_cod = MMA_TIPO_OPERACAO\nLEFT JOIN mat with (nolock)\n    ON mma_mat_cod = mat_cod\nLEFT JOIN gmm with (nolock)\n    ON gmm_cod = mma_gmm_cod\nLEFT JOIN sba with (nolock)\n    ON sba_cod = mma_sba_cod\nLEFT JOIN str with (nolock)\n    ON str_cod = sba_str_cod\nLEFT JOIN str str_e  with (nolock)\n    ON str.str_str_cod = str_e.str_cod\nLEFT JOIN fne  with (nolock)\n    ON mat_fne_ult_entrada = FNE_COD\nLEFT JOIN GCC GCC (NOLOCK) ON gcc_str_cod = STR.str_str_cod\nLEFT JOIN LMA LMA (NOLOCK) ON LMA.LMA_GMM_COD = MAT_GMM_COD          \n\nWHERE CAST(SUBSTRING(CAST(CAST(MMA_DATA_MOV AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE) >= @MES_REF\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOOUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_OPERACAO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_OPERACAO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 14
										},
										"sink": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										},
										"sink": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_MOVIMENTO_ESTOQUE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Mov Estoque OFTALMOCLIN - Smart",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Mov Estoque IOF - Smart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF ='2020-01-01';\n\n\nSELECT DISTINCT \n    CAST(MMA_DATA_MOV AS DATE)  as DATA_MOVIMENTO\n    ,MMA_SBA_COD                AS CD_LOCAL_ESTOOUE\n    ,SBA_NOME                   AS DS_LOCAL_ESTOQUE\n    ,GCC.gcc_cod                AS CD_ESTABELECIMENTO\n    ,GCC.gcc_descr              AS DS_ESTABELECIMENTO\n    ,mma_mat_cod                AS CD_MATERIAL\n    ,MAT_DESC_RESUMIDA          AS DS_MATERIAL_SHORT\n    ,LMA.LMA_COD                AS CD_CLASSE_MATERIAL\n    ,LMA.LMA_NOME               AS DS_CLASSE_MATERIAL\n    ,gmm_cod                    as CD_GRUPO_MATERIAL\n    -- , mma_ism_seq\n    -- , MMA_ISM_SEQ\n    -- , mma_lot_num\n    , gmm_nome                  AS DS_GRUPO_MATERIAL    \n    ,MMA_TIPO_OPERACAO          AS CD_OPERACAO\n    , tmm_descr                 AS DS_OPERACAO\n    , mma_qtd                   AS QT_MOVIMENTO\n    ,cast(mma_valor as decimal) AS VL_MOVIMENTO\nFROM mma with (nolock)\nLEFT JOIN tmm  with (nolock)\n    ON tmm_cod = MMA_TIPO_OPERACAO\nLEFT JOIN mat with (nolock)\n    ON mma_mat_cod = mat_cod\nLEFT JOIN gmm with (nolock)\n    ON gmm_cod = mma_gmm_cod\nLEFT JOIN sba with (nolock)\n    ON sba_cod = mma_sba_cod\nLEFT JOIN str with (nolock)\n    ON str_cod = sba_str_cod\nLEFT JOIN str str_e  with (nolock)\n    ON str.str_str_cod = str_e.str_cod\nLEFT JOIN fne  with (nolock)\n    ON mat_fne_ult_entrada = FNE_COD\nLEFT JOIN GCC GCC (NOLOCK) ON gcc_str_cod = STR.str_str_cod\nLEFT JOIN LMA LMA (NOLOCK) ON LMA.LMA_GMM_COD = MAT_GMM_COD          \n\nWHERE CAST(SUBSTRING(CAST(CAST(MMA_DATA_MOV AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE) >= @MES_REF\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOOUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_OPERACAO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_OPERACAO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 14
										},
										"sink": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										},
										"sink": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_MOVIMENTO_ESTOQUE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Mov Estoque HOSL - Smart",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Mov Estoque OFTALMOCLIN - Smart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF ='2020-01-01';\n\n\nSELECT DISTINCT \n    CAST(MMA_DATA_MOV AS DATE)  as DATA_MOVIMENTO\n    ,MMA_SBA_COD                AS CD_LOCAL_ESTOOUE\n    ,SBA_NOME                   AS DS_LOCAL_ESTOQUE\n    ,GCC.gcc_cod                AS CD_ESTABELECIMENTO\n    ,GCC.gcc_descr              AS DS_ESTABELECIMENTO\n    ,mma_mat_cod                AS CD_MATERIAL\n    ,MAT_DESC_RESUMIDA          AS DS_MATERIAL_SHORT\n    ,LMA.LMA_COD                AS CD_CLASSE_MATERIAL\n    ,LMA.LMA_NOME               AS DS_CLASSE_MATERIAL\n    ,gmm_cod                    as CD_GRUPO_MATERIAL\n    -- , mma_ism_seq\n    -- , MMA_ISM_SEQ\n    -- , mma_lot_num\n    , gmm_nome                  AS DS_GRUPO_MATERIAL    \n    ,MMA_TIPO_OPERACAO          AS CD_OPERACAO\n    , tmm_descr                 AS DS_OPERACAO\n    , mma_qtd                   AS QT_MOVIMENTO\n    ,cast(mma_valor as decimal) AS VL_MOVIMENTO\nFROM mma with (nolock)\nLEFT JOIN tmm  with (nolock)\n    ON tmm_cod = MMA_TIPO_OPERACAO\nLEFT JOIN mat with (nolock)\n    ON mma_mat_cod = mat_cod\nLEFT JOIN gmm with (nolock)\n    ON gmm_cod = mma_gmm_cod\nLEFT JOIN sba with (nolock)\n    ON sba_cod = mma_sba_cod\nLEFT JOIN str with (nolock)\n    ON str_cod = sba_str_cod\nLEFT JOIN str str_e  with (nolock)\n    ON str.str_str_cod = str_e.str_cod\nLEFT JOIN fne  with (nolock)\n    ON mat_fne_ult_entrada = FNE_COD\nLEFT JOIN GCC GCC (NOLOCK) ON gcc_str_cod = STR.str_str_cod\nLEFT JOIN LMA LMA (NOLOCK) ON LMA.LMA_GMM_COD = MAT_GMM_COD          \n\nWHERE CAST(SUBSTRING(CAST(CAST(MMA_DATA_MOV AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE) >= @MES_REF\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOOUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_OPERACAO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_OPERACAO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 14
										},
										"sink": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										},
										"sink": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_MOVIMENTO_ESTOQUE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"DATA": {
						"type": "String",
						"defaultValue": "2021-05-01"
					}
				},
				"folder": {
					"name": "Estoque"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-20T18:04:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_MOVIMENTO_ESTOQUE')]",
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITAIGARA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITABUNA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_IOF_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_Oftalmoclin_Prd_DataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_HOSL_PrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Agendamentos Livres')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Agendamentos Livres HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "-- Agendamentos Livres\n\nselect a.cd_pessoa_fisica, \na.cd_convenio, \nobter_cnpj_estabelecimento(ag.cd_estabelecimento) as cnpj,\nto_char((a.hr_inicio) , 'yyyy-mm-dd') as data_agenda,\nto_char((a.hr_inicio) , 'hh24:mi:ss') as hora_agenda,\n'Consulta' as tipo_agenda,\npf.nm_pessoa_fisica as nm_paciente,\nsubstr(obter_desc_procedimento(a.cd_procedimento, a.ie_origem_proced),1,1000) as ds_procedimento_princ,\nsubstr((select Listagg(Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced), ' ;') within GROUP (ORDER BY Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced))  from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia),1,1000) as ds_procedimento_adic,\n1 + (select count(1)from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia) as ie_quantidade,\nobter_nome_usuario(a.nm_usuario_orig) as nm_usuario,\n\nobter_nome_pf(a.cd_medico_exec) as nm_medico,\n\ne.nm_fantasia_estab DS_UNIDADE,\nem.nm_razao_social MARCA,\nobter_valor_dominio(83,a.ie_status_agenda) as status_agenda,\na.nr_atendimento,\na.nr_sequencia,\n'NAO ENCONTRADO' as ID,\na.cd_procedencia,\np.ds_procedencia,\nto_char(a.dt_agendamento, 'yyyy-mm-dd') dt_agendamento,\n\nto_char(a.dt_agenda,'dd') dia,\nto_char(a.dt_agenda,'mm') mes,\nto_char(a.dt_agenda,'yyyy') ano,\nac.ds_classificacao,\naa.ds_agrupamento ds_agrupamento,\na.cd_motivo_cancelamento,\nsubstr(obter_ds_motivo_status(a.nr_sequencia, a.cd_agenda),1,200) as ds_motivo_cancelamento,\na.cd_agenda,\nto_char(a.dt_atualizacao, 'yyyy-mm-dd') dt_atualizacao,\n'Tasy HTML' as BASE\n\nfrom agenda_paciente a,\n     agenda ag,\n     pessoa_fisica pf,\n     procedencia p,\n     agenda_paciente_classif ac,\n     agrupamento_agenda aa,\n     empresa em,\n     estabelecimento e\nwhere a.cd_agenda = ag.cd_agenda\nand a.cd_pessoa_fisica = pf.cd_pessoa_fisica (+)\nand a.cd_procedencia = p.cd_procedencia (+)\nand a.nr_seq_classif_agenda = ac.nr_sequencia (+)\nand ag.nr_seq_agrupamento = aa.nr_sequencia (+)\nand ag.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa\nand a.cd_pessoa_fisica is null\nand a.cd_convenio is null\nand ag.cd_tipo_agenda = 2\nand ag.cd_pessoa_fisica is not null\nand a.dt_agenda between SYSDATE - 365 AND SYSDATE + 30",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamentos_Livres_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-03-13T19:36:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agendamentos_Livres_Unidade')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Agendamentos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Agendamento Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "-- Agendamento Sadalla - Azure\n\nselect a.cd_pessoa_fisica, \na.cd_convenio, \nobter_cnpj_estabelecimento(ag.cd_estabelecimento) as cnpj,\nto_char(a.dt_agenda, 'dd/mm/yyyy') as data_agenda,\nto_char(a.dt_agenda, 'hh24:mi:ss') as hora_agenda,\n'Consulta' as tipo_agenda,\npf.nm_pessoa_fisica as nm_paciente,\nobter_desc_procedimento(10502, 1) as ds_procedimento_princ,\n'' ds_procedimento_adic,\n1 as ie_quantidade,\nobter_nome_usuario(a.nm_usuario_origem) as nm_usuario,\nobter_nome_pf(ag.cd_pessoa_fisica) as nm_medico,\nnm_fantasia_estab DS_UNIDADE,\nem.nm_razao_social MARCA,\nobter_valor_dominio(83,a.ie_status_agenda) as status_agenda,\na.nr_atendimento,\na.nr_sequencia,\n'NAO ENCONTRADO' as ID,\na.cd_procedencia,\np.ds_procedencia,\na.dt_agendamento,\n\nto_char(a.dt_agenda,'dd') dia,\nto_char(a.dt_agenda,'mm') mes,\nto_char(a.dt_agenda,'yyyy') ano,\nac.ds_classificacao ,\naa.ds_agrupamento ds_agrupamento,\na.cd_motivo_cancelamento,\nsubstr(obter_ds_motivo_status(a.nr_sequencia, a.cd_agenda),1,200) as ds_motivo_cancelamento,\na.cd_agenda,\n\na.dt_atualizacao\n\nfrom agenda_consulta a,\n     agenda ag,\n     pessoa_fisica pf,\n     procedencia p,\n     agenda_classif ac,\n     agrupamento_agenda aa,\n     estabelecimento e,\n     empresa em\nwhere a.cd_agenda = ag.cd_agenda\nand a.cd_pessoa_fisica = pf.cd_pessoa_fisica (+)\nand a.cd_procedencia = p.cd_procedencia(+)\nand a.ie_classif_agenda  = ac.cd_classificacao(+)\nand ag.nr_seq_agrupamento = aa.nr_sequencia (+)\nand ag.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa\nand a.cd_pessoa_fisica is not null",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendamento HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "-- AGENDAMENTO HOB - Azure\n\nselect  a.cd_pessoa_fisica, \na.cd_convenio, \nobter_cnpj_estabelecimento(ag.cd_estabelecimento) as cnpj,\nto_char((a.hr_inicio) , 'dd/mm/yyyy') as data_agenda,\nto_char((a.hr_inicio) , 'hh24:mi:ss') as hora_agenda,\n'Consulta' as tipo_agenda,\npf.nm_pessoa_fisica as nm_paciente,\nsubstr(obter_desc_procedimento(a.cd_procedimento, a.ie_origem_proced),1,1000) as ds_procedimento_princ,\nsubstr((select Listagg(Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced), ' ;') within GROUP (ORDER BY Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced))  from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia),1,1000) as ds_procedimento_adic,\n1 + (select count(1)from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia) as ie_quantidade,\nobter_nome_usuario(a.nm_usuario_orig) as nm_usuario,\nobter_nome_pf(a.cd_medico_exec) as nm_medico,\ne.nm_fantasia_estab DS_UNIDADE,\nem.nm_razao_social MARCA,\nobter_valor_dominio(83,a.ie_status_agenda) as status_agenda,\na.nr_atendimento,\na.nr_sequencia,\n'NAO ENCONTRADO' as ID,\na.cd_procedencia,\np.ds_procedencia,\na.dt_agendamento,\n\nto_char(a.dt_agenda,'dd') dia,\nto_char(a.dt_agenda,'mm') mes,\nto_char(a.dt_agenda,'yyyy') ano,\nac.ds_classificacao,\naa.ds_agrupamento ds_agrupamento,\na.cd_motivo_cancelamento,\nsubstr(obter_ds_motivo_status(a.nr_sequencia, a.cd_agenda),1,200) as ds_motivo_cancelamento,\na.cd_agenda,\na.dt_atualizacao\n\nfrom agenda_paciente a,\n     agenda ag,\n     pessoa_fisica pf,\n     procedencia p,\n     agenda_paciente_classif ac,\n     agrupamento_agenda aa,\n     empresa em,\n     estabelecimento e\nwhere a.cd_agenda = ag.cd_agenda\nand a.cd_pessoa_fisica = pf.cd_pessoa_fisica (+)\nand a.cd_procedencia = p.cd_procedencia (+)\nand a.nr_seq_classif_agenda = ac.nr_sequencia (+)\nand ag.nr_seq_agrupamento = aa.nr_sequencia (+)\nand ag.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa\nand a.cd_pessoa_fisica is not null\nand ag.cd_tipo_agenda = 2",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T13:01:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agendamento')]",
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Agendas Projesi - Geral')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data_ZFaltas_HTML5",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\nc.nr_sequencia as id_compromisso,\nc.nr_atendimento as nr_atendimento,\nc.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(c.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nc.cd_convenio idconvenio,\nobter_nome_convenio(c.cd_convenio) as convenio,\nc.cd_plano,\nobter_desc_plano(c.cd_convenio, c.cd_plano) ds_plano,\nc.dt_agenda as datacompromisso,\nto_char(c.hr_inicio, 'hh24:mi:ss') as horacompromisso,\nc.ie_status_agenda as id_status,\nobter_status_agenda_paciente(c.nr_sequencia) as ds_status,\na.cd_agenda,\na.ds_agenda as agenda,\nc.cd_procedimento,\nobter_desc_procedimento(c.cd_procedimento, c.ie_origem_proced) as procedimento,\nobter_empresa_estab(a.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(a.cd_estabelecimento)) as empresa,\na.cd_estabelecimento as id_unidade,\nobter_nome_estab(a.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nobter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nobter_nome_pf(c.cd_medico_exec) as nm_medico,\nc.dt_agendamento,\na.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\na.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nfrom agenda_paciente c,\nagenda a,\npessoa_fisica pf\nwhere c.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand c.cd_agenda = a.cd_agenda\nand c.cd_pessoa_fisica is not null\nand trunc(c.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30)\nand a.cd_agenda not in (283,404) \nand length('55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9)) = 13\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_TRUNCATEZEROFALTAS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera_tipo_agenda",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Data_ZFaltas_Sadalla",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Data_ZFaltas_HTML5",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Data_ZFaltas_SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERTIPOAGENDASPROJESI]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Data_ZFaltas_Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\nc.nr_sequencia as id_compromisso,\nc.nr_atendimento as nr_atendimento,\nc.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(c.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nc.cd_convenio idconvenio,\nobter_nome_convenio(c.cd_convenio) as convenio,\nc.cd_plano,\nobter_desc_plano(c.cd_convenio, c.cd_plano) ds_plano,\nc.dt_agenda as datacompromisso,\nto_char(c.dt_agenda, 'hh24:mi:ss') as horacompromisso,\nc.ie_status_agenda as id_status,\nobter_status_agenda_paciente(c.nr_sequencia) as ds_status,\na.cd_agenda,\na.ds_agenda as agenda,\nc.cd_procedimento,\nobter_desc_procedimento(c.cd_procedimento, c.ie_origem_proced) as procedimento,\nobter_empresa_estab(a.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(a.cd_estabelecimento)) as empresa,\na.cd_estabelecimento as id_unidade,\nobter_nome_estab(a.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nobter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nobter_nome_pf(a.cd_pessoa_fisica) as nm_medico,\nc.dt_agendamento,\na.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\na.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nfrom agenda_consulta c,\nagenda a,\npessoa_fisica pf\nwhere c.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand c.cd_agenda = a.cd_agenda\nand c.cd_pessoa_fisica is not null\nand trunc(c.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30)\nand a.cd_agenda not in (283,404) \nand length('55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9)) = 13\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Altera Status Paciente",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Altera_tipo_agenda",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERSTATUSPACIENTE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Data_ZFaltas_SP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT distinct x.nr_sequencia as id_compromisso,\nx.nr_atendimento as nr_atendimento,\nx.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(x.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nx.cd_convenio idconvenio,\nobter_nome_convenio(x.cd_convenio) as convenio,\nx.cd_plano,\nobter_desc_plano(x.cd_convenio, x.cd_plano) ds_plano,\nx.dt_agenda as datacompromisso,\nto_char(c.dt_agenda, 'hh24:mi:ss') as horacompromisso,\nx.ie_status_agenda as id_status,\nobter_status_agenda_paciente(x.nr_sequencia) as ds_status,\nX.cd_agenda,\nX.ds_agenda as agenda,\nx.cd_procedimento,\nobter_desc_procedimento(x.cd_procedimento, x.ie_origem_proced) as procedimento,\nobter_empresa_estab(X.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(X.cd_estabelecimento)) as empresa,\nX.cd_estabelecimento as id_unidade,\nobter_nome_estab(X.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nobter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nsubstr(obter_nome_pf(x.CD_MEDICO_AGENDA ),1,150) as nm_medico,\nx.dt_agendamento,\nX.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\nX.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nFROM CONSULTA_AGECONS_V X\n    LEFT JOIN pessoa_fisica pf ON X.cd_pessoa_fisica = PF.cd_pessoa_fisica\n    LEFT JOIN AGENDA_CONSULTA C ON X.NR_SEQUENCIA = C.NR_SEQUENCIA\nWHERE trunc(c.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30) \nAND X.CD_ESTABELECIMENTO IN (55,63,64,66,71,73,74,75,76)\n\nUNION\n\nselect distinct\na.nr_sequencia as id_compromisso,\na.nr_atendimento as nr_atendimento,\na.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(a.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\na.cd_convenio idconvenio,\nobter_nome_convenio(a.cd_convenio) as convenio,\na.cd_plano,\nobter_desc_plano(a.cd_convenio, a.cd_plano) ds_plano,\na.dt_agenda as datacompromisso,\nto_char(b.hr_inicio, 'hh24:mi:ss') as horacompromisso,\na.ie_status_agenda as id_status,\nobter_status_agenda_paciente(a.nr_sequencia) as ds_status,\nA.cd_agenda,\nA.ds_agenda as agenda,\nA.cd_procedimento,\nobter_desc_procedimento(A.cd_procedimento, A.ie_origem_proced) as procedimento,\nobter_empresa_estab(A.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(A.cd_estabelecimento)) as empresa,\nA.cd_estabelecimento as id_unidade,\nobter_nome_estab(A.cd_estabelecimento)as unidade,\nB.ie_autorizacao,\nobter_valor_dominio(1227, B.ie_autorizacao) as autorizacao,\nsubstr(obter_nome_pf(a.CD_MEDICO_AGENDA ),1,150) as nm_medico,\nA.dt_agendamento,\nA.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\nA.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nFROM CONSULTA_AGEEXAM_V a\n    LEFT JOIN pessoa_fisica pf ON A.cd_pessoa_fisica = pf.cd_pessoa_fisica\n    LEFT JOIN agenda_paciente B ON A.NR_SEQUENCIA = B.NR_SEQUENCIA\nwhere A.CD_ESTABELECIMENTO IN (55,63,64,66,71,73,74,75,76)\nand trunc(a.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30)\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2021-02-18T14:59:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_Zero_Faltas')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Agendas Projesi - Original')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data_ZFaltas_HTML5",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\nc.nr_sequencia as id_compromisso,\nc.nr_atendimento as nr_atendimento,\nc.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(c.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nc.cd_convenio idconvenio,\nobter_nome_convenio(c.cd_convenio) as convenio,\nc.cd_plano,\nobter_desc_plano(c.cd_convenio, c.cd_plano) ds_plano,\nc.dt_agenda as datacompromisso,\nto_char(c.hr_inicio, 'hh24:mi:ss') as horacompromisso,\nc.ie_status_agenda as id_status,\nobter_status_agenda_paciente(c.nr_sequencia) as ds_status,\na.cd_agenda,\na.ds_agenda as agenda,\nc.cd_procedimento,\nobter_desc_procedimento(c.cd_procedimento, c.ie_origem_proced) as procedimento,\nobter_empresa_estab(a.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(a.cd_estabelecimento)) as empresa,\na.cd_estabelecimento as id_unidade,\nobter_nome_estab(a.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nobter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nobter_nome_pf(c.cd_medico_exec) as nm_medico,\nc.dt_agendamento,\na.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\na.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nfrom agenda_paciente c,\nagenda a,\npessoa_fisica pf\nwhere c.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand c.cd_agenda = a.cd_agenda\nand c.cd_pessoa_fisica is not null\nand trunc(c.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30)\nand a.cd_agenda not in (283,404) \nand length('55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9)) = 13\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_TRUNCATEZEROFALTAS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera_tipo_agenda",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Data_ZFaltas_Sadalla",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Data_ZFaltas_HTML5",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Data_ZFaltas_SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERTIPOAGENDASPROJESI]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Data_ZFaltas_Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\nc.nr_sequencia as id_compromisso,\nc.nr_atendimento as nr_atendimento,\nc.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(c.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nc.cd_convenio idconvenio,\nobter_nome_convenio(c.cd_convenio) as convenio,\nc.cd_plano,\nobter_desc_plano(c.cd_convenio, c.cd_plano) ds_plano,\nc.dt_agenda as datacompromisso,\nto_char(c.dt_agenda, 'hh24:mi:ss') as horacompromisso,\nc.ie_status_agenda as id_status,\nobter_status_agenda_paciente(c.nr_sequencia) as ds_status,\na.cd_agenda,\na.ds_agenda as agenda,\nc.cd_procedimento,\nobter_desc_procedimento(c.cd_procedimento, c.ie_origem_proced) as procedimento,\nobter_empresa_estab(a.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(a.cd_estabelecimento)) as empresa,\na.cd_estabelecimento as id_unidade,\nobter_nome_estab(a.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nobter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nobter_nome_pf(a.cd_pessoa_fisica) as nm_medico,\nc.dt_agendamento,\na.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\na.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nfrom agenda_consulta c,\nagenda a,\npessoa_fisica pf\nwhere c.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand c.cd_agenda = a.cd_agenda\nand c.cd_pessoa_fisica is not null\nand trunc(c.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30)\nand a.cd_agenda not in (283,404) \nand length('55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9)) = 13\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Altera Status Paciente",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Altera_tipo_agenda",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERSTATUSPACIENTE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Data_ZFaltas_SP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT distinct x.nr_sequencia as id_compromisso,\nx.nr_atendimento as nr_atendimento,\nx.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(x.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nx.cd_convenio idconvenio,\nobter_nome_convenio(x.cd_convenio) as convenio,\nx.cd_plano,\nobter_desc_plano(x.cd_convenio, x.cd_plano) ds_plano,\nx.dt_agenda as datacompromisso,\nto_char(c.dt_agenda, 'hh24:mi:ss') as horacompromisso,\nx.ie_status_agenda as id_status,\nobter_status_agenda_paciente(x.nr_sequencia) as ds_status,\nX.cd_agenda,\nX.ds_agenda as agenda,\nx.cd_procedimento,\nobter_desc_procedimento(x.cd_procedimento, x.ie_origem_proced) as procedimento,\nobter_empresa_estab(X.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(X.cd_estabelecimento)) as empresa,\nX.cd_estabelecimento as id_unidade,\nobter_nome_estab(X.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nobter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nsubstr(obter_nome_pf(x.CD_MEDICO_AGENDA ),1,150) as nm_medico,\nx.dt_agendamento,\nX.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\nX.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nFROM CONSULTA_AGECONS_V X\n    LEFT JOIN pessoa_fisica pf ON X.cd_pessoa_fisica = PF.cd_pessoa_fisica\n    LEFT JOIN AGENDA_CONSULTA C ON X.NR_SEQUENCIA = C.NR_SEQUENCIA\nWHERE trunc(c.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30) \nAND X.CD_ESTABELECIMENTO IN (55,63,64,66,71,73,74,75,76)\n\nUNION\n\nselect distinct\na.nr_sequencia as id_compromisso,\na.nr_atendimento as nr_atendimento,\na.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(a.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\na.cd_convenio idconvenio,\nobter_nome_convenio(a.cd_convenio) as convenio,\na.cd_plano,\nobter_desc_plano(a.cd_convenio, a.cd_plano) ds_plano,\na.dt_agenda as datacompromisso,\nto_char(b.hr_inicio, 'hh24:mi:ss') as horacompromisso,\na.ie_status_agenda as id_status,\nobter_status_agenda_paciente(a.nr_sequencia) as ds_status,\nA.cd_agenda,\nA.ds_agenda as agenda,\nA.cd_procedimento,\nobter_desc_procedimento(A.cd_procedimento, A.ie_origem_proced) as procedimento,\nobter_empresa_estab(A.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(A.cd_estabelecimento)) as empresa,\nA.cd_estabelecimento as id_unidade,\nobter_nome_estab(A.cd_estabelecimento)as unidade,\nB.ie_autorizacao,\nobter_valor_dominio(1227, B.ie_autorizacao) as autorizacao,\nsubstr(obter_nome_pf(a.CD_MEDICO_AGENDA ),1,150) as nm_medico,\nA.dt_agendamento,\nA.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\nA.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nFROM CONSULTA_AGEEXAM_V a\n    LEFT JOIN pessoa_fisica pf ON A.cd_pessoa_fisica = pf.cd_pessoa_fisica\n    LEFT JOIN agenda_paciente B ON A.NR_SEQUENCIA = B.NR_SEQUENCIA\nwhere A.CD_ESTABELECIMENTO IN (55,63,64,66,71,73,74,75,76)\nand trunc(a.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30)\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2021-02-18T14:35:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_Zero_Faltas')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Agendas Projesi - Tasy HTML')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data_ZFaltas_HTML5",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\nc.nr_sequencia as id_compromisso,\nc.nr_atendimento as nr_atendimento,\nc.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(c.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nc.cd_convenio idconvenio,\nobter_nome_convenio(c.cd_convenio) as convenio,\nc.cd_plano,\nobter_desc_plano(c.cd_convenio, c.cd_plano) ds_plano,\nc.dt_agenda as datacompromisso,\nto_char(c.hr_inicio, 'hh24:mi:ss') as horacompromisso,\nc.ie_status_agenda as id_status,\nobter_status_agenda_paciente(c.nr_sequencia) as ds_status,\na.cd_agenda,\na.ds_agenda as agenda,\nc.cd_procedimento,\nobter_desc_procedimento(c.cd_procedimento, c.ie_origem_proced) as procedimento,\nobter_empresa_estab(a.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(a.cd_estabelecimento)) as empresa,\na.cd_estabelecimento as id_unidade,\nobter_nome_estab(a.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nobter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nobter_nome_pf(c.cd_medico_exec) as nm_medico,\nc.dt_agendamento,\na.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\na.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nfrom agenda_paciente c,\nagenda a,\npessoa_fisica pf\nwhere c.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand c.cd_agenda = a.cd_agenda\nand c.cd_pessoa_fisica is not null\nand trunc(c.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30)\nand a.cd_agenda not in (283,404) \nand length('55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9)) = 13\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_TRUNCATEZEROFALTAS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera_tipo_agenda",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Data_ZFaltas_HTML5",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Data_ZFaltas_SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERTIPOAGENDASPROJESI]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera Status Paciente",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Altera_tipo_agenda",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERSTATUSPACIENTE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Data_ZFaltas_SP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT distinct x.nr_sequencia as id_compromisso,\nx.nr_atendimento as nr_atendimento,\nx.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(x.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nx.cd_convenio idconvenio,\nobter_nome_convenio(x.cd_convenio) as convenio,\nx.cd_plano,\nobter_desc_plano(x.cd_convenio, x.cd_plano) ds_plano,\nx.dt_agenda as datacompromisso,\nto_char(c.dt_agenda, 'hh24:mi:ss') as horacompromisso,\nx.ie_status_agenda as id_status,\nobter_status_agenda_paciente(x.nr_sequencia) as ds_status,\nX.cd_agenda,\nX.ds_agenda as agenda,\nx.cd_procedimento,\nobter_desc_procedimento(x.cd_procedimento, x.ie_origem_proced) as procedimento,\nobter_empresa_estab(X.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(X.cd_estabelecimento)) as empresa,\nX.cd_estabelecimento as id_unidade,\nobter_nome_estab(X.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nobter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nsubstr(obter_nome_pf(x.CD_MEDICO_AGENDA ),1,150) as nm_medico,\nx.dt_agendamento,\nX.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\nX.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nFROM CONSULTA_AGECONS_V X\n    LEFT JOIN pessoa_fisica pf ON X.cd_pessoa_fisica = PF.cd_pessoa_fisica\n    LEFT JOIN AGENDA_CONSULTA C ON X.NR_SEQUENCIA = C.NR_SEQUENCIA\nWHERE trunc(c.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30) \nAND X.CD_ESTABELECIMENTO IN (55,63,64,66,71,73,74,75,76)\n\nUNION\n\nselect distinct\na.nr_sequencia as id_compromisso,\na.nr_atendimento as nr_atendimento,\na.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(a.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\na.cd_convenio idconvenio,\nobter_nome_convenio(a.cd_convenio) as convenio,\na.cd_plano,\nobter_desc_plano(a.cd_convenio, a.cd_plano) ds_plano,\na.dt_agenda as datacompromisso,\nto_char(b.hr_inicio, 'hh24:mi:ss') as horacompromisso,\na.ie_status_agenda as id_status,\nobter_status_agenda_paciente(a.nr_sequencia) as ds_status,\nA.cd_agenda,\nA.ds_agenda as agenda,\nA.cd_procedimento,\nobter_desc_procedimento(A.cd_procedimento, A.ie_origem_proced) as procedimento,\nobter_empresa_estab(A.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(A.cd_estabelecimento)) as empresa,\nA.cd_estabelecimento as id_unidade,\nobter_nome_estab(A.cd_estabelecimento)as unidade,\nB.ie_autorizacao,\nobter_valor_dominio(1227, B.ie_autorizacao) as autorizacao,\nsubstr(obter_nome_pf(a.CD_MEDICO_AGENDA ),1,150) as nm_medico,\nA.dt_agendamento,\nA.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\nA.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nFROM CONSULTA_AGEEXAM_V a\n    LEFT JOIN pessoa_fisica pf ON A.cd_pessoa_fisica = pf.cd_pessoa_fisica\n    LEFT JOIN agenda_paciente B ON A.NR_SEQUENCIA = B.NR_SEQUENCIA\nwhere A.CD_ESTABELECIMENTO IN (55,63,64,66,71,73,74,75,76)\nand trunc(a.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30)\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2021-02-18T14:59:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_Zero_Faltas')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Agendas Projesi Geral')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data_ZFaltas_HTML5",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\nc.nr_sequencia as id_compromisso,\nc.nr_atendimento as nr_atendimento,\nc.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(c.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nc.cd_convenio idconvenio,\nobter_nome_convenio(c.cd_convenio) as convenio,\nc.cd_plano,\nobter_desc_plano(c.cd_convenio, c.cd_plano) ds_plano,\nc.dt_agenda as datacompromisso,\nto_char(c.hr_inicio, 'hh24:mi:ss') as horacompromisso,\nc.ie_status_agenda as id_status,\nobter_status_agenda_paciente(c.nr_sequencia) as ds_status,\na.cd_agenda,\na.ds_agenda as agenda,\nc.cd_procedimento,\nobter_desc_procedimento(c.cd_procedimento, c.ie_origem_proced) as procedimento,\nobter_empresa_estab(a.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(a.cd_estabelecimento)) as empresa,\na.cd_estabelecimento as id_unidade,\nobter_nome_estab(a.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nobter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nobter_nome_pf(c.cd_medico_exec) as nm_medico,\nc.dt_agendamento,\na.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\na.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nfrom agenda_paciente c,\nagenda a,\npessoa_fisica pf\nwhere c.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand c.cd_agenda = a.cd_agenda\nand c.cd_pessoa_fisica is not null\nand trunc(c.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30)\nand a.cd_agenda not in (283,404) \nand length('55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9)) = 13\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_TRUNCATEZEROFALTAS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera_tipo_agenda",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Data_ZFaltas_Sadalla",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Data_ZFaltas_HTML5",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Data_ZFaltas_SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERTIPOAGENDASPROJESI]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Data_ZFaltas_Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\nc.nr_sequencia as id_compromisso,\nc.nr_atendimento as nr_atendimento,\nc.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(c.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nc.cd_convenio idconvenio,\nobter_nome_convenio(c.cd_convenio) as convenio,\nc.cd_plano,\nobter_desc_plano(c.cd_convenio, c.cd_plano) ds_plano,\nc.dt_agenda as datacompromisso,\nto_char(c.dt_agenda, 'hh24:mi:ss') as horacompromisso,\nc.ie_status_agenda as id_status,\nobter_status_agenda_paciente(c.nr_sequencia) as ds_status,\na.cd_agenda,\na.ds_agenda as agenda,\nc.cd_procedimento,\nobter_desc_procedimento(c.cd_procedimento, c.ie_origem_proced) as procedimento,\nobter_empresa_estab(a.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(a.cd_estabelecimento)) as empresa,\na.cd_estabelecimento as id_unidade,\nobter_nome_estab(a.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nobter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nobter_nome_pf(a.cd_pessoa_fisica) as nm_medico,\nc.dt_agendamento,\na.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\na.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nfrom agenda_consulta c,\nagenda a,\npessoa_fisica pf\nwhere c.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand c.cd_agenda = a.cd_agenda\nand c.cd_pessoa_fisica is not null\nand trunc(c.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30)\nand a.cd_agenda not in (283,404) \nand length('55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9)) = 13\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Altera Status Paciente",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Altera_tipo_agenda",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERSTATUSPACIENTE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Data_ZFaltas_SP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT distinct x.nr_sequencia as id_compromisso,\nx.nr_atendimento as nr_atendimento,\nx.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(x.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nx.cd_convenio idconvenio,\nobter_nome_convenio(x.cd_convenio) as convenio,\nx.cd_plano,\nobter_desc_plano(x.cd_convenio, x.cd_plano) ds_plano,\nx.dt_agenda as datacompromisso,\nto_char(c.dt_agenda, 'hh24:mi:ss') as horacompromisso,\nx.ie_status_agenda as id_status,\nobter_status_agenda_paciente(x.nr_sequencia) as ds_status,\nX.cd_agenda,\nX.ds_agenda as agenda,\nx.cd_procedimento,\nobter_desc_procedimento(x.cd_procedimento, x.ie_origem_proced) as procedimento,\nobter_empresa_estab(X.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(X.cd_estabelecimento)) as empresa,\nX.cd_estabelecimento as id_unidade,\nobter_nome_estab(X.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nobter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nsubstr(obter_nome_pf(x.CD_MEDICO_AGENDA ),1,150) as nm_medico,\nx.dt_agendamento,\nX.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\nX.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nFROM CONSULTA_AGECONS_V X\n    LEFT JOIN pessoa_fisica pf ON X.cd_pessoa_fisica = PF.cd_pessoa_fisica\n    LEFT JOIN AGENDA_CONSULTA C ON X.NR_SEQUENCIA = C.NR_SEQUENCIA\nWHERE trunc(c.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30) \nAND X.CD_ESTABELECIMENTO IN (55,63,64,66,71,73,74,75,76)\n\nUNION\n\nselect distinct\na.nr_sequencia as id_compromisso,\na.nr_atendimento as nr_atendimento,\na.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(a.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\na.cd_convenio idconvenio,\nobter_nome_convenio(a.cd_convenio) as convenio,\na.cd_plano,\nobter_desc_plano(a.cd_convenio, a.cd_plano) ds_plano,\na.dt_agenda as datacompromisso,\nto_char(b.hr_inicio, 'hh24:mi:ss') as horacompromisso,\na.ie_status_agenda as id_status,\nobter_status_agenda_paciente(a.nr_sequencia) as ds_status,\nA.cd_agenda,\nA.ds_agenda as agenda,\nA.cd_procedimento,\nobter_desc_procedimento(A.cd_procedimento, A.ie_origem_proced) as procedimento,\nobter_empresa_estab(A.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(A.cd_estabelecimento)) as empresa,\nA.cd_estabelecimento as id_unidade,\nobter_nome_estab(A.cd_estabelecimento)as unidade,\nB.ie_autorizacao,\nobter_valor_dominio(1227, B.ie_autorizacao) as autorizacao,\nsubstr(obter_nome_pf(a.CD_MEDICO_AGENDA ),1,150) as nm_medico,\nA.dt_agendamento,\nA.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\nA.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nFROM CONSULTA_AGEEXAM_V a\n    LEFT JOIN pessoa_fisica pf ON A.cd_pessoa_fisica = pf.cd_pessoa_fisica\n    LEFT JOIN agenda_paciente B ON A.NR_SEQUENCIA = B.NR_SEQUENCIA\nwhere A.CD_ESTABELECIMENTO IN (55,63,64,66,71,73,74,75,76)\nand trunc(a.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30)\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2021-02-18T15:00:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_Zero_Faltas')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Agendas Projesi Tasy HTML')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data_ZFaltas_HTML5",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\nc.nr_sequencia as id_compromisso,\nc.nr_atendimento as nr_atendimento,\nc.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(c.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nc.cd_convenio idconvenio,\nobter_nome_convenio(c.cd_convenio) as convenio,\nc.cd_plano,\nobter_desc_plano(c.cd_convenio, c.cd_plano) ds_plano,\nc.dt_agenda as datacompromisso,\nto_char(c.hr_inicio, 'hh24:mi:ss') as horacompromisso,\nc.ie_status_agenda as id_status,\nobter_status_agenda_paciente(c.nr_sequencia) as ds_status,\na.cd_agenda,\na.ds_agenda as agenda,\nc.cd_procedimento,\nobter_desc_procedimento(c.cd_procedimento, c.ie_origem_proced) as procedimento,\nobter_empresa_estab(a.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(a.cd_estabelecimento)) as empresa,\na.cd_estabelecimento as id_unidade,\nobter_nome_estab(a.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nobter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nobter_nome_pf(c.cd_medico_exec) as nm_medico,\nc.dt_agendamento,\na.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\na.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nfrom agenda_paciente c,\nagenda a,\npessoa_fisica pf\nwhere c.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand c.cd_agenda = a.cd_agenda\nand c.cd_pessoa_fisica is not null\nand trunc(c.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30)\nand a.cd_agenda not in (283,404) \nand length('55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9)) = 13\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_TRUNCATEZEROFALTAS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera_tipo_agenda",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Data_ZFaltas_HTML5",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Data_ZFaltas_SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERTIPOAGENDASPROJESI]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera Status Paciente",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Altera_tipo_agenda",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERSTATUSPACIENTE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Data_ZFaltas_SP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT distinct x.nr_sequencia as id_compromisso,\nx.nr_atendimento as nr_atendimento,\nx.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(x.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nx.cd_convenio idconvenio,\nobter_nome_convenio(x.cd_convenio) as convenio,\nx.cd_plano,\nobter_desc_plano(x.cd_convenio, x.cd_plano) ds_plano,\nx.dt_agenda as datacompromisso,\nto_char(c.dt_agenda, 'hh24:mi:ss') as horacompromisso,\nx.ie_status_agenda as id_status,\nobter_status_agenda_paciente(x.nr_sequencia) as ds_status,\nX.cd_agenda,\nX.ds_agenda as agenda,\nx.cd_procedimento,\nobter_desc_procedimento(x.cd_procedimento, x.ie_origem_proced) as procedimento,\nobter_empresa_estab(X.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(X.cd_estabelecimento)) as empresa,\nX.cd_estabelecimento as id_unidade,\nobter_nome_estab(X.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nobter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nsubstr(obter_nome_pf(x.CD_MEDICO_AGENDA ),1,150) as nm_medico,\nx.dt_agendamento,\nX.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\nX.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nFROM CONSULTA_AGECONS_V X\n    LEFT JOIN pessoa_fisica pf ON X.cd_pessoa_fisica = PF.cd_pessoa_fisica\n    LEFT JOIN AGENDA_CONSULTA C ON X.NR_SEQUENCIA = C.NR_SEQUENCIA\nWHERE trunc(c.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30) \nAND X.CD_ESTABELECIMENTO IN (55,63,64,66,71,73,74,75,76)\n\nUNION\n\nselect distinct\na.nr_sequencia as id_compromisso,\na.nr_atendimento as nr_atendimento,\na.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(a.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\na.cd_convenio idconvenio,\nobter_nome_convenio(a.cd_convenio) as convenio,\na.cd_plano,\nobter_desc_plano(a.cd_convenio, a.cd_plano) ds_plano,\na.dt_agenda as datacompromisso,\nto_char(b.hr_inicio, 'hh24:mi:ss') as horacompromisso,\na.ie_status_agenda as id_status,\nobter_status_agenda_paciente(a.nr_sequencia) as ds_status,\nA.cd_agenda,\nA.ds_agenda as agenda,\nA.cd_procedimento,\nobter_desc_procedimento(A.cd_procedimento, A.ie_origem_proced) as procedimento,\nobter_empresa_estab(A.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(A.cd_estabelecimento)) as empresa,\nA.cd_estabelecimento as id_unidade,\nobter_nome_estab(A.cd_estabelecimento)as unidade,\nB.ie_autorizacao,\nobter_valor_dominio(1227, B.ie_autorizacao) as autorizacao,\nsubstr(obter_nome_pf(a.CD_MEDICO_AGENDA ),1,150) as nm_medico,\nA.dt_agendamento,\nA.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\nA.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nFROM CONSULTA_AGEEXAM_V a\n    LEFT JOIN pessoa_fisica pf ON A.cd_pessoa_fisica = pf.cd_pessoa_fisica\n    LEFT JOIN agenda_paciente B ON A.NR_SEQUENCIA = B.NR_SEQUENCIA\nwhere A.CD_ESTABELECIMENTO IN (55,63,64,66,71,73,74,75,76)\nand trunc(a.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30)\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2021-02-18T15:00:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_Zero_Faltas')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Agendas Projesi Testes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data_ZFaltas_HTML5",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.3:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\nc.nr_sequencia as id_compromisso,\nc.nr_atendimento as nr_atendimento,\nc.cd_pessoa_fisica as id_cliente,\nfast_ops.obter_nome_pf(c.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nfast_ops.obter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nc.cd_convenio idconvenio,\nfast_ops.obter_nome_convenio(c.cd_convenio) as convenio,\nc.cd_plano,\nfast_ops.obter_desc_plano(c.cd_convenio, c.cd_plano) ds_plano,\nc.dt_agenda as datacompromisso,\nto_char(c.hr_inicio, 'hh24:mi:ss') as horacompromisso,\nc.ie_status_agenda as id_status,\nfast_ops.obter_status_agenda_paciente(c.nr_sequencia) as ds_status,\na.cd_agenda,\na.ds_agenda as agenda,\nc.cd_procedimento,\nfast_ops.obter_desc_procedimento(c.cd_procedimento, c.ie_origem_proced) as procedimento,\nP.CD_EMPRESA as id_empresa,\nP.NM_RAZAO_SOCIAL as empresa,\na.cd_estabelecimento as id_unidade,\nE.NM_FANTASIA_ESTAB as unidade,\nc.ie_autorizacao,\nfast_ops.obter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nfast_ops.obter_nome_pf(c.cd_medico_exec) as nm_medico,\nc.dt_agendamento,\na.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\na.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nFROM fast_ops.agenda_paciente c\nINNER JOIN FAST_OPS.agenda a ON c.cd_agenda = a.cd_agenda\nINNER JOIN FAST_OPS.pessoa_fisica pf ON c.cd_pessoa_fisica = pf.cd_pessoa_fisica\nINNER JOIN FAST_OPS.ESTABELECIMENTO E ON e.cd_estabelecimento = A.CD_ESTABELECIMENTO\nINNER JOIN FAST_OPS.EMPRESA P ON P.CD_EMPRESA = E.CD_EMPRESA\nWHERE c.cd_pessoa_fisica is not null\nand trunc(c.dt_agenda) between fast_ops.inicio_dia(sysdate - 30) and fast_ops.fim_dia(sysdate + 30)\nand a.cd_agenda not in (283,404) \nand length('55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9)) = 13\n",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_TRUNCATEZEROFALTAS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera_tipo_agenda",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Data_ZFaltas_SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERTIPOAGENDASPROJESI]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera Status Paciente",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Altera_tipo_agenda",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.03:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERSTATUSPACIENTE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Data_ZFaltas_SP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Data_ZFaltas_HTML5",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.3:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT distinct x.nr_sequencia as id_compromisso,\nx.nr_atendimento as nr_atendimento,\nx.cd_pessoa_fisica as id_cliente,\nfast_ops.obter_nome_pf(x.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nfast_ops.obter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nx.cd_convenio idconvenio,\nfast_ops.obter_nome_convenio(x.cd_convenio) as convenio,\nx.cd_plano,\nfast_ops.obter_desc_plano(x.cd_convenio, x.cd_plano) ds_plano,\nx.dt_agenda as datacompromisso,\nto_char(c.dt_agenda, 'hh24:mi:ss') as horacompromisso,\nx.ie_status_agenda as id_status,\nfast_ops.obter_status_agenda_paciente(x.nr_sequencia) as ds_status,\nX.cd_agenda,\nX.ds_agenda as agenda,\nx.cd_procedimento,\nfast_ops.obter_desc_procedimento(x.cd_procedimento, x.ie_origem_proced) as procedimento,\nfast_ops.obter_empresa_estab(X.cd_estabelecimento) as id_empresa,\nfast_ops.obter_nome_empresa(fast_ops.obter_empresa_estab(X.cd_estabelecimento)) as empresa,\nX.cd_estabelecimento as id_unidade,\nfast_ops.obter_nome_estab(X.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nfast_ops.obter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nsubstr(fast_ops.obter_nome_pf(x.CD_MEDICO_AGENDA ),1,150) as nm_medico,\nx.dt_agendamento,\nX.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\nX.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nFROM fast_ops.CONSULTA_AGECONS_V X\n    LEFT JOIN FAST_OPS.pessoa_fisica pf ON X.cd_pessoa_fisica = PF.cd_pessoa_fisica\n    LEFT JOIN FAST_OPS.AGENDA_CONSULTA C ON X.NR_SEQUENCIA = C.NR_SEQUENCIA\nWHERE trunc(c.dt_agenda) between fast_ops.inicio_dia(sysdate - 30) and fast_ops.fim_dia(sysdate + 30) \nAND X.CD_ESTABELECIMENTO IN (55,63,64,66,71,73,74,75,76)\n\nUNION\n\nselect distinct\na.nr_sequencia as id_compromisso,\na.nr_atendimento as nr_atendimento,\na.cd_pessoa_fisica as id_cliente,\nfast_ops.obter_nome_pf(a.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nfast_ops.obter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\na.cd_convenio idconvenio,\nfast_ops.obter_nome_convenio(a.cd_convenio) as convenio,\na.cd_plano,\nfast_ops.obter_desc_plano(a.cd_convenio, a.cd_plano) ds_plano,\na.dt_agenda as datacompromisso,\nto_char(b.hr_inicio, 'hh24:mi:ss') as horacompromisso,\na.ie_status_agenda as id_status,\nfast_ops.obter_status_agenda_paciente(a.nr_sequencia) as ds_status,\nA.cd_agenda,\nA.ds_agenda as agenda,\nA.cd_procedimento,\nfast_ops.obter_desc_procedimento(A.cd_procedimento, A.ie_origem_proced) as procedimento,\nfast_ops.obter_empresa_estab(A.cd_estabelecimento) as id_empresa,\nfast_ops.obter_nome_empresa(fast_ops.obter_empresa_estab(A.cd_estabelecimento)) as empresa,\nA.cd_estabelecimento as id_unidade,\nfast_ops.obter_nome_estab(A.cd_estabelecimento)as unidade,\nB.ie_autorizacao,\nfast_ops.obter_valor_dominio(1227, B.ie_autorizacao) as autorizacao,\nsubstr(fast_ops.obter_nome_pf(a.CD_MEDICO_AGENDA ),1,150) as nm_medico,\nA.dt_agendamento,\nA.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\nA.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nFROM FAST_OPS.CONSULTA_AGEEXAM_V a\n    LEFT JOIN FAST_OPS.pessoa_fisica pf ON A.cd_pessoa_fisica = pf.cd_pessoa_fisica\n    LEFT JOIN FAST_OPS.agenda_paciente B ON A.NR_SEQUENCIA = B.NR_SEQUENCIA\nwhere A.CD_ESTABELECIMENTO IN (55,63,64,66,71,73,74,75,76)\nand trunc(a.dt_agenda) between fast_ops.inicio_dia(sysdate - 30) and fast_ops.fim_dia(sysdate + 30)\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2021-02-18T14:38:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_Zero_Faltas')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Agendas Projesi V2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data_ZFaltas_HTML5",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\nc.nr_sequencia as id_compromisso,\nc.nr_atendimento as nr_atendimento,\nc.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(c.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nc.cd_convenio idconvenio,\nobter_nome_convenio(c.cd_convenio) as convenio,\nc.cd_plano,\nobter_desc_plano(c.cd_convenio, c.cd_plano) ds_plano,\nc.dt_agenda as datacompromisso,\nto_char(c.hr_inicio, 'hh24:mi:ss') as horacompromisso,\nc.ie_status_agenda as id_status,\nobter_status_agenda_paciente(c.nr_sequencia) as ds_status,\na.cd_agenda,\na.ds_agenda as agenda,\nc.cd_procedimento,\nobter_desc_procedimento(c.cd_procedimento, c.ie_origem_proced) as procedimento,\nobter_empresa_estab(a.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(a.cd_estabelecimento)) as empresa,\na.cd_estabelecimento as id_unidade,\nobter_nome_estab(a.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nobter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nobter_nome_pf(c.cd_medico_exec) as nm_medico,\nc.dt_agendamento,\na.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\na.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nfrom agenda_paciente c,\nagenda a,\npessoa_fisica pf\nwhere c.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand c.cd_agenda = a.cd_agenda\nand c.cd_pessoa_fisica is not null\nand trunc(c.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30)\nand a.cd_agenda not in (283,404) \nand length('55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9)) = 13\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_TRUNCATEZEROFALTAS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera_tipo_agenda",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Data_ZFaltas_Sadalla",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Data_ZFaltas_HTML5",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Data_ZFaltas_SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERTIPOAGENDASPROJESI]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Data_ZFaltas_Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\nc.nr_sequencia as id_compromisso,\nc.nr_atendimento as nr_atendimento,\nc.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(c.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nc.cd_convenio idconvenio,\nobter_nome_convenio(c.cd_convenio) as convenio,\nc.cd_plano,\nobter_desc_plano(c.cd_convenio, c.cd_plano) ds_plano,\nc.dt_agenda as datacompromisso,\nto_char(c.dt_agenda, 'hh24:mi:ss') as horacompromisso,\nc.ie_status_agenda as id_status,\nobter_status_agenda_paciente(c.nr_sequencia) as ds_status,\na.cd_agenda,\na.ds_agenda as agenda,\nc.cd_procedimento,\nobter_desc_procedimento(c.cd_procedimento, c.ie_origem_proced) as procedimento,\nobter_empresa_estab(a.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(a.cd_estabelecimento)) as empresa,\na.cd_estabelecimento as id_unidade,\nobter_nome_estab(a.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nobter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nobter_nome_pf(a.cd_pessoa_fisica) as nm_medico,\nc.dt_agendamento,\na.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\na.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nfrom agenda_consulta c,\nagenda a,\npessoa_fisica pf\nwhere c.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand c.cd_agenda = a.cd_agenda\nand c.cd_pessoa_fisica is not null\nand trunc(c.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30)\nand a.cd_agenda not in (283,404) \nand length('55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9)) = 13\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Altera Status Paciente",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Altera_tipo_agenda",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERSTATUSPACIENTE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Data_ZFaltas_SP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT distinct x.nr_sequencia as id_compromisso,\nx.nr_atendimento as nr_atendimento,\nx.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(x.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nx.cd_convenio idconvenio,\nobter_nome_convenio(x.cd_convenio) as convenio,\nx.cd_plano,\nobter_desc_plano(x.cd_convenio, x.cd_plano) ds_plano,\nx.dt_agenda as datacompromisso,\nto_char(c.dt_agenda, 'hh24:mi:ss') as horacompromisso,\nx.ie_status_agenda as id_status,\nobter_status_agenda_paciente(x.nr_sequencia) as ds_status,\nX.cd_agenda,\nX.ds_agenda as agenda,\nx.cd_procedimento,\nobter_desc_procedimento(x.cd_procedimento, x.ie_origem_proced) as procedimento,\nobter_empresa_estab(X.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(X.cd_estabelecimento)) as empresa,\nX.cd_estabelecimento as id_unidade,\nobter_nome_estab(X.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nobter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nsubstr(obter_nome_pf(x.CD_MEDICO_AGENDA ),1,150) as nm_medico,\nx.dt_agendamento,\nX.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\nX.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nFROM CONSULTA_AGECONS_V X\n    LEFT JOIN pessoa_fisica pf ON X.cd_pessoa_fisica = PF.cd_pessoa_fisica\n    LEFT JOIN AGENDA_CONSULTA C ON X.NR_SEQUENCIA = C.NR_SEQUENCIA\nWHERE trunc(c.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30) \nAND X.CD_ESTABELECIMENTO IN (55,63,64,66,71,73,74,75,76)\n\nUNION\n\nselect distinct\na.nr_sequencia as id_compromisso,\na.nr_atendimento as nr_atendimento,\na.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(a.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\na.cd_convenio idconvenio,\nobter_nome_convenio(a.cd_convenio) as convenio,\na.cd_plano,\nobter_desc_plano(a.cd_convenio, a.cd_plano) ds_plano,\na.dt_agenda as datacompromisso,\nto_char(b.hr_inicio, 'hh24:mi:ss') as horacompromisso,\na.ie_status_agenda as id_status,\nobter_status_agenda_paciente(a.nr_sequencia) as ds_status,\nA.cd_agenda,\nA.ds_agenda as agenda,\nA.cd_procedimento,\nobter_desc_procedimento(A.cd_procedimento, A.ie_origem_proced) as procedimento,\nobter_empresa_estab(A.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(A.cd_estabelecimento)) as empresa,\nA.cd_estabelecimento as id_unidade,\nobter_nome_estab(A.cd_estabelecimento)as unidade,\nB.ie_autorizacao,\nobter_valor_dominio(1227, B.ie_autorizacao) as autorizacao,\nsubstr(obter_nome_pf(a.CD_MEDICO_AGENDA ),1,150) as nm_medico,\nA.dt_agendamento,\nA.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\nA.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nFROM CONSULTA_AGEEXAM_V a\n    LEFT JOIN pessoa_fisica pf ON A.cd_pessoa_fisica = pf.cd_pessoa_fisica\n    LEFT JOIN agenda_paciente B ON A.NR_SEQUENCIA = B.NR_SEQUENCIA\nwhere A.CD_ESTABELECIMENTO IN (55,63,64,66,71,73,74,75,76)\nand trunc(a.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30)\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-11-16T20:56:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_Zero_Faltas')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Agendas Projesi V3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data_ZFaltas_HTML5",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\nc.nr_sequencia as id_compromisso,\nc.nr_atendimento as nr_atendimento,\nc.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(c.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nc.cd_convenio idconvenio,\nobter_nome_convenio(c.cd_convenio) as convenio,\nc.cd_plano,\nobter_desc_plano(c.cd_convenio, c.cd_plano) ds_plano,\nc.dt_agenda as datacompromisso,\nto_char(c.hr_inicio, 'hh24:mi:ss') as horacompromisso,\nc.ie_status_agenda as id_status,\nobter_status_agenda_paciente(c.nr_sequencia) as ds_status,\na.cd_agenda,\na.ds_agenda as agenda,\nc.cd_procedimento,\nobter_desc_procedimento(c.cd_procedimento, c.ie_origem_proced) as procedimento,\nobter_empresa_estab(a.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(a.cd_estabelecimento)) as empresa,\na.cd_estabelecimento as id_unidade,\nobter_nome_estab(a.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nobter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nobter_nome_pf(c.cd_medico_exec) as nm_medico,\nc.dt_agendamento,\na.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\na.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nfrom agenda_paciente c,\nagenda a,\npessoa_fisica pf\nwhere c.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand c.cd_agenda = a.cd_agenda\nand c.cd_pessoa_fisica is not null\nand trunc(c.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30)\nand a.cd_agenda not in (283,404) \nand length('55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9)) = 13\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_TRUNCATEZEROFALTAS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera_tipo_agenda",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Data_ZFaltas_HTML5",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Data_ZFaltas_SP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERTIPOAGENDASPROJESI]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera Status Paciente",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Altera_tipo_agenda",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERSTATUSPACIENTE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Data_ZFaltas_SP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Truncate Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.0:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT distinct x.nr_sequencia as id_compromisso,\nx.nr_atendimento as nr_atendimento,\nx.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(x.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\nx.cd_convenio idconvenio,\nobter_nome_convenio(x.cd_convenio) as convenio,\nx.cd_plano,\nobter_desc_plano(x.cd_convenio, x.cd_plano) ds_plano,\nx.dt_agenda as datacompromisso,\nto_char(c.dt_agenda, 'hh24:mi:ss') as horacompromisso,\nx.ie_status_agenda as id_status,\nobter_status_agenda_paciente(x.nr_sequencia) as ds_status,\nX.cd_agenda,\nX.ds_agenda as agenda,\nx.cd_procedimento,\nobter_desc_procedimento(x.cd_procedimento, x.ie_origem_proced) as procedimento,\nobter_empresa_estab(X.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(X.cd_estabelecimento)) as empresa,\nX.cd_estabelecimento as id_unidade,\nobter_nome_estab(X.cd_estabelecimento)as unidade,\nc.ie_autorizacao,\nobter_valor_dominio(1227, c.ie_autorizacao) as autorizacao,\nsubstr(obter_nome_pf(x.CD_MEDICO_AGENDA ),1,150) as nm_medico,\nx.dt_agendamento,\nX.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\nX.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nFROM CONSULTA_AGECONS_V X\n    LEFT JOIN pessoa_fisica pf ON X.cd_pessoa_fisica = PF.cd_pessoa_fisica\n    LEFT JOIN AGENDA_CONSULTA C ON X.NR_SEQUENCIA = C.NR_SEQUENCIA\nWHERE trunc(c.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30) \nAND X.CD_ESTABELECIMENTO IN (55,63,64,66,71,73,74,75,76)\n\nUNION\n\nselect distinct\na.nr_sequencia as id_compromisso,\na.nr_atendimento as nr_atendimento,\na.cd_pessoa_fisica as id_cliente,\nobter_nome_pf(a.cd_pessoa_fisica) as NomePaciente,\npf.dt_nascimento as DtNascimento,\n'55' || substr(pf.nr_ddd_celular, -2) || substr(replace(replace(replace(replace(pf.nr_telefone_celular, '(', ''), ')', ''), ' ', ''), '-', ''), -9) AS CELULAR,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'M') as email,\na.cd_convenio idconvenio,\nobter_nome_convenio(a.cd_convenio) as convenio,\na.cd_plano,\nobter_desc_plano(a.cd_convenio, a.cd_plano) ds_plano,\na.dt_agenda as datacompromisso,\nto_char(b.hr_inicio, 'hh24:mi:ss') as horacompromisso,\na.ie_status_agenda as id_status,\nobter_status_agenda_paciente(a.nr_sequencia) as ds_status,\nA.cd_agenda,\nA.ds_agenda as agenda,\nA.cd_procedimento,\nobter_desc_procedimento(A.cd_procedimento, A.ie_origem_proced) as procedimento,\nobter_empresa_estab(A.cd_estabelecimento) as id_empresa,\nobter_nome_empresa(obter_empresa_estab(A.cd_estabelecimento)) as empresa,\nA.cd_estabelecimento as id_unidade,\nobter_nome_estab(A.cd_estabelecimento)as unidade,\nB.ie_autorizacao,\nobter_valor_dominio(1227, B.ie_autorizacao) as autorizacao,\nsubstr(obter_nome_pf(a.CD_MEDICO_AGENDA ),1,150) as nm_medico,\nA.dt_agendamento,\nA.cd_tipo_agenda  as tipo_agenda,\n'' as tipo_agenda_desc,\nA.cd_pessoa_fisica as ds_medico_agenda,\n'' status_paciente\nFROM CONSULTA_AGEEXAM_V a\n    LEFT JOIN pessoa_fisica pf ON A.cd_pessoa_fisica = pf.cd_pessoa_fisica\n    LEFT JOIN agenda_paciente B ON A.NR_SEQUENCIA = B.NR_SEQUENCIA\nwhere A.CD_ESTABELECIMENTO IN (55,63,64,66,71,73,74,75,76)\nand trunc(a.dt_agenda) between inicio_dia(sysdate - 30) and fim_dia(sysdate + 30)\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Zero_Faltas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2021-02-18T14:38:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_Zero_Faltas')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Agentes por dia')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check HOB file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "HOB_CSV_NC_AgentesPorDia",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "HOB file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check HOB file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check HOB file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send failure HOB",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\HOB não encontrado!",
											"ErrorMessage": "O arquivo HOB\\Agentes por Dia não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy HOB agentes dia",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Usuario",
														"type": "String"
													},
													"sink": {
														"name": "Usuario",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Intervalo",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Atendidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Atendidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recusas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recusas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Internas Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Internas_Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Transferencias",
														"type": "Int32"
													},
													"sink": {
														"name": "Transferencias",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas",
														"type": "Int32"
													},
													"sink": {
														"name": "Efetuadas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Efetuadas_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "% Taxa de Contato",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_de_Contato",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Atendidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Atendidas",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Internas Recebidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Internas_Recebidas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Efetuadas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Efetuadas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Total Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Agente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Agente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Cliente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Cliente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Pausa",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Pausa",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Estouro",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Estouro",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Dispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Disponivel",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Indispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Indisponivel",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Logado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Logado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Deslogado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Deslogado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "% Falado x Logado",
														"type": "String"
													},
													"sink": {
														"name": "Falado_x_Logado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "HOB_CSV_NC_AgentesPorDia",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_AgentesPorDia",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Start",
						"description": "Step added to paralellize execution",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Check HOSAG file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "HOSAG_CSV_NC_AgentesPorDia",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "HOSAG file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check HOSAG file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check HOSAG file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send failure HOSAG",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\HOSAG não encontrado!",
											"ErrorMessage": "O arquivo HOSAG\\Agentes por Dia não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy HOSAG agentes dia",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Usuario",
														"type": "String"
													},
													"sink": {
														"name": "Usuario",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Intervalo",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Atendidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Atendidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recusas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recusas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Internas Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Internas_Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Transferencias",
														"type": "Int32"
													},
													"sink": {
														"name": "Transferencias",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas",
														"type": "Int32"
													},
													"sink": {
														"name": "Efetuadas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Efetuadas_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "% Taxa de Contato",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_de_Contato",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Atendidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Atendidas",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Internas Recebidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Internas_Recebidas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Efetuadas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Efetuadas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Total Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Agente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Agente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Cliente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Cliente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Pausa",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Pausa",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Estouro",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Estouro",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Dispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Disponivel",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Indispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Indisponivel",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Logado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Logado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Deslogado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Deslogado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "% Falado x Logado",
														"type": "String"
													},
													"sink": {
														"name": "Falado_x_Logado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "HOSAG_CSV_NC_AgentesPorDia",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_AgentesPorDia",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check DH file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DH_CSV_NC_AgentesPorDia",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "DH file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check DH file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check DH file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send failure DH",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\DH não encontrado!",
											"ErrorMessage": "O arquivo DH\\Agentes por Dia não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy DH agentes dia",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Usuario",
														"type": "String"
													},
													"sink": {
														"name": "Usuario",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Intervalo",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Atendidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Atendidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recusas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recusas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Internas Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Internas_Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Transferencias",
														"type": "Int32"
													},
													"sink": {
														"name": "Transferencias",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas",
														"type": "Int32"
													},
													"sink": {
														"name": "Efetuadas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Efetuadas_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "% Taxa de Contato",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_de_Contato",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Atendidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Atendidas",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Internas Recebidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Internas_Recebidas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Efetuadas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Efetuadas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Total Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Agente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Agente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Cliente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Cliente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Pausa",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Pausa",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Estouro",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Estouro",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Dispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Disponivel",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Indispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Indisponivel",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Logado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Logado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Deslogado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Deslogado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "% Falado x Logado",
														"type": "String"
													},
													"sink": {
														"name": "Falado_x_Logado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "DH_CSV_NC_AgentesPorDia",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_AgentesPorDia",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check HOSL file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "HOSL_CSV_NC_AgentesPorDia",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "HOSL file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check HOSL file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check HOSL file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send failure HOSL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\HOSL não encontrado!",
											"ErrorMessage": "O arquivo HOSL\\Agentes por Dia não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy HOSL agentes dia",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Usuario",
														"type": "String"
													},
													"sink": {
														"name": "Usuario",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Intervalo",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Atendidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Atendidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recusas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recusas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Internas Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Internas_Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Transferencias",
														"type": "Int32"
													},
													"sink": {
														"name": "Transferencias",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas",
														"type": "Int32"
													},
													"sink": {
														"name": "Efetuadas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Efetuadas_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "% Taxa de Contato",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_de_Contato",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Atendidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Atendidas",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Internas Recebidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Internas_Recebidas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Efetuadas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Efetuadas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Total Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Agente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Agente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Cliente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Cliente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Pausa",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Pausa",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Estouro",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Estouro",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Dispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Disponivel",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Indispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Indisponivel",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Logado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Logado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Deslogado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Deslogado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "% Falado x Logado",
														"type": "String"
													},
													"sink": {
														"name": "Falado_x_Logado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "HOSL_CSV_NC_AgentesPorDia",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_AgentesPorDia",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check INOB file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "INOB_CSV_NC_AgentesPorDia",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "INOB file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check INOB file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check INOB file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send failure INOB",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\INOB não encontrado!",
											"ErrorMessage": "O arquivo INOB\\Agentes por Dia não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy INOB agentes dia",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Usuario",
														"type": "String"
													},
													"sink": {
														"name": "Usuario",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Intervalo"
													}
												},
												{
													"source": {
														"name": "Atendidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Atendidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recusas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recusas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Internas Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Internas_Recebidas"
													}
												},
												{
													"source": {
														"name": "Transferencias",
														"type": "Int32"
													},
													"sink": {
														"name": "Transferencias",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas",
														"type": "Int32"
													},
													"sink": {
														"name": "Efetuadas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Efetuadas_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "% Taxa de Contato",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_de_Contato",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Atendidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Atendidas",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Internas Recebidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Internas_Recebidas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Efetuadas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Efetuadas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Total Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Agente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Agente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Cliente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Cliente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Pausa",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Pausa",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Estouro",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Estouro",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Dispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Disponivel",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Indispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Indisponivel",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Logado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Logado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Deslogado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Deslogado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "% Falado x Logado",
														"type": "String"
													},
													"sink": {
														"name": "Falado_x_Logado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "INOB_CSV_NC_AgentesPorDia",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_AgentesPorDia",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check CSI file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CSI_CSV_NC_AgentesPorDia",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "CSI file exists_copy",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check CSI file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check CSI file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send failure CSI",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\INOB não encontrado!",
											"ErrorMessage": "O arquivo INOB\\Agentes por Dia não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy CSI AgentesPorDia",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Usuario",
														"type": "String"
													},
													"sink": {
														"name": "Usuario",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Intervalo",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Atendidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Atendidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recusas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recusas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Internas Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Internas_Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Transferencias",
														"type": "Int32"
													},
													"sink": {
														"name": "Transferencias",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas",
														"type": "String"
													},
													"sink": {
														"name": "Efetuadas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas Tratados",
														"type": "Int32"
													},
													"sink": {
														"name": "Efetuadas_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "% Taxa de Contato",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_de_Contato",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Atendidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Atendidas",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Internas Recebidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Internas_Recebidas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Efetuadas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Efetuadas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Total Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Agente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Agente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Cliente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Cliente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Pausa",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Pausa",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Estouro",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Estouro",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Dispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Disponivel",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Indispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Indisponivel",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Logado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Logado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Deslogado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Deslogado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "% Falado x Logado",
														"type": "String"
													},
													"sink": {
														"name": "Falado_x_Logado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "CSI_CSV_NC_AgentesPorDia",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_AgentesPorDia",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento/Nexcore"
				},
				"annotations": [],
				"lastPublishTime": "2019-11-19T19:11:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/HOB_CSV_NC_AgentesPorDia')]",
				"[concat(variables('factoryId'), '/datasets/HOSAG_CSV_NC_AgentesPorDia')]",
				"[concat(variables('factoryId'), '/datasets/DH_CSV_NC_AgentesPorDia')]",
				"[concat(variables('factoryId'), '/datasets/HOSL_CSV_NC_AgentesPorDia')]",
				"[concat(variables('factoryId'), '/datasets/INOB_CSV_NC_AgentesPorDia')]",
				"[concat(variables('factoryId'), '/datasets/CSI_CSV_NC_AgentesPorDia')]",
				"[concat(variables('factoryId'), '/pipelines/Send email')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_NC_AgentesPorDia')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Agentes por hora')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Start",
						"description": "Step added to paralellize execution",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Check HOB file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "HOB_CSV_NC_AgentesPorHora",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "HOB file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check HOB file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check HOB file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send HOB failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\HOB não encontrado!",
											"ErrorMessage": "O arquivo HOB\\Agentes por Hora não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy HOB Agentes Hora",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Usuario",
														"type": "String"
													},
													"sink": {
														"name": "Usuario",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Intervalo",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Atendidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Atendidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recusas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recusas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Internas Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Internas_Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Transferencias",
														"type": "Int32"
													},
													"sink": {
														"name": "Transferencias",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas",
														"type": "Int32"
													},
													"sink": {
														"name": "Efetuadas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Efetuadas_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "% Taxa de Contato",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_de_Contato",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Atendidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Atendidas",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Internas Recebidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Internas_Recebidas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Efetuadas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Efetuadas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Total Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Agente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Agente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Cliente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Cliente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Pausa",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Pausa",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Estouro",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Estouro",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Dispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Disponivel",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Indispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Indisponivel",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Logado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Logado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Deslogado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Deslogado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "% Falado x Logado",
														"type": "String"
													},
													"sink": {
														"name": "Falado_x_Logado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "HOB_CSV_NC_AgentesPorHora",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_AgentesPorHora",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check HOSAG file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "HOSAG_CSV_NC_AgentesPorHora",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "HOSAG file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check HOSAG file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check HOSAG file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send failure HOSAG",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\HOSAG não encontrado!",
											"ErrorMessage": "O arquivo HOSAG\\Agentes por Hora não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy HOSAG Agentes Hora",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Usuario",
														"type": "String"
													},
													"sink": {
														"name": "Usuario",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Intervalo",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Atendidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Atendidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recusas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recusas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Internas Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Internas_Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Transferencias",
														"type": "Int32"
													},
													"sink": {
														"name": "Transferencias",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas",
														"type": "Int32"
													},
													"sink": {
														"name": "Efetuadas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Efetuadas_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "% Taxa de Contato",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_de_Contato",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Atendidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Atendidas",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Internas Recebidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Internas_Recebidas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Efetuadas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Efetuadas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Total Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Agente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Agente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Cliente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Cliente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Pausa",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Pausa",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Estouro",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Estouro",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Dispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Disponivel",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Indispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Indisponivel",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Logado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Logado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Deslogado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Deslogado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "% Falado x Logado",
														"type": "String"
													},
													"sink": {
														"name": "Falado_x_Logado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "HOSAG_CSV_NC_AgentesPorHora",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_AgentesPorHora",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check DH file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DH_CSV_NC_AgentesPorHora",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "DH file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check DH file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check DH file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send failure DH",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\DH não encontrado!",
											"ErrorMessage": "O arquivo DH\\Agentes por Hora não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy DH Agentes Hora",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Usuario",
														"type": "String"
													},
													"sink": {
														"name": "Usuario",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Intervalo",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Atendidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Atendidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recusas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recusas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Internas Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Internas_Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Transferencias",
														"type": "Int32"
													},
													"sink": {
														"name": "Transferencias",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas",
														"type": "Int32"
													},
													"sink": {
														"name": "Efetuadas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Efetuadas_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "% Taxa de Contato",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_de_Contato",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Atendidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Atendidas",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Internas Recebidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Internas_Recebidas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Efetuadas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Efetuadas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Total Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Agente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Agente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Cliente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Cliente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Pausa",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Pausa",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Estouro",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Estouro",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Dispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Disponivel",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Indispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Indisponivel",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Logado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Logado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Deslogado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Deslogado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "% Falado x Logado",
														"type": "String"
													},
													"sink": {
														"name": "Falado_x_Logado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "DH_CSV_NC_AgentesPorHora",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_AgentesPorHora",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check HOSL file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "HOSL_CSV_NC_AgentesPorHora",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "HOSL file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check HOSL file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check HOSL file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send failure HOSL",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\HOSL não encontrado!",
											"ErrorMessage": "O arquivo HOSL\\Agentes por Hora não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy HOSL Agentes Hora",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Usuario",
														"type": "String"
													},
													"sink": {
														"name": "Usuario",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Intervalo",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Atendidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Atendidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recusas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recusas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Internas Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Internas_Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Transferencias",
														"type": "Int32"
													},
													"sink": {
														"name": "Transferencias",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas",
														"type": "Int32"
													},
													"sink": {
														"name": "Efetuadas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Efetuadas_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "% Taxa de Contato",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_de_Contato",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Atendidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Atendidas",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Internas Recebidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Internas_Recebidas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Efetuadas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Efetuadas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Total Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Agente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Agente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Cliente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Cliente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Pausa",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Pausa",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Estouro",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Estouro",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Dispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Disponivel",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Indispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Indisponivel",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Logado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Logado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Deslogado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Deslogado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "% Falado x Logado",
														"type": "String"
													},
													"sink": {
														"name": "Falado_x_Logado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "HOSL_CSV_NC_AgentesPorHora",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_AgentesPorHora",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check INOB file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "INOB_CSV_NC_AgentesPorHora",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "INOB file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check INOB file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check INOB file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send INOB failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\INOB não encontrado!",
											"ErrorMessage": "O arquivo INOB\\Agentes por Hora não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy INOB Agentes Hora",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Usuario",
														"type": "String"
													},
													"sink": {
														"name": "Usuario",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Intervalo",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Atendidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Atendidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recusas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recusas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Internas Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Internas_Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Transferencias",
														"type": "Int32"
													},
													"sink": {
														"name": "Transferencias",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas",
														"type": "Int32"
													},
													"sink": {
														"name": "Efetuadas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Efetuadas_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "% Taxa de Contato",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_de_Contato",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Atendidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Atendidas",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Internas Recebidas",
														"type": "String",
														"format": "hh:mi:ss"
													},
													"sink": {
														"name": "Tempo_Internas_Recebidas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Efetuadas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Efetuadas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Total Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Agente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Agente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Cliente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Cliente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Pausa",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Pausa",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Estouro",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Estouro",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Dispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Disponivel",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Indispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Indisponivel",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Logado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Logado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Deslogado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Deslogado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "% Falado x Logado",
														"type": "String"
													},
													"sink": {
														"name": "Falado_x_Logado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "INOB_CSV_NC_AgentesPorHora",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_AgentesPorHora",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check CSI file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CSI_CSV_NC_AgentesPorHora",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "CSI file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check CSI file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check CSI file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send failure CSI",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\INOB não encontrado!",
											"ErrorMessage": "O arquivo INOB\\Agentes por Dia não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy CSI AgentesPorHora",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Usuario",
														"type": "String"
													},
													"sink": {
														"name": "Usuario",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Intervalo",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Atendidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Atendidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recusas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recusas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Internas Recebidas",
														"type": "Int32"
													},
													"sink": {
														"name": "Internas_Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Transferencias",
														"type": "Int32"
													},
													"sink": {
														"name": "Transferencias",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas",
														"type": "Int32"
													},
													"sink": {
														"name": "Efetuadas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Efetuadas Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Efetuadas_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "% Taxa de Contato",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_de_Contato",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Atendidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Atendidas",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Internas Recebidas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Internas_Recebidas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Efetuadas",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Efetuadas",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Total Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_Falado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Agente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Agente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Toque Cliente",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque_Cliente",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Pausa",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Pausa",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Estouro",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Estouro",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Dispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Disponivel",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Indispon�vel",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Indisponivel",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Logado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Logado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Tempo Deslogado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Deslogado",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "% Falado x Logado",
														"type": "String"
													},
													"sink": {
														"name": "Falado_x_Logado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "CSI_CSV_NC_AgentesPorHora",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_AgentesPorHora",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento/Nexcore"
				},
				"annotations": [],
				"lastPublishTime": "2019-11-19T19:11:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/HOB_CSV_NC_AgentesPorHora')]",
				"[concat(variables('factoryId'), '/datasets/HOSAG_CSV_NC_AgentesPorHora')]",
				"[concat(variables('factoryId'), '/datasets/DH_CSV_NC_AgentesPorHora')]",
				"[concat(variables('factoryId'), '/datasets/HOSL_CSV_NC_AgentesPorHora')]",
				"[concat(variables('factoryId'), '/datasets/INOB_CSV_NC_AgentesPorHora')]",
				"[concat(variables('factoryId'), '/datasets/CSI_CSV_NC_AgentesPorHora')]",
				"[concat(variables('factoryId'), '/pipelines/Send email')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_NC_AgentesPorHora')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Atendimentos Exames e Cirurgias 90 Dias')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline em testes para alimentar informações de exames e cirurgias das unidades Smart e Tasy.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Exames  HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\na.cd_pessoa_fisica, \na.cd_convenio, \nobter_cnpj_estabelecimento(ag.cd_estabelecimento) as cnpj,\nto_char((a.hr_inicio) , 'dd/mm/yyyy') as data_agenda,\nto_char((a.hr_inicio) , 'hh24:mi:ss') as hora_agenda,\n'Consulta' as tipo_agenda,\npf.nm_pessoa_fisica as nm_paciente,\nsubstr(obter_desc_procedimento(a.cd_procedimento, a.ie_origem_proced),1,1000) as ds_procedimento_princ,\nsubstr((select Listagg(Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced), ' ;') within GROUP (ORDER BY Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced))  from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia),1,1000) as ds_procedimento_adic,\n1 + (select count(1)from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia) as ie_quantidade,\nobter_nome_usuario(a.nm_usuario_orig) as nm_usuario,\nobter_nome_pf(a.cd_medico_exec) as nm_medico,\ne.nm_fantasia_estab SIGLA_UNIDADE,\nem.nm_razao_social MARCA,\nobter_valor_dominio(83,a.ie_status_agenda) as status_agenda,\na.nr_atendimento,\na.nr_sequencia,\n'NAO ENCONTRADO' as ID,\na.cd_procedencia,\np.ds_procedencia,\na.dt_agendamento,\n\nto_char(a.dt_agenda,'dd') dia,\nto_char(a.dt_agenda,'mm') mes,\nto_char(a.dt_agenda,'yyyy') ano,\nac.ds_classificacao,\naa.ds_agrupamento ds_agrupamento,\na.cd_motivo_cancelamento,\nsubstr(obter_ds_motivo_status(a.nr_sequencia, a.cd_agenda),1,200) as ds_motivo_cancelamento,\na.cd_agenda\n\nfrom agenda_paciente a,\n     agenda ag,\n     pessoa_fisica pf,\n     procedencia p,\n     agenda_paciente_classif ac,\n     agrupamento_agenda aa,\n     empresa em,\n     estabelecimento e\nwhere a.cd_agenda = ag.cd_agenda\nand a.cd_pessoa_fisica = pf.cd_pessoa_fisica (+)\nand a.cd_procedencia = p.cd_procedencia (+)\nand a.nr_seq_classif_agenda = ac.nr_sequencia (+)\nand ag.nr_seq_agrupamento = aa.nr_sequencia (+)\nand ag.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa\nand ag.cd_pessoa_fisica is null\nand ag.cd_tipo_agenda = 2\nand a.dt_agenda between sysdate - 90 and sysdate",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento_Exames",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Cirurgias HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Exames  HOB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\na.cd_pessoa_fisica, \na.cd_convenio, \nobter_cnpj_estabelecimento(ag.cd_estabelecimento) as cnpj,\nto_char((a.hr_inicio) , 'dd/mm/yyyy') as data_agenda,\nto_char((a.hr_inicio) , 'hh24:mi:ss') as hora_agenda,\n'Cirurgia' as tipo_agenda,\npf.nm_pessoa_fisica as nm_paciente,\nsubstr(obter_desc_procedimento(a.cd_procedimento, a.ie_origem_proced),1,1000) as ds_procedimento_princ,\nsubstr((select Listagg(Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced), ' ;') within GROUP (ORDER BY Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced))  from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia),1,1000) as ds_procedimento_adic,\n1 + (select count(1)from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia) as ie_quantidade,\nobter_nome_usuario(a.nm_usuario_orig) as nm_usuario,\nobter_nome_pf(a.cd_medico_exec) as nm_medico,\ne.nm_fantasia_estab SIGLA_UNIDADE,\nem.nm_razao_social MARCA,\nobter_valor_dominio(83,a.ie_status_agenda) as status_agenda,\na.nr_atendimento,\na.nr_sequencia,\n'NAO ENCONTRADO' as ID,\na.cd_procedencia,\np.ds_procedencia,\na.dt_agendamento,\n\nto_char(a.dt_agenda,'dd') dia,\nto_char(a.dt_agenda,'mm') mes,\nto_char(a.dt_agenda,'yyyy') ano,\nac.ds_classificacao,\n'' ds_agrupamento,\na.cd_motivo_cancelamento,\nsubstr(obter_ds_motivo_status(a.nr_sequencia, a.cd_agenda),1,200) as ds_motivo_cancelamento,\na.cd_agenda\n\nfrom agenda_paciente a,\n     agenda ag,\n     pessoa_fisica pf,\n     procedencia p,\n     agenda_paciente_classif ac,\n     agrupamento_agenda aa,\n     empresa em,\n     estabelecimento e\nwhere a.cd_agenda = ag.cd_agenda\nand a.cd_pessoa_fisica = pf.cd_pessoa_fisica (+)\nand a.cd_procedencia = p.cd_procedencia (+)\nand a.nr_seq_classif_agenda = ac.nr_sequencia (+)\nand ag.nr_seq_agrupamento = aa.nr_sequencia (+)\nand ag.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa\nand ag.cd_tipo_agenda = 1\nand a.dt_agenda between sysdate - 90 and sysdate",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento_Cirurgias",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Exames  Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\na.cd_pessoa_fisica, \na.cd_convenio, \nobter_cnpj_estabelecimento(ag.cd_estabelecimento) as cnpj,\nto_char((a.hr_inicio) , 'dd/mm/yyyy') as data_agenda,\nto_char((a.hr_inicio) , 'hh24:mi:ss') as hora_agenda,\n'Consulta' as tipo_agenda,\npf.nm_pessoa_fisica as nm_paciente,\nsubstr(obter_desc_procedimento(a.cd_procedimento, a.ie_origem_proced),1,1000) as ds_procedimento_princ,\nsubstr((select Listagg(Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced), ' ;') within GROUP (ORDER BY Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced))  from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia),1,1000) as ds_procedimento_adic,\n1 + (select count(1)from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia) as ie_quantidade,\nobter_nome_usuario(a.nm_usuario_orig) as nm_usuario,\nobter_nome_pf(a.cd_medico_exec) as nm_medico,\ne.nm_fantasia_estab SIGLA_UNIDADE,\nem.nm_razao_social MARCA,\nobter_valor_dominio(83,a.ie_status_agenda) as status_agenda,\na.nr_atendimento,\na.nr_sequencia,\n'NAO ENCONTRADO' as ID,\na.cd_procedencia,\np.ds_procedencia,\na.dt_agendamento,\n\nto_char(a.dt_agenda,'dd') dia,\nto_char(a.dt_agenda,'mm') mes,\nto_char(a.dt_agenda,'yyyy') ano,\nac.ds_classificacao,\naa.ds_agrupamento ds_agrupamento,\na.cd_motivo_cancelamento,\nsubstr(obter_ds_motivo_status(a.nr_sequencia, a.cd_agenda),1,200) as ds_motivo_cancelamento,\na.cd_agenda\n\nfrom agenda_paciente a,\n     agenda ag,\n     pessoa_fisica pf,\n     procedencia p,\n     agenda_paciente_classif ac,\n     agrupamento_agenda aa,\n     empresa em,\n     estabelecimento e\nwhere a.cd_agenda = ag.cd_agenda\nand a.cd_pessoa_fisica = pf.cd_pessoa_fisica (+)\nand a.cd_procedencia = p.cd_procedencia (+)\nand a.nr_seq_classif_agenda = ac.nr_sequencia (+)\nand ag.nr_seq_agrupamento = aa.nr_sequencia (+)\nand ag.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa\nand ag.cd_pessoa_fisica is null\nand ag.cd_tipo_agenda = 2\nand a.dt_agenda between sysdate - 90 and sysdate",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento_Exames",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Cirurgias Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Exames  Sadalla",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\na.cd_pessoa_fisica, \na.cd_convenio, \nobter_cnpj_estabelecimento(ag.cd_estabelecimento) as cnpj,\nto_char((a.hr_inicio) , 'dd/mm/yyyy') as data_agenda,\nto_char((a.hr_inicio) , 'hh24:mi:ss') as hora_agenda,\n'Cirurgia' as tipo_agenda,\npf.nm_pessoa_fisica as nm_paciente,\nsubstr(obter_desc_procedimento(a.cd_procedimento, a.ie_origem_proced),1,1000) as ds_procedimento_princ,\nsubstr((select Listagg(Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced), ' ;') within GROUP (ORDER BY Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced))  from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia),1,1000) as ds_procedimento_adic,\n1 + (select count(1)from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia) as ie_quantidade,\nobter_nome_usuario(a.nm_usuario_orig) as nm_usuario,\nobter_nome_pf(a.cd_medico_exec) as nm_medico,\ne.nm_fantasia_estab SIGLA_UNIDADE,\nem.nm_razao_social MARCA,\nobter_valor_dominio(83,a.ie_status_agenda) as status_agenda,\na.nr_atendimento,\na.nr_sequencia,\n'NAO ENCONTRADO' as ID,\na.cd_procedencia,\np.ds_procedencia,\na.dt_agendamento,\n\nto_char(a.dt_agenda,'dd') dia,\nto_char(a.dt_agenda,'mm') mes,\nto_char(a.dt_agenda,'yyyy') ano,\nac.ds_classificacao,\n'' ds_agrupamento,\na.cd_motivo_cancelamento,\nsubstr(obter_ds_motivo_status(a.nr_sequencia, a.cd_agenda),1,200) as ds_motivo_cancelamento,\na.cd_agenda\n\nfrom agenda_paciente a,\n     agenda ag,\n     pessoa_fisica pf,\n     procedencia p,\n     agenda_paciente_classif ac,\n     agrupamento_agenda aa,\n     empresa em,\n     estabelecimento e\nwhere a.cd_agenda = ag.cd_agenda\nand a.cd_pessoa_fisica = pf.cd_pessoa_fisica (+)\nand a.cd_procedencia = p.cd_procedencia (+)\nand a.nr_seq_classif_agenda = ac.nr_sequencia (+)\nand ag.nr_seq_agrupamento = aa.nr_sequencia (+)\nand ag.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa\nand ag.cd_tipo_agenda = 1\nand a.dt_agenda between sysdate - 90 and sysdate",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento_Cirurgias",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-09-04T14:47:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agendamento_Exames')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agendamento_Cirurgias')]",
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Baixa_Titulos_Pagar')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline em desenvolvimento com informações de baixa de titulos a pagar.",
				"activities": [
					{
						"name": "Baixa_Titulos_Pagar",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select a.nr_titulo, \na.nr_sequencia, \na.dt_baixa, \na.vl_pago,\na.vl_descontos,\na.vl_juros,\na.vl_multa,\na.dt_atualizacao,\n(select c.ds_tipo_baixa from TIPO_BAIXA_CPA c where c.cd_tipo_baixa = a.cd_tipo_baixa) as ds_tipo_baixa,\nobter_ds_transacao(a.nr_seq_movto_trans_fin) as ds_transacao\nfrom titulo_pagar_baixa a",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Baixa_Titulos_Pagar",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Contas a Pagar"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Baixa_Titulos_Pagar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Baixas titulos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Baixa titulos HTML5",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select obter_cgc_estabelecimento(R.CD_ESTABELECIMENTO) AS CD_CGC_ESTAB, \nl.nr_titulo, \nl.dt_recebimento, \nl.vl_recebido, \nl.vl_descontos, \nl.vl_juros, \nl.vl_multa, \nl.dt_atualizacao, \nt.ds_tipo_recebimento,\nX.DS_TRANSACAO,\n'' as MARCA,\n'' as SIGLA_UNIDADE\nfrom titulo_receber r,\n     TITULO_RECEBER_LIQ L,\n     tipo_recebimento t,\n     TRANSACAO_FINANCEIRA X\nwhere r.nr_titulo = l.nr_titulo \nand l.cd_tipo_recebimento = t.cd_tipo_recebimento\nAND l.nr_seq_trans_fin = X.NR_SEQUENCIA\nand r.cd_estabelecimento not in (11)\nand rownum < 50",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Baixa_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Baixa Titulo Sadalla",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select obter_cgc_estabelecimento(R.CD_ESTABELECIMENTO) AS CD_CGC_ESTAB, \nl.nr_titulo, \nl.dt_recebimento, \nl.vl_recebido, \nl.vl_descontos, \nl.vl_juros, \nl.vl_multa, \nl.dt_atualizacao, \nt.ds_tipo_recebimento,\nX.DS_TRANSACAO,\n'' as MARCA,\n'' as SIGLA_UNIDADE\nfrom titulo_receber r,\n     TITULO_RECEBER_LIQ L,\n     tipo_recebimento t,\n     TRANSACAO_FINANCEIRA X\nwhere r.nr_titulo = l.nr_titulo \nand l.cd_tipo_recebimento = t.cd_tipo_recebimento\nAND l.nr_seq_trans_fin = X.NR_SEQUENCIA\nand r.cd_estabelecimento not in (11)\nand rownum < 50",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Baixa_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Contas a receber"
				},
				"annotations": [],
				"lastPublishTime": "2019-09-10T17:22:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Baixa_Titulos_Receber')]",
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Bilhete Ligacoes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Start",
						"description": "Step added to paralellize execution",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Check HOB file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "HOB_CSV_NC_BilheteLigacoes",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "HOB file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check HOB file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check HOB file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send failure HOB",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\HOB não encontrado!",
											"ErrorMessage": "O arquivo HOB\\BilhetesLigacoes não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy HOB Bilhetes",
									"description": "Envia os dados do CSV para o Azure SQL Server",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "07.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Data",
														"type": "DateTime",
														"format": "dd/MM/yyyy",
														"culture": ""
													},
													"sink": {
														"name": "DATA",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "Hora",
														"type": "String"
													},
													"sink": {
														"name": "HORA",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Usu�rio",
														"type": "String"
													},
													"sink": {
														"name": "USUARIO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tipo",
														"type": "String"
													},
													"sink": {
														"name": "TIPO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Origem",
														"type": "String"
													},
													"sink": {
														"name": "ORIGEM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Destino",
														"type": "String"
													},
													"sink": {
														"name": "DESTINO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "String"
													},
													"sink": {
														"name": "STATUS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Centro de Custo",
														"type": "String"
													},
													"sink": {
														"name": "CENTRO_DE_CUSTO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Tarifado",
														"type": "Int32"
													},
													"sink": {
														"name": "TEMPO_TARIFADO",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Tempo Decorrido",
														"type": "String"
													},
													"sink": {
														"name": "TEMPO_DECORRIDO",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Campanha",
														"type": "String"
													},
													"sink": {
														"name": "CAMPANHA",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Fila",
														"type": "String"
													},
													"sink": {
														"name": "FILA",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Unique ID",
														"type": "Double"
													},
													"sink": {
														"name": "UNIQUE_ID",
														"type": "Double"
													}
												},
												{
													"source": {
														"name": "Linked ID",
														"type": "Double"
													},
													"sink": {
														"name": "LINKED_ID",
														"type": "Double"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "HOB_CSV_NC_BilheteLigacoes",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_BilheteLigacoes",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check HOSAG file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "HOSAG_CSV_NC_BilheteLigacoes",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "HOSAG file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check HOSAG file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check HOSAG file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send HOSAG failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\HOSAG não encontrado!",
											"ErrorMessage": "O arquivo HOSAG\\BilhetesLigacoes não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy HOSAG bilhetes",
									"description": "Envia os dados do arquivo CSV para o Azure SQL Server",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "07.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Data",
														"type": "DateTime",
														"format": "dd/MM/yyyy",
														"culture": ""
													},
													"sink": {
														"name": "DATA",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "Hora",
														"type": "String"
													},
													"sink": {
														"name": "HORA",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Usu�rio",
														"type": "String"
													},
													"sink": {
														"name": "USUARIO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tipo",
														"type": "String"
													},
													"sink": {
														"name": "TIPO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Origem",
														"type": "String"
													},
													"sink": {
														"name": "ORIGEM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Destino",
														"type": "String"
													},
													"sink": {
														"name": "DESTINO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "String"
													},
													"sink": {
														"name": "STATUS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Centro de Custo",
														"type": "String"
													},
													"sink": {
														"name": "CENTRO_DE_CUSTO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Tarifado",
														"type": "Int32"
													},
													"sink": {
														"name": "TEMPO_TARIFADO",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Tempo Decorrido",
														"type": "String"
													},
													"sink": {
														"name": "TEMPO_DECORRIDO",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Campanha",
														"type": "String"
													},
													"sink": {
														"name": "CAMPANHA",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Fila",
														"type": "String"
													},
													"sink": {
														"name": "FILA",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Unique ID",
														"type": "Double"
													},
													"sink": {
														"name": "UNIQUE_ID",
														"type": "Double"
													}
												},
												{
													"source": {
														"name": "Linked ID",
														"type": "Double"
													},
													"sink": {
														"name": "LINKED_ID",
														"type": "Double"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "HOSAG_CSV_NC_BilheteLigacoes",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_BilheteLigacoes",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check DH file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DH_CSV_NC_BilheteLigacoes",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "DH file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check DH file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check DH file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send DH failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\DH não encontrado!",
											"ErrorMessage": "O arquivo DH\\BilhetesLigacoes não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy DH bilhetes",
									"description": "Envia os dados do arquivo CSV para o Azure SQL Server",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "07.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Data",
														"type": "DateTime",
														"format": "dd/MM/yyyy",
														"culture": ""
													},
													"sink": {
														"name": "DATA",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "Hora",
														"type": "String"
													},
													"sink": {
														"name": "HORA",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Usu�rio",
														"type": "String"
													},
													"sink": {
														"name": "USUARIO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tipo",
														"type": "String"
													},
													"sink": {
														"name": "TIPO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Origem",
														"type": "String"
													},
													"sink": {
														"name": "ORIGEM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Destino",
														"type": "String"
													},
													"sink": {
														"name": "DESTINO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "String"
													},
													"sink": {
														"name": "STATUS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Centro de Custo",
														"type": "String"
													},
													"sink": {
														"name": "CENTRO_DE_CUSTO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Tarifado",
														"type": "Int32"
													},
													"sink": {
														"name": "TEMPO_TARIFADO",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Tempo Decorrido",
														"type": "String"
													},
													"sink": {
														"name": "TEMPO_DECORRIDO",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Campanha",
														"type": "String"
													},
													"sink": {
														"name": "CAMPANHA",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Fila",
														"type": "String"
													},
													"sink": {
														"name": "FILA",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Unique ID",
														"type": "Double"
													},
													"sink": {
														"name": "UNIQUE_ID",
														"type": "Double"
													}
												},
												{
													"source": {
														"name": "Linked ID",
														"type": "Double"
													},
													"sink": {
														"name": "LINKED_ID",
														"type": "Double"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "DH_CSV_NC_BilheteLigacoes",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_BilheteLigacoes",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check HOSL file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "HOSL_CSV_NC_BilheteLigacoes",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "HOSL file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check HOSL file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check HOSL file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send HOSL failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\HOSL não encontrado!",
											"ErrorMessage": "O arquivo HOSL\\BilhetesLigacoes não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy HOSL bilhetes",
									"description": "Envia os dados do arquivo CSV para o Azure SQL Server",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "07.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Data",
														"type": "DateTime",
														"format": "dd/MM/yyyy",
														"culture": ""
													},
													"sink": {
														"name": "DATA",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "Hora",
														"type": "String"
													},
													"sink": {
														"name": "HORA",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Usu�rio",
														"type": "String"
													},
													"sink": {
														"name": "USUARIO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tipo",
														"type": "String"
													},
													"sink": {
														"name": "TIPO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Origem",
														"type": "String"
													},
													"sink": {
														"name": "ORIGEM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Destino",
														"type": "String"
													},
													"sink": {
														"name": "DESTINO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "String"
													},
													"sink": {
														"name": "STATUS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Centro de Custo",
														"type": "String"
													},
													"sink": {
														"name": "CENTRO_DE_CUSTO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Tarifado",
														"type": "Int32"
													},
													"sink": {
														"name": "TEMPO_TARIFADO",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Tempo Decorrido",
														"type": "String"
													},
													"sink": {
														"name": "TEMPO_DECORRIDO",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Campanha",
														"type": "String"
													},
													"sink": {
														"name": "CAMPANHA",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Fila",
														"type": "String"
													},
													"sink": {
														"name": "FILA",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Unique ID",
														"type": "Double"
													},
													"sink": {
														"name": "UNIQUE_ID",
														"type": "Double"
													}
												},
												{
													"source": {
														"name": "Linked ID",
														"type": "Double"
													},
													"sink": {
														"name": "LINKED_ID",
														"type": "Double"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "HOSL_CSV_NC_BilheteLigacoes",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_BilheteLigacoes",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check INOB file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "INOB_CSV_NC_BilheteLigacoes",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "INOB file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check INOB file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check INOB file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send INOB failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\INOB não encontrado!",
											"ErrorMessage": "O arquivo INOB\\BilheteLigacoes não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy INOB bilhetes",
									"description": "Envia os dados do arquivo CSV para o Azure SQL Server",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "07.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Data",
														"type": "DateTime",
														"format": "dd/MM/yyyy",
														"culture": ""
													},
													"sink": {
														"name": "DATA",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "Hora",
														"type": "String"
													},
													"sink": {
														"name": "HORA",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Usu�rio",
														"type": "String"
													},
													"sink": {
														"name": "USUARIO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tipo",
														"type": "String"
													},
													"sink": {
														"name": "TIPO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Origem",
														"type": "String"
													},
													"sink": {
														"name": "ORIGEM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Destino",
														"type": "String"
													},
													"sink": {
														"name": "DESTINO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "String"
													},
													"sink": {
														"name": "STATUS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Centro de Custo",
														"type": "String"
													},
													"sink": {
														"name": "CENTRO_DE_CUSTO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Tarifado",
														"type": "Int32"
													},
													"sink": {
														"name": "TEMPO_TARIFADO",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Tempo Decorrido",
														"type": "String"
													},
													"sink": {
														"name": "TEMPO_DECORRIDO",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Campanha",
														"type": "String"
													},
													"sink": {
														"name": "CAMPANHA",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Fila",
														"type": "String"
													},
													"sink": {
														"name": "FILA",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Unique ID",
														"type": "Double"
													},
													"sink": {
														"name": "UNIQUE_ID",
														"type": "Double"
													}
												},
												{
													"source": {
														"name": "Linked ID",
														"type": "Double"
													},
													"sink": {
														"name": "LINKED_ID",
														"type": "Double"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "INOB_CSV_NC_BilheteLigacoes",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_BilheteLigacoes",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check CSI file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CSI_CSV_NC_BilhetesLigacoes",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "CSI file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check CSI file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check CSI file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send failure CSI",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\INOB não encontrado!",
											"ErrorMessage": "O arquivo INOB\\Agentes por Dia não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy CSI BilheteLigacoes",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Data",
														"type": "DateTime",
														"format": "dd/MM/yyyy",
														"culture": ""
													},
													"sink": {
														"name": "DATA",
														"type": "DateTime"
													}
												},
												{
													"source": {
														"name": "Hora",
														"type": "String"
													},
													"sink": {
														"name": "HORA",
														"type": "TimeSpan"
													}
												},
												{
													"source": {
														"name": "Usu�rio",
														"type": "String"
													},
													"sink": {
														"name": "USUARIO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tipo",
														"type": "String"
													},
													"sink": {
														"name": "TIPO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Origem",
														"type": "String"
													},
													"sink": {
														"name": "ORIGEM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Destino",
														"type": "String"
													},
													"sink": {
														"name": "DESTINO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Status",
														"type": "String"
													},
													"sink": {
														"name": "STATUS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Centro de Custo",
														"type": "String"
													},
													"sink": {
														"name": "CENTRO_DE_CUSTO",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Tarifado",
														"type": "String"
													},
													"sink": {
														"name": "TEMPO_TARIFADO",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Tempo Decorrido",
														"type": "String"
													},
													"sink": {
														"name": "TEMPO_DECORRIDO",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Campanha",
														"type": "String"
													},
													"sink": {
														"name": "CAMPANHA",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Fila",
														"type": "String"
													},
													"sink": {
														"name": "FILA",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Unique ID",
														"type": "String"
													},
													"sink": {
														"name": "UNIQUE_ID",
														"type": "Double"
													}
												},
												{
													"source": {
														"name": "Linked ID",
														"type": "String"
													},
													"sink": {
														"name": "LINKED_ID",
														"type": "Double"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "CSI_CSV_NC_BilhetesLigacoes",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_BilheteLigacoes",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento/Nexcore"
				},
				"annotations": [],
				"lastPublishTime": "2019-11-13T13:27:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/HOB_CSV_NC_BilheteLigacoes')]",
				"[concat(variables('factoryId'), '/datasets/HOSAG_CSV_NC_BilheteLigacoes')]",
				"[concat(variables('factoryId'), '/datasets/DH_CSV_NC_BilheteLigacoes')]",
				"[concat(variables('factoryId'), '/datasets/HOSL_CSV_NC_BilheteLigacoes')]",
				"[concat(variables('factoryId'), '/datasets/INOB_CSV_NC_BilheteLigacoes')]",
				"[concat(variables('factoryId'), '/datasets/CSI_CSV_NC_BilhetesLigacoes')]",
				"[concat(variables('factoryId'), '/pipelines/Send email')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_NC_BilheteLigacoes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CARGA_DINAMICA_ADF_HMO_SIMAH')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LISTA ORIGEM DESTINO",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino]",
								"storedProcedureParameters": {
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"plataforma": {
										"type": "String",
										"value": "HMO"
									},
									"COD_TABELA": {
										"type": "String",
										"value": null
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPA TABELAS DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "DATA_HORA_INICIO_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(\n'select * from ', item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' where ', item().nome_coluna_referencia,' >= ''',\nitem().Data_Inicio, ''' and  ', item().nome_coluna_referencia,' <= ''', item().Data_Fim, ''''\n)",
															"type": "Expression"
														},
														"partitionOption": "None",
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ORACLE_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET",
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA PARCIAL').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "DATA_HORA_INICIO_COMPLETA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.10:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
															"type": "Expression"
														},
														"partitionOption": "None",
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ORACLE_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET",
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA COMPLETA').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Envio Erro ADF",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "SE CARGA COMPLETA",
											"dependencyConditions": [
												"Skipped"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "rodrigo.clima@opty.com.br",
											"Subject": "Falha ADF Tasy",
											"ErrorMessage": "Erro"
										}
									}
								}
							]
						}
					},
					{
						"name": "LIMPA TABELAS DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA ORIGEM DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 30,
							"activities": [
								{
									"name": "LIMPA TABELA DESTINO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('truncate table ',\nitem().NOME_SCHEMA_DESTINO,\n'.',\nitem().NOME_TABELA_DESTINO,\n' SELECT 0')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					}
				],
				"concurrency": 5,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LISTA_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/pipelines/Send email')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/datasets/ORACLE_DINAMICO')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CARGA_DINAMICA_ADF_NAJA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LISTA ORIGEM DESTINO",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino]",
								"storedProcedureParameters": {
									"COD_TABELA": {
										"type": "String",
										"value": null
									},
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"plataforma": {
										"type": "String",
										"value": "NAJA"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPA TABELAS DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "DATA_HORA_INICIO_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(\n'select * from ', item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' where ', item().nome_coluna_referencia,' >= ''',\nitem().Data_Inicio, ''' and  ', item().nome_coluna_referencia,' <= ''', item().Data_Fim, ''''\n)",
															"type": "Expression"
														},
														"partitionOption": "None",
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ORACLE_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET",
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA PARCIAL').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "DATA_HORA_INICIO_COMPLETA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.10:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "SQL_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"schema_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"table_name": {
																"value": "@item().NOME_TABELA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA COMPLETA').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "LIMPA TABELAS DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA ORIGEM DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 30,
							"activities": [
								{
									"name": "LIMPA TABELA DESTINO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('truncate table ',\nitem().NOME_SCHEMA_DESTINO,\n'.',\nitem().NOME_TABELA_DESTINO,\n' SELECT 0')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					},
					{
						"name": "SP_RAW_NAJA_PRODIARIA",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_RAW_NAJA_PRODIARIA"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP_CARGA_DATAMART_NAJA",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SP_RAW_NAJA_PRODIARIA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_CARGA_DATAMART_NAJA"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Remover Atendimento Cancelado Data mart",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SP_CARGA_DATAMART_NAJA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "-- APAGAR OS ATENDIMENTOS CANCELADOS NAJA\n\nWITH CANCELADOS AS(\nSELECT DISTINCT\nCAST(ESTABELECIMENTO AS VARCHAR(5)) + '|' + CAST(ATE_Isn AS VARCHAR(100)) AS FK_NR_ATENDIMENTO\nFROM dw.tbl_n_Atendimento with (nolock) \nWHERE ATE_Sta = 'C'\n)\n\nDELETE P\n  FROM DM.tbl_fprodiaria P\n  INNER JOIN CANCELADOS I ON P.FK_NR_ATENDIMENTO = I.FK_NR_ATENDIMENTO\n  WHERE P.ESTABELECIMENTO = 80"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"concurrency": 5,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LISTA_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/datasets/ORACLE_DINAMICO')]",
				"[concat(variables('factoryId'), '/datasets/SQL_DINAMICO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CARGA_DINAMICA_ADF_NAJA_DW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LISTA ORIGEM DESTINO",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino]",
								"storedProcedureParameters": {
									"COD_TABELA": {
										"type": "String",
										"value": null
									},
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"plataforma": {
										"type": "String",
										"value": "NAJA"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "DROPA TABELAS DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "DATA_HORA_INICIO_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(\n'select * from ', item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' where ', item().nome_coluna_referencia,' >= ''',\nitem().Data_Inicio, ''' and  ', item().nome_coluna_referencia,' <= ''', item().Data_Fim, ''''\n)",
															"type": "Expression"
														},
														"partitionOption": "None",
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ORACLE_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET",
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA PARCIAL').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "DATA_HORA_INICIO_COMPLETA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.10:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "SQL_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"schema_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"table_name": {
																"value": "@item().NOME_TABELA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA COMPLETA').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "DROPA TABELAS DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA ORIGEM DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 30,
							"activities": [
								{
									"name": "LIMPA TABELA DESTINO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N',\n'''',   \nitem().NOME_SCHEMA_DESTINO,\n'.',\nitem().NOME_TABELA_DESTINO,\n'''',\n') AND type in (N',\n'''',\n'U',\n'''',\n'))',\n' DROP TABLE ',\nitem().NOME_SCHEMA_DESTINO,\n'.',\nitem().NOME_TABELA_DESTINO,\n'  SELECT 0'\n)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					}
				],
				"concurrency": 5,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LISTA_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/datasets/ORACLE_DINAMICO')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/SQL_DINAMICO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CARGA_DINAMICA_ADF_SMART')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LISTA ORIGEM DESTINO",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino]",
								"storedProcedureParameters": {
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"plataforma": {
										"type": "String",
										"value": "SMART"
									},
									"COD_TABELA": {
										"type": "String",
										"value": null
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPA TABELAS DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 15,
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "DATA_HORA_INICIO_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 2,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat(\n'select * from ', item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' where ', item().nome_coluna_referencia,' >= ''',\nitem().Data_Inicio, ''' and ', item().nome_coluna_referencia, ' <= ''', item().Data_Fim, ''''\n\n )",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SQL_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"schema_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"table_name": {
																"value": "@item().NOME_TABELA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA PARCIAL').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "DATA_HORA_INICIO_COMPLETA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 2,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SQL_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"schema_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"table_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA COMPLETA').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "LIMPA TABELAS DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA ORIGEM DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 15,
							"activities": [
								{
									"name": "LIMPA TABELA DESTINO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('truncate table ',\nitem().NOME_SCHEMA_DESTINO,\n'.',\nitem().NOME_TABELA_DESTINO,\n' SELECT 0')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					},
					{
						"name": "CARGA DW",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.07:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_SMART_CARGA_DW]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Exec Datamart Smart Prod",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CARGA DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DM_ProdDiariaSMARTV2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Exec Datamart Smart Receb",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CARGA DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_DATAMART_RECEBIMENTO_SMART]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LISTA_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/pipelines/DM_ProdDiariaSMARTV2')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/datasets/SQL_DINAMICO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CARGA_DINAMICA_ADF_SMART_IRIS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LISTA ORIGEM DESTINO",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino]",
								"storedProcedureParameters": {
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"plataforma": {
										"type": "String",
										"value": "SMART_IRIS_ODBC"
									},
									"COD_TABELA": {
										"type": "String",
										"value": null
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPA TABELAS DESTINO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 5,
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "DATA_HORA_INICIO_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "Data Busca Banco",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 2,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OdbcSource",
														"query": {
															"value": "@concat(\n'select * from ',item().NOME_TABELA_ORIGEM,' where SUBSTRING(', item().nome_coluna_referencia,',1,10) >= ',variables('DT_INICIO') \n\n )",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "IRIS_ODBC",
														"type": "DatasetReference",
														"parameters": {
															"SCHEMA_NAME": "@item().NOME_SCHEMA_ORIGEM",
															"TABLE_NAME": "@item().NOME_TABELA_ORIGEM"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA PARCIAL').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Data Busca Banco",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "DT_INICIO",
													"value": {
														"value": "@concat('''',string(formatDateTime(adddays(utcnow(), -30), 'yyyy-MM-dd')),'''')",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "DATA_HORA_INICIO_COMPLETA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA COMPLETA').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OdbcSource",
														"query": {
															"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "IRIS_ODBC",
														"type": "DatasetReference",
														"parameters": {
															"SCHEMA_NAME": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"TABLE_NAME": "@item().NOME_TABELA_ORIGEM"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": "@item().NOME_SCHEMA_DESTINO",
															"Tabela_Destino": "@item().NOME_TABELA_DESTINO"
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "LIMPA TABELAS DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA ORIGEM DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 15,
							"activities": [
								{
									"name": "LIMPA TABELA DESTINO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('truncate table ',\nitem().NOME_SCHEMA_DESTINO,\n'.',\nitem().NOME_TABELA_DESTINO,\n' SELECT 0')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					},
					{
						"name": "Merge",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Chamada Procedure",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "@concat('EXEC SP_CARGA_IRIS_TBL_',replace(item().NOME_TABELA_DESTINO,'iris_', ''))",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"DT_INICIO": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LISTA_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/IRIS_ODBC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CARGA_DINAMICA_ADF_TASY')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LISTA ORIGEM DESTINO",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino]",
								"storedProcedureParameters": {
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"plataforma": {
										"type": "String",
										"value": "TASY"
									},
									"COD_TABELA": {
										"type": "String",
										"value": null
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPA TABELAS DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "DATA_HORA_INICIO_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(\n'select * from ', item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' where ', item().nome_coluna_referencia,' >= ''',\nitem().Data_Inicio, ''' and  ', item().nome_coluna_referencia,' <= ''', item().Data_Fim, ''''\n)",
															"type": "Expression"
														},
														"partitionOption": "None",
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ORACLE_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET",
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA PARCIAL').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "DATA_HORA_INICIO_COMPLETA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.10:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
															"type": "Expression"
														},
														"partitionOption": "None",
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ORACLE_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET",
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA COMPLETA').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Envio Erro ADF",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "SE CARGA COMPLETA",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "rodrigo.lima@grupohmaisbrasil.com.br",
											"Subject": "Falha ADF Tasy",
											"ErrorMessage": "Erro"
										}
									}
								}
							]
						}
					},
					{
						"name": "LIMPA TABELAS DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA ORIGEM DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 30,
							"activities": [
								{
									"name": "LIMPA TABELA DESTINO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('truncate table ',\nitem().NOME_SCHEMA_DESTINO,\n'.',\nitem().NOME_TABELA_DESTINO,\n' SELECT 0')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					},
					{
						"name": "CARGA DW",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.09:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_TASY_CARGA_DW]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Exec Datamart Tasy Prod",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "CARGA DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DM_ProdDiaria_TasyV2",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Exec Datamart Tasy Receb",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CARGA DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_DATAMART_RECEBIMENTO_TASY]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"concurrency": 5,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LISTA_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/pipelines/DM_ProdDiaria_TasyV2')]",
				"[concat(variables('factoryId'), '/pipelines/Send email')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/datasets/ORACLE_DINAMICO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CARGA_DINAMICA_ADF_TASY_CLOUD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LISTA ORIGEM DESTINO",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino_tasy]",
								"storedProcedureParameters": {
									"COD_TABELA": {
										"type": "String",
										"value": null
									},
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"nome_keyvault_secret": {
										"type": "String",
										"value": "CloudTasy"
									},
									"plataforma": {
										"type": "String",
										"value": "Tasy"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPA TABELAS DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "DATA_HORA_INICIO_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(\n'select * from ', item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' where ', item().nome_coluna_referencia,' >= ''',\nitem().Data_Inicio, ''' and  ', item().nome_coluna_referencia,' <= ''', item().Data_Fim, ''''\n)",
															"type": "Expression"
														},
														"partitionOption": "None",
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ORACLE_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET",
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA PARCIAL').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "DATA_HORA_INICIO_COMPLETA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.10:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
															"type": "Expression"
														},
														"partitionOption": "None",
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ORACLE_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET",
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA COMPLETA').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Envio Erro ADF",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "SE CARGA COMPLETA",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "rodrigo.lima@grupohmaisbrasil.com.br",
											"Subject": "Falha ADF Tasy",
											"ErrorMessage": "Erro"
										}
									}
								}
							]
						}
					},
					{
						"name": "LIMPA TABELAS DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA ORIGEM DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 30,
							"activities": [
								{
									"name": "LIMPA TABELA DESTINO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('truncate table ',\nitem().NOME_SCHEMA_DESTINO,\n'.',\nitem().NOME_TABELA_DESTINO,\n' SELECT 0')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					},
					{
						"name": "CARGA DW",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"policy": {
							"timeout": "0.09:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_TASY_CARGA_DW]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 15,
							"activities": [
								{
									"name": "Executa Procedures",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().NOME_PROC",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "LISTA INDEX ENABLE",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \nCONCAT('ALTER INDEX  ', A.index_name , ' ON ' ,a.schema_nm , '.' , A.table_nm, ' DISABLE ') as DISABLE_INDEX , \nCONCAT('ALTER INDEX  ', A.index_name  , ' ON ' ,a.schema_nm , '.' , A.table_nm, ' REBUILD ') as REBUILD_INDEX ,\nA.index_name ,a.schema_nm + '.' + A.table_nm as tb\nFROM index_aj_dw A\nINNER JOIN ADF.ctr_origem_destino B WITH(NOLOCK) ON A.TABLE_NM = B.NOME_TABELA_DESTINO\nWHERE A.schema_nm = 'dw'  AND B.TIPO_CARGA = 'COMPLETA' AND NOME_PLATAFORMA = 'TASY'\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FOR EACH REBUILD INDEX",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA INDEX ENABLE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA INDEX ENABLE').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "REBUILD INDEX",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "@item().REBUILD_INDEX",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Data mart Prod Diaria Cloud",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "FOR EACH REBUILD INDEX",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DM_ProdDiaria_TASY_HTML",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LISTA_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/pipelines/DM_ProdDiaria_TASY_HTML')]",
				"[concat(variables('factoryId'), '/pipelines/Send email')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/datasets/ORACLE_DINAMICO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CARGA_DINAMICA_ADF_TASY_INTRADIARIO')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LISTA ORIGEM DESTINO",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino_intradiario]",
								"storedProcedureParameters": {
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"plataforma": {
										"type": "String",
										"value": "TASY"
									},
									"COD_TABELA": {
										"type": "String",
										"value": null
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPA TABELAS DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "DATA_HORA_INICIO_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(\n'select * from ', item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' where ', item().nome_coluna_referencia,' >= ''',\nitem().Data_Inicio, ''' and  ', item().nome_coluna_referencia,' <= ''', item().Data_Fim, ''''\n)",
															"type": "Expression"
														},
														"partitionOption": "None",
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ORACLE_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET",
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA PARCIAL').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "DATA_HORA_INICIO_COMPLETA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.10:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
															"type": "Expression"
														},
														"partitionOption": "None",
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ORACLE_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET",
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA COMPLETA').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Envio Erro ADF",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "SE CARGA COMPLETA",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "rodrigo.lima@grupohmaisbrasil.com.br",
											"Subject": "Falha ADF Tasy",
											"ErrorMessage": "Erro"
										}
									}
								}
							]
						}
					},
					{
						"name": "LIMPA TABELAS DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA ORIGEM DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 30,
							"activities": [
								{
									"name": "LIMPA TABELA DESTINO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('truncate table ',\nitem().NOME_SCHEMA_DESTINO,\n'.',\nitem().NOME_TABELA_DESTINO,\n' SELECT 0')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "DW",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					},
					{
						"name": "PROCEDURE DW",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().NOME_PROC",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LISTA_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/pipelines/Send email')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/ORACLE_DINAMICO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CARGA_DINAMICA_ADF_TASY_ONPREMISES')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LISTA ORIGEM DESTINO",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "FOR EACH DISABLE INDEX",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino_tasy]",
								"storedProcedureParameters": {
									"COD_TABELA": {
										"type": "String",
										"value": null
									},
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"nome_keyvault_secret": {
										"type": "String",
										"value": "SadallaTasy"
									},
									"plataforma": {
										"type": "String",
										"value": "Tasy"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPA TABELAS DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 50,
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "DATA_HORA_INICIO_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(\n'select * from ', item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' where ', item().nome_coluna_referencia,' >= ''',\nitem().Data_Inicio, ''' and  ', item().nome_coluna_referencia,' <= ''', item().Data_Fim, ''''\n)",
															"type": "Expression"
														},
														"partitionOption": "None",
														"convertDecimalToInteger": false,
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ORACLE_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET",
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA PARCIAL').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "DATA_HORA_INICIO_COMPLETA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.10:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
															"type": "Expression"
														},
														"partitionOption": "None",
														"convertDecimalToInteger": false,
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ORACLE_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET",
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA COMPLETA').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								},
								{
									"name": "Envio Erro ADF",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "SE CARGA COMPLETA",
											"dependencyConditions": [
												"Failed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "rodrigo.lima@grupohmaisbrasil.com.br",
											"Subject": "Falha ADF Tasy",
											"ErrorMessage": "Erro"
										}
									}
								}
							]
						}
					},
					{
						"name": "LIMPA TABELAS DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA ORIGEM DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 30,
							"activities": [
								{
									"name": "LIMPA TABELA DESTINO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('truncate table ',\nitem().NOME_SCHEMA_DESTINO,\n'.',\nitem().NOME_TABELA_DESTINO,\n' SELECT 0')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					},
					{
						"name": "CARGA DW ON PREMISES",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"policy": {
							"timeout": "0.09:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": {
								"value": "[[dbo].[SP_TASY_SADALLA_CARGA_DW]",
								"type": "Expression"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 15,
							"activities": [
								{
									"name": "Executa Procedures",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": {
											"value": "@item().NOME_PROC",
											"type": "Expression"
										}
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "LISTA INDEX DISABLE",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \nCONCAT('ALTER INDEX  ', A.index_name , ' ON ' ,a.schema_nm , '.' , A.table_nm, ' DISABLE ') as DISABLE_INDEX , \nCONCAT('ALTER INDEX  ', A.index_name  , ' ON ' ,a.schema_nm , '.' , A.table_nm, ' REBUILD ') as REBUILD_INDEX ,\nA.index_name ,a.schema_nm + '.' + A.table_nm as tb\nFROM index_aj_dw A\nINNER JOIN ADF.ctr_origem_destino B WITH(NOLOCK) ON A.TABLE_NM = B.NOME_TABELA_DESTINO\nWHERE A.schema_nm = 'dw'  AND B.TIPO_CARGA = 'COMPLETA' AND NOME_PLATAFORMA = 'TASY'\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FOR EACH DISABLE INDEX",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA INDEX DISABLE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA INDEX DISABLE').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "DISABLE INDEX",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "@item().DISABLE_INDEX",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Data mart ON PREMISES",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DM_ProdDiaria_TASY_ONPREMISES",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Sadalla Prod Diaria",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LIMPA TABELAS DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "DM_ProdDiaria_Tasy_Sadalla",
								"type": "PipelineReference"
							},
							"waitOnCompletion": false,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"DT_INICIO": {
						"type": "String"
					},
					"DT_FINAL": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LISTA_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/pipelines/DM_ProdDiaria_TASY_ONPREMISES')]",
				"[concat(variables('factoryId'), '/pipelines/DM_ProdDiaria_Tasy_Sadalla')]",
				"[concat(variables('factoryId'), '/pipelines/Send email')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/datasets/ORACLE_DINAMICO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CEOP_CSV')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lista arquivos",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_HMAISDATADRIVEN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": "ceop"
								}
							},
							"fieldList": [
								"childItems",
								"itemType",
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filtro",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lista arquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista arquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endsWith(item().name, 'csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filtro",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filtro').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copia dados para a STG",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('Truncate table stg.',activity('Lista arquivos').output.itemName)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_SQL_STG",
											"type": "DatasetReference",
											"parameters": {
												"SCHEMA": "stg",
												"TABELA": {
													"value": "CEOP_FPA",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Move arquivo para PROCESSADOS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copia dados para a STG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@concat(activity('Lista arquivos').output.itemName,'\\Processados')",
													"type": "Expression"
												},
												"File": {
													"value": "@concat(item().name,'-',utcnow())",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Apaga arquivo",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move arquivo para PROCESSADOS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "sv_hmaisbrasildatadriven",
												"type": "LinkedServiceReference"
											},
											"path": "ceop/logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Convenio",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "DECLARE @ESTABELECIMENTO VARCHAR(10)\n\nSELECT @ESTABELECIMENTO = ID_SYSTEM FROM v_plataforma_dw WHERE UPPER(DS_SYSTEM) LIKE '%CEOP%'\n\nTRUNCATE TABLE DW.CEOP_CONVENIO\n\nINSERT INTO DW.CEOP_CONVENIO\nSELECT DISTINCT\n    @ESTABELECIMENTO AS ESTABELECIMENTO\n    ,@ESTABELECIMENTO + '|' + CAST(A.[Cnv.Id] AS VARCHAR(50)) AS FK_CONVENIO\n    ,A.[Cnv.Id] AS CD_CONVENIO\n    ,A.Convênio AS DS_CONVENIO   \nFROM STG.CEOP A"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/P&P"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN_BINARY')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_STG')]",
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CEOP_CSV_FPA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lista arquivos",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_HMAISDATADRIVEN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": "ceop"
								}
							},
							"fieldList": [
								"childItems",
								"itemType",
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filtro",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lista arquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista arquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endsWith(item().name, 'csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filtro",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filtro').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copia dados para a STG",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_SQL_STG",
											"type": "DatasetReference",
											"parameters": {
												"SCHEMA": "stg",
												"TABELA": {
													"value": "CEOP_FPA",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Move arquivo para PROCESSADOS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Copia dados para a STG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@concat(activity('Lista arquivos').output.itemName,'\\Processados')",
													"type": "Expression"
												},
												"File": {
													"value": "@concat(item().name,'-',utcnow())",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Apaga arquivo",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move arquivo para PROCESSADOS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "sv_hmaisbrasildatadriven",
												"type": "LinkedServiceReference"
											},
											"path": "ceop/logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					},
					{
						"name": "Convenio",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "BEGIN\n    DECLARE @ESTABELECIMENTO VARCHAR(10)\n\n    SELECT @ESTABELECIMENTO = ID_SYSTEM FROM v_plataforma_dw WHERE UPPER(DS_SYSTEM) LIKE '%CEOP%'\n\n    TRUNCATE TABLE STG.CEOP_CONVENIO\n\n    INSERT INTO STG.CEOP_CONVENIO\n    SELECT DISTINCT\n        @ESTABELECIMENTO AS ESTABELECIMENTO\n        ,@ESTABELECIMENTO + '|' + CAST(A.[Cnv.Id] AS VARCHAR(50)) AS FK_CONVENIO\n        ,A.[Cnv.Id] AS CD_CONVENIO\n        ,A.Convênio AS DS_CONVENIO   \n    FROM STG.CEOP_FPA A\nEND\nBEGIN\n    with tab as(\n        SELECT\n            ESTABELECIMENTO\n            ,FK_CONVENIO\n            ,CD_CONVENIO\n            ,DS_CONVENIO\n        FROM(    \n            SELECT \n            A.ESTABELECIMENTO\n            ,A.FK_CONVENIO\n            ,A.CD_CONVENIO\n            ,A.DS_CONVENIO\n            ,ROW_NUMBER()OVER(PARTITION BY A.FK_CONVENIO ORDER BY A.FK_CONVENIO DESC) ID_LINHA \n            FROM STG.CEOP_CONVENIO A\n        )TMP\n        WHERE TMP.ID_LINHA = 1\n    )\n\n    MERGE\t           \n    \tdw.CEOP_CONVENIO AS destino           \n    USING            \n    \ttab AS origem           \n\n        ON\t(        \n            ORIGEM.FK_CONVENIO = DESTINO.FK_CONVENIO\t\n    \t\t)        \n\n    --Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \n    WHEN MATCHED            \n    THEN UPDATE SET           \n    DESTINO.ESTABELECIMENTO = ORIGEM.ESTABELECIMENTO\n    ,DESTINO.FK_CONVENIO = ORIGEM.FK_CONVENIO\n    ,DESTINO.CD_CONVENIO = ORIGEM.CD_CONVENIO\n    ,DESTINO.DS_CONVENIO = ORIGEM.DS_CONVENIO\n\n\n\n    --Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \n    WHEN NOT MATCHED BY TARGET            \n    THEN INSERT            \n    VALUES (\n    ORIGEM.ESTABELECIMENTO\n    ,ORIGEM.FK_CONVENIO\n    ,ORIGEM.CD_CONVENIO\n    ,ORIGEM.DS_CONVENIO\n    ); \nEND    \n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/P&P"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN_BINARY')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_STG')]",
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Carga Datamart TASY')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Datamart Recebimento",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_DATAMART_RECEBIMENTO_TASY]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/3_Pipeline_Datamart"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Chamados Philips')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Truncate all Philips' tables",
				"activities": [
					{
						"name": "Copy OS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Clear tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT a.nr_sequencia,\n\t   a.ds_ordem,\n\t   a.nr_seq_localizacao,\n       a.ds_localizacao,\n\t   a.nr_seq_equipamento,\n       a.ds_equipamento,\n\t   a.cd_pessoa_solicitante,\n       a.nm_solicitante,\n\t   a.dt_ordem_servico,\n\t   a.ie_prioridade,\n\t   a.ds_dano_breve,\n\t   a.dt_atualizacao,\n\t   a.nm_usuario,\n\t   a.dt_inicio_desejado,\n\t   a.ds_dano,\n\t   a.dt_fim_previsto,\n\t   a.dt_inicio_real,\n\t   a.dt_fim_real,\n\t   substr(obter_desc_status_os(a.nr_sequencia),1,255) ie_status_ordem,\n\t   a.nr_grupo_planej,\n\t   a.nr_grupo_trabalho,\n\t   a.nr_seq_estagio,\n\t   a.dt_reabertura,\n\t   a.cd_funcao,\n\t   a.ie_classificacao,\n       a.ds_situacao,\n\t   a.ie_grau_satisfacao,\n\t   a.nr_seq_wheb,\n\t   a.ie_origem_os,\n\t   a.ie_tipo_ordem,\n\t   a.nr_seq_trab,\n\t   a.cd_setor,\n\t   a.ds_setor_localizacao,\n\t   a.nm_usuario_exec,\n\t   a.ds_estagio,\n\t   a.dt_inicio_semana,\n\t   a.dt_inicio_mes,\n\t   a.dt_ano,\n\t   a.cd_estabelecimento,\n\t   substr(Man_Obter_Se_Novo_Hist(a.nr_sequencia, 'Allan.C' ),1,3) ie_novo_hist,\n\t   substr(man_obter_dados_estagio(a.nr_seq_estagio,'C'),1,15) ds_cor_fonte_estagio,\n\t   substr(man_obter_dados_estagio(a.nr_seq_estagio,'F'),1,15) ds_cor_fundo_estagio,\n\t   substr(obter_valor_dominio(1197,a.ie_grau_satisfacao),1,255) ds_grau_satisfacao, \n       a.NM_USUARIO_EXEC_PREV,   \n        a.nr_seq_origem,   \n        a.ie_parado,   \n        a.dt_inicio_previsto,   \n        a.dt_conclusao_desejada,   \n        a.ds_setor_atendimento,   \n        a.ds_grupo_trabalho,   \n        SUBSTR(man_obter_complexidade(a.nr_seq_complex),1,100) ds_complexidade,     \n        a.ds_origem_os,   \n        SUBSTR(obter_descricao_padrao('SERVICO','DS_SERVICO', a.nr_seq_servico),1,255) ds_servico,   \n        ROUND(NVL(obter_hora_entre_datas(a.dt_ordem_servico, NVL(a.dt_aceite_os,SYSDATE)),0),0) qt_horas_aberta,   \n        ROUND(NVL(obter_hora_entre_datas(a.dt_aceite_os,NVL(a.dt_fim_real,SYSDATE)),0),0) qt_horas_processo,   \n        ROUND(NVL(obter_hora_entre_datas(a.dt_ordem_servico, NVL(a.dt_fim_real,SYSDATE)),0),0) qt_horas_total,   \n        man_obter_data_ult_hist(a.nr_sequencia) dt_ult_hist\n        FROM\tman_ordem_servico_v2 a\nwhere a.nr_seq_equipamento = 47\norder by 1 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Ordens_Servico_Terceiro",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy OS History",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Clear tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select x.nr_seq_ordem_serv, \n       x.nr_sequencia as nr_sequencia_hist,\n       x.ie_origem, \n       x.nr_seq_tipo, \n       x.nm_usuario_lib, \n       x.dt_atualizacao, \n       x.ds_relat_tecnico\nfrom man_ordem_serv_tecnico x",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Ordens_Servico_Hist",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Clear tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_TRUNCATEOSPHILIPS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Apoio"
				},
				"annotations": [],
				"lastPublishTime": "2019-09-26T13:17:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Ordens_Servico_Terceiro')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Ordens_Servico_Hist')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Chamados Requestia - Melhoria')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Clear all tables",
						"description": "Truncate all Requestia's tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_TRUNCATEREQUESTS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Check request file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Clear all tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_REQUESTS",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Requests file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check request file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check request file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send requests failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "csi.ti@opty.com.br",
											"Subject": "Arquivo Requestia\\REQUESTS não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\REQUESTS não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Calculate fields",
									"description": "Update calculated fields (for example, SLA formula, datetime conversions, business hours difference) for time saving in queries",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy requests",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_CALCULATEREQUESTS]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Altera chamado em pausa",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Calculate fields",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_ALTERACHAMADOSPAUSADOS]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Copy requests",
									"description": "Copy requests data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "REQUEST",
														"type": "String"
													},
													"sink": {
														"name": "REQUEST",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CLIENT",
														"type": "String"
													},
													"sink": {
														"name": "CLIENT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ORIGANAL",
														"type": "String"
													},
													"sink": {
														"name": "ORIGANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CURRANAL",
														"type": "String"
													},
													"sink": {
														"name": "CURRANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "GROUPANAL",
														"type": "String"
													},
													"sink": {
														"name": "GROUPANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LASTANAL",
														"type": "String"
													},
													"sink": {
														"name": "LASTANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LASTANLGRP",
														"type": "String"
													},
													"sink": {
														"name": "LASTANLGRP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ORIGGROUP",
														"type": "String"
													},
													"sink": {
														"name": "ORIGGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CURRGROUP",
														"type": "String"
													},
													"sink": {
														"name": "CURRGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LASTGROUP",
														"type": "String"
													},
													"sink": {
														"name": "LASTGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "GRGROUP",
														"type": "String"
													},
													"sink": {
														"name": "GRGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CATEGORY",
														"type": "String"
													},
													"sink": {
														"name": "CATEGORY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RPRIORITY",
														"type": "String"
													},
													"sink": {
														"name": "RPRIORITY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PRODUCT",
														"type": "String"
													},
													"sink": {
														"name": "PRODUCT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PROCESS",
														"type": "String"
													},
													"sink": {
														"name": "PROCESS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PROBLEM",
														"type": "String"
													},
													"sink": {
														"name": "PROBLEM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RSTATUS"
													},
													"sink": {
														"name": "RSTATUS"
													}
												},
												{
													"source": {
														"name": "REQTYPE"
													},
													"sink": {
														"name": "REQTYPE"
													}
												},
												{
													"source": {
														"name": "REQSOURCE"
													},
													"sink": {
														"name": "REQSOURCE"
													}
												},
												{
													"source": {
														"name": "LOCATION"
													},
													"sink": {
														"name": "REQLOCATION"
													}
												},
												{
													"source": {
														"name": "ORGUNIT"
													},
													"sink": {
														"name": "ORGUNIT"
													}
												},
												{
													"source": {
														"name": "ORGUNIT_ROOT"
													},
													"sink": {
														"name": "ORGUNIT_ROOT"
													}
												},
												{
													"source": {
														"name": "CHARGE"
													},
													"sink": {
														"name": "CHARGE"
													}
												},
												{
													"source": {
														"name": "SLEVEL"
													},
													"sink": {
														"name": "SLEVEL"
													}
												},
												{
													"source": {
														"name": "EQUIP"
													},
													"sink": {
														"name": "EQUIP"
													}
												},
												{
													"source": {
														"name": "RESOURCEID"
													},
													"sink": {
														"name": "RESOURCEID"
													}
												},
												{
													"source": {
														"name": "REQUESTOR"
													},
													"sink": {
														"name": "REQUESTOR"
													}
												},
												{
													"source": {
														"name": "OPENDATE"
													},
													"sink": {
														"name": "OPENDATE"
													}
												},
												{
													"source": {
														"name": "CLOSEDATE"
													},
													"sink": {
														"name": "CLOSEDATE"
													}
												},
												{
													"source": {
														"name": "CLOSED"
													},
													"sink": {
														"name": "CLOSED"
													}
												},
												{
													"source": {
														"name": "LASTACTION"
													},
													"sink": {
														"name": "LASTACTION"
													}
												},
												{
													"source": {
														"name": "LASTANALYST"
													},
													"sink": {
														"name": "LASTANALYST"
													}
												},
												{
													"source": {
														"name": "LASTSTATUS"
													},
													"sink": {
														"name": "LASTSTATUS"
													}
												},
												{
													"source": {
														"name": "LASTPRIORITY"
													},
													"sink": {
														"name": "LASTPRIORITY"
													}
												},
												{
													"source": {
														"name": "LASTREOPEN"
													},
													"sink": {
														"name": "LASTREOPEN"
													}
												},
												{
													"source": {
														"name": "LASTACTIONATEND"
													},
													"sink": {
														"name": "LASTACTIONATEND"
													}
												},
												{
													"source": {
														"name": "LASTACTTYPE"
													},
													"sink": {
														"name": "LASTACTTYPE"
													}
												},
												{
													"source": {
														"name": "RESPDATE"
													},
													"sink": {
														"name": "RESPDATE"
													}
												},
												{
													"source": {
														"name": "RESPTIME"
													},
													"sink": {
														"name": "RESPTIME"
													}
												},
												{
													"source": {
														"name": "RESLTIME"
													},
													"sink": {
														"name": "RESLTIME"
													}
												},
												{
													"source": {
														"name": "RESPMINS"
													},
													"sink": {
														"name": "RESPMINS"
													}
												},
												{
													"source": {
														"name": "RESLMINS"
													},
													"sink": {
														"name": "RESLMINS"
													}
												},
												{
													"source": {
														"name": "RESPREMAINS"
													},
													"sink": {
														"name": "RESPREMAINS"
													}
												},
												{
													"source": {
														"name": "RESLREMAINS"
													},
													"sink": {
														"name": "RESLREMAINS"
													}
												},
												{
													"source": {
														"name": "RESPMODE"
													},
													"sink": {
														"name": "RESPMODE"
													}
												},
												{
													"source": {
														"name": "RESLMODE"
													},
													"sink": {
														"name": "RESLMODE"
													}
												},
												{
													"source": {
														"name": "NOCOMPUTE"
													},
													"sink": {
														"name": "NOCOMPUTE"
													}
												},
												{
													"source": {
														"name": "RLOCKED"
													},
													"sink": {
														"name": "RLOCKED"
													}
												},
												{
													"source": {
														"name": "ESTIMCOST"
													},
													"sink": {
														"name": "ESTIMCOST"
													}
												},
												{
													"source": {
														"name": "TOTALCOST"
													},
													"sink": {
														"name": "TOTALCOST"
													}
												},
												{
													"source": {
														"name": "APROVANLTYPE"
													},
													"sink": {
														"name": "APROVANLTYPE"
													}
												},
												{
													"source": {
														"name": "APROVCLITYPE"
													},
													"sink": {
														"name": "APROVCLITYPE"
													}
												},
												{
													"source": {
														"name": "MLEVELAPROV"
													},
													"sink": {
														"name": "MLEVELAPROV"
													}
												},
												{
													"source": {
														"name": "CLIENTAPROV"
													},
													"sink": {
														"name": "CLIENTAPROV"
													}
												},
												{
													"source": {
														"name": "PACKAGE"
													},
													"sink": {
														"name": "PACKAGE"
													}
												},
												{
													"source": {
														"name": "PROJECT"
													},
													"sink": {
														"name": "PROJECT"
													}
												},
												{
													"source": {
														"name": "WORKFLOW"
													},
													"sink": {
														"name": "WORKFLOW"
													}
												},
												{
													"source": {
														"name": "REQWORKFLOW"
													},
													"sink": {
														"name": "REQWORKFLOW"
													}
												},
												{
													"source": {
														"name": "ORIGCATEGORY"
													},
													"sink": {
														"name": "ORIGCATEGORY"
													}
												},
												{
													"source": {
														"name": "ORIGPRODUCT"
													},
													"sink": {
														"name": "ORIGPRODUCT"
													}
												},
												{
													"source": {
														"name": "ORIGPROCESS"
													},
													"sink": {
														"name": "ORIGPROCESS"
													}
												},
												{
													"source": {
														"name": "TOTALATTACH"
													},
													"sink": {
														"name": "TOTALATTACH"
													}
												},
												{
													"source": {
														"name": "TOTALATTACHACT"
													},
													"sink": {
														"name": "TOTALATTACHACT"
													}
												},
												{
													"source": {
														"name": "INSERTDATE"
													},
													"sink": {
														"name": "INSERTDATE"
													}
												},
												{
													"source": {
														"name": "QFORM"
													},
													"sink": {
														"name": "QFORM"
													}
												},
												{
													"source": {
														"name": "QSURVEY"
													},
													"sink": {
														"name": "QSURVEY"
													}
												},
												{
													"source": {
														"name": "QSESSIONFORM"
													},
													"sink": {
														"name": "QSESSIONFORM"
													}
												},
												{
													"source": {
														"name": "QSESSIONSURVEY"
													},
													"sink": {
														"name": "QSESSIONSURVEY"
													}
												},
												{
													"source": {
														"name": "TEMPO_RESOLUCAO"
													},
													"sink": {
														"name": "TEMPO_RESOLUCAO"
													}
												},
												{
													"source": {
														"name": "PRAZO_RESL"
													},
													"sink": {
														"name": "PRAZO_RESL"
													}
												},
												{
													"source": {
														"name": "TEMPO_REPOSTA"
													},
													"sink": {
														"name": "TEMPO_REPOSTA"
													}
												},
												{
													"source": {
														"name": "PRAZO_RESP"
													},
													"sink": {
														"name": "PRAZO_RESP"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_REQUESTS",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_REQUESTS",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check sessions file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Clear all tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QSESSION",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Sessions file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check sessions file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check sessions file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send session failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QSESSION não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QSESSION não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy sessions",
									"description": "Copy sessions data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "QSESSION",
														"type": "String"
													},
													"sink": {
														"name": "QSESSION"
													}
												},
												{
													"source": {
														"name": "QSESSIONTITLE",
														"type": "String"
													},
													"sink": {
														"name": "QSESSIONTITLE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QCLIENT",
														"type": "String"
													},
													"sink": {
														"name": "QCLIENT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QFORM",
														"type": "String"
													},
													"sink": {
														"name": "QFORM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QVERSION",
														"type": "String"
													},
													"sink": {
														"name": "QVERSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "QSTATUS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWERDATE",
														"type": "String"
													},
													"sink": {
														"name": "QANSWERDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QEXPDATE",
														"type": "String"
													},
													"sink": {
														"name": "QEXPDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QAPPLICATION",
														"type": "String"
													},
													"sink": {
														"name": "QAPPLICATION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSURVEYTYPE",
														"type": "String"
													},
													"sink": {
														"name": "QSURVEYTYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "REQLOCATION",
														"type": "String"
													},
													"sink": {
														"name": "REQLOCATION",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QSESSION",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QSESSION",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check answers file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Clear all tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QANSWER",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Answers file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check answers file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check answers file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send answers failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QANSWER não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QANSWER não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy answers",
									"description": "Copy answers data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "QSESSION",
														"type": "String"
													},
													"sink": {
														"name": "QSESSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QUESTION",
														"type": "String"
													},
													"sink": {
														"name": "QUESTION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWER",
														"type": "String"
													},
													"sink": {
														"name": "QANSWER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWERED",
														"type": "String"
													},
													"sink": {
														"name": "QANSWERED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWERDATE",
														"type": "String"
													},
													"sink": {
														"name": "QANSWERDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSHOW",
														"type": "String"
													},
													"sink": {
														"name": "QSHOW",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QORDER",
														"type": "String"
													},
													"sink": {
														"name": "QORDER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QUPDATED",
														"type": "String"
													},
													"sink": {
														"name": "QUPDATED",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QANSWER",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QANSWER",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Update clients",
									"description": "Transport [UNIDADE ATENDIMENTO] field from answers table to requests table, for time saving in queries",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy answers",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_UPDATEREQUESTCLIENT]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Centro de Custo",
									"description": "",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Update clients",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_DESCRICAOCENTRODECUSTO]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Regionais",
									"description": "",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Centro de Custo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_REGIONALREQUESTIA]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Check table answers file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Clear all tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QTABLEANSWER",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Table answers file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check table answers file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check table answers file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send table answer failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QTABLEANSWER não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QTABLEANSWER não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy table answers",
									"description": "Copy anwers table data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "QSESSION",
														"type": "String"
													},
													"sink": {
														"name": "QSESSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TABLE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "TABLE_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TABLE_ROWID",
														"type": "String"
													},
													"sink": {
														"name": "TABLE_ROWID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TABLE_ROWNUM",
														"type": "String"
													},
													"sink": {
														"name": "TABLE_ROWNUM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_NAME",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_VALUE",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_VALUE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_POSITION",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_POSITION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_ANSWERED",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_ANSWERED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_ANSWERDATE",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_ANSWERDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_UPDATED",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_UPDATED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_VISIBLE",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_VISIBLE",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QTABLEANSWER",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QTABLEANSWER",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check table actions file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Clear all tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QTABLEACTION",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Table actions file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check table actions file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check table actions file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send table answer failure_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QTABLEANSWER não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QTABLEANSWER não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy table actions",
									"description": "Copy actions table data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "REQUEST",
														"type": "String"
													},
													"sink": {
														"name": "REQUEST"
													}
												},
												{
													"source": {
														"name": "ACTTYPE",
														"type": "String"
													},
													"sink": {
														"name": "ACTTYPE"
													}
												},
												{
													"source": {
														"name": "LASTANAL",
														"type": "String"
													},
													"sink": {
														"name": "LASTANAL"
													}
												},
												{
													"source": {
														"name": "CURRSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "CURRSTATUS"
													}
												},
												{
													"source": {
														"name": "ACTDATE",
														"type": "String"
													},
													"sink": {
														"name": "ACTDATE"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QTABLEACTION",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QTABLEACTION",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Convert Date",
									"description": "Update calculated fields (for example, SLA formula, datetime conversions, business hours difference) for time saving in queries",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy table actions",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_CONVERTDATES]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Apoio/OLD´s"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-20T18:04:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/FILE_REQUESTS')]",
				"[concat(variables('factoryId'), '/datasets/FILE_QSESSION')]",
				"[concat(variables('factoryId'), '/datasets/FILE_QANSWER')]",
				"[concat(variables('factoryId'), '/datasets/FILE_QTABLEANSWER')]",
				"[concat(variables('factoryId'), '/datasets/FILE_QTABLEACTION')]",
				"[concat(variables('factoryId'), '/pipelines/Send email')]",
				"[concat(variables('factoryId'), '/datasets/TABLE_REQUESTS')]",
				"[concat(variables('factoryId'), '/datasets/TABLE_QSESSION')]",
				"[concat(variables('factoryId'), '/datasets/TABLE_QANSWER')]",
				"[concat(variables('factoryId'), '/datasets/TABLE_QTABLEANSWER')]",
				"[concat(variables('factoryId'), '/datasets/TABLE_QTABLEACTION')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Chamados Requestia - Teste')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Check table actions file exists",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QTABLEACTION",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Table actions file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check table actions file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check table actions file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send table answer failure_copy1",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QTABLEANSWER não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QTABLEANSWER não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy table actions",
									"description": "Copy actions table data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "REQUEST",
														"type": "String"
													},
													"sink": {
														"name": "REQUEST"
													}
												},
												{
													"source": {
														"name": "ACTTYPE",
														"type": "String"
													},
													"sink": {
														"name": "ACTTYPE"
													}
												},
												{
													"source": {
														"name": "LASTANAL",
														"type": "String"
													},
													"sink": {
														"name": "LASTANAL"
													}
												},
												{
													"source": {
														"name": "CURRSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "CURRSTATUS"
													}
												},
												{
													"source": {
														"name": "ACTDATE",
														"type": "String"
													},
													"sink": {
														"name": "ACTDATE"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QTABLEACTION",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QTABLEACTION",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Convert Date",
									"description": "Update convert date",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy table actions",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_CONVERTDATES]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Apoio/OLD´s"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-20T18:04:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/FILE_QTABLEACTION')]",
				"[concat(variables('factoryId'), '/pipelines/Send email')]",
				"[concat(variables('factoryId'), '/datasets/TABLE_QTABLEACTION')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Chamados Requestia')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Clear all tables",
						"description": "Truncate all Requestia's tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_TRUNCATEREQUESTS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Check request file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Clear all tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_REQUESTS",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Requests file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check request file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check request file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send requests failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "csi.ti@opty.com.br",
											"Subject": "Arquivo Requestia\\REQUESTS não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\REQUESTS não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Calculate fields",
									"description": "Update calculated fields (for example, SLA formula, datetime conversions, business hours difference) for time saving in queries",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy requests",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_CALCULATEREQUESTS]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Altera chamado em pausa",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Calculate fields",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_ALTERACHAMADOSPAUSADOS]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Copy requests",
									"description": "Copy requests data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "REQUEST",
														"type": "String"
													},
													"sink": {
														"name": "REQUEST",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CLIENT",
														"type": "String"
													},
													"sink": {
														"name": "CLIENT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ORIGANAL",
														"type": "String"
													},
													"sink": {
														"name": "ORIGANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CURRANAL",
														"type": "String"
													},
													"sink": {
														"name": "CURRANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "GROUPANAL",
														"type": "String"
													},
													"sink": {
														"name": "GROUPANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LASTANAL",
														"type": "String"
													},
													"sink": {
														"name": "LASTANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LASTANLGRP",
														"type": "String"
													},
													"sink": {
														"name": "LASTANLGRP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ORIGGROUP",
														"type": "String"
													},
													"sink": {
														"name": "ORIGGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CURRGROUP",
														"type": "String"
													},
													"sink": {
														"name": "CURRGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LASTGROUP",
														"type": "String"
													},
													"sink": {
														"name": "LASTGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "GRGROUP",
														"type": "String"
													},
													"sink": {
														"name": "GRGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CATEGORY",
														"type": "String"
													},
													"sink": {
														"name": "CATEGORY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RPRIORITY",
														"type": "String"
													},
													"sink": {
														"name": "RPRIORITY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PRODUCT",
														"type": "String"
													},
													"sink": {
														"name": "PRODUCT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PROCESS",
														"type": "String"
													},
													"sink": {
														"name": "PROCESS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PROBLEM",
														"type": "String"
													},
													"sink": {
														"name": "PROBLEM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "RSTATUS"
													}
												},
												{
													"source": {
														"name": "REQTYPE",
														"type": "String"
													},
													"sink": {
														"name": "REQTYPE"
													}
												},
												{
													"source": {
														"name": "REQSOURCE",
														"type": "String"
													},
													"sink": {
														"name": "REQSOURCE"
													}
												},
												{
													"source": {
														"name": "LOCATION",
														"type": "String"
													},
													"sink": {
														"name": "REQLOCATION"
													}
												},
												{
													"source": {
														"name": "ORGUNIT",
														"type": "String"
													},
													"sink": {
														"name": "ORGUNIT"
													}
												},
												{
													"source": {
														"name": "ORGUNIT_ROOT",
														"type": "String"
													},
													"sink": {
														"name": "ORGUNIT_ROOT"
													}
												},
												{
													"source": {
														"name": "CHARGE",
														"type": "String"
													},
													"sink": {
														"name": "CHARGE"
													}
												},
												{
													"source": {
														"name": "SLEVEL",
														"type": "String"
													},
													"sink": {
														"name": "SLEVEL"
													}
												},
												{
													"source": {
														"name": "EQUIP",
														"type": "String"
													},
													"sink": {
														"name": "EQUIP"
													}
												},
												{
													"source": {
														"name": "RESOURCEID",
														"type": "String"
													},
													"sink": {
														"name": "RESOURCEID"
													}
												},
												{
													"source": {
														"name": "REQUESTOR",
														"type": "String"
													},
													"sink": {
														"name": "REQUESTOR"
													}
												},
												{
													"source": {
														"name": "OPENDATE",
														"type": "String"
													},
													"sink": {
														"name": "OPENDATE"
													}
												},
												{
													"source": {
														"name": "CLOSEDATE",
														"type": "String"
													},
													"sink": {
														"name": "CLOSEDATE"
													}
												},
												{
													"source": {
														"name": "CLOSED",
														"type": "String"
													},
													"sink": {
														"name": "CLOSED"
													}
												},
												{
													"source": {
														"name": "LASTACTION",
														"type": "String"
													},
													"sink": {
														"name": "LASTACTION"
													}
												},
												{
													"source": {
														"name": "LASTANALYST",
														"type": "String"
													},
													"sink": {
														"name": "LASTANALYST"
													}
												},
												{
													"source": {
														"name": "LASTSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "LASTSTATUS"
													}
												},
												{
													"source": {
														"name": "LASTPRIORITY",
														"type": "String"
													},
													"sink": {
														"name": "LASTPRIORITY"
													}
												},
												{
													"source": {
														"name": "LASTREOPEN",
														"type": "String"
													},
													"sink": {
														"name": "LASTREOPEN"
													}
												},
												{
													"source": {
														"name": "LASTACTIONATEND",
														"type": "String"
													},
													"sink": {
														"name": "LASTACTIONATEND"
													}
												},
												{
													"source": {
														"name": "LASTACTTYPE",
														"type": "String"
													},
													"sink": {
														"name": "LASTACTTYPE"
													}
												},
												{
													"source": {
														"name": "RESPDATE",
														"type": "String"
													},
													"sink": {
														"name": "RESPDATE"
													}
												},
												{
													"source": {
														"name": "RESPTIME",
														"type": "String"
													},
													"sink": {
														"name": "RESPTIME"
													}
												},
												{
													"source": {
														"name": "RESLTIME",
														"type": "String"
													},
													"sink": {
														"name": "RESLTIME"
													}
												},
												{
													"source": {
														"name": "RESPMINS",
														"type": "String"
													},
													"sink": {
														"name": "RESPMINS"
													}
												},
												{
													"source": {
														"name": "RESLMINS",
														"type": "String"
													},
													"sink": {
														"name": "RESLMINS"
													}
												},
												{
													"source": {
														"name": "RESPREMAINS",
														"type": "String"
													},
													"sink": {
														"name": "RESPREMAINS"
													}
												},
												{
													"source": {
														"name": "RESLREMAINS",
														"type": "String"
													},
													"sink": {
														"name": "RESLREMAINS"
													}
												},
												{
													"source": {
														"name": "RESPMODE",
														"type": "String"
													},
													"sink": {
														"name": "RESPMODE"
													}
												},
												{
													"source": {
														"name": "RESLMODE",
														"type": "String"
													},
													"sink": {
														"name": "RESLMODE"
													}
												},
												{
													"source": {
														"name": "NOCOMPUTE",
														"type": "String"
													},
													"sink": {
														"name": "NOCOMPUTE"
													}
												},
												{
													"source": {
														"name": "RLOCKED",
														"type": "String"
													},
													"sink": {
														"name": "RLOCKED"
													}
												},
												{
													"source": {
														"name": "ESTIMCOST",
														"type": "String"
													},
													"sink": {
														"name": "ESTIMCOST"
													}
												},
												{
													"source": {
														"name": "TOTALCOST",
														"type": "String"
													},
													"sink": {
														"name": "TOTALCOST"
													}
												},
												{
													"source": {
														"name": "APROVANLTYPE",
														"type": "String"
													},
													"sink": {
														"name": "APROVANLTYPE"
													}
												},
												{
													"source": {
														"name": "APROVCLITYPE",
														"type": "String"
													},
													"sink": {
														"name": "APROVCLITYPE"
													}
												},
												{
													"source": {
														"name": "MLEVELAPROV",
														"type": "String"
													},
													"sink": {
														"name": "MLEVELAPROV"
													}
												},
												{
													"source": {
														"name": "CLIENTAPROV",
														"type": "String"
													},
													"sink": {
														"name": "CLIENTAPROV"
													}
												},
												{
													"source": {
														"name": "PACKAGE",
														"type": "String"
													},
													"sink": {
														"name": "PACKAGE"
													}
												},
												{
													"source": {
														"name": "PROJECT",
														"type": "String"
													},
													"sink": {
														"name": "PROJECT"
													}
												},
												{
													"source": {
														"name": "WORKFLOW",
														"type": "String"
													},
													"sink": {
														"name": "WORKFLOW"
													}
												},
												{
													"source": {
														"name": "REQWORKFLOW",
														"type": "String"
													},
													"sink": {
														"name": "REQWORKFLOW"
													}
												},
												{
													"source": {
														"name": "ORIGCATEGORY",
														"type": "String"
													},
													"sink": {
														"name": "ORIGCATEGORY"
													}
												},
												{
													"source": {
														"name": "ORIGPRODUCT",
														"type": "String"
													},
													"sink": {
														"name": "ORIGPRODUCT"
													}
												},
												{
													"source": {
														"name": "ORIGPROCESS",
														"type": "String"
													},
													"sink": {
														"name": "ORIGPROCESS"
													}
												},
												{
													"source": {
														"name": "TOTALATTACH",
														"type": "String"
													},
													"sink": {
														"name": "TOTALATTACH"
													}
												},
												{
													"source": {
														"name": "TOTALATTACHACT",
														"type": "String"
													},
													"sink": {
														"name": "TOTALATTACHACT"
													}
												},
												{
													"source": {
														"name": "INSERTDATE",
														"type": "String"
													},
													"sink": {
														"name": "INSERTDATE"
													}
												},
												{
													"source": {
														"name": "QFORM",
														"type": "String"
													},
													"sink": {
														"name": "QFORM"
													}
												},
												{
													"source": {
														"name": "QSURVEY",
														"type": "String"
													},
													"sink": {
														"name": "QSURVEY"
													}
												},
												{
													"source": {
														"name": "QSESSIONFORM",
														"type": "String"
													},
													"sink": {
														"name": "QSESSIONFORM"
													}
												},
												{
													"source": {
														"name": "QSESSIONSURVEY",
														"type": "String"
													},
													"sink": {
														"name": "QSESSIONSURVEY"
													}
												},
												{
													"source": {
														"name": "TEMPO_RESOLUCAO",
														"type": "String"
													},
													"sink": {
														"name": "TEMPO_RESOLUCAO"
													}
												},
												{
													"source": {
														"name": "PRAZO_RESL",
														"type": "String"
													},
													"sink": {
														"name": "PRAZO_RESL"
													}
												},
												{
													"source": {
														"name": "TEMPO_REPOSTA",
														"type": "String"
													},
													"sink": {
														"name": "TEMPO_REPOSTA"
													}
												},
												{
													"source": {
														"name": "PRAZO_RESP",
														"type": "String"
													},
													"sink": {
														"name": "PRAZO_RESP"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_REQUESTS",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_REQUESTS",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check sessions file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Clear all tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QSESSION",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Sessions file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check sessions file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check sessions file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send session failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QSESSION não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QSESSION não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy sessions",
									"description": "Copy sessions data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "QSESSION",
														"type": "String"
													},
													"sink": {
														"name": "QSESSION"
													}
												},
												{
													"source": {
														"name": "QSESSIONTITLE",
														"type": "String"
													},
													"sink": {
														"name": "QSESSIONTITLE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QCLIENT",
														"type": "String"
													},
													"sink": {
														"name": "QCLIENT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QFORM",
														"type": "String"
													},
													"sink": {
														"name": "QFORM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QVERSION",
														"type": "String"
													},
													"sink": {
														"name": "QVERSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "QSTATUS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWERDATE",
														"type": "String"
													},
													"sink": {
														"name": "QANSWERDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QEXPDATE",
														"type": "String"
													},
													"sink": {
														"name": "QEXPDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QAPPLICATION",
														"type": "String"
													},
													"sink": {
														"name": "QAPPLICATION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSURVEYTYPE",
														"type": "String"
													},
													"sink": {
														"name": "QSURVEYTYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "REQLOCATION",
														"type": "String"
													},
													"sink": {
														"name": "REQLOCATION",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QSESSION",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QSESSION",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check answers file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Clear all tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QANSWER",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Answers file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check answers file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check answers file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send answers failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QANSWER não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QANSWER não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy answers",
									"description": "Copy answers data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "QSESSION",
														"type": "String"
													},
													"sink": {
														"name": "QSESSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QUESTION",
														"type": "String"
													},
													"sink": {
														"name": "QUESTION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWER",
														"type": "String"
													},
													"sink": {
														"name": "QANSWER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWERED",
														"type": "String"
													},
													"sink": {
														"name": "QANSWERED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWERDATE",
														"type": "String"
													},
													"sink": {
														"name": "QANSWERDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSHOW",
														"type": "String"
													},
													"sink": {
														"name": "QSHOW",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QORDER",
														"type": "String"
													},
													"sink": {
														"name": "QORDER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QUPDATED",
														"type": "String"
													},
													"sink": {
														"name": "QUPDATED",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QANSWER",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QANSWER",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Update clients",
									"description": "Transport [UNIDADE ATENDIMENTO] field from answers table to requests table, for time saving in queries",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy answers",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_UPDATEREQUESTCLIENT]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Centro de Custo",
									"description": "",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Update clients",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_DESCRICAOCENTRODECUSTO]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Regionais",
									"description": "",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Centro de Custo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_REGIONALREQUESTIA]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Check table answers file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Clear all tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QTABLEANSWER",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Table answers file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check table answers file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check table answers file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send table answer failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QTABLEANSWER não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QTABLEANSWER não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy table answers",
									"description": "Copy anwers table data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "QSESSION",
														"type": "String"
													},
													"sink": {
														"name": "QSESSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TABLE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "TABLE_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TABLE_ROWID",
														"type": "String"
													},
													"sink": {
														"name": "TABLE_ROWID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TABLE_ROWNUM",
														"type": "String"
													},
													"sink": {
														"name": "TABLE_ROWNUM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_NAME",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_VALUE",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_VALUE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_POSITION",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_POSITION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_ANSWERED",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_ANSWERED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_ANSWERDATE",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_ANSWERDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_UPDATED",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_UPDATED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_VISIBLE",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_VISIBLE",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QTABLEANSWER",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QTABLEANSWER",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Apoio"
				},
				"annotations": [],
				"lastPublishTime": "2021-02-17T17:43:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/FILE_REQUESTS')]",
				"[concat(variables('factoryId'), '/datasets/FILE_QSESSION')]",
				"[concat(variables('factoryId'), '/datasets/FILE_QANSWER')]",
				"[concat(variables('factoryId'), '/datasets/FILE_QTABLEANSWER')]",
				"[concat(variables('factoryId'), '/pipelines/Send email')]",
				"[concat(variables('factoryId'), '/datasets/TABLE_REQUESTS')]",
				"[concat(variables('factoryId'), '/datasets/TABLE_QSESSION')]",
				"[concat(variables('factoryId'), '/datasets/TABLE_QANSWER')]",
				"[concat(variables('factoryId'), '/datasets/TABLE_QTABLEANSWER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Chamados Requestia_Otim_Deadlock')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Clear all tables",
						"description": "Truncate all Requestia's tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_TRUNCATEREQUESTS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Check request file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Clear all tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_REQUESTS_NEW",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Requests file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check request file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check request file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send requests failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "csi.ti@opty.com.br",
											"Subject": "Arquivo Requestia\\REQUESTS não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\REQUESTS não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Calculate fields",
									"description": "Update calculated fields (for example, SLA formula, datetime conversions, business hours difference) for time saving in queries",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy requests",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_CALCULATEREQUESTS]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Altera chamado em pausa",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Calculate fields",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_ALTERACHAMADOSPAUSADOS]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Copy requests",
									"description": "Copy requests data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "REQUEST",
														"type": "String"
													},
													"sink": {
														"name": "REQUEST",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CLIENT",
														"type": "String"
													},
													"sink": {
														"name": "CLIENT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ORIGANAL",
														"type": "String"
													},
													"sink": {
														"name": "ORIGANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CURRANAL",
														"type": "String"
													},
													"sink": {
														"name": "CURRANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "GROUPANAL",
														"type": "String"
													},
													"sink": {
														"name": "GROUPANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LASTANAL",
														"type": "String"
													},
													"sink": {
														"name": "LASTANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LASTANLGRP",
														"type": "String"
													},
													"sink": {
														"name": "LASTANLGRP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ORIGGROUP",
														"type": "String"
													},
													"sink": {
														"name": "ORIGGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CURRGROUP",
														"type": "String"
													},
													"sink": {
														"name": "CURRGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LASTGROUP",
														"type": "String"
													},
													"sink": {
														"name": "LASTGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "GRGROUP",
														"type": "String"
													},
													"sink": {
														"name": "GRGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CATEGORY",
														"type": "String"
													},
													"sink": {
														"name": "CATEGORY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RPRIORITY",
														"type": "String"
													},
													"sink": {
														"name": "RPRIORITY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PRODUCT",
														"type": "String"
													},
													"sink": {
														"name": "PRODUCT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PROCESS",
														"type": "String"
													},
													"sink": {
														"name": "PROCESS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PROBLEM",
														"type": "String"
													},
													"sink": {
														"name": "PROBLEM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "RSTATUS"
													}
												},
												{
													"source": {
														"name": "REQTYPE",
														"type": "String"
													},
													"sink": {
														"name": "REQTYPE"
													}
												},
												{
													"source": {
														"name": "REQSOURCE",
														"type": "String"
													},
													"sink": {
														"name": "REQSOURCE"
													}
												},
												{
													"source": {
														"name": "LOCATION",
														"type": "String"
													},
													"sink": {
														"name": "REQLOCATION"
													}
												},
												{
													"source": {
														"name": "ORGUNIT",
														"type": "String"
													},
													"sink": {
														"name": "ORGUNIT"
													}
												},
												{
													"source": {
														"name": "ORGUNIT_ROOT",
														"type": "String"
													},
													"sink": {
														"name": "ORGUNIT_ROOT"
													}
												},
												{
													"source": {
														"name": "CHARGE",
														"type": "String"
													},
													"sink": {
														"name": "CHARGE"
													}
												},
												{
													"source": {
														"name": "SLEVEL",
														"type": "String"
													},
													"sink": {
														"name": "SLEVEL"
													}
												},
												{
													"source": {
														"name": "EQUIP",
														"type": "String"
													},
													"sink": {
														"name": "EQUIP"
													}
												},
												{
													"source": {
														"name": "RESOURCEID",
														"type": "String"
													},
													"sink": {
														"name": "RESOURCEID"
													}
												},
												{
													"source": {
														"name": "REQUESTOR",
														"type": "String"
													},
													"sink": {
														"name": "REQUESTOR"
													}
												},
												{
													"source": {
														"name": "OPENDATE",
														"type": "String"
													},
													"sink": {
														"name": "OPENDATE"
													}
												},
												{
													"source": {
														"name": "CLOSEDATE",
														"type": "String"
													},
													"sink": {
														"name": "CLOSEDATE"
													}
												},
												{
													"source": {
														"name": "CLOSED",
														"type": "String"
													},
													"sink": {
														"name": "CLOSED"
													}
												},
												{
													"source": {
														"name": "LASTACTION",
														"type": "String"
													},
													"sink": {
														"name": "LASTACTION"
													}
												},
												{
													"source": {
														"name": "LASTANALYST",
														"type": "String"
													},
													"sink": {
														"name": "LASTANALYST"
													}
												},
												{
													"source": {
														"name": "LASTSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "LASTSTATUS"
													}
												},
												{
													"source": {
														"name": "LASTPRIORITY",
														"type": "String"
													},
													"sink": {
														"name": "LASTPRIORITY"
													}
												},
												{
													"source": {
														"name": "LASTREOPEN",
														"type": "String"
													},
													"sink": {
														"name": "LASTREOPEN"
													}
												},
												{
													"source": {
														"name": "LASTACTIONATEND",
														"type": "String"
													},
													"sink": {
														"name": "LASTACTIONATEND"
													}
												},
												{
													"source": {
														"name": "LASTACTTYPE",
														"type": "String"
													},
													"sink": {
														"name": "LASTACTTYPE"
													}
												},
												{
													"source": {
														"name": "RESPDATE",
														"type": "String"
													},
													"sink": {
														"name": "RESPDATE"
													}
												},
												{
													"source": {
														"name": "RESPTIME",
														"type": "String"
													},
													"sink": {
														"name": "RESPTIME"
													}
												},
												{
													"source": {
														"name": "RESLTIME",
														"type": "String"
													},
													"sink": {
														"name": "RESLTIME"
													}
												},
												{
													"source": {
														"name": "RESPMINS",
														"type": "String"
													},
													"sink": {
														"name": "RESPMINS"
													}
												},
												{
													"source": {
														"name": "RESLMINS",
														"type": "String"
													},
													"sink": {
														"name": "RESLMINS"
													}
												},
												{
													"source": {
														"name": "RESPREMAINS",
														"type": "String"
													},
													"sink": {
														"name": "RESPREMAINS"
													}
												},
												{
													"source": {
														"name": "RESLREMAINS",
														"type": "String"
													},
													"sink": {
														"name": "RESLREMAINS"
													}
												},
												{
													"source": {
														"name": "RESPMODE",
														"type": "String"
													},
													"sink": {
														"name": "RESPMODE"
													}
												},
												{
													"source": {
														"name": "RESLMODE",
														"type": "String"
													},
													"sink": {
														"name": "RESLMODE"
													}
												},
												{
													"source": {
														"name": "NOCOMPUTE",
														"type": "String"
													},
													"sink": {
														"name": "NOCOMPUTE"
													}
												},
												{
													"source": {
														"name": "RLOCKED",
														"type": "String"
													},
													"sink": {
														"name": "RLOCKED"
													}
												},
												{
													"source": {
														"name": "ESTIMCOST",
														"type": "String"
													},
													"sink": {
														"name": "ESTIMCOST"
													}
												},
												{
													"source": {
														"name": "TOTALCOST",
														"type": "String"
													},
													"sink": {
														"name": "TOTALCOST"
													}
												},
												{
													"source": {
														"name": "APROVANLTYPE",
														"type": "String"
													},
													"sink": {
														"name": "APROVANLTYPE"
													}
												},
												{
													"source": {
														"name": "APROVCLITYPE",
														"type": "String"
													},
													"sink": {
														"name": "APROVCLITYPE"
													}
												},
												{
													"source": {
														"name": "MLEVELAPROV",
														"type": "String"
													},
													"sink": {
														"name": "MLEVELAPROV"
													}
												},
												{
													"source": {
														"name": "CLIENTAPROV",
														"type": "String"
													},
													"sink": {
														"name": "CLIENTAPROV"
													}
												},
												{
													"source": {
														"name": "PACKAGE",
														"type": "String"
													},
													"sink": {
														"name": "PACKAGE"
													}
												},
												{
													"source": {
														"name": "PROJECT",
														"type": "String"
													},
													"sink": {
														"name": "PROJECT"
													}
												},
												{
													"source": {
														"name": "WORKFLOW",
														"type": "String"
													},
													"sink": {
														"name": "WORKFLOW"
													}
												},
												{
													"source": {
														"name": "REQWORKFLOW",
														"type": "String"
													},
													"sink": {
														"name": "REQWORKFLOW"
													}
												},
												{
													"source": {
														"name": "ORIGCATEGORY",
														"type": "String"
													},
													"sink": {
														"name": "ORIGCATEGORY"
													}
												},
												{
													"source": {
														"name": "ORIGPRODUCT",
														"type": "String"
													},
													"sink": {
														"name": "ORIGPRODUCT"
													}
												},
												{
													"source": {
														"name": "ORIGPROCESS",
														"type": "String"
													},
													"sink": {
														"name": "ORIGPROCESS"
													}
												},
												{
													"source": {
														"name": "TOTALATTACH",
														"type": "String"
													},
													"sink": {
														"name": "TOTALATTACH"
													}
												},
												{
													"source": {
														"name": "TOTALATTACHACT",
														"type": "String"
													},
													"sink": {
														"name": "TOTALATTACHACT"
													}
												},
												{
													"source": {
														"name": "INSERTDATE",
														"type": "String"
													},
													"sink": {
														"name": "INSERTDATE"
													}
												},
												{
													"source": {
														"name": "QFORM",
														"type": "String"
													},
													"sink": {
														"name": "QFORM"
													}
												},
												{
													"source": {
														"name": "QSURVEY",
														"type": "String"
													},
													"sink": {
														"name": "QSURVEY"
													}
												},
												{
													"source": {
														"name": "QSESSIONFORM",
														"type": "String"
													},
													"sink": {
														"name": "QSESSIONFORM"
													}
												},
												{
													"source": {
														"name": "QSESSIONSURVEY",
														"type": "String"
													},
													"sink": {
														"name": "QSESSIONSURVEY"
													}
												},
												{
													"source": {
														"name": "TEMPO_RESOLUCAO",
														"type": "String"
													},
													"sink": {
														"name": "TEMPO_RESOLUCAO"
													}
												},
												{
													"source": {
														"name": "PRAZO_RESL",
														"type": "String"
													},
													"sink": {
														"name": "PRAZO_RESL"
													}
												},
												{
													"source": {
														"name": "TEMPO_REPOSTA",
														"type": "String"
													},
													"sink": {
														"name": "TEMPO_REPOSTA"
													}
												},
												{
													"source": {
														"name": "PRAZO_RESP",
														"type": "String"
													},
													"sink": {
														"name": "PRAZO_RESP"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_REQUESTS_NEW",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_REQUESTS",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check sessions file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Requests file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QSESSION_NEW",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Sessions file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check sessions file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check sessions file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send session failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QSESSION não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QSESSION não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy sessions",
									"description": "Copy sessions data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "QSESSION",
														"type": "String"
													},
													"sink": {
														"name": "QSESSION"
													}
												},
												{
													"source": {
														"name": "QSESSIONTITLE",
														"type": "String"
													},
													"sink": {
														"name": "QSESSIONTITLE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QCLIENT",
														"type": "String"
													},
													"sink": {
														"name": "QCLIENT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QFORM",
														"type": "String"
													},
													"sink": {
														"name": "QFORM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QVERSION",
														"type": "String"
													},
													"sink": {
														"name": "QVERSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "QSTATUS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWERDATE",
														"type": "String"
													},
													"sink": {
														"name": "QANSWERDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QEXPDATE",
														"type": "String"
													},
													"sink": {
														"name": "QEXPDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QAPPLICATION",
														"type": "String"
													},
													"sink": {
														"name": "QAPPLICATION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSURVEYTYPE",
														"type": "String"
													},
													"sink": {
														"name": "QSURVEYTYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "REQLOCATION",
														"type": "String"
													},
													"sink": {
														"name": "REQLOCATION",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QSESSION_NEW",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QSESSION",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check answers file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Sessions file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QANSWER_NEW",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Answers file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check answers file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check answers file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send answers failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QANSWER não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QANSWER não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy answers",
									"description": "Copy answers data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "QSESSION",
														"type": "String"
													},
													"sink": {
														"name": "QSESSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QUESTION",
														"type": "String"
													},
													"sink": {
														"name": "QUESTION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWER",
														"type": "String"
													},
													"sink": {
														"name": "QANSWER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWERED",
														"type": "String"
													},
													"sink": {
														"name": "QANSWERED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWERDATE",
														"type": "String"
													},
													"sink": {
														"name": "QANSWERDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSHOW",
														"type": "String"
													},
													"sink": {
														"name": "QSHOW",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QORDER",
														"type": "String"
													},
													"sink": {
														"name": "QORDER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QUPDATED",
														"type": "String"
													},
													"sink": {
														"name": "QUPDATED",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QANSWER_NEW",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QANSWER",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Update clients",
									"description": "Transport [UNIDADE ATENDIMENTO] field from answers table to requests table, for time saving in queries",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy answers",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_UPDATEREQUESTCLIENT]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Regionais",
									"description": "",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Update clients",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_REGIONALREQUESTIA]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Check table answers file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Answers file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QTABLEANSWER_NEW",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Table answers file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check table answers file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check table answers file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send table answer failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QTABLEANSWER não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QTABLEANSWER não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy table answers",
									"description": "Copy anwers table data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "QSESSION",
														"type": "String"
													},
													"sink": {
														"name": "QSESSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TABLE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "TABLE_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TABLE_ROWID",
														"type": "String"
													},
													"sink": {
														"name": "TABLE_ROWID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TABLE_ROWNUM",
														"type": "String"
													},
													"sink": {
														"name": "TABLE_ROWNUM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_NAME",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_VALUE",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_VALUE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_POSITION",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_POSITION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_ANSWERED",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_ANSWERED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_ANSWERDATE",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_ANSWERDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_UPDATED",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_UPDATED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_VISIBLE",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_VISIBLE",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QTABLEANSWER_NEW",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QTABLEANSWER",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check table Actions",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Table answers file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_ACTION",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Copy table Actions",
						"description": "",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Check table Actions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "TRUNCATE TABLE STG.REQUESTIA_ACTIONS",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "FILE_ACTION",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": {
										"value": "REQUESTIA_ACTIONS",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Check table Survey",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Copy table Actions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_SURVEY",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Copy table Survey",
						"description": "",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Check table Survey",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "TRUNCATE TABLE STG.REQUESTIA_HO_AUX_SURVEY",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "FILE_SURVEY",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": {
										"value": "REQUESTIA_HO_AUX_SURVEY",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Apoio"
				},
				"annotations": [],
				"lastPublishTime": "2021-02-17T17:43:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/FILE_REQUESTS_NEW')]",
				"[concat(variables('factoryId'), '/datasets/FILE_QSESSION_NEW')]",
				"[concat(variables('factoryId'), '/datasets/FILE_QANSWER_NEW')]",
				"[concat(variables('factoryId'), '/datasets/FILE_QTABLEANSWER_NEW')]",
				"[concat(variables('factoryId'), '/datasets/FILE_ACTION')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_STG')]",
				"[concat(variables('factoryId'), '/datasets/FILE_SURVEY')]",
				"[concat(variables('factoryId'), '/pipelines/Send email')]",
				"[concat(variables('factoryId'), '/datasets/TABLE_REQUESTS')]",
				"[concat(variables('factoryId'), '/datasets/TABLE_QSESSION')]",
				"[concat(variables('factoryId'), '/datasets/TABLE_QANSWER')]",
				"[concat(variables('factoryId'), '/datasets/TABLE_QTABLEANSWER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Chamados Requestia_Otimizado_Deadlock_OLD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Clear all tables",
						"description": "Truncate all Requestia's tables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_TRUNCATEREQUESTS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Check request file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Clear all tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_REQUESTS",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Requests file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check request file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check request file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send requests failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "csi.ti@opty.com.br",
											"Subject": "Arquivo Requestia\\REQUESTS não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\REQUESTS não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Calculate fields",
									"description": "Update calculated fields (for example, SLA formula, datetime conversions, business hours difference) for time saving in queries",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy requests",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_CALCULATEREQUESTS]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Altera chamado em pausa",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Calculate fields",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_ALTERACHAMADOSPAUSADOS]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Copy requests",
									"description": "Copy requests data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "REQUEST",
														"type": "String"
													},
													"sink": {
														"name": "REQUEST",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CLIENT",
														"type": "String"
													},
													"sink": {
														"name": "CLIENT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ORIGANAL",
														"type": "String"
													},
													"sink": {
														"name": "ORIGANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CURRANAL",
														"type": "String"
													},
													"sink": {
														"name": "CURRANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "GROUPANAL",
														"type": "String"
													},
													"sink": {
														"name": "GROUPANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LASTANAL",
														"type": "String"
													},
													"sink": {
														"name": "LASTANAL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LASTANLGRP",
														"type": "String"
													},
													"sink": {
														"name": "LASTANLGRP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ORIGGROUP",
														"type": "String"
													},
													"sink": {
														"name": "ORIGGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CURRGROUP",
														"type": "String"
													},
													"sink": {
														"name": "CURRGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "LASTGROUP",
														"type": "String"
													},
													"sink": {
														"name": "LASTGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "GRGROUP",
														"type": "String"
													},
													"sink": {
														"name": "GRGROUP",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "CATEGORY",
														"type": "String"
													},
													"sink": {
														"name": "CATEGORY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RPRIORITY",
														"type": "String"
													},
													"sink": {
														"name": "RPRIORITY",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PRODUCT",
														"type": "String"
													},
													"sink": {
														"name": "PRODUCT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PROCESS",
														"type": "String"
													},
													"sink": {
														"name": "PROCESS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "PROBLEM",
														"type": "String"
													},
													"sink": {
														"name": "PROBLEM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "RSTATUS"
													}
												},
												{
													"source": {
														"name": "REQTYPE",
														"type": "String"
													},
													"sink": {
														"name": "REQTYPE"
													}
												},
												{
													"source": {
														"name": "REQSOURCE",
														"type": "String"
													},
													"sink": {
														"name": "REQSOURCE"
													}
												},
												{
													"source": {
														"name": "LOCATION",
														"type": "String"
													},
													"sink": {
														"name": "REQLOCATION"
													}
												},
												{
													"source": {
														"name": "ORGUNIT",
														"type": "String"
													},
													"sink": {
														"name": "ORGUNIT"
													}
												},
												{
													"source": {
														"name": "ORGUNIT_ROOT",
														"type": "String"
													},
													"sink": {
														"name": "ORGUNIT_ROOT"
													}
												},
												{
													"source": {
														"name": "CHARGE",
														"type": "String"
													},
													"sink": {
														"name": "CHARGE"
													}
												},
												{
													"source": {
														"name": "SLEVEL",
														"type": "String"
													},
													"sink": {
														"name": "SLEVEL"
													}
												},
												{
													"source": {
														"name": "EQUIP",
														"type": "String"
													},
													"sink": {
														"name": "EQUIP"
													}
												},
												{
													"source": {
														"name": "RESOURCEID",
														"type": "String"
													},
													"sink": {
														"name": "RESOURCEID"
													}
												},
												{
													"source": {
														"name": "REQUESTOR",
														"type": "String"
													},
													"sink": {
														"name": "REQUESTOR"
													}
												},
												{
													"source": {
														"name": "OPENDATE",
														"type": "String"
													},
													"sink": {
														"name": "OPENDATE"
													}
												},
												{
													"source": {
														"name": "CLOSEDATE",
														"type": "String"
													},
													"sink": {
														"name": "CLOSEDATE"
													}
												},
												{
													"source": {
														"name": "CLOSED",
														"type": "String"
													},
													"sink": {
														"name": "CLOSED"
													}
												},
												{
													"source": {
														"name": "LASTACTION",
														"type": "String"
													},
													"sink": {
														"name": "LASTACTION"
													}
												},
												{
													"source": {
														"name": "LASTANALYST",
														"type": "String"
													},
													"sink": {
														"name": "LASTANALYST"
													}
												},
												{
													"source": {
														"name": "LASTSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "LASTSTATUS"
													}
												},
												{
													"source": {
														"name": "LASTPRIORITY",
														"type": "String"
													},
													"sink": {
														"name": "LASTPRIORITY"
													}
												},
												{
													"source": {
														"name": "LASTREOPEN",
														"type": "String"
													},
													"sink": {
														"name": "LASTREOPEN"
													}
												},
												{
													"source": {
														"name": "LASTACTIONATEND",
														"type": "String"
													},
													"sink": {
														"name": "LASTACTIONATEND"
													}
												},
												{
													"source": {
														"name": "LASTACTTYPE",
														"type": "String"
													},
													"sink": {
														"name": "LASTACTTYPE"
													}
												},
												{
													"source": {
														"name": "RESPDATE",
														"type": "String"
													},
													"sink": {
														"name": "RESPDATE"
													}
												},
												{
													"source": {
														"name": "RESPTIME",
														"type": "String"
													},
													"sink": {
														"name": "RESPTIME"
													}
												},
												{
													"source": {
														"name": "RESLTIME",
														"type": "String"
													},
													"sink": {
														"name": "RESLTIME"
													}
												},
												{
													"source": {
														"name": "RESPMINS",
														"type": "String"
													},
													"sink": {
														"name": "RESPMINS"
													}
												},
												{
													"source": {
														"name": "RESLMINS",
														"type": "String"
													},
													"sink": {
														"name": "RESLMINS"
													}
												},
												{
													"source": {
														"name": "RESPREMAINS",
														"type": "String"
													},
													"sink": {
														"name": "RESPREMAINS"
													}
												},
												{
													"source": {
														"name": "RESLREMAINS",
														"type": "String"
													},
													"sink": {
														"name": "RESLREMAINS"
													}
												},
												{
													"source": {
														"name": "RESPMODE",
														"type": "String"
													},
													"sink": {
														"name": "RESPMODE"
													}
												},
												{
													"source": {
														"name": "RESLMODE",
														"type": "String"
													},
													"sink": {
														"name": "RESLMODE"
													}
												},
												{
													"source": {
														"name": "NOCOMPUTE",
														"type": "String"
													},
													"sink": {
														"name": "NOCOMPUTE"
													}
												},
												{
													"source": {
														"name": "RLOCKED",
														"type": "String"
													},
													"sink": {
														"name": "RLOCKED"
													}
												},
												{
													"source": {
														"name": "ESTIMCOST",
														"type": "String"
													},
													"sink": {
														"name": "ESTIMCOST"
													}
												},
												{
													"source": {
														"name": "TOTALCOST",
														"type": "String"
													},
													"sink": {
														"name": "TOTALCOST"
													}
												},
												{
													"source": {
														"name": "APROVANLTYPE",
														"type": "String"
													},
													"sink": {
														"name": "APROVANLTYPE"
													}
												},
												{
													"source": {
														"name": "APROVCLITYPE",
														"type": "String"
													},
													"sink": {
														"name": "APROVCLITYPE"
													}
												},
												{
													"source": {
														"name": "MLEVELAPROV",
														"type": "String"
													},
													"sink": {
														"name": "MLEVELAPROV"
													}
												},
												{
													"source": {
														"name": "CLIENTAPROV",
														"type": "String"
													},
													"sink": {
														"name": "CLIENTAPROV"
													}
												},
												{
													"source": {
														"name": "PACKAGE",
														"type": "String"
													},
													"sink": {
														"name": "PACKAGE"
													}
												},
												{
													"source": {
														"name": "PROJECT",
														"type": "String"
													},
													"sink": {
														"name": "PROJECT"
													}
												},
												{
													"source": {
														"name": "WORKFLOW",
														"type": "String"
													},
													"sink": {
														"name": "WORKFLOW"
													}
												},
												{
													"source": {
														"name": "REQWORKFLOW",
														"type": "String"
													},
													"sink": {
														"name": "REQWORKFLOW"
													}
												},
												{
													"source": {
														"name": "ORIGCATEGORY",
														"type": "String"
													},
													"sink": {
														"name": "ORIGCATEGORY"
													}
												},
												{
													"source": {
														"name": "ORIGPRODUCT",
														"type": "String"
													},
													"sink": {
														"name": "ORIGPRODUCT"
													}
												},
												{
													"source": {
														"name": "ORIGPROCESS",
														"type": "String"
													},
													"sink": {
														"name": "ORIGPROCESS"
													}
												},
												{
													"source": {
														"name": "TOTALATTACH",
														"type": "String"
													},
													"sink": {
														"name": "TOTALATTACH"
													}
												},
												{
													"source": {
														"name": "TOTALATTACHACT",
														"type": "String"
													},
													"sink": {
														"name": "TOTALATTACHACT"
													}
												},
												{
													"source": {
														"name": "INSERTDATE",
														"type": "String"
													},
													"sink": {
														"name": "INSERTDATE"
													}
												},
												{
													"source": {
														"name": "QFORM",
														"type": "String"
													},
													"sink": {
														"name": "QFORM"
													}
												},
												{
													"source": {
														"name": "QSURVEY",
														"type": "String"
													},
													"sink": {
														"name": "QSURVEY"
													}
												},
												{
													"source": {
														"name": "QSESSIONFORM",
														"type": "String"
													},
													"sink": {
														"name": "QSESSIONFORM"
													}
												},
												{
													"source": {
														"name": "QSESSIONSURVEY",
														"type": "String"
													},
													"sink": {
														"name": "QSESSIONSURVEY"
													}
												},
												{
													"source": {
														"name": "TEMPO_RESOLUCAO",
														"type": "String"
													},
													"sink": {
														"name": "TEMPO_RESOLUCAO"
													}
												},
												{
													"source": {
														"name": "PRAZO_RESL",
														"type": "String"
													},
													"sink": {
														"name": "PRAZO_RESL"
													}
												},
												{
													"source": {
														"name": "TEMPO_REPOSTA",
														"type": "String"
													},
													"sink": {
														"name": "TEMPO_REPOSTA"
													}
												},
												{
													"source": {
														"name": "PRAZO_RESP",
														"type": "String"
													},
													"sink": {
														"name": "PRAZO_RESP"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_REQUESTS",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_REQUESTS",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check sessions file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Requests file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QSESSION",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Sessions file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check sessions file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check sessions file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send session failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QSESSION não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QSESSION não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy sessions",
									"description": "Copy sessions data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "QSESSION",
														"type": "String"
													},
													"sink": {
														"name": "QSESSION"
													}
												},
												{
													"source": {
														"name": "QSESSIONTITLE",
														"type": "String"
													},
													"sink": {
														"name": "QSESSIONTITLE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QCLIENT",
														"type": "String"
													},
													"sink": {
														"name": "QCLIENT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QFORM",
														"type": "String"
													},
													"sink": {
														"name": "QFORM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QVERSION",
														"type": "String"
													},
													"sink": {
														"name": "QVERSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSTATUS",
														"type": "String"
													},
													"sink": {
														"name": "QSTATUS",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWERDATE",
														"type": "String"
													},
													"sink": {
														"name": "QANSWERDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QEXPDATE",
														"type": "String"
													},
													"sink": {
														"name": "QEXPDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QAPPLICATION",
														"type": "String"
													},
													"sink": {
														"name": "QAPPLICATION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSURVEYTYPE",
														"type": "String"
													},
													"sink": {
														"name": "QSURVEYTYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "REQLOCATION",
														"type": "String"
													},
													"sink": {
														"name": "REQLOCATION",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QSESSION",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QSESSION",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check answers file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Sessions file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QANSWER",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Answers file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check answers file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check answers file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send answers failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QANSWER não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QANSWER não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy answers",
									"description": "Copy answers data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "QSESSION",
														"type": "String"
													},
													"sink": {
														"name": "QSESSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QUESTION",
														"type": "String"
													},
													"sink": {
														"name": "QUESTION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWER",
														"type": "String"
													},
													"sink": {
														"name": "QANSWER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWERED",
														"type": "String"
													},
													"sink": {
														"name": "QANSWERED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QANSWERDATE",
														"type": "String"
													},
													"sink": {
														"name": "QANSWERDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QSHOW",
														"type": "String"
													},
													"sink": {
														"name": "QSHOW",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QORDER",
														"type": "String"
													},
													"sink": {
														"name": "QORDER",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QUPDATED",
														"type": "String"
													},
													"sink": {
														"name": "QUPDATED",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QANSWER",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QANSWER",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Update clients",
									"description": "Transport [UNIDADE ATENDIMENTO] field from answers table to requests table, for time saving in queries",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy answers",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_UPDATEREQUESTCLIENT]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Centro de Custo",
									"description": "",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Update clients",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_DESCRICAOCENTRODECUSTO]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Regionais",
									"description": "",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Centro de Custo",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[sp_REGIONALREQUESTIA]"
									},
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "Check table answers file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Answers file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "FILE_QTABLEANSWER",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "Table answers file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check table answers file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check table answers file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send table answer failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Requestia\\QTABLEANSWER não encontrado!",
											"ErrorMessage": "O arquivo Requestia\\QTABLEANSWER não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy table answers",
									"description": "Copy anwers table data from CSV (stored on Power BI Gateway VM) to Azure SQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "QSESSION",
														"type": "String"
													},
													"sink": {
														"name": "QSESSION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TABLE_NAME",
														"type": "String"
													},
													"sink": {
														"name": "TABLE_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TABLE_ROWID",
														"type": "String"
													},
													"sink": {
														"name": "TABLE_ROWID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "TABLE_ROWNUM",
														"type": "String"
													},
													"sink": {
														"name": "TABLE_ROWNUM",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_NAME",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_NAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_VALUE",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_VALUE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_POSITION",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_POSITION",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_ANSWERED",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_ANSWERED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_ANSWERDATE",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_ANSWERDATE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_UPDATED",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_UPDATED",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "COLUMN_VISIBLE",
														"type": "String"
													},
													"sink": {
														"name": "COLUMN_VISIBLE",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "FILE_QTABLEANSWER",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "TABLE_QTABLEANSWER",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Apoio"
				},
				"annotations": [],
				"lastPublishTime": "2021-02-17T17:43:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/FILE_REQUESTS')]",
				"[concat(variables('factoryId'), '/datasets/FILE_QSESSION')]",
				"[concat(variables('factoryId'), '/datasets/FILE_QANSWER')]",
				"[concat(variables('factoryId'), '/datasets/FILE_QTABLEANSWER')]",
				"[concat(variables('factoryId'), '/pipelines/Send email')]",
				"[concat(variables('factoryId'), '/datasets/TABLE_REQUESTS')]",
				"[concat(variables('factoryId'), '/datasets/TABLE_QSESSION')]",
				"[concat(variables('factoryId'), '/datasets/TABLE_QANSWER')]",
				"[concat(variables('factoryId'), '/datasets/TABLE_QTABLEANSWER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cirurgias e Exames Sadalla e HOB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Alimentação da Tabela Cirurgias do Sadalla",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Truncate base",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Exames  Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\na.cd_pessoa_fisica, \na.cd_convenio, \nobter_cnpj_estabelecimento(ag.cd_estabelecimento) as cnpj,\nto_char((a.hr_inicio) , 'yyyy-mm-dd') as data_agenda,\nto_char((a.hr_inicio) , 'hh24:mi:ss') as hora_agenda,\n'Exames' as tipo_agenda,\npf.nm_pessoa_fisica as nm_paciente,\nsubstr(obter_desc_procedimento(a.cd_procedimento, a.ie_origem_proced),1,1000) as ds_procedimento_princ,\nsubstr((select Listagg(Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced), ' ;') within GROUP (ORDER BY Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced))  from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia),1,1000) as ds_procedimento_adic,\n1 + (select count(1)from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia) as ie_quantidade,\nobter_nome_usuario(a.nm_usuario_orig) as nm_usuario,\nobter_nome_pf(a.cd_medico_exec) as nm_medico,\ne.nm_fantasia_estab DS_UNIDADE,\nem.nm_razao_social MARCA,\nobter_valor_dominio(83,a.ie_status_agenda) as status_agenda,\na.nr_atendimento,\na.nr_sequencia,\n'NAO ENCONTRADO' as ID,\na.cd_procedencia,\np.ds_procedencia,\nto_char(a.dt_agendamento, 'yyyy-mm-dd') dt_agendamento,\n\nto_char(a.dt_agenda,'dd') dia,\nto_char(a.dt_agenda,'mm') mes,\nto_char(a.dt_agenda,'yyyy') ano,\nac.ds_classificacao,\naa.ds_agrupamento ds_agrupamento,\na.cd_motivo_cancelamento,\nsubstr(obter_ds_motivo_status(a.nr_sequencia, a.cd_agenda),1,200) as ds_motivo_cancelamento,\na.cd_agenda,\nto_char(a.cd_procedimento) as cd_procedimento,\na.nr_seq_proc_interno as cd_procedimento_int\n\nfrom agenda_paciente a,\n     agenda ag,\n     pessoa_fisica pf,\n     procedencia p,\n     agenda_paciente_classif ac,\n     agrupamento_agenda aa,\n     empresa em,\n     estabelecimento e\nwhere a.cd_agenda = ag.cd_agenda\nand a.cd_pessoa_fisica = pf.cd_pessoa_fisica (+)\nand a.cd_procedencia = p.cd_procedencia (+)\nand a.nr_seq_classif_agenda = ac.nr_sequencia (+)\nand ag.nr_seq_agrupamento = aa.nr_sequencia (+)\nand ag.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa\nand a.cd_pessoa_fisica is not null\nand ag.cd_tipo_agenda = 2",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento_Exames",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Prazos de retorno",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "FILE_Padrao_Retornos_Cirurgias",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Padrao_Retorno_Cir_Sadalla",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Cirurgias Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select a.nr_cirurgia,\nto_char(a.dt_inicio_prevista, 'yyyy-mm-dd') dt_inicio_prevista,\na.cd_pessoa_fisica,\nobter_nome_pf(a.cd_pessoa_fisica) as nm_paciente,\nto_char(cd_procedimento_princ) as cd_procedimento,\na.nr_seq_proc_interno as cd_procedimento_int,\nobter_desc_procedimento(a.cd_procedimento_princ,a.ie_origem_proced)as ds_procedimento,\na.cd_medico_cirurgiao as cd_medico,\nobter_nome_pf(a.cd_medico_cirurgiao) as nm_medico,\ne.cd_cgc as CNPJ,\ne.nm_fantasia_estab as ds_unidade,\nem.nm_razao_social as marca,\nto_char(a.dt_atualizacao, 'yyyy-mm-dd') dt_atualizacao,\na.nr_atendimento, \n'Tasy Delphi' as base\nfrom cirurgia a,\n     estabelecimento e,\n     empresa em\nwhere a.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa\nand a.dt_cancelamento is null",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Cirurgias",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate base",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[CLEARBASECIRURGIAEXAMES]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Cirurgias HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select a.nr_cirurgia,\nto_char(a.dt_inicio_prevista, 'yyyy-mm-dd') dt_inicio_prevista,\na.cd_pessoa_fisica,\nfast_ops.obter_nome_pf(a.cd_pessoa_fisica) as nm_paciente,\nto_char(cd_procedimento_princ) as cd_procedimento,\na.nr_seq_proc_interno as cd_procedimento_int,\nfast_ops.obter_desc_procedimento(a.cd_procedimento_princ,a.ie_origem_proced)as ds_procedimento,\na.cd_medico_cirurgiao as cd_medico,\nfast_ops.obter_nome_pf(a.cd_medico_cirurgiao) as nm_medico,\ne.cd_cgc as CNPJ,\ne.nm_fantasia_estab as ds_unidade,\nem.nm_razao_social as marca,\nto_char(a.dt_atualizacao, 'yyyy-mm-dd') dt_atualizacao,\na.nr_atendimento, \n'Tasy HTML' as base\nfrom FAST_OPS.cirurgia a,\n     FAST_OPS.estabelecimento e,\n     FAST_OPS.empresa em\nwhere a.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa\nand a.dt_cancelamento is null",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Cirurgias",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Cirurgias"
				},
				"annotations": [],
				"lastPublishTime": "2020-03-13T19:36:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agendamento_Exames')]",
				"[concat(variables('factoryId'), '/datasets/FILE_Padrao_Retornos_Cirurgias')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Padrao_Retorno_Cir_Sadalla')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Cirurgias')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Contas a receber HOB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline desenvolvido para alimentar as tableas:\n\nTitulos_receber e Baixa_Titulos_Receber\n\nIniciado conferencia pelo setor de Contas a Receber das informações alimentadas por Tasy e Smart.",
				"activities": [
					{
						"name": "Titulos HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT  \n        a.ie_tipo_titulo as NR_TIPO_TITULO,\n        '' as NR_SERIE_TITULO,\n        A.NR_TITULO,\n        A.DT_EMISSAO as DT_EMISSAO_TITULO,\n        A.DT_VENCIMENTO DT_VENCIMENTO_TITULO,\n        A.VL_TITULO VL_TITULO,\n        A.VL_MULTA_FIXO AS VL_MULTA,\n        C.DS_CONVENIO,\n        B.DS_RAZAO_SOCIAL as DS_EMPRESA_CONVENIO,\n        B.CD_CGC AS CONV_CNPJ,\n        0 AS VL_ISS,\n        0 AS VL_IR,\n        0 AS VL_FILME,\n        0 AS VL_PERC_ISS,\n        0 AS VL_PER_IR,\n        A.TX_MULTA AS VL_PERC_MULTA,\n        A.TX_JUROS AS VL_PERC_JURO,\n        A.VL_OUTRAS_DESPESAS AS VL_OUTROS_IMP,\n        0 AS NR_REMESSA,\n        EM.NM_RAZAO_SOCIAL MARCA,\n        E.NM_FANTASIA_ESTAB AS DS_UNIDADE,\n        E.CD_CGC AS CNPJ,\n        'TASY HTML' AS BASE,\n        SYSDATE AS DT_CARGA\nFROM    TITULO_RECEBER A, \n        PESSOA_JURIDICA B,\n        ESTABELECIMENTO E,\n        EMPRESA EM,\n        CONVENIO C\nwhere   b.cd_cgc = a.cd_cgc\nAND     a.CD_ESTABELECIMENTO = E.CD_ESTABELECIMENTO\nAND     E.CD_EMPRESA = EM.CD_EMPRESA\nAND     B.CD_CGC = C.CD_CGC\nAND     C.DT_CANCELAMENTO IS NULL",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Baixa Titulo HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select '' nr_tipo_titulo,\nobter_cgc_estabelecimento(R.CD_ESTABELECIMENTO) AS CNPJ, \n'' AS NR_SERIE_TITULO,\nl.nr_titulo, \nl.dt_recebimento, \nl.vl_recebido, \nl.vl_descontos, \nl.vl_juros, \nl.vl_multa, \nl.dt_atualizacao, \nt.ds_tipo_recebimento,\nx.DS_TRANSACAO,\n'TASY HTML' AS BASE,\n SYSDATE AS DT_CARGA\nfrom titulo_receber r,\n     TITULO_RECEBER_LIQ L,\n     tipo_recebimento t,\n     TRANSACAO_FINANCEIRA X\nwhere r.nr_titulo = l.nr_titulo \nand l.cd_tipo_recebimento = t.cd_tipo_recebimento\nAND l.nr_seq_trans_fin = X.NR_SEQUENCIA",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Baixa_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Contas a receber"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Titulos_Receber')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Baixa_Titulos_Receber')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Contas a receber HOSL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline desenvolvido para alimentar as tableas:\n\nTitulos_receber e Baixa_Titulos_Receber\n\nIniciado conferencia pelo setor de Contas a Receber das informações alimentadas por Tasy e Smart.",
				"activities": [
					{
						"name": "Titulos HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART HOSL' AS BASE,\n        GETDATE() AS DT_CARGA \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS \nLEFT JOIN (SELECT  \n       mns.mns_serie as serie, \n       mns.mns_num as numero, \n       mns.mns_nfs_serie as nfs_serie,\n       mns.mns_nfs_numero as nfs_numero,\n       mns.mns_nfs_tipo as nfs_tipo,    \n       (SELECT sum ( m2.mns_vlr ) \n        \tFROM mns m2, nfs \n\t\t\tWHERE  ( m2.mns_mns_serie = mns.mns_serie ) AND \n\t\t\t\t\t( m2.mns_mns_num = mns.mns_num ) AND \n               ( m2.mns_nfs_serie = nfs.nfs_serie ) AND\n               ( m2.mns_nfs_numero = nfs.nfs_numero ) AND\n               ( m2.mns_nfs_tipo = nfs.nfs_tipo )) AS imposto\n\t\t\tFROM   cnv, \n\t\t\t\t\t emp, \n\t\t\t\t\t nfs, \n\t\t\t\t\t cfg, \n\t\t\t\t\t mns \n\t\t\t WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n\t\t\t\t( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n\t\t\t\t( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n\t\t\t\t( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n\t\t\t\t( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n\t\t\t\t( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100) AND  \n\t\t\t\t( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t\t( 8=8 ) AND \n\t\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) )\n\t\t\tGROUP  BY   mns.mns_serie , \n\t\t\t\t\t mns.mns_num , \n\t\t\t\t\t mns.mns_nfs_serie ,\n\t\t\t\t\t mns.mns_nfs_numero ,\n\t\t\t\t\t mns.mns_nfs_tipo  \n\n) m ON m.serie = mns.mns_serie and m.numero = mns.mns_num and m.nfs_serie = mns.mns_nfs_serie and m.nfs_numero = mns.mns_nfs_numero and m.nfs_tipo = mns.mns_nfs_tipo\n\n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100 ) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t( 8=8 ) AND \n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) ) \nGROUP BY nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         nfs.nfs_dt_vcto,   \n         nfs.nfs_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp,   \n         cnv.cnv_ccr_banco,    \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   \n         MNS.MNS_DT,   \n         MNS.MNS_TIPO, \n\t\t MNS.MNS_NFS_TIPO, \n\t\t mns.mns_mns_serie, \n\t\t mns.mns_mns_num, \n\t\t mns.mns_serie, \n\t\t mns.mns_num, \n\t\t cfg.cfg_vlrfilme, \n\t\t nfs.nfs_nde_tipo, \n\t\t nfs.nfs_vlr_ir, \n\t\t mns.mns_obs,\n\t\t nfs.nfs_ind_tipo_fatura,\n\t\t nfs.nfs_nfl_serie, \n\t\t nfs.nfs_nfl_num,\n\t\t mns.mns_nfl_serie,\n\t\t mns.mns_nfl_num,\n\t\t nfs.nfs_dt_receb,\n\t\t cfg.cfg_vlrfilme,\n\t\t nfs.nfs_dt_envio,\n\t\t nfs.nfs_ns_serie, \n\t\t nfs.nfs_ns_numero, \t\n\t\t cnv.cnv_caixa_fatura,\n         cfg.cfg_cgc,\n\t\t emp.emp_cgc \n\nUNION ALL   \n\n  SELECT top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART HOSL' AS BASE,\n        GETDATE() AS DT_CARGA \n    FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS, \n\t\t\tnfs b  \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n\t\t\t( MNS.MNS_NFS_SERIE = b.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = b.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = b.nfs_tipo) and  \n         ( nfs.NFS_SERIE = b.nfs_ns_serie ) and  \n         ( nfs.NFS_NUMERO = b.nfs_ns_numero ) and  \n         ( nfs.NFS_TIPO = b.nfs_ns_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND\n\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100 ) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t( 8=8 ) AND \t\n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) )\nGROUP BY nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         nfs.nfs_dt_vcto,   \n         nfs.nfs_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp,   \n         cnv.cnv_ccr_banco,   \n         nfs.nfs_vlr_ir,   \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   \n         CASE WHEN mns.mns_tipo = 'NR' THEN b.nfs_dt_vcto ELSE MNS.MNS_DT END,   \n         MNS.MNS_TIPO, \n\t\t MNS.MNS_NFS_TIPO, \n\t\t mns.mns_mns_serie, \n\t\t mns.mns_mns_num, \n\t\t mns.mns_serie, \n\t\t mns.mns_num, \n\t\t b.nfs_nde_tipo, \n\t\t nfs.nfs_vlr_ir, \n\t\t mns.mns_obs, \n\t\t nfs.nfs_ind_tipo_fatura,\n\t\t nfs.nfs_nfl_serie, \n\t\t nfs.nfs_nfl_num, \n\t\t mns.mns_nfl_serie,\n\t\t mns.mns_nfl_num,\n\t\t nfs.nfs_dt_receb,\n\t\t nfs.nfs_dt_envio,\n\t\t nfs.nfs_ns_serie, \n\t\t nfs.nfs_ns_numero, \t\n\t\t cnv.cnv_caixa_fatura,\n         cfg.cfg_cgc,\n\t\t emp.emp_cgc\n\nUNION ALL \n\n  SELECT top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART HOSL' AS BASE,\n        GETDATE() AS DT_CARGA     \n    FROM cnv,   \n         emp,   \n         nfs,   \n         cfg  \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_dt_vcto >= GETDATE()  - 100) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND  \n         ( nfs.nfs_tipo <> 'NC' ) AND\n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND \n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) ) AND\n\t\t\tNOT EXISTS ( SELECT MNS.MNS_NUM FROM MNS \n\t\t\t\t\t\t\t\tWHERE ( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t\t\t\t\t\t\t\t( 8=8 ) AND \n\t\t\t\t\t\t\t\t\t\t( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n\t\t\t\t\t\t\t         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n\t\t\t\t\t\t\t         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) ) \n -------------- OK  2\nUNION ALL \n\n  SELECT top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART HOSL' AS BASE,\n        GETDATE() AS DT_CARGA  \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS,\n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND\n\t\t ( rdi.rdi_vcto >= GETDATE() - 100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t ( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t ( rdi.rdi_recepcao <> 'S' ) AND \n\t\t ( mns.mns_mns_serie is null ) AND\n\t\t ( mns.mns_ind_liberado = 'S' ) AND \n\t\t ( nfs.nfs_status = 'P' ) AND \n\t\t ( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t ( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t ( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t ( mte.mte_status = 'D' ) AND \n\t\t ( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t ( 8=8 ) AND \n\t\t ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( rdi.rdi_mns_serie = mns.mns_serie ) AND\n\t\t ( rdi.rdi_mns_num = mns.mns_num ) AND \n\t\t ( rdi.rdi_mcc_serie_dep is not null ) AND \n\t\t ( ( mte.mte_tipo <> 'C' ) OR\n\t\t\t  ( EXISTS ( SELECT tca_cod FROM tca\n\t\t\t\t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) ) \n\n---- OK 3\n\nUNION ALL \n\n  SELECT  top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART HOSL' AS BASE,\n        GETDATE() AS DT_CARGA \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t ( rdi.rdi_vcto >= GETDATE() - 100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t ( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t ( rdi.rdi_recepcao <> 'S' ) AND \n\t\t ( nfs.nfs_status = 'P' ) AND \n\t\t ( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t ( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t ( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t ( mte.mte_status = 'D' ) AND \n\t\t ( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( ( mte.mte_tipo <> 'C' ) OR\n\t\t\t  ( EXISTS ( SELECT tca_cod FROM tca\n\t\t\t\t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) ) AND \n\t\t\t( ( rdi.rdi_mcc_serie_dep is null ) OR \n\t\t\t  ( rdi.rdi_forma_pag = 'X' ) OR \n\t\t\t  ( rdi.rdi_seq_subst is null AND \n\t\t\t\t NOT EXISTS ( SELECT mns.mns_serie FROM mns\n\t\t\t\t\t\t\t\t\tWHERE ( rdi.rdi_mns_serie = mns.mns_serie ) AND\n\t\t\t\t\t\t\t\t\t\t\t( rdi.rdi_mns_num = mns.mns_num ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mns.mns_ind_liberado = 'S' ) ) ) ) \n ------- OK 4\nUNION ALL \n\n  SELECT  top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART HOSL' AS BASE,\n        GETDATE() AS DT_CARGA  \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS,\n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac, \n\t\t\trdi b   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t ( rdi.rdi_vcto >= GETDATE()-100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t ( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t ( rdi.rdi_recepcao <> 'S' ) AND \n\t\t ( mns.mns_mns_serie is null ) AND\n\t\t ( mns.mns_ind_liberado = 'S' ) AND \n\t\t ( nfs.nfs_status = 'P' ) AND \n\t\t ( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t ( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t ( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t ( mte.mte_status = 'D' ) AND \n\t\t ( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t ( 8=8 ) AND \n\t\t ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( b.rdi_mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( b.rdi_mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( b.rdi_seq = rdi.rdi_seq_subst ) AND \n\t\t ( b.rdi_mns_serie = mns.mns_serie ) AND\n\t\t ( b.rdi_mns_num = mns.mns_num ) AND \n\t\t ( rdi.rdi_mcc_serie_dep is not null ) AND \n\t\t ( ( mte.mte_tipo <> 'C' ) OR\n\t\t   ( EXISTS ( SELECT tca_cod FROM tca\n\t\t \t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) )",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Baixas HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "  SELECT  top 100\n  nfs.nfs_tipo  as NR_TIPO_TITULO,\n  cfg.cfg_cgc as CNPJ,\n\n  nfs.nfs_serie as NR_SERIE_TITULO,   \n  nfs.nfs_numero as NR_TITULO,  \n  MNS_DT as DT_RECEBIMENTO,\n  MNS_VLR AS VL_RECEBIDO,\n  0.00 AS VL_DESCONTOS,\n  0.00 AS VL_JUROS, \n  NFS_VLR_MULTA AS VL_MULTA,\n  MNS_DT AS DT_ATUALIZACAO,\n  MNS_TIPO AS DS_TIPO_RECEBIMENTO,\n  ' ' AS DS_TRANSACAO,\n   'SMART HOSL' AS BASE,\n   GETDATE() AS DT_CARGA \n   FROM mns ,           \n   cfg ,           \n   nfs  \n   WHERE ( nfs.nfs_serie = mns.mns_nfs_serie ) \n   and ( nfs.nfs_numero = mns.mns_nfs_numero ) \n   and ( nfs.nfs_tipo = mns.mns_nfs_tipo ) \n   and ( mns.mns_mns_serie is null ) ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Baixa_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Contas a receber"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_HOSL_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Titulos_Receber')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Baixa_Titulos_Receber')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Contas a receber INOB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline desenvolvido para alimentar as tableas:\n\nTitulos_receber e Baixa_Titulos_Receber\n\nIniciado conferencia pelo setor de Contas a Receber das informações alimentadas por Tasy e Smart.",
				"activities": [
					{
						"name": "Titulos INOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART INOB' AS BASE,\n        GETDATE() AS DT_CARGA \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS \nLEFT JOIN (SELECT  \n       mns.mns_serie as serie, \n       mns.mns_num as numero, \n       mns.mns_nfs_serie as nfs_serie,\n       mns.mns_nfs_numero as nfs_numero,\n       mns.mns_nfs_tipo as nfs_tipo,    \n       (SELECT sum ( m2.mns_vlr ) \n        \tFROM mns m2, nfs \n\t\t\tWHERE  ( m2.mns_mns_serie = mns.mns_serie ) AND \n\t\t\t\t\t( m2.mns_mns_num = mns.mns_num ) AND \n               ( m2.mns_nfs_serie = nfs.nfs_serie ) AND\n               ( m2.mns_nfs_numero = nfs.nfs_numero ) AND\n               ( m2.mns_nfs_tipo = nfs.nfs_tipo )) AS imposto\n\t\t\tFROM   cnv, \n\t\t\t\t\t emp, \n\t\t\t\t\t nfs, \n\t\t\t\t\t cfg, \n\t\t\t\t\t mns \n\t\t\t WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n\t\t\t\t( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n\t\t\t\t( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n\t\t\t\t( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n\t\t\t\t( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n\t\t\t\t( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100) AND  \n\t\t\t\t( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t\t( 8=8 ) AND \n\t\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) )\n\t\t\tGROUP  BY   mns.mns_serie , \n\t\t\t\t\t mns.mns_num , \n\t\t\t\t\t mns.mns_nfs_serie ,\n\t\t\t\t\t mns.mns_nfs_numero ,\n\t\t\t\t\t mns.mns_nfs_tipo  \n\n) m ON m.serie = mns.mns_serie and m.numero = mns.mns_num and m.nfs_serie = mns.mns_nfs_serie and m.nfs_numero = mns.mns_nfs_numero and m.nfs_tipo = mns.mns_nfs_tipo\n\n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100 ) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t( 8=8 ) AND \n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) ) \nGROUP BY nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         nfs.nfs_dt_vcto,   \n         nfs.nfs_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp,   \n         cnv.cnv_ccr_banco,    \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   \n         MNS.MNS_DT,   \n         MNS.MNS_TIPO, \n\t\t MNS.MNS_NFS_TIPO, \n\t\t mns.mns_mns_serie, \n\t\t mns.mns_mns_num, \n\t\t mns.mns_serie, \n\t\t mns.mns_num, \n\t\t cfg.cfg_vlrfilme, \n\t\t nfs.nfs_nde_tipo, \n\t\t nfs.nfs_vlr_ir, \n\t\t mns.mns_obs,\n\t\t nfs.nfs_ind_tipo_fatura,\n\t\t nfs.nfs_nfl_serie, \n\t\t nfs.nfs_nfl_num,\n\t\t mns.mns_nfl_serie,\n\t\t mns.mns_nfl_num,\n\t\t nfs.nfs_dt_receb,\n\t\t cfg.cfg_vlrfilme,\n\t\t nfs.nfs_dt_envio,\n\t\t nfs.nfs_ns_serie, \n\t\t nfs.nfs_ns_numero, \t\n\t\t cnv.cnv_caixa_fatura,\n         cfg.cfg_cgc,\n\t\t emp.emp_cgc \n\nUNION ALL   \n\n  SELECT top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART INOB' AS BASE,\n        GETDATE() AS DT_CARGA \n    FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS, \n\t\t\tnfs b  \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n\t\t\t( MNS.MNS_NFS_SERIE = b.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = b.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = b.nfs_tipo) and  \n         ( nfs.NFS_SERIE = b.nfs_ns_serie ) and  \n         ( nfs.NFS_NUMERO = b.nfs_ns_numero ) and  \n         ( nfs.NFS_TIPO = b.nfs_ns_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND\n\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100 ) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t( 8=8 ) AND \t\n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) )\nGROUP BY nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         nfs.nfs_dt_vcto,   \n         nfs.nfs_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp,   \n         cnv.cnv_ccr_banco,   \n         nfs.nfs_vlr_ir,   \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   \n         CASE WHEN mns.mns_tipo = 'NR' THEN b.nfs_dt_vcto ELSE MNS.MNS_DT END,   \n         MNS.MNS_TIPO, \n\t\t MNS.MNS_NFS_TIPO, \n\t\t mns.mns_mns_serie, \n\t\t mns.mns_mns_num, \n\t\t mns.mns_serie, \n\t\t mns.mns_num, \n\t\t b.nfs_nde_tipo, \n\t\t nfs.nfs_vlr_ir, \n\t\t mns.mns_obs, \n\t\t nfs.nfs_ind_tipo_fatura,\n\t\t nfs.nfs_nfl_serie, \n\t\t nfs.nfs_nfl_num, \n\t\t mns.mns_nfl_serie,\n\t\t mns.mns_nfl_num,\n\t\t nfs.nfs_dt_receb,\n\t\t nfs.nfs_dt_envio,\n\t\t nfs.nfs_ns_serie, \n\t\t nfs.nfs_ns_numero, \t\n\t\t cnv.cnv_caixa_fatura,\n         cfg.cfg_cgc,\n\t\t emp.emp_cgc\n\nUNION ALL \n\n  SELECT top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART INOB' AS BASE,\n        GETDATE() AS DT_CARGA     \n    FROM cnv,   \n         emp,   \n         nfs,   \n         cfg  \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_dt_vcto >= GETDATE()  - 100) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND  \n         ( nfs.nfs_tipo <> 'NC' ) AND\n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND \n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) ) AND\n\t\t\tNOT EXISTS ( SELECT MNS.MNS_NUM FROM MNS \n\t\t\t\t\t\t\t\tWHERE ( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t\t\t\t\t\t\t\t( 8=8 ) AND \n\t\t\t\t\t\t\t\t\t\t( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n\t\t\t\t\t\t\t         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n\t\t\t\t\t\t\t         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) ) \n -------------- OK  2\nUNION ALL \n\n  SELECT top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART INOB' AS BASE,\n        GETDATE() AS DT_CARGA  \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS,\n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND\n\t\t ( rdi.rdi_vcto >= GETDATE() - 100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t ( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t ( rdi.rdi_recepcao <> 'S' ) AND \n\t\t ( mns.mns_mns_serie is null ) AND\n\t\t ( mns.mns_ind_liberado = 'S' ) AND \n\t\t ( nfs.nfs_status = 'P' ) AND \n\t\t ( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t ( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t ( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t ( mte.mte_status = 'D' ) AND \n\t\t ( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t ( 8=8 ) AND \n\t\t ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( rdi.rdi_mns_serie = mns.mns_serie ) AND\n\t\t ( rdi.rdi_mns_num = mns.mns_num ) AND \n\t\t ( rdi.rdi_mcc_serie_dep is not null ) AND \n\t\t ( ( mte.mte_tipo <> 'C' ) OR\n\t\t\t  ( EXISTS ( SELECT tca_cod FROM tca\n\t\t\t\t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) ) \n\n---- OK 3\n\nUNION ALL \n\n  SELECT  top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART INOB' AS BASE,\n        GETDATE() AS DT_CARGA \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t ( rdi.rdi_vcto >= GETDATE() - 100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t ( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t ( rdi.rdi_recepcao <> 'S' ) AND \n\t\t ( nfs.nfs_status = 'P' ) AND \n\t\t ( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t ( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t ( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t ( mte.mte_status = 'D' ) AND \n\t\t ( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( ( mte.mte_tipo <> 'C' ) OR\n\t\t\t  ( EXISTS ( SELECT tca_cod FROM tca\n\t\t\t\t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) ) AND \n\t\t\t( ( rdi.rdi_mcc_serie_dep is null ) OR \n\t\t\t  ( rdi.rdi_forma_pag = 'X' ) OR \n\t\t\t  ( rdi.rdi_seq_subst is null AND \n\t\t\t\t NOT EXISTS ( SELECT mns.mns_serie FROM mns\n\t\t\t\t\t\t\t\t\tWHERE ( rdi.rdi_mns_serie = mns.mns_serie ) AND\n\t\t\t\t\t\t\t\t\t\t\t( rdi.rdi_mns_num = mns.mns_num ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mns.mns_ind_liberado = 'S' ) ) ) ) \n ------- OK 4\nUNION ALL \n\n  SELECT  top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART INOB' AS BASE,\n        GETDATE() AS DT_CARGA  \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS,\n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac, \n\t\t\trdi b   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t ( rdi.rdi_vcto >= GETDATE()-100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t ( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t ( rdi.rdi_recepcao <> 'S' ) AND \n\t\t ( mns.mns_mns_serie is null ) AND\n\t\t ( mns.mns_ind_liberado = 'S' ) AND \n\t\t ( nfs.nfs_status = 'P' ) AND \n\t\t ( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t ( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t ( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t ( mte.mte_status = 'D' ) AND \n\t\t ( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t ( 8=8 ) AND \n\t\t ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( b.rdi_mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( b.rdi_mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( b.rdi_seq = rdi.rdi_seq_subst ) AND \n\t\t ( b.rdi_mns_serie = mns.mns_serie ) AND\n\t\t ( b.rdi_mns_num = mns.mns_num ) AND \n\t\t ( rdi.rdi_mcc_serie_dep is not null ) AND \n\t\t ( ( mte.mte_tipo <> 'C' ) OR\n\t\t   ( EXISTS ( SELECT tca_cod FROM tca\n\t\t \t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) )",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_INOB_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Baixas INOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "  SELECT  top 100\n  nfs.nfs_tipo  as NR_TIPO_TITULO,\n  cfg.cfg_cgc as CNPJ,\n\n  nfs.nfs_serie as NR_SERIE_TITULO,   \n  nfs.nfs_numero as NR_TITULO,  \n  MNS_DT as DT_RECEBIMENTO,\n  MNS_VLR AS VL_RECEBIDO,\n  0.00 AS VL_DESCONTOS,\n  0.00 AS VL_JUROS, \n  NFS_VLR_MULTA AS VL_MULTA,\n  MNS_DT AS DT_ATUALIZACAO,\n  MNS_TIPO AS DS_TIPO_RECEBIMENTO,\n  ' ' AS DS_TRANSACAO,\n   'SMART INOB' AS BASE,\n    GETDATE() AS DT_CARGA  \n   FROM mns ,           \n   cfg ,           \n   nfs  \n   WHERE ( nfs.nfs_serie = mns.mns_nfs_serie ) \n   and ( nfs.nfs_numero = mns.mns_nfs_numero ) \n   and ( nfs.nfs_tipo = mns.mns_nfs_tipo ) \n   and ( mns.mns_mns_serie is null ) ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_INOB_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Baixa_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Contas a receber"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_INOB_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Titulos_Receber')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Baixa_Titulos_Receber')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Contas a receber IOF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline desenvolvido para alimentar as tableas:\n\nTitulos_receber e Baixa_Titulos_Receber\n\nIniciado conferencia pelo setor de Contas a Receber das informações alimentadas por Tasy e Smart.",
				"activities": [
					{
						"name": "Titulos IOF",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART IOF' AS BASE,\n        GETDATE() AS DT_CARGA \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS \nLEFT JOIN (SELECT  \n       mns.mns_serie as serie, \n       mns.mns_num as numero, \n       mns.mns_nfs_serie as nfs_serie,\n       mns.mns_nfs_numero as nfs_numero,\n       mns.mns_nfs_tipo as nfs_tipo,    \n       (SELECT sum ( m2.mns_vlr ) \n        \tFROM mns m2, nfs \n\t\t\tWHERE  ( m2.mns_mns_serie = mns.mns_serie ) AND \n\t\t\t\t\t( m2.mns_mns_num = mns.mns_num ) AND \n               ( m2.mns_nfs_serie = nfs.nfs_serie ) AND\n               ( m2.mns_nfs_numero = nfs.nfs_numero ) AND\n               ( m2.mns_nfs_tipo = nfs.nfs_tipo )) AS imposto\n\t\t\tFROM   cnv, \n\t\t\t\t\t emp, \n\t\t\t\t\t nfs, \n\t\t\t\t\t cfg, \n\t\t\t\t\t mns \n\t\t\t WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n\t\t\t\t( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n\t\t\t\t( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n\t\t\t\t( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n\t\t\t\t( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n\t\t\t\t( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100) AND  \n\t\t\t\t( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t\t( 8=8 ) AND \n\t\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) )\n\t\t\tGROUP  BY   mns.mns_serie , \n\t\t\t\t\t mns.mns_num , \n\t\t\t\t\t mns.mns_nfs_serie ,\n\t\t\t\t\t mns.mns_nfs_numero ,\n\t\t\t\t\t mns.mns_nfs_tipo  \n\n) m ON m.serie = mns.mns_serie and m.numero = mns.mns_num and m.nfs_serie = mns.mns_nfs_serie and m.nfs_numero = mns.mns_nfs_numero and m.nfs_tipo = mns.mns_nfs_tipo\n\n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100 ) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t( 8=8 ) AND \n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) ) \nGROUP BY nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         nfs.nfs_dt_vcto,   \n         nfs.nfs_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp,   \n         cnv.cnv_ccr_banco,    \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   \n         MNS.MNS_DT,   \n         MNS.MNS_TIPO, \n\t\t MNS.MNS_NFS_TIPO, \n\t\t mns.mns_mns_serie, \n\t\t mns.mns_mns_num, \n\t\t mns.mns_serie, \n\t\t mns.mns_num, \n\t\t cfg.cfg_vlrfilme, \n\t\t nfs.nfs_nde_tipo, \n\t\t nfs.nfs_vlr_ir, \n\t\t mns.mns_obs,\n\t\t nfs.nfs_ind_tipo_fatura,\n\t\t nfs.nfs_nfl_serie, \n\t\t nfs.nfs_nfl_num,\n\t\t mns.mns_nfl_serie,\n\t\t mns.mns_nfl_num,\n\t\t nfs.nfs_dt_receb,\n\t\t cfg.cfg_vlrfilme,\n\t\t nfs.nfs_dt_envio,\n\t\t nfs.nfs_ns_serie, \n\t\t nfs.nfs_ns_numero, \t\n\t\t cnv.cnv_caixa_fatura,\n         cfg.cfg_cgc,\n\t\t emp.emp_cgc \n\nUNION ALL   \n\n  SELECT top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART IOF' AS BASE,\n        GETDATE() AS DT_CARGA \n    FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS, \n\t\t\tnfs b  \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n\t\t\t( MNS.MNS_NFS_SERIE = b.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = b.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = b.nfs_tipo) and  \n         ( nfs.NFS_SERIE = b.nfs_ns_serie ) and  \n         ( nfs.NFS_NUMERO = b.nfs_ns_numero ) and  \n         ( nfs.NFS_TIPO = b.nfs_ns_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND\n\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100 ) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t( 8=8 ) AND \t\n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) )\nGROUP BY nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         nfs.nfs_dt_vcto,   \n         nfs.nfs_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp,   \n         cnv.cnv_ccr_banco,   \n         nfs.nfs_vlr_ir,   \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   \n         CASE WHEN mns.mns_tipo = 'NR' THEN b.nfs_dt_vcto ELSE MNS.MNS_DT END,   \n         MNS.MNS_TIPO, \n\t\t MNS.MNS_NFS_TIPO, \n\t\t mns.mns_mns_serie, \n\t\t mns.mns_mns_num, \n\t\t mns.mns_serie, \n\t\t mns.mns_num, \n\t\t b.nfs_nde_tipo, \n\t\t nfs.nfs_vlr_ir, \n\t\t mns.mns_obs, \n\t\t nfs.nfs_ind_tipo_fatura,\n\t\t nfs.nfs_nfl_serie, \n\t\t nfs.nfs_nfl_num, \n\t\t mns.mns_nfl_serie,\n\t\t mns.mns_nfl_num,\n\t\t nfs.nfs_dt_receb,\n\t\t nfs.nfs_dt_envio,\n\t\t nfs.nfs_ns_serie, \n\t\t nfs.nfs_ns_numero, \t\n\t\t cnv.cnv_caixa_fatura,\n         cfg.cfg_cgc,\n\t\t emp.emp_cgc\n\nUNION ALL \n\n  SELECT top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART IOF' AS BASE,\n        GETDATE() AS DT_CARGA     \n    FROM cnv,   \n         emp,   \n         nfs,   \n         cfg  \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_dt_vcto >= GETDATE()  - 100) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND  \n         ( nfs.nfs_tipo <> 'NC' ) AND\n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND \n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) ) AND\n\t\t\tNOT EXISTS ( SELECT MNS.MNS_NUM FROM MNS \n\t\t\t\t\t\t\t\tWHERE ( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t\t\t\t\t\t\t\t( 8=8 ) AND \n\t\t\t\t\t\t\t\t\t\t( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n\t\t\t\t\t\t\t         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n\t\t\t\t\t\t\t         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) ) \n -------------- OK  2\nUNION ALL \n\n  SELECT top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART IOF' AS BASE,\n        GETDATE() AS DT_CARGA  \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS,\n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND\n\t\t ( rdi.rdi_vcto >= GETDATE() - 100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t ( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t ( rdi.rdi_recepcao <> 'S' ) AND \n\t\t ( mns.mns_mns_serie is null ) AND\n\t\t ( mns.mns_ind_liberado = 'S' ) AND \n\t\t ( nfs.nfs_status = 'P' ) AND \n\t\t ( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t ( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t ( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t ( mte.mte_status = 'D' ) AND \n\t\t ( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t ( 8=8 ) AND \n\t\t ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( rdi.rdi_mns_serie = mns.mns_serie ) AND\n\t\t ( rdi.rdi_mns_num = mns.mns_num ) AND \n\t\t ( rdi.rdi_mcc_serie_dep is not null ) AND \n\t\t ( ( mte.mte_tipo <> 'C' ) OR\n\t\t\t  ( EXISTS ( SELECT tca_cod FROM tca\n\t\t\t\t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) ) \n\n---- OK 3\n\nUNION ALL \n\n  SELECT  top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART IOF' AS BASE,\n        GETDATE() AS DT_CARGA \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t ( rdi.rdi_vcto >= GETDATE() - 100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t ( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t ( rdi.rdi_recepcao <> 'S' ) AND \n\t\t ( nfs.nfs_status = 'P' ) AND \n\t\t ( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t ( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t ( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t ( mte.mte_status = 'D' ) AND \n\t\t ( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( ( mte.mte_tipo <> 'C' ) OR\n\t\t\t  ( EXISTS ( SELECT tca_cod FROM tca\n\t\t\t\t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) ) AND \n\t\t\t( ( rdi.rdi_mcc_serie_dep is null ) OR \n\t\t\t  ( rdi.rdi_forma_pag = 'X' ) OR \n\t\t\t  ( rdi.rdi_seq_subst is null AND \n\t\t\t\t NOT EXISTS ( SELECT mns.mns_serie FROM mns\n\t\t\t\t\t\t\t\t\tWHERE ( rdi.rdi_mns_serie = mns.mns_serie ) AND\n\t\t\t\t\t\t\t\t\t\t\t( rdi.rdi_mns_num = mns.mns_num ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mns.mns_ind_liberado = 'S' ) ) ) ) \n ------- OK 4\nUNION ALL \n\n  SELECT  top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART IOF' AS BASE,\n        GETDATE() AS DT_CARGA  \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS,\n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac, \n\t\t\trdi b   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t ( rdi.rdi_vcto >= GETDATE()-100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t ( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t ( rdi.rdi_recepcao <> 'S' ) AND \n\t\t ( mns.mns_mns_serie is null ) AND\n\t\t ( mns.mns_ind_liberado = 'S' ) AND \n\t\t ( nfs.nfs_status = 'P' ) AND \n\t\t ( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t ( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t ( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t ( mte.mte_status = 'D' ) AND \n\t\t ( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t ( 8=8 ) AND \n\t\t ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( b.rdi_mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( b.rdi_mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( b.rdi_seq = rdi.rdi_seq_subst ) AND \n\t\t ( b.rdi_mns_serie = mns.mns_serie ) AND\n\t\t ( b.rdi_mns_num = mns.mns_num ) AND \n\t\t ( rdi.rdi_mcc_serie_dep is not null ) AND \n\t\t ( ( mte.mte_tipo <> 'C' ) OR\n\t\t   ( EXISTS ( SELECT tca_cod FROM tca\n\t\t \t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) )",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Baixas IOF",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "  SELECT  top 100\n  nfs.nfs_tipo  as NR_TIPO_TITULO,\n  cfg.cfg_cgc as CNPJ,\n\n  nfs.nfs_serie as NR_SERIE_TITULO,   \n  nfs.nfs_numero as NR_TITULO,  \n  MNS_DT as DT_RECEBIMENTO,\n  MNS_VLR AS VL_RECEBIDO,\n  0.00 AS VL_DESCONTOS,\n  0.00 AS VL_JUROS, \n  NFS_VLR_MULTA AS VL_MULTA,\n  MNS_DT AS DT_ATUALIZACAO,\n  MNS_TIPO AS DS_TIPO_RECEBIMENTO,\n  ' ' AS DS_TRANSACAO,\n   'SMART IOF' AS BASE,\n    GETDATE() AS DT_CARGA \n   FROM mns ,           \n   cfg ,           \n   nfs  \n   WHERE ( nfs.nfs_serie = mns.mns_nfs_serie ) \n   and ( nfs.nfs_numero = mns.mns_nfs_numero ) \n   and ( nfs.nfs_tipo = mns.mns_nfs_tipo ) \n   and ( mns.mns_mns_serie is null ) ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Baixa_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Contas a receber"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_IOF_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Titulos_Receber')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Baixa_Titulos_Receber')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Contas a receber Itabuna')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline desenvolvido para alimentar as tableas:\n\nTitulos_receber e Baixa_Titulos_Receber\n\nIniciado conferencia pelo setor de Contas a Receber das informações alimentadas por Tasy e Smart.",
				"activities": [
					{
						"name": "Titulos Itabuna",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART Itabuna' AS BASE,\n        GETDATE() AS DT_CARGA \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS \nLEFT JOIN (SELECT  \n       mns.mns_serie as serie, \n       mns.mns_num as numero, \n       mns.mns_nfs_serie as nfs_serie,\n       mns.mns_nfs_numero as nfs_numero,\n       mns.mns_nfs_tipo as nfs_tipo,    \n       (SELECT sum ( m2.mns_vlr ) \n        \tFROM mns m2, nfs \n\t\t\tWHERE  ( m2.mns_mns_serie = mns.mns_serie ) AND \n\t\t\t\t\t( m2.mns_mns_num = mns.mns_num ) AND \n               ( m2.mns_nfs_serie = nfs.nfs_serie ) AND\n               ( m2.mns_nfs_numero = nfs.nfs_numero ) AND\n               ( m2.mns_nfs_tipo = nfs.nfs_tipo )) AS imposto\n\t\t\tFROM   cnv, \n\t\t\t\t\t emp, \n\t\t\t\t\t nfs, \n\t\t\t\t\t cfg, \n\t\t\t\t\t mns \n\t\t\t WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n\t\t\t\t( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n\t\t\t\t( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n\t\t\t\t( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n\t\t\t\t( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n\t\t\t\t( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100) AND  \n\t\t\t\t( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t\t( 8=8 ) AND \n\t\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) )\n\t\t\tGROUP  BY   mns.mns_serie , \n\t\t\t\t\t mns.mns_num , \n\t\t\t\t\t mns.mns_nfs_serie ,\n\t\t\t\t\t mns.mns_nfs_numero ,\n\t\t\t\t\t mns.mns_nfs_tipo  \n\n) m ON m.serie = mns.mns_serie and m.numero = mns.mns_num and m.nfs_serie = mns.mns_nfs_serie and m.nfs_numero = mns.mns_nfs_numero and m.nfs_tipo = mns.mns_nfs_tipo\n\n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100 ) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t( 8=8 ) AND \n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) ) \nGROUP BY nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         nfs.nfs_dt_vcto,   \n         nfs.nfs_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp,   \n         cnv.cnv_ccr_banco,    \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   \n         MNS.MNS_DT,   \n         MNS.MNS_TIPO, \n\t\t MNS.MNS_NFS_TIPO, \n\t\t mns.mns_mns_serie, \n\t\t mns.mns_mns_num, \n\t\t mns.mns_serie, \n\t\t mns.mns_num, \n\t\t cfg.cfg_vlrfilme, \n\t\t nfs.nfs_nde_tipo, \n\t\t nfs.nfs_vlr_ir, \n\t\t mns.mns_obs,\n\t\t nfs.nfs_ind_tipo_fatura,\n\t\t nfs.nfs_nfl_serie, \n\t\t nfs.nfs_nfl_num,\n\t\t mns.mns_nfl_serie,\n\t\t mns.mns_nfl_num,\n\t\t nfs.nfs_dt_receb,\n\t\t cfg.cfg_vlrfilme,\n\t\t nfs.nfs_dt_envio,\n\t\t nfs.nfs_ns_serie, \n\t\t nfs.nfs_ns_numero, \t\n\t\t cnv.cnv_caixa_fatura,\n         cfg.cfg_cgc,\n\t\t emp.emp_cgc \n\nUNION ALL   \n\n  SELECT top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART Itabuna' AS BASE,\n        GETDATE() AS DT_CARGA \n    FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS, \n\t\t\tnfs b  \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n\t\t\t( MNS.MNS_NFS_SERIE = b.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = b.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = b.nfs_tipo) and  \n         ( nfs.NFS_SERIE = b.nfs_ns_serie ) and  \n         ( nfs.NFS_NUMERO = b.nfs_ns_numero ) and  \n         ( nfs.NFS_TIPO = b.nfs_ns_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND\n\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100 ) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t( 8=8 ) AND \t\n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) )\nGROUP BY nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         nfs.nfs_dt_vcto,   \n         nfs.nfs_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp,   \n         cnv.cnv_ccr_banco,   \n         nfs.nfs_vlr_ir,   \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   \n         CASE WHEN mns.mns_tipo = 'NR' THEN b.nfs_dt_vcto ELSE MNS.MNS_DT END,   \n         MNS.MNS_TIPO, \n\t\t MNS.MNS_NFS_TIPO, \n\t\t mns.mns_mns_serie, \n\t\t mns.mns_mns_num, \n\t\t mns.mns_serie, \n\t\t mns.mns_num, \n\t\t b.nfs_nde_tipo, \n\t\t nfs.nfs_vlr_ir, \n\t\t mns.mns_obs, \n\t\t nfs.nfs_ind_tipo_fatura,\n\t\t nfs.nfs_nfl_serie, \n\t\t nfs.nfs_nfl_num, \n\t\t mns.mns_nfl_serie,\n\t\t mns.mns_nfl_num,\n\t\t nfs.nfs_dt_receb,\n\t\t nfs.nfs_dt_envio,\n\t\t nfs.nfs_ns_serie, \n\t\t nfs.nfs_ns_numero, \t\n\t\t cnv.cnv_caixa_fatura,\n         cfg.cfg_cgc,\n\t\t emp.emp_cgc\n\nUNION ALL \n\n  SELECT top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART Itabuna' AS BASE,\n        GETDATE() AS DT_CARGA     \n    FROM cnv,   \n         emp,   \n         nfs,   \n         cfg  \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_dt_vcto >= GETDATE()  - 100) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND  \n         ( nfs.nfs_tipo <> 'NC' ) AND\n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND \n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) ) AND\n\t\t\tNOT EXISTS ( SELECT MNS.MNS_NUM FROM MNS \n\t\t\t\t\t\t\t\tWHERE ( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t\t\t\t\t\t\t\t( 8=8 ) AND \n\t\t\t\t\t\t\t\t\t\t( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n\t\t\t\t\t\t\t         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n\t\t\t\t\t\t\t         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) ) \n -------------- OK  2\nUNION ALL \n\n  SELECT top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART Itabuna' AS BASE,\n        GETDATE() AS DT_CARGA  \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS,\n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND\n\t\t ( rdi.rdi_vcto >= GETDATE() - 100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t ( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t ( rdi.rdi_recepcao <> 'S' ) AND \n\t\t ( mns.mns_mns_serie is null ) AND\n\t\t ( mns.mns_ind_liberado = 'S' ) AND \n\t\t ( nfs.nfs_status = 'P' ) AND \n\t\t ( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t ( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t ( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t ( mte.mte_status = 'D' ) AND \n\t\t ( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t ( 8=8 ) AND \n\t\t ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( rdi.rdi_mns_serie = mns.mns_serie ) AND\n\t\t ( rdi.rdi_mns_num = mns.mns_num ) AND \n\t\t ( rdi.rdi_mcc_serie_dep is not null ) AND \n\t\t ( ( mte.mte_tipo <> 'C' ) OR\n\t\t\t  ( EXISTS ( SELECT tca_cod FROM tca\n\t\t\t\t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) ) \n\n---- OK 3\n\nUNION ALL \n\n  SELECT  top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART Itabuna' AS BASE,\n        GETDATE() AS DT_CARGA \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t ( rdi.rdi_vcto >= GETDATE() - 100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t ( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t ( rdi.rdi_recepcao <> 'S' ) AND \n\t\t ( nfs.nfs_status = 'P' ) AND \n\t\t ( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t ( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t ( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t ( mte.mte_status = 'D' ) AND \n\t\t ( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( ( mte.mte_tipo <> 'C' ) OR\n\t\t\t  ( EXISTS ( SELECT tca_cod FROM tca\n\t\t\t\t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) ) AND \n\t\t\t( ( rdi.rdi_mcc_serie_dep is null ) OR \n\t\t\t  ( rdi.rdi_forma_pag = 'X' ) OR \n\t\t\t  ( rdi.rdi_seq_subst is null AND \n\t\t\t\t NOT EXISTS ( SELECT mns.mns_serie FROM mns\n\t\t\t\t\t\t\t\t\tWHERE ( rdi.rdi_mns_serie = mns.mns_serie ) AND\n\t\t\t\t\t\t\t\t\t\t\t( rdi.rdi_mns_num = mns.mns_num ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mns.mns_ind_liberado = 'S' ) ) ) ) \n ------- OK 4\nUNION ALL \n\n  SELECT  top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART Itabuna' AS BASE,\n        GETDATE() AS DT_CARGA  \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS,\n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac, \n\t\t\trdi b   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t ( rdi.rdi_vcto >= GETDATE()-100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t ( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t ( rdi.rdi_recepcao <> 'S' ) AND \n\t\t ( mns.mns_mns_serie is null ) AND\n\t\t ( mns.mns_ind_liberado = 'S' ) AND \n\t\t ( nfs.nfs_status = 'P' ) AND \n\t\t ( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t ( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t ( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t ( mte.mte_status = 'D' ) AND \n\t\t ( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t ( 8=8 ) AND \n\t\t ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( b.rdi_mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( b.rdi_mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( b.rdi_seq = rdi.rdi_seq_subst ) AND \n\t\t ( b.rdi_mns_serie = mns.mns_serie ) AND\n\t\t ( b.rdi_mns_num = mns.mns_num ) AND \n\t\t ( rdi.rdi_mcc_serie_dep is not null ) AND \n\t\t ( ( mte.mte_tipo <> 'C' ) OR\n\t\t   ( EXISTS ( SELECT tca_cod FROM tca\n\t\t \t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) )",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Baixas Itabuna",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "  SELECT  top 100\n  nfs.nfs_tipo  as NR_TIPO_TITULO,\n  cfg.cfg_cgc as CNPJ,\n\n  nfs.nfs_serie as NR_SERIE_TITULO,   \n  nfs.nfs_numero as NR_TITULO,  \n  MNS_DT as DT_RECEBIMENTO,\n  MNS_VLR AS VL_RECEBIDO,\n  0.00 AS VL_DESCONTOS,\n  0.00 AS VL_JUROS, \n  NFS_VLR_MULTA AS VL_MULTA,\n  MNS_DT AS DT_ATUALIZACAO,\n  MNS_TIPO AS DS_TIPO_RECEBIMENTO,\n  ' ' AS DS_TRANSACAO,\n   'SMART Itabuna' AS BASE,\n        GETDATE() AS DT_CARGA  \n   FROM mns ,           \n   cfg ,           \n   nfs  \n   WHERE ( nfs.nfs_serie = mns.mns_nfs_serie ) \n   and ( nfs.nfs_numero = mns.mns_nfs_numero ) \n   and ( nfs.nfs_tipo = mns.mns_nfs_tipo ) \n   and ( mns.mns_mns_serie is null ) ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Baixa_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Contas a receber"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_ITABUNA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Titulos_Receber')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Baixa_Titulos_Receber')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Contas a receber Itaigara')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline desenvolvido para alimentar as tableas:\n\nTitulos_receber e Baixa_Titulos_Receber\n\nIniciado conferencia pelo setor de Contas a Receber das informações alimentadas por Tasy e Smart.",
				"activities": [
					{
						"name": "Titulos Itaigara",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART Itaigara' AS BASE,\n        GETDATE() AS DT_CARGA \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS \nLEFT JOIN (SELECT  \n       mns.mns_serie as serie, \n       mns.mns_num as numero, \n       mns.mns_nfs_serie as nfs_serie,\n       mns.mns_nfs_numero as nfs_numero,\n       mns.mns_nfs_tipo as nfs_tipo,    \n       (SELECT sum ( m2.mns_vlr ) \n        \tFROM mns m2, nfs \n\t\t\tWHERE  ( m2.mns_mns_serie = mns.mns_serie ) AND \n\t\t\t\t\t( m2.mns_mns_num = mns.mns_num ) AND \n               ( m2.mns_nfs_serie = nfs.nfs_serie ) AND\n               ( m2.mns_nfs_numero = nfs.nfs_numero ) AND\n               ( m2.mns_nfs_tipo = nfs.nfs_tipo )) AS imposto\n\t\t\tFROM   cnv, \n\t\t\t\t\t emp, \n\t\t\t\t\t nfs, \n\t\t\t\t\t cfg, \n\t\t\t\t\t mns \n\t\t\t WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n\t\t\t\t( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n\t\t\t\t( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n\t\t\t\t( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n\t\t\t\t( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n\t\t\t\t( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100) AND  \n\t\t\t\t( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t\t( 8=8 ) AND \n\t\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) )\n\t\t\tGROUP  BY   mns.mns_serie , \n\t\t\t\t\t mns.mns_num , \n\t\t\t\t\t mns.mns_nfs_serie ,\n\t\t\t\t\t mns.mns_nfs_numero ,\n\t\t\t\t\t mns.mns_nfs_tipo  \n\n) m ON m.serie = mns.mns_serie and m.numero = mns.mns_num and m.nfs_serie = mns.mns_nfs_serie and m.nfs_numero = mns.mns_nfs_numero and m.nfs_tipo = mns.mns_nfs_tipo\n\n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100 ) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t( 8=8 ) AND \n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) ) \nGROUP BY nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         nfs.nfs_dt_vcto,   \n         nfs.nfs_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp,   \n         cnv.cnv_ccr_banco,    \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   \n         MNS.MNS_DT,   \n         MNS.MNS_TIPO, \n\t\t MNS.MNS_NFS_TIPO, \n\t\t mns.mns_mns_serie, \n\t\t mns.mns_mns_num, \n\t\t mns.mns_serie, \n\t\t mns.mns_num, \n\t\t cfg.cfg_vlrfilme, \n\t\t nfs.nfs_nde_tipo, \n\t\t nfs.nfs_vlr_ir, \n\t\t mns.mns_obs,\n\t\t nfs.nfs_ind_tipo_fatura,\n\t\t nfs.nfs_nfl_serie, \n\t\t nfs.nfs_nfl_num,\n\t\t mns.mns_nfl_serie,\n\t\t mns.mns_nfl_num,\n\t\t nfs.nfs_dt_receb,\n\t\t cfg.cfg_vlrfilme,\n\t\t nfs.nfs_dt_envio,\n\t\t nfs.nfs_ns_serie, \n\t\t nfs.nfs_ns_numero, \t\n\t\t cnv.cnv_caixa_fatura,\n         cfg.cfg_cgc,\n\t\t emp.emp_cgc \n\nUNION ALL   \n\n  SELECT top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART Itaigara' AS BASE,\n        GETDATE() AS DT_CARGA \n    FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS, \n\t\t\tnfs b  \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n\t\t\t( MNS.MNS_NFS_SERIE = b.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = b.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = b.nfs_tipo) and  \n         ( nfs.NFS_SERIE = b.nfs_ns_serie ) and  \n         ( nfs.NFS_NUMERO = b.nfs_ns_numero ) and  \n         ( nfs.NFS_TIPO = b.nfs_ns_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND\n\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100 ) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t( 8=8 ) AND \t\n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) )\nGROUP BY nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         nfs.nfs_dt_vcto,   \n         nfs.nfs_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp,   \n         cnv.cnv_ccr_banco,   \n         nfs.nfs_vlr_ir,   \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   \n         CASE WHEN mns.mns_tipo = 'NR' THEN b.nfs_dt_vcto ELSE MNS.MNS_DT END,   \n         MNS.MNS_TIPO, \n\t\t MNS.MNS_NFS_TIPO, \n\t\t mns.mns_mns_serie, \n\t\t mns.mns_mns_num, \n\t\t mns.mns_serie, \n\t\t mns.mns_num, \n\t\t b.nfs_nde_tipo, \n\t\t nfs.nfs_vlr_ir, \n\t\t mns.mns_obs, \n\t\t nfs.nfs_ind_tipo_fatura,\n\t\t nfs.nfs_nfl_serie, \n\t\t nfs.nfs_nfl_num, \n\t\t mns.mns_nfl_serie,\n\t\t mns.mns_nfl_num,\n\t\t nfs.nfs_dt_receb,\n\t\t nfs.nfs_dt_envio,\n\t\t nfs.nfs_ns_serie, \n\t\t nfs.nfs_ns_numero, \t\n\t\t cnv.cnv_caixa_fatura,\n         cfg.cfg_cgc,\n\t\t emp.emp_cgc\n\nUNION ALL \n\n  SELECT top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART Itaigara' AS BASE,\n        GETDATE() AS DT_CARGA     \n    FROM cnv,   \n         emp,   \n         nfs,   \n         cfg  \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_dt_vcto >= GETDATE()  - 100) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND  \n         ( nfs.nfs_tipo <> 'NC' ) AND\n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND \n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) ) AND\n\t\t\tNOT EXISTS ( SELECT MNS.MNS_NUM FROM MNS \n\t\t\t\t\t\t\t\tWHERE ( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t\t\t\t\t\t\t\t( 8=8 ) AND \n\t\t\t\t\t\t\t\t\t\t( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n\t\t\t\t\t\t\t         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n\t\t\t\t\t\t\t         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) ) \n -------------- OK  2\nUNION ALL \n\n  SELECT top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART Itaigara' AS BASE,\n        GETDATE() AS DT_CARGA  \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS,\n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND\n\t\t ( rdi.rdi_vcto >= GETDATE() - 100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t ( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t ( rdi.rdi_recepcao <> 'S' ) AND \n\t\t ( mns.mns_mns_serie is null ) AND\n\t\t ( mns.mns_ind_liberado = 'S' ) AND \n\t\t ( nfs.nfs_status = 'P' ) AND \n\t\t ( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t ( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t ( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t ( mte.mte_status = 'D' ) AND \n\t\t ( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t ( 8=8 ) AND \n\t\t ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( rdi.rdi_mns_serie = mns.mns_serie ) AND\n\t\t ( rdi.rdi_mns_num = mns.mns_num ) AND \n\t\t ( rdi.rdi_mcc_serie_dep is not null ) AND \n\t\t ( ( mte.mte_tipo <> 'C' ) OR\n\t\t\t  ( EXISTS ( SELECT tca_cod FROM tca\n\t\t\t\t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) ) \n\n---- OK 3\n\nUNION ALL \n\n  SELECT  top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART Itaigara' AS BASE,\n        GETDATE() AS DT_CARGA \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t ( rdi.rdi_vcto >= GETDATE() - 100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t ( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t ( rdi.rdi_recepcao <> 'S' ) AND \n\t\t ( nfs.nfs_status = 'P' ) AND \n\t\t ( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t ( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t ( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t ( mte.mte_status = 'D' ) AND \n\t\t ( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( ( mte.mte_tipo <> 'C' ) OR\n\t\t\t  ( EXISTS ( SELECT tca_cod FROM tca\n\t\t\t\t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) ) AND \n\t\t\t( ( rdi.rdi_mcc_serie_dep is null ) OR \n\t\t\t  ( rdi.rdi_forma_pag = 'X' ) OR \n\t\t\t  ( rdi.rdi_seq_subst is null AND \n\t\t\t\t NOT EXISTS ( SELECT mns.mns_serie FROM mns\n\t\t\t\t\t\t\t\t\tWHERE ( rdi.rdi_mns_serie = mns.mns_serie ) AND\n\t\t\t\t\t\t\t\t\t\t\t( rdi.rdi_mns_num = mns.mns_num ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mns.mns_ind_liberado = 'S' ) ) ) ) \n ------- OK 4\nUNION ALL \n\n  SELECT  top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART Itaigara' AS BASE,\n        GETDATE() AS DT_CARGA  \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS,\n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac, \n\t\t\trdi b   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t ( rdi.rdi_vcto >= GETDATE()-100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t ( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t ( rdi.rdi_recepcao <> 'S' ) AND \n\t\t ( mns.mns_mns_serie is null ) AND\n\t\t ( mns.mns_ind_liberado = 'S' ) AND \n\t\t ( nfs.nfs_status = 'P' ) AND \n\t\t ( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t ( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t ( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t ( mte.mte_status = 'D' ) AND \n\t\t ( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t ( 8=8 ) AND \n\t\t ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( b.rdi_mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( b.rdi_mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( b.rdi_seq = rdi.rdi_seq_subst ) AND \n\t\t ( b.rdi_mns_serie = mns.mns_serie ) AND\n\t\t ( b.rdi_mns_num = mns.mns_num ) AND \n\t\t ( rdi.rdi_mcc_serie_dep is not null ) AND \n\t\t ( ( mte.mte_tipo <> 'C' ) OR\n\t\t   ( EXISTS ( SELECT tca_cod FROM tca\n\t\t \t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) )",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Baixas Itaigara",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "  SELECT  top 100\n  nfs.nfs_tipo  as NR_TIPO_TITULO,\n  cfg.cfg_cgc as CNPJ,\n\n  nfs.nfs_serie as NR_SERIE_TITULO,   \n  nfs.nfs_numero as NR_TITULO,  \n  MNS_DT as DT_RECEBIMENTO,\n  MNS_VLR AS VL_RECEBIDO,\n  0.00 AS VL_DESCONTOS,\n  0.00 AS VL_JUROS, \n  NFS_VLR_MULTA AS VL_MULTA,\n  MNS_DT AS DT_ATUALIZACAO,\n  MNS_TIPO AS DS_TIPO_RECEBIMENTO,\n  ' ' AS DS_TRANSACAO,\n   'SMART Itaigara' AS BASE,\n        GETDATE() AS DT_CARGA  \n   FROM mns ,           \n   cfg ,           \n   nfs  \n   WHERE ( nfs.nfs_serie = mns.mns_nfs_serie ) \n   and ( nfs.nfs_numero = mns.mns_nfs_numero ) \n   and ( nfs.nfs_tipo = mns.mns_nfs_tipo ) \n   and ( mns.mns_mns_serie is null ) ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Baixa_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Contas a receber"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_ITAIGARA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Titulos_Receber')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Baixa_Titulos_Receber')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Contas a receber Oftalmoclin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline desenvolvido para alimentar as tableas:\n\nTitulos_receber e Baixa_Titulos_Receber\n\nIniciado conferencia pelo setor de Contas a Receber das informações alimentadas por Tasy e Smart.",
				"activities": [
					{
						"name": "Titulos Oftalmoclin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART Oftalmoclin' AS BASE,\n        GETDATE() AS DT_CARGA \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS \nLEFT JOIN (SELECT  \n       mns.mns_serie as serie, \n       mns.mns_num as numero, \n       mns.mns_nfs_serie as nfs_serie,\n       mns.mns_nfs_numero as nfs_numero,\n       mns.mns_nfs_tipo as nfs_tipo,    \n       (SELECT sum ( m2.mns_vlr ) \n        \tFROM mns m2, nfs \n\t\t\tWHERE  ( m2.mns_mns_serie = mns.mns_serie ) AND \n\t\t\t\t\t( m2.mns_mns_num = mns.mns_num ) AND \n               ( m2.mns_nfs_serie = nfs.nfs_serie ) AND\n               ( m2.mns_nfs_numero = nfs.nfs_numero ) AND\n               ( m2.mns_nfs_tipo = nfs.nfs_tipo )) AS imposto\n\t\t\tFROM   cnv, \n\t\t\t\t\t emp, \n\t\t\t\t\t nfs, \n\t\t\t\t\t cfg, \n\t\t\t\t\t mns \n\t\t\t WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n\t\t\t\t( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n\t\t\t\t( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n\t\t\t\t( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n\t\t\t\t( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n\t\t\t\t( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100) AND  \n\t\t\t\t( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t\t( 8=8 ) AND \n\t\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) )\n\t\t\tGROUP  BY   mns.mns_serie , \n\t\t\t\t\t mns.mns_num , \n\t\t\t\t\t mns.mns_nfs_serie ,\n\t\t\t\t\t mns.mns_nfs_numero ,\n\t\t\t\t\t mns.mns_nfs_tipo  \n\n) m ON m.serie = mns.mns_serie and m.numero = mns.mns_num and m.nfs_serie = mns.mns_nfs_serie and m.nfs_numero = mns.mns_nfs_numero and m.nfs_tipo = mns.mns_nfs_tipo\n\n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100 ) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t( 8=8 ) AND \n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) ) \nGROUP BY nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         nfs.nfs_dt_vcto,   \n         nfs.nfs_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp,   \n         cnv.cnv_ccr_banco,    \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   \n         MNS.MNS_DT,   \n         MNS.MNS_TIPO, \n\t\t MNS.MNS_NFS_TIPO, \n\t\t mns.mns_mns_serie, \n\t\t mns.mns_mns_num, \n\t\t mns.mns_serie, \n\t\t mns.mns_num, \n\t\t cfg.cfg_vlrfilme, \n\t\t nfs.nfs_nde_tipo, \n\t\t nfs.nfs_vlr_ir, \n\t\t mns.mns_obs,\n\t\t nfs.nfs_ind_tipo_fatura,\n\t\t nfs.nfs_nfl_serie, \n\t\t nfs.nfs_nfl_num,\n\t\t mns.mns_nfl_serie,\n\t\t mns.mns_nfl_num,\n\t\t nfs.nfs_dt_receb,\n\t\t cfg.cfg_vlrfilme,\n\t\t nfs.nfs_dt_envio,\n\t\t nfs.nfs_ns_serie, \n\t\t nfs.nfs_ns_numero, \t\n\t\t cnv.cnv_caixa_fatura,\n         cfg.cfg_cgc,\n\t\t emp.emp_cgc \n\nUNION ALL   \n\n  SELECT top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART Oftalmoclin' AS BASE,\n        GETDATE() AS DT_CARGA \n    FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS, \n\t\t\tnfs b  \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n\t\t\t( MNS.MNS_NFS_SERIE = b.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = b.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = b.nfs_tipo) and  \n         ( nfs.NFS_SERIE = b.nfs_ns_serie ) and  \n         ( nfs.NFS_NUMERO = b.nfs_ns_numero ) and  \n         ( nfs.NFS_TIPO = b.nfs_ns_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND\n\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100 ) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t( 8=8 ) AND \t\n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) )\nGROUP BY nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         nfs.nfs_dt_vcto,   \n         nfs.nfs_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp,   \n         cnv.cnv_ccr_banco,   \n         nfs.nfs_vlr_ir,   \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   \n         CASE WHEN mns.mns_tipo = 'NR' THEN b.nfs_dt_vcto ELSE MNS.MNS_DT END,   \n         MNS.MNS_TIPO, \n\t\t MNS.MNS_NFS_TIPO, \n\t\t mns.mns_mns_serie, \n\t\t mns.mns_mns_num, \n\t\t mns.mns_serie, \n\t\t mns.mns_num, \n\t\t b.nfs_nde_tipo, \n\t\t nfs.nfs_vlr_ir, \n\t\t mns.mns_obs, \n\t\t nfs.nfs_ind_tipo_fatura,\n\t\t nfs.nfs_nfl_serie, \n\t\t nfs.nfs_nfl_num, \n\t\t mns.mns_nfl_serie,\n\t\t mns.mns_nfl_num,\n\t\t nfs.nfs_dt_receb,\n\t\t nfs.nfs_dt_envio,\n\t\t nfs.nfs_ns_serie, \n\t\t nfs.nfs_ns_numero, \t\n\t\t cnv.cnv_caixa_fatura,\n         cfg.cfg_cgc,\n\t\t emp.emp_cgc\n\nUNION ALL \n\n  SELECT top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART Oftalmoclin' AS BASE,\n        GETDATE() AS DT_CARGA     \n    FROM cnv,   \n         emp,   \n         nfs,   \n         cfg  \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_dt_vcto >= GETDATE()  - 100) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND  \n         ( nfs.nfs_tipo <> 'NC' ) AND\n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND \n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) ) AND\n\t\t\tNOT EXISTS ( SELECT MNS.MNS_NUM FROM MNS \n\t\t\t\t\t\t\t\tWHERE ( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t\t\t\t\t\t\t\t( 8=8 ) AND \n\t\t\t\t\t\t\t\t\t\t( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n\t\t\t\t\t\t\t         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n\t\t\t\t\t\t\t         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) ) \n -------------- OK  2\nUNION ALL \n\n  SELECT top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART Oftalmoclin' AS BASE,\n        GETDATE() AS DT_CARGA  \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS,\n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND\n\t\t ( rdi.rdi_vcto >= GETDATE() - 100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t ( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t ( rdi.rdi_recepcao <> 'S' ) AND \n\t\t ( mns.mns_mns_serie is null ) AND\n\t\t ( mns.mns_ind_liberado = 'S' ) AND \n\t\t ( nfs.nfs_status = 'P' ) AND \n\t\t ( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t ( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t ( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t ( mte.mte_status = 'D' ) AND \n\t\t ( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t ( 8=8 ) AND \n\t\t ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( rdi.rdi_mns_serie = mns.mns_serie ) AND\n\t\t ( rdi.rdi_mns_num = mns.mns_num ) AND \n\t\t ( rdi.rdi_mcc_serie_dep is not null ) AND \n\t\t ( ( mte.mte_tipo <> 'C' ) OR\n\t\t\t  ( EXISTS ( SELECT tca_cod FROM tca\n\t\t\t\t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) ) \n\n---- OK 3\n\nUNION ALL \n\n  SELECT  top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART Oftalmoclin' AS BASE,\n        GETDATE() AS DT_CARGA \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t ( rdi.rdi_vcto >= GETDATE() - 100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t ( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t ( rdi.rdi_recepcao <> 'S' ) AND \n\t\t ( nfs.nfs_status = 'P' ) AND \n\t\t ( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t ( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t ( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t ( mte.mte_status = 'D' ) AND \n\t\t ( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( ( mte.mte_tipo <> 'C' ) OR\n\t\t\t  ( EXISTS ( SELECT tca_cod FROM tca\n\t\t\t\t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) ) AND \n\t\t\t( ( rdi.rdi_mcc_serie_dep is null ) OR \n\t\t\t  ( rdi.rdi_forma_pag = 'X' ) OR \n\t\t\t  ( rdi.rdi_seq_subst is null AND \n\t\t\t\t NOT EXISTS ( SELECT mns.mns_serie FROM mns\n\t\t\t\t\t\t\t\t\tWHERE ( rdi.rdi_mns_serie = mns.mns_serie ) AND\n\t\t\t\t\t\t\t\t\t\t\t( rdi.rdi_mns_num = mns.mns_num ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mns.mns_ind_liberado = 'S' ) ) ) ) \n ------- OK 4\nUNION ALL \n\n  SELECT  top 10 \n        nfs.nfs_tipo as NR_TIPO_TITULO, \n        nfs.nfs_serie as NR_SERIE_TITULO,   \n        nfs.nfs_numero as NR_TITULO,   \n        nfs.nfs_dt_emis as DT_EMISSAO_TITULO,   \n        nfs.nfs_dt_vcto as DT_VENCIMENTO_TITULO,   \n        nfs.nfs_valor as VL_TITULO,   \n        nfs.nfs_vlr_multa as VL_MULTA,   \n        cnv.cnv_nome as DS_CONVENIO,   \n        emp.emp_nome_fantasia as DS_EMPRESA_CONVENIO,   \n\t\temp.emp_cgc AS CONV_CNPJ, \n        nfs.nfs_vlr_iss as VL_ISS,   \n        nfs.nfs_vlr_ir as VL_IR,   \n        cfg.cfg_vlrfilme as VL_FILME,   \n        nfs.nfs_perc_iss as VL_PERC_ISS,   \n        nfs.nfs_perc_ir as VL_PER_IR,   \n        nfs.nfs_perc_multa as VL_PERC_MULTA,   \n        nfs.nfs_perc_juro as VL_PERC_JURO,   \n        nfs.nfs_vlr_outros_imp as VL_OUTROS_IMP,\n\t\tnfs.nfs_remessa as NR_REMESSA,\n\t\tcfg.cfg_emp as MARCA,\n\t\tcfg.cfg_emp as DS_UNIDADE,\n        cfg.cfg_cgc as CNPJ,\n        'SMART Oftalmoclin' AS BASE,\n        GETDATE() AS DT_CARGA  \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS,\n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac, \n\t\t\trdi b   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t ( rdi.rdi_vcto >= GETDATE()-100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t ( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t ( rdi.rdi_recepcao <> 'S' ) AND \n\t\t ( mns.mns_mns_serie is null ) AND\n\t\t ( mns.mns_ind_liberado = 'S' ) AND \n\t\t ( nfs.nfs_status = 'P' ) AND \n\t\t ( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t ( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t ( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t ( mte.mte_status = 'D' ) AND \n\t\t ( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t ( 8=8 ) AND \n\t\t ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( b.rdi_mte_serie = rdi.rdi_mte_serie ) AND\n\t\t ( b.rdi_mte_seq = rdi.rdi_mte_seq ) AND\n\t\t ( b.rdi_seq = rdi.rdi_seq_subst ) AND \n\t\t ( b.rdi_mns_serie = mns.mns_serie ) AND\n\t\t ( b.rdi_mns_num = mns.mns_num ) AND \n\t\t ( rdi.rdi_mcc_serie_dep is not null ) AND \n\t\t ( ( mte.mte_tipo <> 'C' ) OR\n\t\t   ( EXISTS ( SELECT tca_cod FROM tca\n\t\t \t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) )",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Baixas Oftalmoclin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "  SELECT  top 100\n  nfs.nfs_tipo  as NR_TIPO_TITULO,\n  cfg.cfg_cgc as CNPJ,\n\n  nfs.nfs_serie as NR_SERIE_TITULO,   \n  nfs.nfs_numero as NR_TITULO,  \n  MNS_DT as DT_RECEBIMENTO,\n  MNS_VLR AS VL_RECEBIDO,\n  0.00 AS VL_DESCONTOS,\n  0.00 AS VL_JUROS, \n  NFS_VLR_MULTA AS VL_MULTA,\n  MNS_DT AS DT_ATUALIZACAO,\n  MNS_TIPO AS DS_TIPO_RECEBIMENTO,\n  ' ' AS DS_TRANSACAO,\n   'SMART Oftalmoclin' AS BASE,\n        GETDATE() AS DT_CARGA  \n   FROM mns ,           \n   cfg ,           \n   nfs  \n   WHERE ( nfs.nfs_serie = mns.mns_nfs_serie ) \n   and ( nfs.nfs_numero = mns.mns_nfs_numero ) \n   and ( nfs.nfs_tipo = mns.mns_nfs_tipo ) \n   and ( mns.mns_mns_serie is null ) ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Baixa_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Contas a receber"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_Oftalmoclin_Prd_DataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Titulos_Receber')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Baixa_Titulos_Receber')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Contas a receber Sadalla')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline desenvolvido para alimentar as tableas:\n\nTitulos_receber e Baixa_Titulos_Receber\n\nIniciado conferencia pelo setor de Contas a Receber das informações alimentadas por Tasy e Smart.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Baixa Titulo Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select '' nr_tipo_titulo,\nobter_cgc_estabelecimento(R.CD_ESTABELECIMENTO) AS CNPJ, \n'' AS NR_SERIE_TITULO,\nl.nr_titulo, \nl.dt_recebimento, \nl.vl_recebido, \nl.vl_descontos, \nl.vl_juros, \nl.vl_multa, \nl.dt_atualizacao, \nt.ds_tipo_recebimento,\nx.DS_TRANSACAO,\n'TASY Delphi' AS BASE,\n SYSDATE AS DT_CARGA\nfrom titulo_receber r,\n     TITULO_RECEBER_LIQ L,\n     tipo_recebimento t,\n     TRANSACAO_FINANCEIRA X\nwhere r.nr_titulo = l.nr_titulo \nand l.cd_tipo_recebimento = t.cd_tipo_recebimento\nAND l.nr_seq_trans_fin = X.NR_SEQUENCIA",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Baixa_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Titulos Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT  \n        a.ie_tipo_titulo as NR_TIPO_TITULO,\n        '' as NR_SERIE_TITULO,\n        A.NR_TITULO,\n        A.DT_EMISSAO as DT_EMISSAO_TITULO,\n        A.DT_VENCIMENTO DT_VENCIMENTO_TITULO,\n        A.VL_TITULO VL_TITULO,\n        A.VL_MULTA_FIXO AS VL_MULTA,\n        C.DS_CONVENIO,\n        B.DS_RAZAO_SOCIAL as DS_EMPRESA_CONVENIO,\n        B.CD_CGC AS CONV_CNPJ,\n        0 AS VL_ISS,\n        0 AS VL_IR,\n        0 AS VL_FILME,\n        0 AS VL_PERC_ISS,\n        0 AS VL_PER_IR,\n        A.TX_MULTA AS VL_PERC_MULTA,\n        A.TX_JUROS AS VL_PERC_JURO,\n        A.VL_OUTRAS_DESPESAS AS VL_OUTROS_IMP,\n        0 AS NR_REMESSA,\n        EM.NM_RAZAO_SOCIAL MARCA,\n        E.NM_FANTASIA_ESTAB AS DS_UNIDADE,\n        E.CD_CGC AS CNPJ,\n'TASY Delphi' AS BASE,\n SYSDATE AS DT_CARGA\nFROM    TITULO_RECEBER A, \n        PESSOA_JURIDICA B,\n        ESTABELECIMENTO E,\n        EMPRESA EM,\n        CONVENIO C\nwhere   b.cd_cgc = a.cd_cgc\nAND     a.CD_ESTABELECIMENTO = E.CD_ESTABELECIMENTO\nAND     E.CD_EMPRESA = EM.CD_EMPRESA\nAND     B.CD_CGC = C.CD_CGC\nAND     C.DT_CANCELAMENTO IS NULL",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Contas a receber"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Baixa_Titulos_Receber')]",
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Titulos_Receber')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Convenios')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Alimenta tabela:\n\nConvenio_Unidade para o cadastro da tabela unica.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Convenio Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT OBTER_CGC_ESTABELECIMENTO(E.CD_ESTABELECIMENTO)AS CNPJ,\n       C.DS_CONVENIO,\n       C.CD_CONVENIO\nFROM CONVENIO_ESTABELECIMENTO E,\n     CONVENIO C\nWHERE E.CD_CONVENIO = C.CD_CONVENIO",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Convenio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Convenio HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT OBTER_CGC_ESTABELECIMENTO(E.CD_ESTABELECIMENTO)AS CNPJ,\n       C.DS_CONVENIO,\n       C.CD_CONVENIO\nFROM CONVENIO_ESTABELECIMENTO E,\n     CONVENIO C\nWHERE E.CD_CONVENIO = C.CD_CONVENIO",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Convenio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Convenio HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select cnv_cod AS CD_CONVENIO, cnv.cnv_nome AS DS_CONVENIO, emp.emp_cgc AS CNPJ\nfrom cnv,\n     gcc,\n     str,\n     emp\nwhere gcc.gcc_str_cod = str_cod\nand str_emp_cod = emp_cod\nand emp_cgc <> '-'\nand cnv_cod <> '999'\nand cnv_stat = 'A'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Convenio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Convenio Itaigara",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select cnv_cod AS CD_CONVENIO, cnv.cnv_nome AS DS_CONVENIO, emp.emp_cgc AS CNPJ\nfrom cnv,\n     gcc,\n     str,\n     emp\nwhere gcc.gcc_str_cod = str_cod\nand str_emp_cod = emp_cod\nand emp_cgc <> '-'\nand cnv_cod <> '999'\nand cnv_stat = 'A'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Convenio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Convenio Itabuna",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select cnv_cod AS CD_CONVENIO, cnv.cnv_nome AS DS_CONVENIO, emp.emp_cgc AS CNPJ\nfrom cnv,\n     gcc,\n     str,\n     emp\nwhere gcc.gcc_str_cod = str_cod\nand str_emp_cod = emp_cod\nand emp_cgc <> '-'\nand cnv_cod <> '999'\nand cnv_stat = 'A'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Convenio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Convenio Oftalmoclin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select cnv_cod AS CD_CONVENIO, cnv.cnv_nome AS DS_CONVENIO, emp.emp_cgc AS CNPJ\nfrom cnv,\n     gcc,\n     str,\n     emp\nwhere gcc.gcc_str_cod = str_cod\nand str_emp_cod = emp_cod\nand emp_cgc <> '-'\nand cnv_cod <> '999'\nand cnv_stat = 'A'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Convenio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Convenio INOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select cnv_cod AS CD_CONVENIO, cnv.cnv_nome AS DS_CONVENIO, emp.emp_cgc AS CNPJ\nfrom cnv,\n     gcc,\n     str,\n     emp\nwhere gcc.gcc_str_cod = str_cod\nand str_emp_cod = emp_cod\nand emp_cgc <> '-'\nand cnv_cod <> '999'\nand cnv_stat = 'A'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_INOB_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Convenio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Convenio IOF",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select cnv_cod AS CD_CONVENIO, cnv.cnv_nome AS DS_CONVENIO, emp.emp_cgc AS CNPJ\nfrom cnv,\n     gcc,\n     str,\n     emp\nwhere gcc.gcc_str_cod = str_cod\nand str_emp_cod = emp_cod\nand emp_cgc <> '-'\nand cnv_cod <> '999'\nand cnv_stat = 'A'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Convenio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Cadastros Gerais"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Convenio')]",
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_HOSL_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITAIGARA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITABUNA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_Oftalmoclin_Prd_DataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_INOB_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_IOF_PrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEPARA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Depara Procedimento",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table dbo.depara_sys",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CSV_PROCEDIMENTO_DEPARA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_CSV_DEPARA_PROCEDIMENTO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Depara Convenio",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Depara Procedimento",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table dbo.depara_sys_convenio",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CSV_CONVENIO_DEPARA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_CSV_CONVENIO_DEPARA",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Engenharia Reversa Convenio",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Depara Convenio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.SP_CONVENIO_PROD_DIARIA_AJ"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Engenharia Reversa Procedimento Smart Tasy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Engenharia Reversa Convenio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.SP_ENGENHARIA_REVERSA_PROCEDIMENTO_SMART_TASY"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CIDs GRUPOS",
						"description": "CIDs classificados pelo Dr Jhonatan Lake",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table dw.TBL_CIDs_GRUPO",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CIDs_Grupo",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_EXCEL_CIDS_GRUPO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/Outros"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CSV_PROCEDIMENTO_DEPARA')]",
				"[concat(variables('factoryId'), '/datasets/AZ_CSV_DEPARA_PROCEDIMENTO')]",
				"[concat(variables('factoryId'), '/datasets/CSV_CONVENIO_DEPARA')]",
				"[concat(variables('factoryId'), '/datasets/AZ_CSV_CONVENIO_DEPARA')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/CIDs_Grupo')]",
				"[concat(variables('factoryId'), '/datasets/AZ_EXCEL_CIDS_GRUPO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DM_ProdDiariaSMARTV2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP_SMART_RAW_PRODUCAO_DIARIA",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_SMART_RAW_PRODUCAO_DIARIA"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP_PROCESSA_PROD_DIARIA_SMART",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SP_SMART_RAW_PRODUCAO_DIARIA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_PROCESSA_PROD_DIARIA_SMART"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/3_Pipeline_Datamart/datamart_ProducaoDiaria"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DM_ProdDiaria_NAJA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RAW DATA NAJA",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.SP_NAJA_RAW_DATA_PROD_DIARIA"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ODS NAJA",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "RAW DATA NAJA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.SP_NAJA_ODS_PROD_DIARIA"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/3_Pipeline_Datamart/datamart_ProducaoDiaria"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DM_ProdDiaria_SMART')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Producao Diaria         RAW Data",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.07:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_SMART_PRODUCAO_DIARIA]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Producao Diaria         ODS",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Producao Diaria         RAW Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.07:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_SMART_ODS_PRODUCAO_DIARIA]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Producao Diaria DW",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Producao Diaria         ODS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "dbo.sp_dw_prod_diaria"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "REPROCESSA_PROD_DIARIA_SMART",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Producao Diaria DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_REPROCESSA_PROD_DIARIA_SMART"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/Ajuste DW Tasy/Antigo"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DM_ProdDiaria_TASY_HTML')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP_ODS_TASY_PROD_DIARIA",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SP_TASY_RAW_PRODUCAO_DIARIA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_ODS_TASY_PROD_DIARIA"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP_TASY_RAW_PRODUCAO_DIARIA",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_TASY_RAW_PRODUCAO_DIARIA"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP_PROCESSA_DATAMART_PROD_DIARIA_TASY_CLOUD",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SP_ODS_TASY_PROD_DIARIA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_PROCESSA_DATAMART_PROD_DIARIA_TASY_CLOUD"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/3_Pipeline_Datamart/datamart_ProducaoDiaria"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DM_ProdDiaria_TASY_ONPREMISES')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP_TASY_ONPREMISES_RAW_PRODUCAO_DIARIA",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_TASY_ONPREMISES_RAW_PRODUCAO_DIARIA"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP_ODS_TASY_ONPREMISES_PROD_DIARIA",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SP_TASY_ONPREMISES_RAW_PRODUCAO_DIARIA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_ODS_TASY_ONPREMISES_PROD_DIARIA"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP_PROCESSA_DATAMART_PROD_DIARIA_TASY_ONPREMISES",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SP_ODS_TASY_ONPREMISES_PROD_DIARIA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_PROCESSA_DATAMART_PROD_DIARIA_TASY_ONPREMISES"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/3_Pipeline_Datamart/datamart_ProducaoDiaria"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DM_ProdDiaria_TasyV2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline criado para gerar informações paliativo",
				"activities": [
					{
						"name": "SP_ODS_TASY_PROD_DIARIA_V2",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_ODS_TASY_PROD_DIARIA_V2"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP_INSERT_PRODIARIA_DATAMART",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SP_ODS_TASY_PROD_DIARIA_V2",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Delete Datamart Tasy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_INSERT_PRODIARIA_DATAMART"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Delete Datamart Tasy",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "DELETE FROM DM.tbl_fprodiaria   \nWHERE ESTABELECIMENTO IN (1,2)"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/Ajuste DW Tasy/Antigo"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DM_ProdDiaria_Tasy_Sadalla')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DT_INICIO AUT",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DT_INICIO",
							"value": {
								"value": "@concat('01/01/',string(add(int(formatDateTime(utcnow(),'yyyy')),-3)))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "DT_FINAL AUT",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DT_FINAL",
							"value": {
								"value": "@replace(formatDateTime(utcnow(),'dd-MM-yyyy'),'-','/')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Prod Diaria Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "DT_FINAL AUT",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DT_INICIO AUT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "@concat('SELECT * FROM VW_PROD_DIARIA_DW WHERE DT_ENTRADA between ''',variables('DT_INICIO'), ''' and ''',variables('DT_FINAL'),'''')",
									"type": "Expression"
								},
								"partitionOption": "None",
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE stg.prod_diaria_sadalla",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "SQL_PROD_DIARIA_SADALLA",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Processa Rawdata Sadalla",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Prod Diaria Sadalla",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_PROCESSA_RAWDATA_PROD_DIARIA_SADALLA"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"DT_INICIO": {
						"type": "String"
					},
					"DT_FINAL": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/3_Pipeline_Datamart/datamart_ProducaoDiaria"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SQL_PROD_DIARIA_SADALLA')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Databricks Five9 API')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "F9 ESP0001",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:25:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Five9/F9_ESP0001"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "STG DW FIVE9_ESP0001",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "F9 ESP0001",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SQL_DESTINO",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH ESP0001 AS (\n\n    SELECT \nCAST(ID_LIGACAO AS VARCHAR(255)) AS ID_LIGACAO\n,CAST(DATA AS VARCHAR(255)) AS DATA\n,CAST(REGISTRO_DATA_HORA AS VARCHAR(255)) AS REGISTRO_DATA_HORA\n,CAST(CAMPANHA AS VARCHAR(255)) AS CAMPANHA\n,CAST(COMPETENCIA AS VARCHAR(255)) AS COMPETENCIA\n,CAST(AGENTE AS VARCHAR(255)) AS AGENTE\n,CAST(NOME_AGENTE AS VARCHAR(255)) AS NOME_AGENTE\n,CAST(POSICAO AS VARCHAR(255)) AS POSICAO\n,CAST(ANI AS VARCHAR(255)) AS ANI\n,CAST(NOME_CLIENTE AS VARCHAR(255)) AS NOME_CLIENTE\n,CAST(DNIS AS VARCHAR(255)) AS DNIS\n,CAST(TEMPO_LIGACAO AS VARCHAR(255)) AS TEMPO_LIGACAO\n,CAST(TEMPO_FATURAMENTO_ARRED AS VARCHAR(255)) AS TEMPO_FATURAMENTO_ARRED\n,CAST(TEMPO_IVR AS VARCHAR(255)) AS TEMPO_IVR\n,CAST(CAMINHO_IVR AS VARCHAR(255)) AS CAMINHO_IVR\n,CAST(TEMPO_ESPERA_FILA AS VARCHAR(255)) AS TEMPO_ESPERA_FILA\n,CAST(TEMPO_TOQUE AS VARCHAR(255)) AS TEMPO_TOQUE\n,CAST(TEMPO_CONVERSA AS VARCHAR(255)) AS TEMPO_CONVERSA\n,CAST(TEMPO_RETENCAO AS VARCHAR(255)) AS TEMPO_RETENCAO\n,CAST(TEMPO_ESPERA AS VARCHAR(255)) AS TEMPO_ESPERA\n,CAST(TEMPO_ABANDONAR AS VARCHAR(255)) AS TEMPO_ABANDONAR\n,CAST(TEMPO_TOTAL_FILA AS VARCHAR(255)) AS TEMPO_TOTAL_FILA\n,CAST(AP_TEMPO_ATIVIDADE_LIGACAO AS VARCHAR(255)) AS AP_TEMPO_ATIVIDADE_LIGACAO\n,CAST(TRANSFERENCIAS AS VARCHAR(255)) AS TRANSFERENCIAS\n,CAST(CONFERENCIAS AS VARCHAR(255)) AS CONFERENCIAS\n,CAST(RETENCOES AS VARCHAR(255)) AS RETENCOES\n,CAST(ABANDONADA AS VARCHAR(255)) AS ABANDONADA\n,CAST(GRAVACOES AS VARCHAR(255)) AS GRAVACOES\n,CAST(TIPO_CAMPANHA AS VARCHAR(255)) AS TIPO_CAMPANHA\n,CAST(TIPO_LIGACAO AS VARCHAR(255)) AS TIPO_LIGACAO\n,CAST(GRUPO_AGENTES AS VARCHAR(255)) AS GRUPO_AGENTES\n\n    FROM STG.FIVE9_ESP0001\n)\n\n\nMERGE\t           \n\tdw.FIVE9_ESP0001 AS destino           \nUSING            \n\tESP0001 AS origem           \n           \n    ON(        \n        destino.id_ligacao = origem.id_ligacao        \n          )        \n       \n      \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \ndestino.DATA\t\t\t\t\t=origem.DATA,\ndestino.REGISTRO_DATA_HORA\t\t=origem.REGISTRO_DATA_HORA,\ndestino.CAMPANHA\t\t\t\t=origem.CAMPANHA,\ndestino.COMPETENCIA\t\t\t\t=origem.COMPETENCIA,\ndestino.AGENTE\t\t\t\t\t=origem.AGENTE,\ndestino.NOME_AGENTE\t\t\t\t=origem.NOME_AGENTE,\ndestino.POSICAO\t\t\t\t\t=origem.POSICAO,\ndestino.ANI\t\t\t\t\t\t=origem.ANI,\ndestino.NOME_CLIENTE\t\t\t=origem.NOME_CLIENTE,\ndestino.DNIS\t\t\t\t\t=origem.DNIS,\ndestino.TEMPO_LIGACAO\t\t\t=origem.TEMPO_LIGACAO,\ndestino.TEMPO_FATURAMENTO_ARRED\t=origem.TEMPO_FATURAMENTO_ARRED,\ndestino.TEMPO_IVR\t\t\t\t=origem.TEMPO_IVR,\ndestino.CAMINHO_IVR\t\t\t\t=origem.CAMINHO_IVR,\ndestino.TEMPO_ESPERA_FILA\t\t=origem.TEMPO_ESPERA_FILA,\ndestino.TEMPO_TOQUE\t\t\t\t=origem.TEMPO_TOQUE,\ndestino.TEMPO_CONVERSA\t\t\t=origem.TEMPO_CONVERSA,\ndestino.TEMPO_RETENCAO\t\t\t=origem.TEMPO_RETENCAO,\ndestino.TEMPO_ESPERA\t\t\t=origem.TEMPO_ESPERA,\ndestino.TEMPO_ABANDONAR\t\t\t=origem.TEMPO_ABANDONAR,\ndestino.TEMPO_TOTAL_FILA\t\t\t=origem.TEMPO_TOTAL_FILA,\ndestino.AP_TEMPO_ATIVIDADE_LIGACAO\t=origem.AP_TEMPO_ATIVIDADE_LIGACAO,\ndestino.TRANSFERENCIAS\t\t\t\t=origem.TRANSFERENCIAS,\ndestino.CONFERENCIAS\t\t\t\t=origem.CONFERENCIAS,\ndestino.RETENCOES\t\t\t\t\t=origem.RETENCOES,\ndestino.ABANDONADA\t\t\t\t\t=origem.ABANDONADA,\ndestino.GRAVACOES\t\t\t\t\t=origem.GRAVACOES,\ndestino.TIPO_CAMPANHA\t\t\t\t=origem.TIPO_CAMPANHA,\ndestino.TIPO_LIGACAO\t\t\t\t=origem.TIPO_LIGACAO,\ndestino.GRUPO_AGENTES\t\t\t\t=origem.GRUPO_AGENTES\n  \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.id_ligacao\t\n,origem.DATA\n,origem.REGISTRO_DATA_HORA\n,origem.CAMPANHA\n,origem.COMPETENCIA\n,origem.AGENTE\n,origem.NOME_AGENTE\n,origem.POSICAO\n,origem.ANI\n,origem.NOME_CLIENTE\n,origem.DNIS\n,origem.TEMPO_LIGACAO\n,origem.TEMPO_FATURAMENTO_ARRED\n,origem.TEMPO_IVR\n,origem.CAMINHO_IVR\n,origem.TEMPO_ESPERA_FILA\n,origem.TEMPO_TOQUE\n,origem.TEMPO_CONVERSA\n,origem.TEMPO_RETENCAO\n,origem.TEMPO_ESPERA\n,origem.TEMPO_ABANDONAR\n,origem.TEMPO_TOTAL_FILA\n,origem.AP_TEMPO_ATIVIDADE_LIGACAO\n,origem.TRANSFERENCIAS\n,origem.CONFERENCIAS\n,origem.RETENCOES\n,origem.ABANDONADA\n,origem.GRAVACOES\n,origem.TIPO_CAMPANHA\n,origem.TIPO_LIGACAO\n,origem.GRUPO_AGENTES\n);        "
								}
							]
						}
					},
					{
						"name": "STG DW FIVE9_ESP0002",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "F9 ESP0002",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SQL_DESTINO",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH TMP AS(\nSELECT\n      A.AGENTE\n      ,A.REGISTRO_HORA_DATA_ACESSO\n      ,A.REGISTRO_HORA_DATA_SAIDA\n      ,ROW_NUMBER()OVER(PARTITION BY A.AGENTE,A.REGISTRO_HORA_DATA_ACESSO,A.REGISTRO_HORA_DATA_SAIDA ORDER BY A.REGISTRO_HORA_DATA_SAIDA) ID_LINHA\nFROM STG.FIVE9_ESP0002 A\n)\nDELETE FROM TMP WHERE ID_LINHA > 1\n\nMERGE\t           \n\tdw.FIVE9_ESP0002 AS destino           \nUSING            \n\tstg.FIVE9_ESP0002 AS origem           \n           \n    ON(        \n        destino.agente = origem.agente \n\t\tAND destino.REGISTRO_HORA_DATA_ACESSO = origem.REGISTRO_HORA_DATA_ACESSO\n\t\tAND destino.REGISTRO_HORA_DATA_SAIDA = origem.REGISTRO_HORA_DATA_SAIDA\n          )        \n       \n      \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \ndestino.DATA_HORA\t\t\t\t\t=origem.DATA_HORA,\ndestino.NOME_AGENTE\t\t\t\t\t=origem.NOME_AGENTE,\ndestino.GRUPO_AGENTES\t\t\t\t=origem.GRUPO_AGENTES,\ndestino.REGISTRO_HORA_DATA_SAIDA\t=origem.REGISTRO_HORA_DATA_SAIDA,\ndestino.TEMPO_LOGIN\t\t\t\t\t=origem.TEMPO_LOGIN,\ndestino.DATA\t\t\t\t\t\t=origem.DATA\n  \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.DATA_HORA\n,origem.AGENTE\n,origem.NOME_AGENTE\n,origem.GRUPO_AGENTES\n,origem.REGISTRO_HORA_DATA_ACESSO\n,origem.REGISTRO_HORA_DATA_SAIDA\n,origem.TEMPO_LOGIN\n,origem.DATA\n);        "
								}
							]
						}
					},
					{
						"name": "STG DW FIVE9_ESP0003",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "F9 ESP0003",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SQL_DESTINO",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH ESP0003 AS (\n    SELECT\n        TMP.*\n    FROM(\n        SELECT\n            A.*\n            ,ROW_NUMBER()OVER(PARTITION BY A.ID_LIGACAO ORDER BY A.ID_LIGACAO DESC) ID_LINHA\n        FROM STG.FIVE9_ESP0003 A\n    )TMP\n    WHERE TMP.ID_LINHA = 1  \n)\n\n\n\nMERGE\t           \n\tdw.FIVE9_ESP0003 AS destino           \nUSING            \n\tESP0003 AS origem           \n           \n    ON(        \n        destino.id_ligacao = origem.id_ligacao \n          )        \n       \n      \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \ndestino.ID_LIGACAO\t\t\t\t\t\t\t=origem.ID_LIGACAO,\ndestino.CAMPANHA\t\t\t\t\t\t\t=origem.CAMPANHA,\ndestino.TIPO_LIGACAO\t\t\t\t\t\t=origem.TIPO_LIGACAO,\ndestino.AGENTE\t\t\t\t\t\t\t\t=origem.AGENTE,\ndestino.NOME_AGENTE\t\t\t\t\t\t\t=origem.NOME_AGENTE,\ndestino.POSICAO\t\t\t\t\t\t\t\t=origem.POSICAO,\ndestino.ANI\t\t\t\t\t\t\t\t\t=origem.ANI,\ndestino.TEMPO_LIGACAO\t\t\t\t\t\t=origem.TEMPO_LIGACAO,\ndestino.TEMPO_FATURAMENTO_ARRENDONDADO\t\t=origem.TEMPO_FATURAMENTO_ARRENDONDADO,\ndestino.TEMPO_RETENCAO\t\t\t\t\t\t=origem.TEMPO_RETENCAO,\ndestino.TEMPO_ESPERA\t\t\t\t\t\t=origem.TEMPO_ESPERA,\ndestino.APÓS_TEMPO_ATIVIDADE_LIGACAO\t\t=origem.APÓS_TEMPO_ATIVIDADE_LIGACAO,\ndestino.TRANSFERENCIAS\t\t\t\t\t\t=origem.TRANSFERENCIAS,\ndestino.CONFERENCIAS\t\t\t\t\t\t=origem.CONFERENCIAS,\ndestino.ABANDONADA\t\t\t\t\t\t\t=origem.ABANDONADA,\ndestino.DATA\t\t\t\t\t\t\t\t=origem.DATA,\ndestino.HORA\t\t\t\t\t\t\t\t=origem.HORA,\ndestino.COMPETENCIA\t\t\t\t\t\t\t=origem.COMPETENCIA,\ndestino.TEMPO_CONVERSA\t\t\t\t\t\t=origem.TEMPO_CONVERSA\n  \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.ID_LIGACAO\n,origem.CAMPANHA\n,origem.TIPO_LIGACAO\n,origem.AGENTE\n,origem.NOME_AGENTE\n,origem.POSICAO\n,origem.ANI\n,origem.TEMPO_LIGACAO\n,origem.TEMPO_FATURAMENTO_ARRENDONDADO\n,origem.TEMPO_RETENCAO\n,origem.TEMPO_ESPERA\n,origem.APÓS_TEMPO_ATIVIDADE_LIGACAO\n,origem.TRANSFERENCIAS\n,origem.CONFERENCIAS\n,origem.ABANDONADA\n,origem.DATA\n,origem.HORA\n,origem.COMPETENCIA\n,origem.TEMPO_CONVERSA\n\n);        \n"
								}
							]
						}
					},
					{
						"name": "STG DW FIVE9_ESP0004",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "F9 ESP0004",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SQL_DESTINO",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH DADOS AS(\n    SELECT DISTINCT\n    CAMPANHA\n    ,TIPO_LIGACAO\n    ,AGENTE\n    ,NOME_AGENTE\n    ,POSICAO\n    ,ANI\n    ,DNIS\n    ,TEMPO_LIGACAO\n    ,TEMPO_ESPERA_FILA\n    ,TEMPO_CONVERSA\n    ,TEMPO_ESPERA\n    ,ABANDONADA\n    ,DATA\n    ,HORA\n    FROM STG.FIVE9_ESP0004\n)\n\n\nMERGE\t           \n\tdw.FIVE9_ESP0004 AS destino           \nUSING            \n\tDADOS AS origem           \n           \n    ON(        \ndestino.CAMPANHA\t\t\t\t\t=origem.CAMPANHA\t\t\tAND\ndestino.TIPO_LIGACAO\t\t\t\t=origem.TIPO_LIGACAO\t\tAND\ndestino.AGENTE\t\t\t\t\t\t=origem.AGENTE\t\t\t\tAND\ndestino.NOME_AGENTE\t\t\t\t\t=origem.NOME_AGENTE\t\t\tAND\ndestino.POSICAO\t\t\t\t\t\t=origem.POSICAO\t\t\t\tAND\ndestino.ANI\t\t\t\t\t\t\t=origem.ANI\t\t\t\t\tAND\ndestino.DNIS\t\t\t\t\t\t=origem.DNIS\t\t\t\tAND\ndestino.TEMPO_LIGACAO\t\t\t\t=origem.TEMPO_LIGACAO\t\tAND\ndestino.TEMPO_ESPERA_FILA\t\t\t=origem.TEMPO_ESPERA_FILA\tAND\ndestino.TEMPO_CONVERSA\t\t\t\t=origem.TEMPO_CONVERSA\t\tAND\ndestino.TEMPO_ESPERA\t\t\t\t=origem.TEMPO_ESPERA\t\tAND\ndestino.ABANDONADA\t\t\t\t\t=origem.ABANDONADA\t\t\tAND\ndestino.DATA\t\t\t\t\t\t=origem.DATA\t\t\t\tAND\ndestino.HORA\t\t\t\t\t\t=origem.HORA\n          )        \n       \n      \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \ndestino.CAMPANHA\t\t\t\t\t=origem.CAMPANHA,\ndestino.TIPO_LIGACAO\t\t\t\t=origem.TIPO_LIGACAO,\ndestino.AGENTE\t\t\t\t\t\t=origem.AGENTE,\ndestino.NOME_AGENTE\t\t\t\t\t=origem.NOME_AGENTE,\ndestino.POSICAO\t\t\t\t\t\t=origem.POSICAO,\ndestino.ANI\t\t\t\t\t\t\t=origem.ANI,\ndestino.DNIS\t\t\t\t\t\t=origem.DNIS,\ndestino.TEMPO_LIGACAO\t\t\t\t=origem.TEMPO_LIGACAO,\ndestino.TEMPO_ESPERA_FILA\t\t\t=origem.TEMPO_ESPERA_FILA,\ndestino.TEMPO_CONVERSA\t\t\t\t=origem.TEMPO_CONVERSA,\ndestino.TEMPO_ESPERA\t\t\t\t=origem.TEMPO_ESPERA,\ndestino.ABANDONADA\t\t\t\t\t=origem.ABANDONADA,\ndestino.DATA\t\t\t\t\t\t=origem.DATA,\ndestino.HORA\t\t\t\t\t\t=origem.HORA\n  \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.CAMPANHA\n,origem.TIPO_LIGACAO\n,origem.AGENTE\n,origem.NOME_AGENTE\n,origem.POSICAO\n,origem.ANI\n,origem.DNIS\n,origem.TEMPO_LIGACAO\n,origem.TEMPO_ESPERA_FILA\n,origem.TEMPO_CONVERSA\n,origem.TEMPO_ESPERA\n,origem.ABANDONADA\n,origem.DATA\n,origem.HORA\n);"
								}
							]
						}
					},
					{
						"name": "F9 ESP0002",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:25:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Five9/F9_ESP0002"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "F9 ESP0003",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:25:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Five9/F9_ESP0003"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "F9 ESP0004",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:25:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Five9/F9_ESP0004"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "F9 ESP001WPP",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Five9/F9_ESP0001_WPP"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "STG DW FIVE9 ESP0001WPP",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "F9 ESP001WPP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH ESP0001_WPP AS(\nSELECT \n    *\n    ,CASE\n     WHEN CHARINDEX('jan',HR_INICIO_SESSAO) > 0 THEN SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),7,5) + '-01-' + SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),1,2)\n     WHEN CHARINDEX('fev',HR_INICIO_SESSAO) > 0 THEN SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),7,5) + '-02-' + SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),1,2)\n     WHEN CHARINDEX('mar',HR_INICIO_SESSAO) > 0 THEN SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),7,5) + '-03-' + SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),1,2)\n     WHEN CHARINDEX('abr',HR_INICIO_SESSAO) > 0 THEN SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),7,5) + '-04-' + SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),1,2)\n     WHEN CHARINDEX('mai',HR_INICIO_SESSAO) > 0 THEN SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),7,5) + '-05-' + SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),1,2)\n     WHEN CHARINDEX('jun',HR_INICIO_SESSAO) > 0 THEN SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),7,5) + '-06-' + SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),1,2)\n     WHEN CHARINDEX('jul',HR_INICIO_SESSAO) > 0 THEN SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),7,5) + '-07-' + SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),1,2)\n     WHEN CHARINDEX('ago',HR_INICIO_SESSAO) > 0 THEN SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),7,5) + '-08-' + SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),1,2)\n     WHEN CHARINDEX('set',HR_INICIO_SESSAO) > 0 THEN SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),7,5) + '-09-' + SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),1,2)\n     WHEN CHARINDEX('out',HR_INICIO_SESSAO) > 0 THEN SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),7,5) + '-10-' + SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),1,2)\n     WHEN CHARINDEX('nov',HR_INICIO_SESSAO) > 0 THEN SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),7,5) + '-11-' + SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),1,2)\n     WHEN CHARINDEX('dez',HR_INICIO_SESSAO) > 0 THEN SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),7,5) + '-12-' + SUBSTRING(SUBSTRING(LTRIM(RTRIM(HR_INICIO_SESSAO)),1,11),1,2)\n    END [DATA_INICIO_SESSAO]    \nFROM STG.FIVE9_ESP0001_WPP\nWHERE GUIA_SESSAO IS NOT NULL\n)\n\nMERGE\t    \n\t[dw].[FIVE9_ESP0001_WPP] AS destino    \nUSING     \n\tESP0001_WPP AS origem  \n\tON (destino.GUIA_SESSAO\t      = origem.GUIA_SESSAO)    \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração    \nWHEN MATCHED     \nTHEN UPDATE SET    \n                destino.GUIA_SESSAO = origem.GUIA_SESSAO\n                ,destino.[HR_INICIO_SESSAO] = origem.[HR_INICIO_SESSAO]\n                ,destino.[CAMPANHA] = origem.[CAMPANHA]\n                ,destino.[USUARIO] = origem.[USUARIO]\n                ,destino.[NOME_AGENDA] = origem.[NOME_AGENDA]\n                ,destino.[TIPO_AGENDA] = origem.[TIPO_AGENDA]\n                ,destino.[SUBTIPO_AGENDA] = origem.[SUBTIPO_AGENDA]\n                ,destino.[FORNECEDOR_AGENDA] = origem.[FORNECEDOR_AGENDA]\n                ,destino.[TIPO_INTERACAO] = origem.[TIPO_INTERACAO]\n                ,destino.[FONTE_MIDIA] = origem.[FONTE_MIDIA]\n                ,destino.[POSICAO] = origem.[POSICAO]\n                ,destino.[LIGACAO_NM_PACIENTE] = origem.[LIGACAO_NM_PACIENTE]\n                ,destino.[PARA_ENDERECO] = origem.[PARA_ENDERECO]\n                ,destino.[DO_AGENDA] = origem.[DO_AGENDA]\n                ,destino.[VISUALIZAR_ENGAJADOS] = origem.[VISUALIZAR_ENGAJADOS]\n                ,destino.[TEMPO_VISUALIZACAO] = origem.[TEMPO_VISUALIZACAO]\n                ,destino.[TEMPO_DECISAO] = origem.[TEMPO_DECISAO]\n                ,destino.[TEMPO_INTERACAO] = origem.[TEMPO_INTERACAO]\n                ,destino.[TEMPO_FILA] = origem.[TEMPO_FILA]\n                ,destino.[TEMPO_ACEITAR] = origem.[TEMPO_ACEITAR]\n                ,destino.[TEMPO_PROCESSAMENTO] = origem.[TEMPO_PROCESSAMENTO]\n                ,destino.[TEMPO_RESPOSTA] = origem.[TEMPO_RESPOSTA]\n                ,destino.[APOS_HORARIO_TRABALHO] = origem.[APOS_HORARIO_TRABALHO]\n                ,destino.[TRANSFERENCIA] = origem.[TRANSFERENCIA]\n                ,destino.[OFERTAS_PROATIVAS] = origem.[OFERTAS_PROATIVAS]\n                ,destino.[STATUS] = origem.[STATUS]\n                ,destino.[HORARIO_FINAL_SESSAO] = origem.[HORARIO_FINAL_SESSAO]\n                ,destino.[TRANSFERIDA_PARA] = origem.[TRANSFERIDA_PARA]\n                ,destino.[TRANSFERIDO_DE] = origem.[TRANSFERIDO_DE]\n                ,destino.[RESPONDIDO_AGENDA_ATUAL] = origem.[RESPONDIDO_AGENDA_ATUAL]\n                ,destino.[TEMPO_RESOLUCAO] = origem.[TEMPO_RESOLUCAO]\n                ,destino.[REJEITADO_AGENTE] = origem.[REJEITADO_AGENTE]\n                ,destino.[CONVERSA_RECUSADA] = origem.[CONVERSA_RECUSADA]\n                ,destino.[TEMPO_ANDAMENTO] = origem.[TEMPO_ANDAMENTO]\n                ,destino.[TEMPO_FILA_CONVERSAS] = origem.[TEMPO_FILA_CONVERSAS]\n                ,destino.[TEMPO_CONVERSA] = origem.[TEMPO_CONVERSA]\n                ,destino.[DATA_INICIO_SESSAO] = origem.[DATA_INICIO_SESSAO]\n \n                --Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino    \n                WHEN NOT MATCHED BY TARGET     \n                THEN INSERT     \n                \tVALUES (      \n                ORIGEM.GUIA_SESSAO\n                ,ORIGEM.[HR_INICIO_SESSAO]\n                ,ORIGEM.[CAMPANHA]\n                ,ORIGEM.[USUARIO]\n                ,ORIGEM.[NOME_AGENDA]\n                ,ORIGEM.[TIPO_AGENDA]\n                ,ORIGEM.[SUBTIPO_AGENDA]\n                ,ORIGEM.[FORNECEDOR_AGENDA]\n                ,ORIGEM.[TIPO_INTERACAO]\n                ,ORIGEM.[FONTE_MIDIA]\n                ,ORIGEM.[POSICAO]\n                ,ORIGEM.[LIGACAO_NM_PACIENTE]\n                ,ORIGEM.[PARA_ENDERECO]\n                ,ORIGEM.[DO_AGENDA]\n                ,ORIGEM.[VISUALIZAR_ENGAJADOS]\n                ,ORIGEM.[TEMPO_VISUALIZACAO]\n                ,ORIGEM.[TEMPO_DECISAO]\n                ,ORIGEM.[TEMPO_INTERACAO]\n                ,ORIGEM.[TEMPO_FILA]\n                ,ORIGEM.[TEMPO_ACEITAR]\n                ,ORIGEM.[TEMPO_PROCESSAMENTO]\n                ,ORIGEM.[TEMPO_RESPOSTA]\n                ,ORIGEM.[APOS_HORARIO_TRABALHO]\n                ,ORIGEM.[TRANSFERENCIA]\n                ,ORIGEM.[OFERTAS_PROATIVAS]\n                ,ORIGEM.[STATUS]\n                ,ORIGEM.[HORARIO_FINAL_SESSAO]\n                ,ORIGEM.[TRANSFERIDA_PARA]\n                ,ORIGEM.[TRANSFERIDO_DE]\n                ,ORIGEM.[RESPONDIDO_AGENDA_ATUAL]\n                ,ORIGEM.[TEMPO_RESOLUCAO]\n                ,ORIGEM.[REJEITADO_AGENTE]\n                ,ORIGEM.[CONVERSA_RECUSADA]\n                ,ORIGEM.[TEMPO_ANDAMENTO]\n                ,ORIGEM.[TEMPO_FILA_CONVERSAS]\n                ,ORIGEM.[TEMPO_CONVERSA]\n                ,ORIGEM.[DATA_INICIO_SESSAO]\n                );   "
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/Five9"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL_DESTINO')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DataMart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Verifica Start Datamart",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT\n    COUNT(1) as QT_REGISTRO \nFROM(\n    SELECT \n        A.ID_PLATAFORMA\n        ,B.DS_PLATAFORMA\n        ,A.TIPO_PROCESSO\n        ,MAX(A.DT_INICIO_PROCESS) DT_INICIO_PROCESS \n        ,CAST(MAX(A.DT_FIM_PROCESS) AS DATE) DT_FIM_PROCESS         \n    FROM DBO.LOG_PROCESSAMENTO_DW A\n    INNER JOIN DBO.cfg_plataforma_dw B ON B.ID_PLATAFORMA = A.ID_PLATAFORMA\n    WHERE UPPER(A.NOME_PROCESSO) LIKE '%CARGA_DW'\n    GROUP BY A.ID_PLATAFORMA\n        ,B.DS_PLATAFORMA\n        ,A.TIPO_PROCESSO\n)TMP    \nWHERE TMP.DT_FIM_PROCESS = CAST(GETDATE() AS DATE)\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AZ_SQL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Processo",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Verifica Start Datamart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Verifica Start Datamart').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Inicia Atualizacao Datamart",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greaterOrEquals(item().QT_REGISTRO,2 )",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Busca Email",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"sqlReaderQuery": "SELECT * FROM ADF.OWNER",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"dataset": {
														"referenceName": "AZ_SQL",
														"type": "DatasetReference",
														"parameters": {}
													}
												}
											},
											{
												"name": "Variable Email",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Busca Email",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "email",
													"value": {
														"value": "@activity('Busca Email').output.firstRow['Email']",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Disparado de Erro Datamart Receb",
												"type": "ExecutePipeline",
												"dependsOn": [
													{
														"activity": "Variable Email",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Send email",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {
														"EmailTo": {
															"value": "@variables('email')",
															"type": "Expression"
														},
														"Subject": {
															"value": "@pipeline().Pipeline",
															"type": "Expression"
														},
														"ErrorMessage": "Falha na atualização do Datamart Recebimento"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Processa Datamart",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [],
												"policy": {
													"timeout": "7.00:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "SP_PROCESSA_RECEBIMENTO_SYS_LEG"
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"email": {
						"type": "String"
					},
					"qt_registro": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AZ_SQL')]",
				"[concat(variables('factoryId'), '/pipelines/Send email')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Desen_HTML5_Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipelines desenvolvidos em conjunto com a empresa Class para a extração das informações de produção. Atualmente desativado.",
				"activities": [
					{
						"name": "Processa Itens",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy_Materials",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy_Procedures",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ProcessTempItems]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Tabela Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processa Itens",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from TEMPTASY\nWhere Processed = 'Sim'",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MARCA",
											"type": "String"
										},
										"sink": {
											"name": "DS_MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PROCED_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCED_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										},
										"sink": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "TIPO_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "TIPO_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CRM",
											"type": "String"
										},
										"sink": {
											"name": "CRM_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MPE",
											"type": "String"
										},
										"sink": {
											"name": "MPE_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "INTERCOMPANY",
											"type": "String"
										},
										"sink": {
											"name": "INTERCOMPANY_EXECUTOR",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlProcedimentosTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Temp Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Tabela Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[TRUNCATETEMPTABLE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy_Procedures",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select \n\n'HTML5' as BASE,\n'' as cd_marca,\n'' as marca,\n'' as cd_estabelecimento,\np.nr_atendimento,\np.nr_atendimento as nr_registro_unico,\np.dt_atualizacao,\nat.dt_entrada,\np.nr_interno_conta,\nobter_nome_estab(c.cd_estabelecimento) as ds_estabelecimento,\npf.cd_pessoa_fisica,\npf.dt_nascimento,\npf.nr_cpf,\npf.ie_sexo,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CEP') as nr_cep,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CI') as ds_cidade,\nobter_nome_pf(at.cd_pessoa_fisica) as ds_pessoa_fisica,\np.cd_convenio as cd_convenio,\nobter_nome_convenio(c.cd_convenio_parametro) as ds_convenio,\np.cd_medico_executor,\nobter_nome_pf(p.cd_medico_executor) as ds_medico_executor,\np.cd_medico_req as cd_medico_requisitante,\nobter_nome_pf(p.cd_medico_req) as ds_medico_requisitante,\np.ie_origem_proced,\np.cd_procedimento,\nobter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced) as ds_procedimento, \nobter_valor_dominio(19,pr.ie_classificacao) as ds_classificacao,\n'' as ds_classif_procedimento,\n0 as cd_proced_principal,\n'' ds_proced_principal,\np.qt_procedimento,\nc.vl_conta,\np.vl_procedimento,\nc.ie_status_acerto,\ndecode(c.ie_status_acerto, 1,'Provisorio' , 2 ,'Definitivo') as status_conta,\n'' as cd_tuss,\n'' as ds_classif_lio\nfrom procedimento_paciente p,\natendimento_paciente at,\npessoa_fisica pf,\nprocedimento pr,\nconta_paciente c\nwhere p.nr_atendimento = at.nr_atendimento\nand at.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand p.cd_procedimento = pr.cd_procedimento\nand p.ie_origem_proced = pr.ie_origem_proced\nand p.nr_interno_conta = c.nr_interno_conta\nand p.cd_motivo_exc_conta is null\nand c.ie_cancelamento is null\nand at.dt_entrada between sysdate - 1 and sysdate",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy_Materials",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select \n\n'HTML5' as BASE,\n'' as cd_marca,\n'' as marca,\n'' as cd_estabelecimento,\np.nr_atendimento,\n'' as nr_registro_unico,\np.dt_atualizacao,\nat.dt_entrada,\np.nr_interno_conta,\nobter_nome_estab(c.cd_estabelecimento) as ds_estabelecimento,\npf.cd_pessoa_fisica,\npf.dt_nascimento,\npf.nr_cpf,\npf.ie_sexo,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CEP') as nr_cep,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CI') as ds_cidade,\nobter_nome_pf(at.cd_pessoa_fisica) as ds_pessoa_fisica,\np.cd_convenio as cd_convenio,\nobter_nome_convenio(c.cd_convenio_parametro) as ds_convenio,\nci.cd_medico_cirurgiao as cd_medico_executor,\nobter_nome_pf(ci.cd_medico_cirurgiao) as ds_medico_executor,\nci.cd_medico_cirurgiao as cd_medico_requisitante,\nobter_nome_pf(ci.cd_medico_cirurgiao) as ds_medico_requisitante,\n'' as ie_origem_proced,\np.cd_material as cd_procedimento,\npr.ds_material as ds_procedimento, \n'Material' as ds_classificacao,\n'' as ds_classif_procedimento,\n0 as cd_proced_principal,\n'' ds_proced_principal,\np.qt_material as qt_procedimento,\nc.vl_conta,\np.vl_material as vl_procedimento,\nc.ie_status_acerto,\ndecode(c.ie_status_acerto, 1,'Provisorio' , 2 ,'Definitivo') as status_conta,\n0 as cd_tuss,\n'' as ds_classif_lio\nfrom material_atend_paciente p,\natendimento_paciente at,\npessoa_fisica pf,\nmaterial pr,\nconta_paciente c,\ncirurgia ci\nwhere p.nr_atendimento = at.nr_atendimento\nand at.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand p.cd_material = pr.cd_material\nand p.nr_interno_conta = c.nr_interno_conta\nand p.nr_cirurgia = ci.nr_cirurgia\nand p.nr_atendimento = ci.nr_atendimento\nand p.cd_motivo_exc_conta is null\nand c.ie_cancelamento is null\nand at.dt_entrada between sysdate - 2 and sysdate - 1",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Producao Medica/Desenvolvimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTEMPTable')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlProcedimentosTable')]",
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Desenvolvimento')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipelines desenvolvidos em conjunto com a empresa Class para a extração das informações de produção. Atualmente desativado.",
				"activities": [
					{
						"name": "SMART_HOSL_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        top 5\n        'Smart HOSL' as BASE\n        ,3 as CD_MARCA\n        ,'DAYHORC' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 7\n            when '9' then 7\n            when '13' then 7\n            when 'SCL' then 7\n            when '901' then 7\n            when 'IOF' then 7\n            when '13' then 8\n            when 'DHI' then 9\n        end as CD_ESTABELECIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 'HBA'\n            when '9' then 'HBA'\n            when '13' then 'HBA'\n            when 'SCL' then 'HBA'\n            when '901' then 'HBA'\n            when 'IOF' then 'HBA'\n            when '13' then 'Itaigara'\n            when 'DHI' then 'Itabuna'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,0) as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,0 as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and osm_dthr >= '2019-02-26'\n        and osm_dthr <= '2019-02-26 23:59:000'\n)\n\nselect \n    BASE\n    ,CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\n    -- ,smm_rci_serie\n    -- ,smm_rci_num\n    -- ,smm_p_osm_serie\n    -- ,smm_p_osm_num\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "String"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "BASE",
											"type": "String"
										},
										"sink": {
											"name": "BASE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SMART_ITABUNA_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        TOP 5\n        'Smart DayHorc Itabuna' as BASE\n        ,3 as CD_MARCA\n        ,'DAYHORC' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 7\n            when '9' then 7\n            when '13' then 7\n            when 'SCL' then 7\n            when '901' then 7\n            when 'IOF' then 7\n            when '13' then 8\n            when 'DHI' then 9\n        end as CD_ESTABELECIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 'HBA'\n            when '9' then 'HBA'\n            when '13' then 'HBA'\n            when 'SCL' then 'HBA'\n            when '901' then 'HBA'\n            when 'IOF' then 'HBA'\n            when '13' then 'Itaigara'\n            when 'DHI' then 'Itabuna'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,0) as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,0 as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and osm_dthr >= '2019-02-26'\n        and osm_dthr <= '2019-02-26 23:59:000'\n)\n\nselect \n    BASE\n    ,CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\n    -- ,smm_rci_serie\n    -- ,smm_rci_num\n    -- ,smm_p_osm_serie\n    -- ,smm_p_osm_num\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "BASE",
											"type": "String"
										},
										"sink": {
											"name": "BASE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SMART_ITAIGARA_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        TOP 20\n        'Smart DayHorc Itaigara' as BASE\n        ,3 as CD_MARCA\n        ,'DAYHORC' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 7\n            when '9' then 7\n            when '13' then 7\n            when 'SCL' then 7\n            when '901' then 7\n            when 'IOF' then 7\n            when '13' then 8\n            when 'DHI' then 9\n        end as CD_ESTABELECIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 'HBA'\n            when '9' then 'HBA'\n            when '13' then 'HBA'\n            when 'SCL' then 'HBA'\n            when '901' then 'HBA'\n            when 'IOF' then 'HBA'\n            when '13' then 'Itaigara'\n            when 'DHI' then 'Itabuna'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,0) as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,0 as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and osm_dthr >= '2019-02-26'\n        and osm_dthr <= '2019-02-26 23:59:000'\n)\n\nselect \n    BASE\n    ,CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\n    -- ,smm_rci_serie\n    -- ,smm_rci_num\n    -- ,smm_p_osm_serie\n    -- ,smm_p_osm_num\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "String"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "BASE",
											"type": "String"
										},
										"sink": {
											"name": "BASE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SMART_INOB_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        TOP 5\n        'Smart INOB' as BASE\n        ,3 as CD_MARCA\n        ,'DAYHORC' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 7\n            when '9' then 7\n            when '13' then 7\n            when 'SCL' then 7\n            when '901' then 7\n            when 'IOF' then 7\n            when '13' then 8\n            when 'DHI' then 9\n        end as CD_ESTABELECIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 'HBA'\n            when '9' then 'HBA'\n            when '13' then 'HBA'\n            when 'SCL' then 'HBA'\n            when '901' then 'HBA'\n            when 'IOF' then 'HBA'\n            when '13' then 'Itaigara'\n            when 'DHI' then 'Itabuna'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,0) as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,0 as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and osm_dthr >= '2019-02-26'\n        and osm_dthr <= '2019-02-26 23:59:000'\n)\n\nselect\n    BASE \n    ,CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\n    -- ,smm_rci_serie\n    -- ,smm_rci_num\n    -- ,smm_p_osm_serie\n    -- ,smm_p_osm_num\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "String"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "BASE",
											"type": "String"
										},
										"sink": {
											"name": "BASE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_INOB_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SMART_IOF_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        TOP 5\n        'Smart IOF' as BASE\n        ,3 as CD_MARCA\n        ,'DAYHORC' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 7\n            when '9' then 7\n            when '13' then 7\n            when 'SCL' then 7\n            when '901' then 7\n            when 'IOF' then 7\n            when '13' then 8\n            when 'DHI' then 9\n        end as CD_ESTABELECIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 'HBA'\n            when '9' then 'HBA'\n            when '13' then 'HBA'\n            when 'SCL' then 'HBA'\n            when '901' then 'HBA'\n            when 'IOF' then 'HBA'\n            when '13' then 'Itaigara'\n            when 'DHI' then 'Itabuna'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,0) as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,0 as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and osm_dthr >= '2019-02-26'\n        and osm_dthr <= '2019-02-26 23:59:000'\n)\n\nselect\n    BASE \n    ,CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\n    -- ,smm_rci_serie\n    -- ,smm_rci_num\n    -- ,smm_p_osm_serie\n    -- ,smm_p_osm_num\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "String"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "BASE",
											"type": "String"
										},
										"sink": {
											"name": "BASE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_INOB_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Sadalla_Tasy_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\n\n'Tasy Sadalla' as BASE,\n--x.nr_seq_proc_pacote,\n7 as cd_marca,\n'Hospital de Olhos Sadalla Amin Ghanem' as marca,\n17 as cd_estabelecimento,\nc.nr_atendimento,\n'7'||'17'||c.nr_atendimento as nr_registro_unico,\nx.dt_atualizacao,\nat.dt_entrada,\nc.nr_interno_conta,\nnull as ds_estabelecimento,\npf.cd_pessoa_fisica,\n\npf.dt_nascimento,\npf.nr_cpf,\npf.ie_sexo,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CEP') as nr_cep,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CI') as ds_cidade,\n--pf.cd_pessoa_fisica as cd_pessoa_fisica,\nobter_nome_pf(at.cd_pessoa_fisica) as ds_pessoa_fisica,\nc.cd_convenio_parametro as cd_convenio,\nobter_nome_convenio(c.cd_convenio_parametro) as ds_convenio,\nx.cd_medico_executor,\nobter_nome_pf(x.cd_medico_executor) as ds_medico_executor,\nx.cd_medico_req as cd_medico_requisitante,\nobter_nome_pf(x.cd_medico_req) as ds_medico_requisitante,\nx.ie_origem_proced,\nx.cd_procedimento,\nx.ds_procedimento as ds_procedimento,\nx.classif as ds_classificacao,\n\n(select r.ds_grupo_receita from grupo_receita r where r.nr_sequencia = x.nr_seq_grupo_rec) as ds_classif_procedimento,\n\ncase\nwhen (select r.nr_sequencia from grupo_receita r where r.nr_sequencia = x.nr_seq_grupo_rec) = 12 then x.cd_procedimento\nelse\n\n(select z.cd_procedimento as valor \n from procedimento_paciente z \n where z.nr_atendimento = c.nr_atendimento \n and z.nr_interno_conta = c.nr_interno_conta \n --and z.vl_medico = (select max(w.vl_medico) \n and z.nr_sequencia = (select min(w.nr_sequencia)\n                          from procedimento_paciente w \n                          where w.nr_atendimento = z.nr_atendimento \n                          and w.nr_interno_conta = z.nr_interno_conta\n                          and w.cd_motivo_exc_conta is null\n                          ) \n group by z.cd_procedimento) end cd_proced_principal,\n\ncase\nwhen (select r.nr_sequencia from grupo_receita r where r.nr_sequencia = x.nr_seq_grupo_rec) = 12 then obter_desc_procedimento(x.cd_procedimento, x.ie_origem_proced)\nelse\n\nobter_desc_procedimento(\n\n(select z.cd_procedimento as valor \n   from procedimento_paciente z \n   where z.nr_atendimento = c.nr_atendimento \n   and z.nr_interno_conta = c.nr_interno_conta \n   --and z.vl_medico = (select max(w.vl_medico) \n    and z.nr_sequencia = (select min(w.nr_sequencia)\n                            from procedimento_paciente w \n                            where w.nr_atendimento = z.nr_atendimento \n                            and w.nr_interno_conta = z.nr_interno_conta\n                            and w.cd_motivo_exc_conta is null\n                            ) \n                            group by z.cd_procedimento),\n\n(select min(z.ie_origem_proced) as ie_origem_proced \n   from procedimento_paciente z \n   where z.nr_atendimento = c.nr_atendimento \n   and z.nr_interno_conta = c.nr_interno_conta \n   --and z.vl_medico = (select max(w.vl_medico) \n    and z.nr_sequencia = (select min(w.nr_sequencia)\n                         from procedimento_paciente w \n                         where w.nr_atendimento = z.nr_atendimento \n                         and w.nr_interno_conta = z.nr_interno_conta\n                         and w.cd_motivo_exc_conta is null\n                         ) \n group by z.ie_origem_proced)\n\n)end ds_proced_principal,\n\nx.qt_procedimento,\nc.vl_conta,\nx.vl_procedimento,\nc.ie_status_acerto,\ndecode(c.ie_status_acerto, 1,'Provisorio' , 2 ,'Definitivo') as status_conta,\nx.tuss as cd_tuss,\n(select x.ds_estrutura from  mat_estrutura x, mat_estrutura_cadastro y where x.nr_sequencia = y.nr_seq_estrutura and y.cd_material = x.cd_procedimento) as ds_classif_lio\nfrom atendimento_paciente at,\nconta_paciente c,\npessoa_fisica pf,\n\n(select p.nr_interno_conta, \np.cd_procedimento, \nobter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced) as ds_procedimento, \nobter_valor_dominio(19,pr.ie_classificacao) as classif,\np.cd_medico_executor,\np.cd_medico_req,\np.ie_origem_proced,\np.qt_procedimento,\np.vl_procedimento,\np.vl_medico,\np.nr_sequencia,\np.cd_edicao_amb,\np.cd_convenio,\np.nr_atendimento,\np.cd_motivo_exc_conta,\np.nr_seq_proc_crit_repasse,\nobter_codigo_tuss(p.nr_seq_proc_interno) as tuss,\np.dt_atualizacao,\npr.nr_seq_grupo_rec\nfrom procedimento_paciente p,\n     procedimento pr\nwhere p.cd_procedimento = pr.cd_procedimento\nand p.ie_origem_proced = pr.ie_origem_proced\n\nunion all\nselect mp.nr_interno_conta, \nmp.cd_material as cd_procedimento, \nm.ds_material as ds_procedimento,\nobter_dados_material(m.cd_material,'GRU') as classif,\nobter_medico_resp_atend(mp.nr_atendimento,'C') as cd_medico_executor,\nobter_medico_resp_atend(mp.nr_atendimento,'C') as cd_medico_req,\n0 as ie_origem_proced,\nmp.qt_material,\nmp.vl_material,\n0 vl_medico,\nmp.nr_sequencia,\n'0' as cd_edicao_amb,\nmp.cd_convenio,\nmp.nr_atendimento,\nmp.cd_motivo_exc_conta,\n0 nr_seq_proc_crit_repasse,\n0 tuss,\nmp.dt_atualizacao,\n0 nr_seq_grupo_rec\nfrom material_atend_paciente mp,\n     material m\nwhere mp.cd_material = m.cd_material) x\n\nwhere at.nr_atendimento = c.nr_atendimento\nand c.nr_interno_conta = x.nr_interno_conta\nand at.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand c.ie_cancelamento is null\nand x.cd_motivo_exc_conta is null\nand c.cd_estabelecimento = 1\nand at.dt_entrada BETWEEN sysdate -2 and sysdate\nand c.vl_conta > 0\nand ROWNUM <=5\ngroup by \nc.nr_atendimento,\nat.dt_entrada,\nc.nr_interno_conta,\nc.cd_estabelecimento,\nat.cd_pessoa_fisica,\nc.cd_convenio_parametro,\nc.vl_conta,\nx.nr_sequencia,\nx.vl_medico,\nx.vl_procedimento,\nx.ie_origem_proced,\nx.cd_procedimento,\nx.ds_procedimento,\nx.qt_procedimento,\nx.cd_edicao_amb,\nx.cd_medico_executor,\nc.ie_status_acerto,\nx.nr_atendimento,\nx.cd_convenio,\nat.ie_tipo_atendimento,\nx.nr_interno_conta,\npf.dt_nascimento,\npf.nr_cpf,\nx.cd_medico_req,\npf.ie_sexo,\npf.cd_pessoa_fisica,\nx.classif,\nx.tuss,\nx.nr_seq_grupo_rec,\nx.dt_atualizacao,\nat.nr_atendimento\n\norder by 5,3 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Producao Medica/Desenvolvimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_HOSL_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTEMPTable')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITABUNA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITAIGARA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_INOB_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Empresas')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Alimenta tabela:\n\nEmpresa_Unidade para o cadastro da tabela unica.",
				"activities": [
					{
						"name": "Estabelecimento HOSL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select 43 + ROW_NUMBER() OVER (ORDER BY emp_cgc) AS CD_ESTABELECIMENTO,\nemp_cgc AS CNPJ,\n'Hospital de Olhos Santa Luzia' as MARCA,\ngcc.GCC_DESCR AS DS_ESTABELECIMENTO\nfrom\ngcc, \nstr, \nemp\nwhere GCC_STR_COD = STR_COD\nand STR_EMP_COD = emp_cod\nAND emp_cgc not in ('-', '12305371000160')",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Estabelecimento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Estabelecimento Cloud",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT ROWNUM AS CD_ESTABELECIMENTO, EB.CD_CGC AS CNPJ,\nEM.DS_NOME_CURTO as MARCA,\nEB.NM_FANTASIA_ESTAB AS DS_ESTABELECIMENTO\nFROM\nEMPRESA EM,\nESTABELECIMENTO EB\nWHERE EM.CD_EMPRESA = EB.CD_EMPRESA\nAND EB.IE_SITUACAO = 'A'\norder by 3",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Estabelecimento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Estabelecimento Sadalla",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT ROWNUM AS CD_ESTABELECIMENTO, EB.CD_CGC AS CNPJ,\nEM.DS_NOME_CURTO as MARCA,\nEB.NM_FANTASIA_ESTAB AS DS_ESTABELECIMENTO\nFROM\nEMPRESA EM,\nESTABELECIMENTO EB\nWHERE EM.CD_EMPRESA = EB.CD_EMPRESA\nAND EB.IE_SITUACAO = 'A'\norder by 3",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Estabelecimento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Cadastros Gerais"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_HOSL_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Estabelecimento')]",
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Equalizacao DW Tasy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LISTA INDEX DISABLE",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "SP_MAPPING_INDEX",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \nCONCAT('ALTER INDEX  ', A.index_name , ' ON ' ,a.schema_nm , '.' , A.table_nm, ' DISABLE ') as DISABLE_INDEX , \nCONCAT('ALTER INDEX  ', A.index_name  , ' ON ' ,a.schema_nm , '.' , A.table_nm, ' REBUILD ') as REBUILD_INDEX ,\nA.index_name ,a.schema_nm + '.' + A.table_nm as tb\nFROM index_aj_dw A\nINNER JOIN ADF.ctr_origem_destino B WITH(NOLOCK) ON A.TABLE_NM = B.NOME_TABELA_DESTINO\nINNER JOIN ADF.CTR_REPROCESSA_DW C WITH(NOLOCK) ON C.NOME_SCHEMA = A.SCHEMA_NM AND C.NOME_TABELA = A.TABLE_NM\nWHERE C.IE_ATIVA = 'S'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FOR EACH DISABLE INDEX",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA INDEX DISABLE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA INDEX DISABLE').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "DISABLE INDEX",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "@item().DISABLE_INDEX",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "BUSCA_TABELA",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "FOR EACH DISABLE INDEX",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT  \n    B.NOME_KEYVAULT_SECRET\n    ,B.NOME_SCHEMA_ORIGEM\n    ,B.NOME_TABELA_ORIGEM\n    ,A.NOME_SCHEMA AS NOME_SCHEMA_DESTINO\n    ,A.NOME_TABELA AS NOME_TABELA_DESTINO\nFROM adf.ctr_reprocessa_dw A WITH(NOLOCK)\nINNER JOIN adf.ctr_origem_destino B WITH(NOLOCK) ON A.NOME_PLATAFORMA = B.NOME_PLATAFORMA AND A.NOME_TABELA = 'tbl_'+REPLACE(REPLACE(B.NOME_TABELA_ORIGEM,'VW_',''),'_V2','')\nWHERE A.IE_ATIVA = 'S'\n AND B.REPROCESSAR = 'S'\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "CARGA COMPLETA",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPA TABELAS DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('BUSCA_TABELA').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copiar Dados DW",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@concat('SELECT * FROM ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ORACLE_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"NOME_KEYVAULT_SECRET": {
													"value": "@item().NOME_KEYVAULT_SECRET",
													"type": "Expression"
												},
												"schema_name": {
													"value": "@item().NOME_SCHEMA_ORIGEM",
													"type": "Expression"
												},
												"table_name": {
													"value": "@item().NOME_TABELA_ORIGEM",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "LIMPA TABELAS DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "BUSCA_TABELA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('BUSCA_TABELA').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 30,
							"activities": [
								{
									"name": "LIMPA TABELA DESTINO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('truncate table ',\nitem().NOME_SCHEMA_DESTINO,\n'.',\nitem().NOME_TABELA_DESTINO,\n' SELECT 0')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					},
					{
						"name": "LISTA INDEX ENABLE",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CARGA COMPLETA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT \nCONCAT('ALTER INDEX  ', A.index_name , ' ON ' ,a.schema_nm , '.' , A.table_nm, ' DISABLE ') as DISABLE_INDEX , \nCONCAT('ALTER INDEX  ', A.index_name  , ' ON ' ,a.schema_nm , '.' , A.table_nm, ' REBUILD ') as REBUILD_INDEX ,\nA.index_name ,a.schema_nm + '.' + A.table_nm as tb\nFROM index_aj_dw A\nINNER JOIN ADF.ctr_origem_destino B WITH(NOLOCK) ON A.TABLE_NM = B.NOME_TABELA_DESTINO\nINNER JOIN ADF.CTR_REPROCESSA_DW C WITH(NOLOCK) ON C.NOME_SCHEMA = A.SCHEMA_NM AND C.NOME_TABELA = A.TABLE_NM\nWHERE C.IE_ATIVA = 'S'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FOR EACH REBUILD INDEX",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA INDEX ENABLE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA INDEX ENABLE').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "REBUILD INDEX",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "@item().REBUILD_INDEX",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Reprocessa Data mart Prod",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "FOR EACH REBUILD INDEX",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_DATAMART_PROD_AJUSTE_TASY"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SP_MAPPING_INDEX",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_MAPPING_INDEX]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/Ajuste DW Tasy"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LISTA_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/ORACLE_DINAMICO')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Executar Pipeline CNPJ')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline CNPJ DB",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Gerar Base Consulta CNPJ DB",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline Gera Base",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline CNPJ DB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Gerar Base CNPJ",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CNPJ"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-20T18:04:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Gerar Base Consulta CNPJ DB')]",
				"[concat(variables('factoryId'), '/pipelines/Gerar Base CNPJ')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Execute Job')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Exec Extract",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Extracao Dado",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Exec SP",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Exec Extract",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Processamento e Armaz",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Producao Diaria"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-20T18:04:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Extracao Dado')]",
				"[concat(variables('factoryId'), '/pipelines/Processamento e Armaz')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Extracao Dado')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"description": "Verifica se é primeiro dia do mês",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(trim(variables('day_now')),'1')",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "ITG - Smart",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "with ctf as(\n\n    SELECT\n        x.ctf_cod    \n        ,x.ctf_tipo\n        ,case\n            when UPPER(x.ctf_categ) = 'C' then 'Consultas'\n            when UPPER(x.ctf_categ) = 'R' then 'Cirurgias'\n            when UPPER(x.ctf_categ) = 'E' then 'Exames'\n            when UPPER(x.ctf_categ) = 'T' then 'Taxas'\n            when UPPER(x.ctf_categ) = 'D' then 'Diárias'\n            when UPPER(x.ctf_categ) = 'A' then 'Terapia'\n            when UPPER(x.ctf_categ) = 'M' then 'Materiais'\n            when UPPER(x.ctf_categ) = 'S' then 'Materiais Especiais'\n            when UPPER(x.ctf_categ) = 'N' then 'Medicamentos'\n            when UPPER(x.ctf_categ) = 'G' then 'Gases'\n            when UPPER(x.ctf_categ) = 'O' then 'Outros'\n          end DS_CLASSIF_PROCEDIMENTO  \n    from dbo.ctf x\n) \n\n\n,prod as(\nSELECT\n    itm.smm_num_pai\n    ,itm.smm_num\n    ,itm.smm_dthr_exec                                                                      as DT_LANCAMENTO\n    ,a.osm_num                                                                              as NR_ATENDIMENTO\n    ,a.osm_dthr                                                                             as DT_ENTRADA\n    ,a.osm_cnv                                                                              as CD_CONVENIO\n    ,pac.pac_reg                                                                            as CD_PESSOA_FISICA            \n    ,pac.pac_nome                                                                           AS NM_PACIENTE\n    -- ,cast(a.osm_serie as varchar(15)) + '.' + cast(a.osm_num as varchar(5))                 as NR_INTERNO_CONTA   \n    ,a.osm_serie                                                                            as NR_INTERNO_CONTA   \n    ,a.osm_atend                                                                            as CD_TIPO_ATEND\n    ,A.osm_proc                                                                             AS CD_PROCEDENCIA\n    -- ,a.osm_mcnv                                                                             as cd_carterinha_pac\n    -- ,a.osm_cid_cod                                                                          as cd_cid\n    -- ,a.osm_pln_cod                                                                          as cd_plano_convenio\n    ,a.osm_str                                                                              as CD_SETOR_ATENDIMENTO\n    ,itm.smm_str                                                                            as CD_SETOR_EXECUTANTE\n    ,a.osm_mreq                                                                             as CD_MEDICO_SOL\n    ,itm.smm_med                                                                            as CD_MEDICO_EXECUTANTE\n    -- ,itm.smm_cod                                                                            as cd_item_smart\n    -- ,itm.smm_pre_ccv                                                                        as cd_item_conv\n    ,CAST(CAST(a.osm_serie as varchar(10)) \n        + cast(a.osm_num as varchar(50)) \n        + CAST(itm.smm_num AS VARCHAR(50))\n        + CAST(A.OSM_PAC AS VARCHAR(50))\n         AS DECIMAL)                                                                        as NR_SEQUENCIA\n    ,pi.smk_cod                                                                             as NR_PROC_INTERNO       \n    ,pi.smk_amb                                                                             as CD_PROCEDIMENTO\n    ,pi.smk_rot                                                                             as DS_PROC_INTERNO \n    ,pi.smk_nome                                                                            as DS_PROCEDIMENTO\n    ,pi.smk_ctf\n    ,pi.smk_tipo\n    ,itm.smm_motivo_cancela                                                                 as MOTIVO_CANCEL_ITEM\n    ,itm.smm_canc_mot_cod                                                                   as CD_MOTIVO_CANCEL_ITEM\n    ,itm.smm_rpi_serie                                                                      as NR_SERIE_REPASSE\n    ,itm.smm_rpi_num                                                                        as NR_REPASSE\n    ,itm.smm_pacote                                                                         as IE_PACOTE\n    -- ,itm.smm_hon_seq\n    ,itm.smm_fat_serie\n    ,itm.smm_fat\n    ,itm.smm_tipo_fatura\n    ,itm.smm_dthr_alter                                                                     as dt_atualizacao                                                                      \n    ,itm.smm_qt                                                                             as QTD\n    ,itm.smm_vlr                                                                            AS VL_ITEM\n    ,isnull(itm.smm_ajuste_vlr,0)                                                           as VL_ITEM_AJUSTE\n    ,ROUND(ISNULL(round(\n                    (hon.hon_vl1 * itm.smm_qt) \n                  + (itm.smm_vlr + isnull(itm.smm_ajuste_vlr,0)) \n                  * hon.hon_pc1 / 100,3),0\n                  ),2)                                                                      AS VL_HM\n    ,ROUND(ISNULL(mte.mte_perc_desconto,0),2)                                               as PERC_DESCONTO\n\n\nFROM dbo.osm a                  (NOLOCK)\ninner join dbo.pac pac          (NOLOCK) on pac.pac_reg = a.osm_pac\ninner join dbo.smm itm          (NOLOCK) on itm.smm_osm_serie = a.osm_serie and itm.smm_osm = a.osm_num\ninner join dbo.smk pi           (NOLOCK) on pi.smk_cod = itm.smm_cod and pi.smK_tipo = itm.smm_tpcod\n-- left join dbo.hon  hon          (NOLOCK) on hon.hon_seq = itm.smm_hon_seq\nLEFT join dbo.hon  hon          (NOLOCK) on hon.hon_seq = itm.smm_hon_seq\n\nOUTER APPLY (\n    SELECT\n        CASE \n            WHEN (MTE.mte_valor <> 0)\n                THEN MTE.mte_desconto / MTE.mte_valor\n            ELSE 0\n        END AS mte_perc_desconto\n    FROM MTE MTE (NOLOCK)\n    LEFT JOIN NFS NFS (NOLOCK)  ON MTE.MTE_NFS_NUMERO = NFS.nfs_numero AND MTE.MTE_NFS_SERIE = NFS.nfs_serie AND MTE.MTE_NFS_TIPO = NFS.NFS_TIPO\n    WHERE MTE.MTE_SERIE = ITM.SMM_MTE_SERIE AND MTE.MTE_SEQ = ITM.SMM_MTE_SEQ\n)MTE\n\n\nWHERE \n     itm.smm_vlr <> 0\n    and (itm.smm_pacote IS NULL OR ( itm.smm_pacote = 'C' )) \n    and itm.smm_exec <> 'C'\n    and itm.smm_sfat <> 'C'\n    and itm.smm_str like '%'\n    and pi.smk_ctf LIKE '%'\n    AND (itm.smm_sfat IN ('a', 'f', '?', 'p', '?'))\n    and substring(cast(CAST(a.osm_dthr as date) as varchar(10)),1,7) = SUBSTRING(cast(CAST(getdate() AS DATE) as varchar(10)),1,7)\n    -- AND CAST(a.osm_dthr AS DATE) BETWEEN '2021-01-01' AND CAST(GETDATE() AS DATE)\n    -- AND A.osm_serie = '121' AND A.osm_num = '21460'\n)\n\nselect \n\n    90                                                  AS ID_SYSTEM\n    ,g.gcc_str_cod                                      AS CD_ESTABELECIMENTO\n    ,G.gcc_descr                                        AS DS_ESTABELECIMENTO\n    ,a.DT_ENTRADA\n    ,A.DT_LANCAMENTO\n    ,A.NR_ATENDIMENTO           \n    ,CAST(A.nr_interno_conta AS VARCHAR(10))\n        + CAST(A.NR_ATENDIMENTO AS VARCHAR(50))         AS NR_INTERNO_CONTA\n    ,emp.emp_cgc                                        as CGC_CONVENIO\n    ,A.cd_convenio                                      AS CD_CONVENIO\n    ,conv.cnv_nome                                      as DS_CONVENIO\n    ,a.CD_PESSOA_FISICA\n    ,A.NM_PACIENTE                                      AS NM_PACIENTE\n    ,A.CD_MEDICO_SOL\n    ,PSOL.psv_nome                                      AS MEDICO_SOLICITANTE\n    ,A.CD_MEDICO_EXECUTANTE\n    ,PEXC.psv_nome                                      AS MEDICO_EXECUTANTE\n    ,PEXC.psv_nome                                      AS MEDICO_RESPONSAVEL\n    ,PEXC.psv_nome                                      AS MEDICO_ATENDIMENTO\n    ,B.str_cod                                          as CD_SETOR_ATENDIMENTO\n    ,b.str_nome                                         as DS_SETOR_ATENDIMENTO\n    ,A.NR_SEQUENCIA\n    -- ,A.smm_num_pai\n    -- ,smk.smk_rot                                        as DS_PROC_PRINC\n    ,A.NR_PROC_INTERNO\n    ,A.DS_PROC_INTERNO\n    ,A.CD_PROCEDIMENTO\n    ,A.DS_PROCEDIMENTO\n    ,c.DS_CLASSIF_PROCEDIMENTO\n    ,A.CD_PROCEDENCIA\n    ,A.QTD                                              AS QTD_ITEM\n    ,A.VL_ITEM                                          AS VL_ITEM_ORIGINAL                 \n    ,A.VL_ITEM + A.VL_ITEM_AJUSTE                       AS VL_ITEM\n    ,a.VL_HM\n    ,a.PERC_DESCONTO\n    ,a.DT_ATUALIZACAO\nfrom prod a\ninner join dbo.str b                (nolock)        on b.str_cod = a.CD_SETOR_ATENDIMENTO  \nleft join dbo.gcc g                (NOLOCK)        on g.gcc_str_cod = b.str_str_cod\ninner join dbo.cnv conv             (NOLOCK)        on conv.cnv_cod = a.cd_convenio\ninner join dbo.emp                  (nolock)        on emp_cod = conv.cnv_emp_cod  \ninner join ctf     c                                on ctf_cod = a.smk_ctf  and ctf_tipo = a.smk_tipo\nINNER JOIN psv     PEXC             (NOLOCK)        ON PEXC.psv_cod = A.CD_MEDICO_EXECUTANTE\nINNER JOIN psv     PSOL             (NOLOCK)        ON PSOL.psv_cod = A.CD_MEDICO_SOL\n\n\nWHERE C.DS_CLASSIF_PROCEDIMENTO IS NOT NULL\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": "TRUNCATE TABLE dbo.aux_prod_diaria \n",
											"writeBehavior": "insert",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "ID_SYSTEM",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ID_SYSTEM",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DT_ENTRADA",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_ENTRADA",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "DT_LANCAMENTO",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_LANCAMENTO",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "NR_ATENDIMENTO",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "NR_ATENDIMENTO",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "NR_INTERNO_CONTA",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "NR_INTERNO_CONTA",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CGC_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "CGC_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_CONVENIO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_CONVENIO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_PESSOA_FISICA",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_PESSOA_FISICA",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "NM_PACIENTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "NM_PACIENTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_MEDICO_SOL",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MEDICO_SOL",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "MEDICO_SOLICITANTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_SOLICITANTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_MEDICO_EXECUTANTE",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MEDICO_EXECUTANTE",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "MEDICO_EXECUTANTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_EXECUTANTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "MEDICO_RESPONSAVEL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_RESPONSAVEL",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "MEDICO_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "NR_SEQUENCIA",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 18
													},
													"sink": {
														"name": "NR_SEQUENCIA",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 18
													}
												},
												{
													"source": {
														"name": "NR_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "NR_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_CLASSIF_PROCEDIMENTO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_CLASSIF_PROCEDIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_PROCEDENCIA",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_PROCEDENCIA",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "QTD_ITEM",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													},
													"sink": {
														"name": "QTD_ITEM",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													}
												},
												{
													"source": {
														"name": "VL_ITEM_ORIGINAL",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_ITEM_ORIGINAL",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "VL_ITEM",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_ITEM",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "VL_HM",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_HM",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "PERC_DESCONTO",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 15,
														"precision": 27
													},
													"sink": {
														"name": "PERC_DESCONTO",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 15,
														"precision": 27
													}
												},
												{
													"source": {
														"name": "DT_ATUALIZACAO",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_ATUALIZACAO",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_ITAIGARA_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_PROD_DIARIA",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "ITB - Smart",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ITG - Smart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "with ctf as(\n\n    SELECT\n        x.ctf_cod    \n        ,x.ctf_tipo\n        ,case\n            when UPPER(x.ctf_categ) = 'C' then 'Consultas'\n            when UPPER(x.ctf_categ) = 'R' then 'Cirurgias'\n            when UPPER(x.ctf_categ) = 'E' then 'Exames'\n            when UPPER(x.ctf_categ) = 'T' then 'Taxas'\n            when UPPER(x.ctf_categ) = 'D' then 'Diárias'\n            when UPPER(x.ctf_categ) = 'A' then 'Terapia'\n            when UPPER(x.ctf_categ) = 'M' then 'Materiais'\n            when UPPER(x.ctf_categ) = 'S' then 'Materiais Especiais'\n            when UPPER(x.ctf_categ) = 'N' then 'Medicamentos'\n            when UPPER(x.ctf_categ) = 'G' then 'Gases'\n            when UPPER(x.ctf_categ) = 'O' then 'Outros'\n          end DS_CLASSIF_PROCEDIMENTO  \n    from dbo.ctf x\n) \n\n\n,prod as(\nSELECT\n    itm.smm_num_pai\n    ,itm.smm_num\n    ,itm.smm_dthr_exec                                                                      as DT_LANCAMENTO\n    ,a.osm_num                                                                              as NR_ATENDIMENTO\n    ,a.osm_dthr                                                                             as DT_ENTRADA\n    ,a.osm_cnv                                                                              as CD_CONVENIO\n    ,pac.pac_reg                                                                            as CD_PESSOA_FISICA            \n    ,pac.pac_nome                                                                           AS NM_PACIENTE\n    -- ,cast(a.osm_serie as varchar(15)) + '.' + cast(a.osm_num as varchar(5))                 as NR_INTERNO_CONTA   \n    ,a.osm_serie                                                                            as NR_INTERNO_CONTA   \n    ,a.osm_atend                                                                            as CD_TIPO_ATEND\n    ,A.osm_proc                                                                             AS CD_PROCEDENCIA\n    -- ,a.osm_mcnv                                                                             as cd_carterinha_pac\n    -- ,a.osm_cid_cod                                                                          as cd_cid\n    -- ,a.osm_pln_cod                                                                          as cd_plano_convenio\n    ,a.osm_str                                                                              as CD_SETOR_ATENDIMENTO\n    ,itm.smm_str                                                                            as CD_SETOR_EXECUTANTE\n    ,a.osm_mreq                                                                             as CD_MEDICO_SOL\n    ,itm.smm_med                                                                            as CD_MEDICO_EXECUTANTE\n    -- ,itm.smm_cod                                                                            as cd_item_smart\n    -- ,itm.smm_pre_ccv                                                                        as cd_item_conv\n    ,CAST(CAST(a.osm_serie as varchar(10)) \n        + cast(a.osm_num as varchar(50)) \n        + CAST(itm.smm_num AS VARCHAR(50))\n        + CAST(A.OSM_PAC AS VARCHAR(50))\n         AS DECIMAL)                                                                        as NR_SEQUENCIA\n    ,pi.smk_cod                                                                             as NR_PROC_INTERNO       \n    ,pi.smk_amb                                                                             as CD_PROCEDIMENTO\n    ,pi.smk_rot                                                                             as DS_PROC_INTERNO \n    ,pi.smk_nome                                                                            as DS_PROCEDIMENTO\n    ,pi.smk_ctf\n    ,pi.smk_tipo\n    ,itm.smm_motivo_cancela                                                                 as MOTIVO_CANCEL_ITEM\n    ,itm.smm_canc_mot_cod                                                                   as CD_MOTIVO_CANCEL_ITEM\n    ,itm.smm_rpi_serie                                                                      as NR_SERIE_REPASSE\n    ,itm.smm_rpi_num                                                                        as NR_REPASSE\n    ,itm.smm_pacote                                                                         as IE_PACOTE\n    -- ,itm.smm_hon_seq\n    ,itm.smm_fat_serie\n    ,itm.smm_fat\n    ,itm.smm_tipo_fatura\n    ,itm.smm_dthr_alter                                                                     as dt_atualizacao                                                                      \n    ,itm.smm_qt                                                                             as QTD\n    ,itm.smm_vlr                                                                            AS VL_ITEM\n    ,isnull(itm.smm_ajuste_vlr,0)                                                           as VL_ITEM_AJUSTE\n    ,ROUND(ISNULL(round(\n                    (hon.hon_vl1 * itm.smm_qt) \n                  + (itm.smm_vlr + isnull(itm.smm_ajuste_vlr,0)) \n                  * hon.hon_pc1 / 100,3),0\n                  ),2)                                                                      AS VL_HM\n    ,ROUND(ISNULL(mte.mte_perc_desconto,0),2)                                               as PERC_DESCONTO\n\n\nFROM dbo.osm a                  (NOLOCK)\ninner join dbo.pac pac          (NOLOCK) on pac.pac_reg = a.osm_pac\ninner join dbo.smm itm          (NOLOCK) on itm.smm_osm_serie = a.osm_serie and itm.smm_osm = a.osm_num\ninner join dbo.smk pi           (NOLOCK) on pi.smk_cod = itm.smm_cod and pi.smK_tipo = itm.smm_tpcod\n-- left join dbo.hon  hon          (NOLOCK) on hon.hon_seq = itm.smm_hon_seq\nLEFT join dbo.hon  hon          (NOLOCK) on hon.hon_seq = itm.smm_hon_seq\n\nOUTER APPLY (\n    SELECT\n        CASE \n            WHEN (MTE.mte_valor <> 0)\n                THEN MTE.mte_desconto / MTE.mte_valor\n            ELSE 0\n        END AS mte_perc_desconto\n    FROM MTE MTE (NOLOCK)\n    LEFT JOIN NFS NFS (NOLOCK)  ON MTE.MTE_NFS_NUMERO = NFS.nfs_numero AND MTE.MTE_NFS_SERIE = NFS.nfs_serie AND MTE.MTE_NFS_TIPO = NFS.NFS_TIPO\n    WHERE MTE.MTE_SERIE = ITM.SMM_MTE_SERIE AND MTE.MTE_SEQ = ITM.SMM_MTE_SEQ\n)MTE\n\n\nWHERE \n     itm.smm_vlr <> 0\n    and (itm.smm_pacote IS NULL OR ( itm.smm_pacote = 'C' )) \n    and itm.smm_exec <> 'C'\n    and itm.smm_sfat <> 'C'\n    and itm.smm_str like '%'\n    and pi.smk_ctf LIKE '%'\n    AND (itm.smm_sfat IN ('a', 'f', '?', 'p', '?'))\n    and substring(cast(CAST(a.osm_dthr as date) as varchar(10)),1,7) = SUBSTRING(cast(CAST(getdate() AS DATE) as varchar(10)),1,7)\n    -- AND CAST(a.osm_dthr AS DATE) BETWEEN '2021-01-01' AND CAST(GETDATE() AS DATE)\n    -- AND A.osm_serie = '121' AND A.osm_num = '21460'\n)\n\nselect \n\n    90                                                  AS ID_SYSTEM\n    ,g.gcc_str_cod                                      AS CD_ESTABELECIMENTO\n    ,G.gcc_descr                                        AS DS_ESTABELECIMENTO\n    ,a.DT_ENTRADA\n    ,A.DT_LANCAMENTO\n    ,A.NR_ATENDIMENTO           \n    ,CAST(A.nr_interno_conta AS VARCHAR(10))\n        + CAST(A.NR_ATENDIMENTO AS VARCHAR(50))         AS NR_INTERNO_CONTA\n    ,emp.emp_cgc                                        as CGC_CONVENIO\n    ,A.cd_convenio                                      AS CD_CONVENIO\n    ,conv.cnv_nome                                      as DS_CONVENIO\n    ,a.CD_PESSOA_FISICA\n    ,A.NM_PACIENTE                                      AS NM_PACIENTE\n    ,A.CD_MEDICO_SOL\n    ,PSOL.psv_nome                                      AS MEDICO_SOLICITANTE\n    ,A.CD_MEDICO_EXECUTANTE\n    ,PEXC.psv_nome                                      AS MEDICO_EXECUTANTE\n    ,PEXC.psv_nome                                      AS MEDICO_RESPONSAVEL\n    ,PEXC.psv_nome                                      AS MEDICO_ATENDIMENTO\n    ,B.str_cod                                          as CD_SETOR_ATENDIMENTO\n    ,b.str_nome                                         as DS_SETOR_ATENDIMENTO\n    ,A.NR_SEQUENCIA\n    -- ,A.smm_num_pai\n    -- ,smk.smk_rot                                        as DS_PROC_PRINC\n    ,A.NR_PROC_INTERNO\n    ,A.DS_PROC_INTERNO\n    ,A.CD_PROCEDIMENTO\n    ,A.DS_PROCEDIMENTO\n    ,c.DS_CLASSIF_PROCEDIMENTO\n    ,A.CD_PROCEDENCIA\n    ,A.QTD                                              AS QTD_ITEM\n    ,A.VL_ITEM                                          AS VL_ITEM_ORIGINAL                 \n    ,A.VL_ITEM + A.VL_ITEM_AJUSTE                       AS VL_ITEM\n    ,a.VL_HM\n    ,a.PERC_DESCONTO\n    ,a.DT_ATUALIZACAO\nfrom prod a\ninner join dbo.str b                (nolock)        on b.str_cod = a.CD_SETOR_ATENDIMENTO  \nleft join dbo.gcc g                (NOLOCK)        on g.gcc_str_cod = b.str_str_cod\ninner join dbo.cnv conv             (NOLOCK)        on conv.cnv_cod = a.cd_convenio\ninner join dbo.emp                  (nolock)        on emp_cod = conv.cnv_emp_cod  \ninner join ctf     c                                on ctf_cod = a.smk_ctf  and ctf_tipo = a.smk_tipo\nINNER JOIN psv     PEXC             (NOLOCK)        ON PEXC.psv_cod = A.CD_MEDICO_EXECUTANTE\nINNER JOIN psv     PSOL             (NOLOCK)        ON PSOL.psv_cod = A.CD_MEDICO_SOL\n\n\nWHERE C.DS_CLASSIF_PROCEDIMENTO IS NOT NULL\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "ID_SYSTEM",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ID_SYSTEM",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DT_ENTRADA",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_ENTRADA",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "DT_LANCAMENTO",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_LANCAMENTO",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "NR_ATENDIMENTO",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "NR_ATENDIMENTO",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "NR_INTERNO_CONTA",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "NR_INTERNO_CONTA",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CGC_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "CGC_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_CONVENIO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_CONVENIO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_PESSOA_FISICA",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_PESSOA_FISICA",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "NM_PACIENTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "NM_PACIENTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_MEDICO_SOL",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MEDICO_SOL",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "MEDICO_SOLICITANTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_SOLICITANTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_MEDICO_EXECUTANTE",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MEDICO_EXECUTANTE",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "MEDICO_EXECUTANTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_EXECUTANTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "MEDICO_RESPONSAVEL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_RESPONSAVEL",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "MEDICO_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "NR_SEQUENCIA",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 18
													},
													"sink": {
														"name": "NR_SEQUENCIA",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 18
													}
												},
												{
													"source": {
														"name": "NR_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "NR_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_CLASSIF_PROCEDIMENTO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_CLASSIF_PROCEDIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_PROCEDENCIA",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_PROCEDENCIA",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "QTD_ITEM",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													},
													"sink": {
														"name": "QTD_ITEM",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													}
												},
												{
													"source": {
														"name": "VL_ITEM_ORIGINAL",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_ITEM_ORIGINAL",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "VL_ITEM",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_ITEM",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "VL_HM",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_HM",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "PERC_DESCONTO",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 15,
														"precision": 27
													},
													"sink": {
														"name": "PERC_DESCONTO",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 15,
														"precision": 27
													}
												},
												{
													"source": {
														"name": "DT_ATUALIZACAO",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_ATUALIZACAO",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_ITABUNA_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_PROD_DIARIA",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "IOF - Smart",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ITB - Smart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "with ctf as(\n\n    SELECT\n        x.ctf_cod    \n        ,x.ctf_tipo\n        ,case\n            when UPPER(x.ctf_categ) = 'C' then 'Consultas'\n            when UPPER(x.ctf_categ) = 'R' then 'Cirurgias'\n            when UPPER(x.ctf_categ) = 'E' then 'Exames'\n            when UPPER(x.ctf_categ) = 'T' then 'Taxas'\n            when UPPER(x.ctf_categ) = 'D' then 'Diárias'\n            when UPPER(x.ctf_categ) = 'A' then 'Terapia'\n            when UPPER(x.ctf_categ) = 'M' then 'Materiais'\n            when UPPER(x.ctf_categ) = 'S' then 'Materiais Especiais'\n            when UPPER(x.ctf_categ) = 'N' then 'Medicamentos'\n            when UPPER(x.ctf_categ) = 'G' then 'Gases'\n            when UPPER(x.ctf_categ) = 'O' then 'Outros'\n          end DS_CLASSIF_PROCEDIMENTO  \n    from dbo.ctf x\n) \n\n\n,prod as(\nSELECT\n    itm.smm_num_pai\n    ,itm.smm_num\n    ,itm.smm_dthr_exec                                                                      as DT_LANCAMENTO\n    ,a.osm_num                                                                              as NR_ATENDIMENTO\n    ,a.osm_dthr                                                                             as DT_ENTRADA\n    ,a.osm_cnv                                                                              as CD_CONVENIO\n    ,pac.pac_reg                                                                            as CD_PESSOA_FISICA            \n    ,pac.pac_nome                                                                           AS NM_PACIENTE\n    -- ,cast(a.osm_serie as varchar(15)) + '.' + cast(a.osm_num as varchar(5))                 as NR_INTERNO_CONTA   \n    ,a.osm_serie                                                                            as NR_INTERNO_CONTA   \n    ,a.osm_atend                                                                            as CD_TIPO_ATEND\n    ,A.osm_proc                                                                             AS CD_PROCEDENCIA\n    -- ,a.osm_mcnv                                                                             as cd_carterinha_pac\n    -- ,a.osm_cid_cod                                                                          as cd_cid\n    -- ,a.osm_pln_cod                                                                          as cd_plano_convenio\n    ,a.osm_str                                                                              as CD_SETOR_ATENDIMENTO\n    ,itm.smm_str                                                                            as CD_SETOR_EXECUTANTE\n    ,a.osm_mreq                                                                             as CD_MEDICO_SOL\n    ,itm.smm_med                                                                            as CD_MEDICO_EXECUTANTE\n    -- ,itm.smm_cod                                                                            as cd_item_smart\n    -- ,itm.smm_pre_ccv                                                                        as cd_item_conv\n    ,CAST(CAST(a.osm_serie as varchar(10)) \n        + cast(a.osm_num as varchar(50)) \n        + CAST(itm.smm_num AS VARCHAR(50))\n        + CAST(A.OSM_PAC AS VARCHAR(50))\n         AS DECIMAL)                                                                        as NR_SEQUENCIA\n    ,pi.smk_cod                                                                             as NR_PROC_INTERNO       \n    ,pi.smk_amb                                                                             as CD_PROCEDIMENTO\n    ,pi.smk_rot                                                                             as DS_PROC_INTERNO \n    ,pi.smk_nome                                                                            as DS_PROCEDIMENTO\n    ,pi.smk_ctf\n    ,pi.smk_tipo\n    ,itm.smm_motivo_cancela                                                                 as MOTIVO_CANCEL_ITEM\n    ,itm.smm_canc_mot_cod                                                                   as CD_MOTIVO_CANCEL_ITEM\n    ,itm.smm_rpi_serie                                                                      as NR_SERIE_REPASSE\n    ,itm.smm_rpi_num                                                                        as NR_REPASSE\n    ,itm.smm_pacote                                                                         as IE_PACOTE\n    -- ,itm.smm_hon_seq\n    ,itm.smm_fat_serie\n    ,itm.smm_fat\n    ,itm.smm_tipo_fatura\n    ,itm.smm_dthr_alter                                                                     as dt_atualizacao                                                                      \n    ,itm.smm_qt                                                                             as QTD\n    ,itm.smm_vlr                                                                            AS VL_ITEM\n    ,isnull(itm.smm_ajuste_vlr,0)                                                           as VL_ITEM_AJUSTE\n    ,ROUND(ISNULL(round(\n                    (hon.hon_vl1 * itm.smm_qt) \n                  + (itm.smm_vlr + isnull(itm.smm_ajuste_vlr,0)) \n                  * hon.hon_pc1 / 100,3),0\n                  ),2)                                                                      AS VL_HM\n    ,ROUND(ISNULL(mte.mte_perc_desconto,0),2)                                               as PERC_DESCONTO\n\n\nFROM dbo.osm a                  (NOLOCK)\ninner join dbo.pac pac          (NOLOCK) on pac.pac_reg = a.osm_pac\ninner join dbo.smm itm          (NOLOCK) on itm.smm_osm_serie = a.osm_serie and itm.smm_osm = a.osm_num\ninner join dbo.smk pi           (NOLOCK) on pi.smk_cod = itm.smm_cod and pi.smK_tipo = itm.smm_tpcod\n-- left join dbo.hon  hon          (NOLOCK) on hon.hon_seq = itm.smm_hon_seq\nLEFT join dbo.hon  hon          (NOLOCK) on hon.hon_seq = itm.smm_hon_seq\n\nOUTER APPLY (\n    SELECT\n        CASE \n            WHEN (MTE.mte_valor <> 0)\n                THEN MTE.mte_desconto / MTE.mte_valor\n            ELSE 0\n        END AS mte_perc_desconto\n    FROM MTE MTE (NOLOCK)\n    LEFT JOIN NFS NFS (NOLOCK)  ON MTE.MTE_NFS_NUMERO = NFS.nfs_numero AND MTE.MTE_NFS_SERIE = NFS.nfs_serie AND MTE.MTE_NFS_TIPO = NFS.NFS_TIPO\n    WHERE MTE.MTE_SERIE = ITM.SMM_MTE_SERIE AND MTE.MTE_SEQ = ITM.SMM_MTE_SEQ\n)MTE\n\n\nWHERE \n     itm.smm_vlr <> 0\n    and (itm.smm_pacote IS NULL OR ( itm.smm_pacote = 'C' )) \n    and itm.smm_exec <> 'C'\n    and itm.smm_sfat <> 'C'\n    and itm.smm_str like '%'\n    and pi.smk_ctf LIKE '%'\n    AND (itm.smm_sfat IN ('a', 'f', '?', 'p', '?'))\n    and substring(cast(CAST(a.osm_dthr as date) as varchar(10)),1,7) = SUBSTRING(cast(CAST(getdate() AS DATE) as varchar(10)),1,7)\n    -- AND CAST(a.osm_dthr AS DATE) BETWEEN '2021-01-01' AND CAST(GETDATE() AS DATE)\n    -- AND A.osm_serie = '121' AND A.osm_num = '21460'\n)\n\nselect \n\n    90                                                  AS ID_SYSTEM\n    ,g.gcc_str_cod                                      AS CD_ESTABELECIMENTO\n    ,G.gcc_descr                                        AS DS_ESTABELECIMENTO\n    ,a.DT_ENTRADA\n    ,A.DT_LANCAMENTO\n    ,A.NR_ATENDIMENTO           \n    ,CAST(A.nr_interno_conta AS VARCHAR(10))\n        + CAST(A.NR_ATENDIMENTO AS VARCHAR(50))         AS NR_INTERNO_CONTA\n    ,emp.emp_cgc                                        as CGC_CONVENIO\n    ,A.cd_convenio                                      AS CD_CONVENIO\n    ,conv.cnv_nome                                      as DS_CONVENIO\n    ,a.CD_PESSOA_FISICA\n    ,A.NM_PACIENTE                                      AS NM_PACIENTE\n    ,A.CD_MEDICO_SOL\n    ,PSOL.psv_nome                                      AS MEDICO_SOLICITANTE\n    ,A.CD_MEDICO_EXECUTANTE\n    ,PEXC.psv_nome                                      AS MEDICO_EXECUTANTE\n    ,PEXC.psv_nome                                      AS MEDICO_RESPONSAVEL\n    ,PEXC.psv_nome                                      AS MEDICO_ATENDIMENTO\n    ,B.str_cod                                          as CD_SETOR_ATENDIMENTO\n    ,b.str_nome                                         as DS_SETOR_ATENDIMENTO\n    ,A.NR_SEQUENCIA\n    -- ,A.smm_num_pai\n    -- ,smk.smk_rot                                        as DS_PROC_PRINC\n    ,A.NR_PROC_INTERNO\n    ,A.DS_PROC_INTERNO\n    ,A.CD_PROCEDIMENTO\n    ,A.DS_PROCEDIMENTO\n    ,c.DS_CLASSIF_PROCEDIMENTO\n    ,A.CD_PROCEDENCIA\n    ,A.QTD                                              AS QTD_ITEM\n    ,A.VL_ITEM                                          AS VL_ITEM_ORIGINAL                 \n    ,A.VL_ITEM + A.VL_ITEM_AJUSTE                       AS VL_ITEM\n    ,a.VL_HM\n    ,a.PERC_DESCONTO\n    ,a.DT_ATUALIZACAO\nfrom prod a\ninner join dbo.str b                (nolock)        on b.str_cod = a.CD_SETOR_ATENDIMENTO  \nleft join dbo.gcc g                (NOLOCK)        on g.gcc_str_cod = b.str_str_cod\ninner join dbo.cnv conv             (NOLOCK)        on conv.cnv_cod = a.cd_convenio\ninner join dbo.emp                  (nolock)        on emp_cod = conv.cnv_emp_cod  \ninner join ctf     c                                on ctf_cod = a.smk_ctf  and ctf_tipo = a.smk_tipo\nINNER JOIN psv     PEXC             (NOLOCK)        ON PEXC.psv_cod = A.CD_MEDICO_EXECUTANTE\nINNER JOIN psv     PSOL             (NOLOCK)        ON PSOL.psv_cod = A.CD_MEDICO_SOL\n\n\nWHERE C.DS_CLASSIF_PROCEDIMENTO IS NOT NULL\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "ID_SYSTEM",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ID_SYSTEM",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DT_ENTRADA",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_ENTRADA",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "DT_LANCAMENTO",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_LANCAMENTO",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "NR_ATENDIMENTO",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "NR_ATENDIMENTO",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "NR_INTERNO_CONTA",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "NR_INTERNO_CONTA",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CGC_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "CGC_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_CONVENIO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_CONVENIO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_PESSOA_FISICA",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_PESSOA_FISICA",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "NM_PACIENTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "NM_PACIENTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_MEDICO_SOL",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MEDICO_SOL",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "MEDICO_SOLICITANTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_SOLICITANTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_MEDICO_EXECUTANTE",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MEDICO_EXECUTANTE",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "MEDICO_EXECUTANTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_EXECUTANTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "MEDICO_RESPONSAVEL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_RESPONSAVEL",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "MEDICO_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "NR_SEQUENCIA",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 18
													},
													"sink": {
														"name": "NR_SEQUENCIA",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 18
													}
												},
												{
													"source": {
														"name": "NR_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "NR_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_CLASSIF_PROCEDIMENTO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_CLASSIF_PROCEDIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_PROCEDENCIA",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_PROCEDENCIA",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "QTD_ITEM",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													},
													"sink": {
														"name": "QTD_ITEM",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													}
												},
												{
													"source": {
														"name": "VL_ITEM_ORIGINAL",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_ITEM_ORIGINAL",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "VL_ITEM",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_ITEM",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "VL_HM",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_HM",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "PERC_DESCONTO",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 15,
														"precision": 27
													},
													"sink": {
														"name": "PERC_DESCONTO",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 15,
														"precision": 27
													}
												},
												{
													"source": {
														"name": "DT_ATUALIZACAO",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_ATUALIZACAO",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_IOF_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_PROD_DIARIA",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Oftalmoclin - Smart",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "IOF - Smart",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "with ctf as(\n\n    SELECT\n        x.ctf_cod    \n        ,x.ctf_tipo\n        ,case\n            when UPPER(x.ctf_categ) = 'C' then 'Consultas'\n            when UPPER(x.ctf_categ) = 'R' then 'Cirurgias'\n            when UPPER(x.ctf_categ) = 'E' then 'Exames'\n            when UPPER(x.ctf_categ) = 'T' then 'Taxas'\n            when UPPER(x.ctf_categ) = 'D' then 'Diárias'\n            when UPPER(x.ctf_categ) = 'A' then 'Terapia'\n            when UPPER(x.ctf_categ) = 'M' then 'Materiais'\n            when UPPER(x.ctf_categ) = 'S' then 'Materiais Especiais'\n            when UPPER(x.ctf_categ) = 'N' then 'Medicamentos'\n            when UPPER(x.ctf_categ) = 'G' then 'Gases'\n            when UPPER(x.ctf_categ) = 'O' then 'Outros'\n          end DS_CLASSIF_PROCEDIMENTO  \n    from dbo.ctf x\n) \n\n\n,prod as(\nSELECT\n    itm.smm_num_pai\n    ,itm.smm_num\n    ,itm.smm_dthr_exec                                                                      as DT_LANCAMENTO\n    ,a.osm_num                                                                              as NR_ATENDIMENTO\n    ,a.osm_dthr                                                                             as DT_ENTRADA\n    ,a.osm_cnv                                                                              as CD_CONVENIO\n    ,pac.pac_reg                                                                            as CD_PESSOA_FISICA            \n    ,pac.pac_nome                                                                           AS NM_PACIENTE\n    -- ,cast(a.osm_serie as varchar(15)) + '.' + cast(a.osm_num as varchar(5))                 as NR_INTERNO_CONTA   \n    ,a.osm_serie                                                                            as NR_INTERNO_CONTA   \n    ,a.osm_atend                                                                            as CD_TIPO_ATEND\n    ,A.osm_proc                                                                             AS CD_PROCEDENCIA\n    -- ,a.osm_mcnv                                                                             as cd_carterinha_pac\n    -- ,a.osm_cid_cod                                                                          as cd_cid\n    -- ,a.osm_pln_cod                                                                          as cd_plano_convenio\n    ,a.osm_str                                                                              as CD_SETOR_ATENDIMENTO\n    ,itm.smm_str                                                                            as CD_SETOR_EXECUTANTE\n    ,a.osm_mreq                                                                             as CD_MEDICO_SOL\n    ,itm.smm_med                                                                            as CD_MEDICO_EXECUTANTE\n    -- ,itm.smm_cod                                                                            as cd_item_smart\n    -- ,itm.smm_pre_ccv                                                                        as cd_item_conv\n    ,CAST(CAST(a.osm_serie as varchar(10)) \n        + cast(a.osm_num as varchar(50)) \n        + CAST(itm.smm_num AS VARCHAR(50))\n        + CAST(A.OSM_PAC AS VARCHAR(50))\n         AS DECIMAL)                                                                        as NR_SEQUENCIA\n    ,pi.smk_cod                                                                             as NR_PROC_INTERNO       \n    ,pi.smk_amb                                                                             as CD_PROCEDIMENTO\n    ,pi.smk_rot                                                                             as DS_PROC_INTERNO \n    ,pi.smk_nome                                                                            as DS_PROCEDIMENTO\n    ,pi.smk_ctf\n    ,pi.smk_tipo\n    ,itm.smm_motivo_cancela                                                                 as MOTIVO_CANCEL_ITEM\n    ,itm.smm_canc_mot_cod                                                                   as CD_MOTIVO_CANCEL_ITEM\n    ,itm.smm_rpi_serie                                                                      as NR_SERIE_REPASSE\n    ,itm.smm_rpi_num                                                                        as NR_REPASSE\n    ,itm.smm_pacote                                                                         as IE_PACOTE\n    -- ,itm.smm_hon_seq\n    ,itm.smm_fat_serie\n    ,itm.smm_fat\n    ,itm.smm_tipo_fatura\n    ,itm.smm_dthr_alter                                                                     as dt_atualizacao                                                                      \n    ,itm.smm_qt                                                                             as QTD\n    ,itm.smm_vlr                                                                            AS VL_ITEM\n    ,isnull(itm.smm_ajuste_vlr,0)                                                           as VL_ITEM_AJUSTE\n    ,ROUND(ISNULL(round(\n                    (hon.hon_vl1 * itm.smm_qt) \n                  + (itm.smm_vlr + isnull(itm.smm_ajuste_vlr,0)) \n                  * hon.hon_pc1 / 100,3),0\n                  ),2)                                                                      AS VL_HM\n    ,ROUND(ISNULL(mte.mte_perc_desconto,0),2)                                               as PERC_DESCONTO\n\n\nFROM dbo.osm a                  (NOLOCK)\ninner join dbo.pac pac          (NOLOCK) on pac.pac_reg = a.osm_pac\ninner join dbo.smm itm          (NOLOCK) on itm.smm_osm_serie = a.osm_serie and itm.smm_osm = a.osm_num\ninner join dbo.smk pi           (NOLOCK) on pi.smk_cod = itm.smm_cod and pi.smK_tipo = itm.smm_tpcod\n-- left join dbo.hon  hon          (NOLOCK) on hon.hon_seq = itm.smm_hon_seq\nLEFT join dbo.hon  hon          (NOLOCK) on hon.hon_seq = itm.smm_hon_seq\n\nOUTER APPLY (\n    SELECT\n        CASE \n            WHEN (MTE.mte_valor <> 0)\n                THEN MTE.mte_desconto / MTE.mte_valor\n            ELSE 0\n        END AS mte_perc_desconto\n    FROM MTE MTE (NOLOCK)\n    LEFT JOIN NFS NFS (NOLOCK)  ON MTE.MTE_NFS_NUMERO = NFS.nfs_numero AND MTE.MTE_NFS_SERIE = NFS.nfs_serie AND MTE.MTE_NFS_TIPO = NFS.NFS_TIPO\n    WHERE MTE.MTE_SERIE = ITM.SMM_MTE_SERIE AND MTE.MTE_SEQ = ITM.SMM_MTE_SEQ\n)MTE\n\n\nWHERE \n     itm.smm_vlr <> 0\n    and (itm.smm_pacote IS NULL OR ( itm.smm_pacote = 'C' )) \n    and itm.smm_exec <> 'C'\n    and itm.smm_sfat <> 'C'\n    and itm.smm_str like '%'\n    and pi.smk_ctf LIKE '%'\n    AND (itm.smm_sfat IN ('a', 'f', '?', 'p', '?'))\n    and substring(cast(CAST(a.osm_dthr as date) as varchar(10)),1,7) = SUBSTRING(cast(CAST(getdate() AS DATE) as varchar(10)),1,7)\n    -- AND CAST(a.osm_dthr AS DATE) BETWEEN '2021-01-01' AND CAST(GETDATE() AS DATE)\n    -- AND A.osm_serie = '121' AND A.osm_num = '21460'\n)\n\nselect \n\n    90                                                  AS ID_SYSTEM\n    ,g.gcc_str_cod                                      AS CD_ESTABELECIMENTO\n    ,G.gcc_descr                                        AS DS_ESTABELECIMENTO\n    ,a.DT_ENTRADA\n    ,A.DT_LANCAMENTO\n    ,A.NR_ATENDIMENTO           \n    ,CAST(A.nr_interno_conta AS VARCHAR(10))\n        + CAST(A.NR_ATENDIMENTO AS VARCHAR(50))         AS NR_INTERNO_CONTA\n    ,emp.emp_cgc                                        as CGC_CONVENIO\n    ,A.cd_convenio                                      AS CD_CONVENIO\n    ,conv.cnv_nome                                      as DS_CONVENIO\n    ,a.CD_PESSOA_FISICA\n    ,A.NM_PACIENTE                                      AS NM_PACIENTE\n    ,A.CD_MEDICO_SOL\n    ,PSOL.psv_nome                                      AS MEDICO_SOLICITANTE\n    ,A.CD_MEDICO_EXECUTANTE\n    ,PEXC.psv_nome                                      AS MEDICO_EXECUTANTE\n    ,PEXC.psv_nome                                      AS MEDICO_RESPONSAVEL\n    ,PEXC.psv_nome                                      AS MEDICO_ATENDIMENTO\n    ,B.str_cod                                          as CD_SETOR_ATENDIMENTO\n    ,b.str_nome                                         as DS_SETOR_ATENDIMENTO\n    ,A.NR_SEQUENCIA\n    -- ,A.smm_num_pai\n    -- ,smk.smk_rot                                        as DS_PROC_PRINC\n    ,A.NR_PROC_INTERNO\n    ,A.DS_PROC_INTERNO\n    ,A.CD_PROCEDIMENTO\n    ,A.DS_PROCEDIMENTO\n    ,c.DS_CLASSIF_PROCEDIMENTO\n    ,A.CD_PROCEDENCIA\n    ,A.QTD                                              AS QTD_ITEM\n    ,A.VL_ITEM                                          AS VL_ITEM_ORIGINAL                 \n    ,A.VL_ITEM + A.VL_ITEM_AJUSTE                       AS VL_ITEM\n    ,a.VL_HM\n    ,a.PERC_DESCONTO\n    ,a.DT_ATUALIZACAO\nfrom prod a\ninner join dbo.str b                (nolock)        on b.str_cod = a.CD_SETOR_ATENDIMENTO  \nleft join dbo.gcc g                (NOLOCK)        on g.gcc_str_cod = b.str_str_cod\ninner join dbo.cnv conv             (NOLOCK)        on conv.cnv_cod = a.cd_convenio\ninner join dbo.emp                  (nolock)        on emp_cod = conv.cnv_emp_cod  \ninner join ctf     c                                on ctf_cod = a.smk_ctf  and ctf_tipo = a.smk_tipo\nINNER JOIN psv     PEXC             (NOLOCK)        ON PEXC.psv_cod = A.CD_MEDICO_EXECUTANTE\nINNER JOIN psv     PSOL             (NOLOCK)        ON PSOL.psv_cod = A.CD_MEDICO_SOL\n\n\nWHERE C.DS_CLASSIF_PROCEDIMENTO IS NOT NULL\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "ID_SYSTEM",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ID_SYSTEM",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DT_ENTRADA",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_ENTRADA",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "DT_LANCAMENTO",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_LANCAMENTO",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "NR_ATENDIMENTO",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "NR_ATENDIMENTO",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "NR_INTERNO_CONTA",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "NR_INTERNO_CONTA",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CGC_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "CGC_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_CONVENIO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_CONVENIO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_PESSOA_FISICA",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_PESSOA_FISICA",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "NM_PACIENTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "NM_PACIENTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_MEDICO_SOL",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MEDICO_SOL",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "MEDICO_SOLICITANTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_SOLICITANTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_MEDICO_EXECUTANTE",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MEDICO_EXECUTANTE",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "MEDICO_EXECUTANTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_EXECUTANTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "MEDICO_RESPONSAVEL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_RESPONSAVEL",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "MEDICO_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "NR_SEQUENCIA",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 18
													},
													"sink": {
														"name": "NR_SEQUENCIA",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 18
													}
												},
												{
													"source": {
														"name": "NR_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "NR_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_CLASSIF_PROCEDIMENTO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_CLASSIF_PROCEDIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_PROCEDENCIA",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_PROCEDENCIA",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "QTD_ITEM",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													},
													"sink": {
														"name": "QTD_ITEM",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													}
												},
												{
													"source": {
														"name": "VL_ITEM_ORIGINAL",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_ITEM_ORIGINAL",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "VL_ITEM",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_ITEM",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "VL_HM",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_HM",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "PERC_DESCONTO",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 15,
														"precision": 27
													},
													"sink": {
														"name": "PERC_DESCONTO",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 15,
														"precision": 27
													}
												},
												{
													"source": {
														"name": "DT_ATUALIZACAO",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_ATUALIZACAO",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_PROD_DIARIA",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "ITG - Smart Last Month",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "DECLARE @PERIODO AS VARCHAR(7)\n\nSELECT\n    @PERIODO = SUBSTRING(cast(CAST(getdate()-1 AS DATE) as varchar(10)),1,7)\n\nwith ctf as(\n\n    SELECT\n        x.ctf_cod    \n        ,x.ctf_tipo\n        ,case\n            when UPPER(x.ctf_categ) = 'C' then 'Consultas'\n            when UPPER(x.ctf_categ) = 'R' then 'Cirurgias'\n            when UPPER(x.ctf_categ) = 'E' then 'Exames'\n            when UPPER(x.ctf_categ) = 'T' then 'Taxas'\n            when UPPER(x.ctf_categ) = 'D' then 'Diárias'\n            when UPPER(x.ctf_categ) = 'A' then 'Terapia'\n            when UPPER(x.ctf_categ) = 'M' then 'Materiais'\n            when UPPER(x.ctf_categ) = 'S' then 'Materiais Especiais'\n            when UPPER(x.ctf_categ) = 'N' then 'Medicamentos'\n            when UPPER(x.ctf_categ) = 'G' then 'Gases'\n            when UPPER(x.ctf_categ) = 'O' then 'Outros'\n          end DS_CLASSIF_PROCEDIMENTO  \n    from dbo.ctf x\n) \n\n\n,prod as(\nSELECT\n    itm.smm_num_pai\n    ,itm.smm_num\n    ,itm.smm_dthr_exec                                                                      as DT_LANCAMENTO\n    ,a.osm_num                                                                              as NR_ATENDIMENTO\n    ,a.osm_dthr                                                                             as DT_ENTRADA\n    ,a.osm_cnv                                                                              as CD_CONVENIO\n    ,pac.pac_reg                                                                            as CD_PESSOA_FISICA            \n    ,pac.pac_nome                                                                           AS NM_PACIENTE\n    -- ,cast(a.osm_serie as varchar(15)) + '.' + cast(a.osm_num as varchar(5))                 as NR_INTERNO_CONTA   \n    ,a.osm_serie                                                                            as NR_INTERNO_CONTA   \n    ,a.osm_atend                                                                            as CD_TIPO_ATEND\n    ,A.osm_proc                                                                             AS CD_PROCEDENCIA\n    -- ,a.osm_mcnv                                                                             as cd_carterinha_pac\n    -- ,a.osm_cid_cod                                                                          as cd_cid\n    -- ,a.osm_pln_cod                                                                          as cd_plano_convenio\n    ,a.osm_str                                                                              as CD_SETOR_ATENDIMENTO\n    ,itm.smm_str                                                                            as CD_SETOR_EXECUTANTE\n    ,a.osm_mreq                                                                             as CD_MEDICO_SOL\n    ,itm.smm_med                                                                            as CD_MEDICO_EXECUTANTE\n    -- ,itm.smm_cod                                                                            as cd_item_smart\n    -- ,itm.smm_pre_ccv                                                                        as cd_item_conv\n    ,CAST(CAST(a.osm_serie as varchar(10)) \n        + cast(a.osm_num as varchar(50)) \n        + CAST(itm.smm_num AS VARCHAR(50))\n        + CAST(A.OSM_PAC AS VARCHAR(50))\n         AS DECIMAL)                                                                        as NR_SEQUENCIA\n    ,pi.smk_cod                                                                             as NR_PROC_INTERNO       \n    ,pi.smk_amb                                                                             as CD_PROCEDIMENTO\n    ,pi.smk_rot                                                                             as DS_PROC_INTERNO \n    ,pi.smk_nome                                                                            as DS_PROCEDIMENTO\n    ,pi.smk_ctf\n    ,pi.smk_tipo\n    ,itm.smm_motivo_cancela                                                                 as MOTIVO_CANCEL_ITEM\n    ,itm.smm_canc_mot_cod                                                                   as CD_MOTIVO_CANCEL_ITEM\n    ,itm.smm_rpi_serie                                                                      as NR_SERIE_REPASSE\n    ,itm.smm_rpi_num                                                                        as NR_REPASSE\n    ,itm.smm_pacote                                                                         as IE_PACOTE\n    -- ,itm.smm_hon_seq\n    ,itm.smm_fat_serie\n    ,itm.smm_fat\n    ,itm.smm_tipo_fatura\n    ,itm.smm_dthr_alter                                                                     as dt_atualizacao                                                                      \n    ,itm.smm_qt                                                                             as QTD\n    ,itm.smm_vlr                                                                            AS VL_ITEM\n    ,isnull(itm.smm_ajuste_vlr,0)                                                           as VL_ITEM_AJUSTE\n    ,ROUND(ISNULL(round(\n                    (hon.hon_vl1 * itm.smm_qt) \n                  + (itm.smm_vlr + isnull(itm.smm_ajuste_vlr,0)) \n                  * hon.hon_pc1 / 100,3),0\n                  ),2)                                                                      AS VL_HM\n    ,ROUND(ISNULL(mte.mte_perc_desconto,0),2)                                               as PERC_DESCONTO\n\n\nFROM dbo.osm a                  (NOLOCK)\ninner join dbo.pac pac          (NOLOCK) on pac.pac_reg = a.osm_pac\ninner join dbo.smm itm          (NOLOCK) on itm.smm_osm_serie = a.osm_serie and itm.smm_osm = a.osm_num\ninner join dbo.smk pi           (NOLOCK) on pi.smk_cod = itm.smm_cod and pi.smK_tipo = itm.smm_tpcod\n-- left join dbo.hon  hon          (NOLOCK) on hon.hon_seq = itm.smm_hon_seq\nLEFT join dbo.hon  hon          (NOLOCK) on hon.hon_seq = itm.smm_hon_seq\n\nOUTER APPLY (\n    SELECT\n        CASE \n            WHEN (MTE.mte_valor <> 0)\n                THEN MTE.mte_desconto / MTE.mte_valor\n            ELSE 0\n        END AS mte_perc_desconto\n    FROM MTE MTE (NOLOCK)\n    LEFT JOIN NFS NFS (NOLOCK)  ON MTE.MTE_NFS_NUMERO = NFS.nfs_numero AND MTE.MTE_NFS_SERIE = NFS.nfs_serie AND MTE.MTE_NFS_TIPO = NFS.NFS_TIPO\n    WHERE MTE.MTE_SERIE = ITM.SMM_MTE_SERIE AND MTE.MTE_SEQ = ITM.SMM_MTE_SEQ\n)MTE\n\n\nWHERE \n     itm.smm_vlr <> 0\n    and (itm.smm_pacote IS NULL OR ( itm.smm_pacote = 'C' )) \n    and itm.smm_exec <> 'C'\n    and itm.smm_sfat <> 'C'\n    and itm.smm_str like '%'\n    and pi.smk_ctf LIKE '%'\n    AND (itm.smm_sfat IN ('a', 'f', '?', 'p', '?'))\n    and substring(cast(CAST(a.osm_dthr as date) as varchar(10)),1,7) = @PERIODO\n    -- AND CAST(a.osm_dthr AS DATE) BETWEEN '2021-01-01' AND CAST(GETDATE() AS DATE)\n    -- AND A.osm_serie = '121' AND A.osm_num = '21460'\n)\n\nselect \n\n    90                                                  AS ID_SYSTEM\n    ,g.gcc_str_cod                                      AS CD_ESTABELECIMENTO\n    ,G.gcc_descr                                        AS DS_ESTABELECIMENTO\n    ,a.DT_ENTRADA\n    ,A.DT_LANCAMENTO\n    ,A.NR_ATENDIMENTO           \n    ,CAST(A.nr_interno_conta AS VARCHAR(10))\n        + CAST(A.NR_ATENDIMENTO AS VARCHAR(50))         AS NR_INTERNO_CONTA\n    ,emp.emp_cgc                                        as CGC_CONVENIO\n    ,A.cd_convenio                                      AS CD_CONVENIO\n    ,conv.cnv_nome                                      as DS_CONVENIO\n    ,a.CD_PESSOA_FISICA\n    ,A.NM_PACIENTE                                      AS NM_PACIENTE\n    ,A.CD_MEDICO_SOL\n    ,PSOL.psv_nome                                      AS MEDICO_SOLICITANTE\n    ,A.CD_MEDICO_EXECUTANTE\n    ,PEXC.psv_nome                                      AS MEDICO_EXECUTANTE\n    ,PEXC.psv_nome                                      AS MEDICO_RESPONSAVEL\n    ,PEXC.psv_nome                                      AS MEDICO_ATENDIMENTO\n    ,B.str_cod                                          as CD_SETOR_ATENDIMENTO\n    ,b.str_nome                                         as DS_SETOR_ATENDIMENTO\n    ,A.NR_SEQUENCIA\n    -- ,A.smm_num_pai\n    -- ,smk.smk_rot                                        as DS_PROC_PRINC\n    ,A.NR_PROC_INTERNO\n    ,A.DS_PROC_INTERNO\n    ,A.CD_PROCEDIMENTO\n    ,A.DS_PROCEDIMENTO\n    ,c.DS_CLASSIF_PROCEDIMENTO\n    ,A.CD_PROCEDENCIA\n    ,A.QTD                                              AS QTD_ITEM\n    ,A.VL_ITEM                                          AS VL_ITEM_ORIGINAL                 \n    ,A.VL_ITEM + A.VL_ITEM_AJUSTE                       AS VL_ITEM\n    ,a.VL_HM\n    ,a.PERC_DESCONTO\n    ,a.DT_ATUALIZACAO\nfrom prod a\ninner join dbo.str b                (nolock)        on b.str_cod = a.CD_SETOR_ATENDIMENTO  \nleft join dbo.gcc g                (NOLOCK)        on g.gcc_str_cod = b.str_str_cod\ninner join dbo.cnv conv             (NOLOCK)        on conv.cnv_cod = a.cd_convenio\ninner join dbo.emp                  (nolock)        on emp_cod = conv.cnv_emp_cod  \ninner join ctf     c                                on ctf_cod = a.smk_ctf  and ctf_tipo = a.smk_tipo\nINNER JOIN psv     PEXC             (NOLOCK)        ON PEXC.psv_cod = A.CD_MEDICO_EXECUTANTE\nINNER JOIN psv     PSOL             (NOLOCK)        ON PSOL.psv_cod = A.CD_MEDICO_SOL\n\n\nWHERE C.DS_CLASSIF_PROCEDIMENTO IS NOT NULL\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": "TRUNCATE TABLE dbo.aux_prod_diaria \n",
											"writeBehavior": "insert",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "ID_SYSTEM",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ID_SYSTEM",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DT_ENTRADA",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_ENTRADA",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "DT_LANCAMENTO",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_LANCAMENTO",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "NR_ATENDIMENTO",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "NR_ATENDIMENTO",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "NR_INTERNO_CONTA",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "NR_INTERNO_CONTA",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CGC_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "CGC_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_CONVENIO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_CONVENIO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_PESSOA_FISICA",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_PESSOA_FISICA",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "NM_PACIENTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "NM_PACIENTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_MEDICO_SOL",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MEDICO_SOL",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "MEDICO_SOLICITANTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_SOLICITANTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_MEDICO_EXECUTANTE",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MEDICO_EXECUTANTE",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "MEDICO_EXECUTANTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_EXECUTANTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "MEDICO_RESPONSAVEL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_RESPONSAVEL",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "MEDICO_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "NR_SEQUENCIA",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 18
													},
													"sink": {
														"name": "NR_SEQUENCIA",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 18
													}
												},
												{
													"source": {
														"name": "NR_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "NR_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_CLASSIF_PROCEDIMENTO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_CLASSIF_PROCEDIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_PROCEDENCIA",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_PROCEDENCIA",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "QTD_ITEM",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													},
													"sink": {
														"name": "QTD_ITEM",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													}
												},
												{
													"source": {
														"name": "VL_ITEM_ORIGINAL",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_ITEM_ORIGINAL",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "VL_ITEM",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_ITEM",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "VL_HM",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_HM",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "PERC_DESCONTO",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 15,
														"precision": 27
													},
													"sink": {
														"name": "PERC_DESCONTO",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 15,
														"precision": 27
													}
												},
												{
													"source": {
														"name": "DT_ATUALIZACAO",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_ATUALIZACAO",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_ITAIGARA_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_PROD_DIARIA",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "ITB - Smart Last Month",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ITG - Smart Last Month",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "DECLARE @PERIODO AS VARCHAR(7)\n\nSELECT\n    @PERIODO = SUBSTRING(cast(CAST(getdate()-1 AS DATE) as varchar(10)),1,7)\n\nwith ctf as(\n\n    SELECT\n        x.ctf_cod    \n        ,x.ctf_tipo\n        ,case\n            when UPPER(x.ctf_categ) = 'C' then 'Consultas'\n            when UPPER(x.ctf_categ) = 'R' then 'Cirurgias'\n            when UPPER(x.ctf_categ) = 'E' then 'Exames'\n            when UPPER(x.ctf_categ) = 'T' then 'Taxas'\n            when UPPER(x.ctf_categ) = 'D' then 'Diárias'\n            when UPPER(x.ctf_categ) = 'A' then 'Terapia'\n            when UPPER(x.ctf_categ) = 'M' then 'Materiais'\n            when UPPER(x.ctf_categ) = 'S' then 'Materiais Especiais'\n            when UPPER(x.ctf_categ) = 'N' then 'Medicamentos'\n            when UPPER(x.ctf_categ) = 'G' then 'Gases'\n            when UPPER(x.ctf_categ) = 'O' then 'Outros'\n          end DS_CLASSIF_PROCEDIMENTO  \n    from dbo.ctf x\n) \n\n\n,prod as(\nSELECT\n    itm.smm_num_pai\n    ,itm.smm_num\n    ,itm.smm_dthr_exec                                                                      as DT_LANCAMENTO\n    ,a.osm_num                                                                              as NR_ATENDIMENTO\n    ,a.osm_dthr                                                                             as DT_ENTRADA\n    ,a.osm_cnv                                                                              as CD_CONVENIO\n    ,pac.pac_reg                                                                            as CD_PESSOA_FISICA            \n    ,pac.pac_nome                                                                           AS NM_PACIENTE\n    -- ,cast(a.osm_serie as varchar(15)) + '.' + cast(a.osm_num as varchar(5))                 as NR_INTERNO_CONTA   \n    ,a.osm_serie                                                                            as NR_INTERNO_CONTA   \n    ,a.osm_atend                                                                            as CD_TIPO_ATEND\n    ,A.osm_proc                                                                             AS CD_PROCEDENCIA\n    -- ,a.osm_mcnv                                                                             as cd_carterinha_pac\n    -- ,a.osm_cid_cod                                                                          as cd_cid\n    -- ,a.osm_pln_cod                                                                          as cd_plano_convenio\n    ,a.osm_str                                                                              as CD_SETOR_ATENDIMENTO\n    ,itm.smm_str                                                                            as CD_SETOR_EXECUTANTE\n    ,a.osm_mreq                                                                             as CD_MEDICO_SOL\n    ,itm.smm_med                                                                            as CD_MEDICO_EXECUTANTE\n    -- ,itm.smm_cod                                                                            as cd_item_smart\n    -- ,itm.smm_pre_ccv                                                                        as cd_item_conv\n    ,CAST(CAST(a.osm_serie as varchar(10)) \n        + cast(a.osm_num as varchar(50)) \n        + CAST(itm.smm_num AS VARCHAR(50))\n        + CAST(A.OSM_PAC AS VARCHAR(50))\n         AS DECIMAL)                                                                        as NR_SEQUENCIA\n    ,pi.smk_cod                                                                             as NR_PROC_INTERNO       \n    ,pi.smk_amb                                                                             as CD_PROCEDIMENTO\n    ,pi.smk_rot                                                                             as DS_PROC_INTERNO \n    ,pi.smk_nome                                                                            as DS_PROCEDIMENTO\n    ,pi.smk_ctf\n    ,pi.smk_tipo\n    ,itm.smm_motivo_cancela                                                                 as MOTIVO_CANCEL_ITEM\n    ,itm.smm_canc_mot_cod                                                                   as CD_MOTIVO_CANCEL_ITEM\n    ,itm.smm_rpi_serie                                                                      as NR_SERIE_REPASSE\n    ,itm.smm_rpi_num                                                                        as NR_REPASSE\n    ,itm.smm_pacote                                                                         as IE_PACOTE\n    -- ,itm.smm_hon_seq\n    ,itm.smm_fat_serie\n    ,itm.smm_fat\n    ,itm.smm_tipo_fatura\n    ,itm.smm_dthr_alter                                                                     as dt_atualizacao                                                                      \n    ,itm.smm_qt                                                                             as QTD\n    ,itm.smm_vlr                                                                            AS VL_ITEM\n    ,isnull(itm.smm_ajuste_vlr,0)                                                           as VL_ITEM_AJUSTE\n    ,ROUND(ISNULL(round(\n                    (hon.hon_vl1 * itm.smm_qt) \n                  + (itm.smm_vlr + isnull(itm.smm_ajuste_vlr,0)) \n                  * hon.hon_pc1 / 100,3),0\n                  ),2)                                                                      AS VL_HM\n    ,ROUND(ISNULL(mte.mte_perc_desconto,0),2)                                               as PERC_DESCONTO\n\n\nFROM dbo.osm a                  (NOLOCK)\ninner join dbo.pac pac          (NOLOCK) on pac.pac_reg = a.osm_pac\ninner join dbo.smm itm          (NOLOCK) on itm.smm_osm_serie = a.osm_serie and itm.smm_osm = a.osm_num\ninner join dbo.smk pi           (NOLOCK) on pi.smk_cod = itm.smm_cod and pi.smK_tipo = itm.smm_tpcod\n-- left join dbo.hon  hon          (NOLOCK) on hon.hon_seq = itm.smm_hon_seq\nLEFT join dbo.hon  hon          (NOLOCK) on hon.hon_seq = itm.smm_hon_seq\n\nOUTER APPLY (\n    SELECT\n        CASE \n            WHEN (MTE.mte_valor <> 0)\n                THEN MTE.mte_desconto / MTE.mte_valor\n            ELSE 0\n        END AS mte_perc_desconto\n    FROM MTE MTE (NOLOCK)\n    LEFT JOIN NFS NFS (NOLOCK)  ON MTE.MTE_NFS_NUMERO = NFS.nfs_numero AND MTE.MTE_NFS_SERIE = NFS.nfs_serie AND MTE.MTE_NFS_TIPO = NFS.NFS_TIPO\n    WHERE MTE.MTE_SERIE = ITM.SMM_MTE_SERIE AND MTE.MTE_SEQ = ITM.SMM_MTE_SEQ\n)MTE\n\n\nWHERE \n     itm.smm_vlr <> 0\n    and (itm.smm_pacote IS NULL OR ( itm.smm_pacote = 'C' )) \n    and itm.smm_exec <> 'C'\n    and itm.smm_sfat <> 'C'\n    and itm.smm_str like '%'\n    and pi.smk_ctf LIKE '%'\n    AND (itm.smm_sfat IN ('a', 'f', '?', 'p', '?'))\n    and substring(cast(CAST(a.osm_dthr as date) as varchar(10)),1,7) = @PERIODO\n    -- AND CAST(a.osm_dthr AS DATE) BETWEEN '2021-01-01' AND CAST(GETDATE() AS DATE)\n    -- AND A.osm_serie = '121' AND A.osm_num = '21460'\n)\n\nselect \n\n    90                                                  AS ID_SYSTEM\n    ,g.gcc_str_cod                                      AS CD_ESTABELECIMENTO\n    ,G.gcc_descr                                        AS DS_ESTABELECIMENTO\n    ,a.DT_ENTRADA\n    ,A.DT_LANCAMENTO\n    ,A.NR_ATENDIMENTO           \n    ,CAST(A.nr_interno_conta AS VARCHAR(10))\n        + CAST(A.NR_ATENDIMENTO AS VARCHAR(50))         AS NR_INTERNO_CONTA\n    ,emp.emp_cgc                                        as CGC_CONVENIO\n    ,A.cd_convenio                                      AS CD_CONVENIO\n    ,conv.cnv_nome                                      as DS_CONVENIO\n    ,a.CD_PESSOA_FISICA\n    ,A.NM_PACIENTE                                      AS NM_PACIENTE\n    ,A.CD_MEDICO_SOL\n    ,PSOL.psv_nome                                      AS MEDICO_SOLICITANTE\n    ,A.CD_MEDICO_EXECUTANTE\n    ,PEXC.psv_nome                                      AS MEDICO_EXECUTANTE\n    ,PEXC.psv_nome                                      AS MEDICO_RESPONSAVEL\n    ,PEXC.psv_nome                                      AS MEDICO_ATENDIMENTO\n    ,B.str_cod                                          as CD_SETOR_ATENDIMENTO\n    ,b.str_nome                                         as DS_SETOR_ATENDIMENTO\n    ,A.NR_SEQUENCIA\n    -- ,A.smm_num_pai\n    -- ,smk.smk_rot                                        as DS_PROC_PRINC\n    ,A.NR_PROC_INTERNO\n    ,A.DS_PROC_INTERNO\n    ,A.CD_PROCEDIMENTO\n    ,A.DS_PROCEDIMENTO\n    ,c.DS_CLASSIF_PROCEDIMENTO\n    ,A.CD_PROCEDENCIA\n    ,A.QTD                                              AS QTD_ITEM\n    ,A.VL_ITEM                                          AS VL_ITEM_ORIGINAL                 \n    ,A.VL_ITEM + A.VL_ITEM_AJUSTE                       AS VL_ITEM\n    ,a.VL_HM\n    ,a.PERC_DESCONTO\n    ,a.DT_ATUALIZACAO\nfrom prod a\ninner join dbo.str b                (nolock)        on b.str_cod = a.CD_SETOR_ATENDIMENTO  \nleft join dbo.gcc g                (NOLOCK)        on g.gcc_str_cod = b.str_str_cod\ninner join dbo.cnv conv             (NOLOCK)        on conv.cnv_cod = a.cd_convenio\ninner join dbo.emp                  (nolock)        on emp_cod = conv.cnv_emp_cod  \ninner join ctf     c                                on ctf_cod = a.smk_ctf  and ctf_tipo = a.smk_tipo\nINNER JOIN psv     PEXC             (NOLOCK)        ON PEXC.psv_cod = A.CD_MEDICO_EXECUTANTE\nINNER JOIN psv     PSOL             (NOLOCK)        ON PSOL.psv_cod = A.CD_MEDICO_SOL\n\n\nWHERE C.DS_CLASSIF_PROCEDIMENTO IS NOT NULL\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "ID_SYSTEM",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ID_SYSTEM",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DT_ENTRADA",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_ENTRADA",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "DT_LANCAMENTO",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_LANCAMENTO",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "NR_ATENDIMENTO",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "NR_ATENDIMENTO",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "NR_INTERNO_CONTA",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "NR_INTERNO_CONTA",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CGC_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "CGC_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_CONVENIO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_CONVENIO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_PESSOA_FISICA",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_PESSOA_FISICA",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "NM_PACIENTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "NM_PACIENTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_MEDICO_SOL",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MEDICO_SOL",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "MEDICO_SOLICITANTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_SOLICITANTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_MEDICO_EXECUTANTE",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MEDICO_EXECUTANTE",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "MEDICO_EXECUTANTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_EXECUTANTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "MEDICO_RESPONSAVEL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_RESPONSAVEL",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "MEDICO_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "NR_SEQUENCIA",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 18
													},
													"sink": {
														"name": "NR_SEQUENCIA",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 18
													}
												},
												{
													"source": {
														"name": "NR_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "NR_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_CLASSIF_PROCEDIMENTO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_CLASSIF_PROCEDIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_PROCEDENCIA",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_PROCEDENCIA",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "QTD_ITEM",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													},
													"sink": {
														"name": "QTD_ITEM",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													}
												},
												{
													"source": {
														"name": "VL_ITEM_ORIGINAL",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_ITEM_ORIGINAL",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "VL_ITEM",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_ITEM",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "VL_HM",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_HM",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "PERC_DESCONTO",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 15,
														"precision": 27
													},
													"sink": {
														"name": "PERC_DESCONTO",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 15,
														"precision": 27
													}
												},
												{
													"source": {
														"name": "DT_ATUALIZACAO",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_ATUALIZACAO",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_ITABUNA_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_PROD_DIARIA",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "IOF - Smart Last Month",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ITB - Smart Last Month",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "DECLARE @PERIODO AS VARCHAR(7)\n\nSELECT\n    @PERIODO = SUBSTRING(cast(CAST(getdate()-1 AS DATE) as varchar(10)),1,7)\n\nwith ctf as(\n\n    SELECT\n        x.ctf_cod    \n        ,x.ctf_tipo\n        ,case\n            when UPPER(x.ctf_categ) = 'C' then 'Consultas'\n            when UPPER(x.ctf_categ) = 'R' then 'Cirurgias'\n            when UPPER(x.ctf_categ) = 'E' then 'Exames'\n            when UPPER(x.ctf_categ) = 'T' then 'Taxas'\n            when UPPER(x.ctf_categ) = 'D' then 'Diárias'\n            when UPPER(x.ctf_categ) = 'A' then 'Terapia'\n            when UPPER(x.ctf_categ) = 'M' then 'Materiais'\n            when UPPER(x.ctf_categ) = 'S' then 'Materiais Especiais'\n            when UPPER(x.ctf_categ) = 'N' then 'Medicamentos'\n            when UPPER(x.ctf_categ) = 'G' then 'Gases'\n            when UPPER(x.ctf_categ) = 'O' then 'Outros'\n          end DS_CLASSIF_PROCEDIMENTO  \n    from dbo.ctf x\n) \n\n\n,prod as(\nSELECT\n    itm.smm_num_pai\n    ,itm.smm_num\n    ,itm.smm_dthr_exec                                                                      as DT_LANCAMENTO\n    ,a.osm_num                                                                              as NR_ATENDIMENTO\n    ,a.osm_dthr                                                                             as DT_ENTRADA\n    ,a.osm_cnv                                                                              as CD_CONVENIO\n    ,pac.pac_reg                                                                            as CD_PESSOA_FISICA            \n    ,pac.pac_nome                                                                           AS NM_PACIENTE\n    -- ,cast(a.osm_serie as varchar(15)) + '.' + cast(a.osm_num as varchar(5))                 as NR_INTERNO_CONTA   \n    ,a.osm_serie                                                                            as NR_INTERNO_CONTA   \n    ,a.osm_atend                                                                            as CD_TIPO_ATEND\n    ,A.osm_proc                                                                             AS CD_PROCEDENCIA\n    -- ,a.osm_mcnv                                                                             as cd_carterinha_pac\n    -- ,a.osm_cid_cod                                                                          as cd_cid\n    -- ,a.osm_pln_cod                                                                          as cd_plano_convenio\n    ,a.osm_str                                                                              as CD_SETOR_ATENDIMENTO\n    ,itm.smm_str                                                                            as CD_SETOR_EXECUTANTE\n    ,a.osm_mreq                                                                             as CD_MEDICO_SOL\n    ,itm.smm_med                                                                            as CD_MEDICO_EXECUTANTE\n    -- ,itm.smm_cod                                                                            as cd_item_smart\n    -- ,itm.smm_pre_ccv                                                                        as cd_item_conv\n    ,CAST(CAST(a.osm_serie as varchar(10)) \n        + cast(a.osm_num as varchar(50)) \n        + CAST(itm.smm_num AS VARCHAR(50))\n        + CAST(A.OSM_PAC AS VARCHAR(50))\n         AS DECIMAL)                                                                        as NR_SEQUENCIA\n    ,pi.smk_cod                                                                             as NR_PROC_INTERNO       \n    ,pi.smk_amb                                                                             as CD_PROCEDIMENTO\n    ,pi.smk_rot                                                                             as DS_PROC_INTERNO \n    ,pi.smk_nome                                                                            as DS_PROCEDIMENTO\n    ,pi.smk_ctf\n    ,pi.smk_tipo\n    ,itm.smm_motivo_cancela                                                                 as MOTIVO_CANCEL_ITEM\n    ,itm.smm_canc_mot_cod                                                                   as CD_MOTIVO_CANCEL_ITEM\n    ,itm.smm_rpi_serie                                                                      as NR_SERIE_REPASSE\n    ,itm.smm_rpi_num                                                                        as NR_REPASSE\n    ,itm.smm_pacote                                                                         as IE_PACOTE\n    -- ,itm.smm_hon_seq\n    ,itm.smm_fat_serie\n    ,itm.smm_fat\n    ,itm.smm_tipo_fatura\n    ,itm.smm_dthr_alter                                                                     as dt_atualizacao                                                                      \n    ,itm.smm_qt                                                                             as QTD\n    ,itm.smm_vlr                                                                            AS VL_ITEM\n    ,isnull(itm.smm_ajuste_vlr,0)                                                           as VL_ITEM_AJUSTE\n    ,ROUND(ISNULL(round(\n                    (hon.hon_vl1 * itm.smm_qt) \n                  + (itm.smm_vlr + isnull(itm.smm_ajuste_vlr,0)) \n                  * hon.hon_pc1 / 100,3),0\n                  ),2)                                                                      AS VL_HM\n    ,ROUND(ISNULL(mte.mte_perc_desconto,0),2)                                               as PERC_DESCONTO\n\n\nFROM dbo.osm a                  (NOLOCK)\ninner join dbo.pac pac          (NOLOCK) on pac.pac_reg = a.osm_pac\ninner join dbo.smm itm          (NOLOCK) on itm.smm_osm_serie = a.osm_serie and itm.smm_osm = a.osm_num\ninner join dbo.smk pi           (NOLOCK) on pi.smk_cod = itm.smm_cod and pi.smK_tipo = itm.smm_tpcod\n-- left join dbo.hon  hon          (NOLOCK) on hon.hon_seq = itm.smm_hon_seq\nLEFT join dbo.hon  hon          (NOLOCK) on hon.hon_seq = itm.smm_hon_seq\n\nOUTER APPLY (\n    SELECT\n        CASE \n            WHEN (MTE.mte_valor <> 0)\n                THEN MTE.mte_desconto / MTE.mte_valor\n            ELSE 0\n        END AS mte_perc_desconto\n    FROM MTE MTE (NOLOCK)\n    LEFT JOIN NFS NFS (NOLOCK)  ON MTE.MTE_NFS_NUMERO = NFS.nfs_numero AND MTE.MTE_NFS_SERIE = NFS.nfs_serie AND MTE.MTE_NFS_TIPO = NFS.NFS_TIPO\n    WHERE MTE.MTE_SERIE = ITM.SMM_MTE_SERIE AND MTE.MTE_SEQ = ITM.SMM_MTE_SEQ\n)MTE\n\n\nWHERE \n     itm.smm_vlr <> 0\n    and (itm.smm_pacote IS NULL OR ( itm.smm_pacote = 'C' )) \n    and itm.smm_exec <> 'C'\n    and itm.smm_sfat <> 'C'\n    and itm.smm_str like '%'\n    and pi.smk_ctf LIKE '%'\n    AND (itm.smm_sfat IN ('a', 'f', '?', 'p', '?'))\n    and substring(cast(CAST(a.osm_dthr as date) as varchar(10)),1,7) = @PERIODO\n    -- AND CAST(a.osm_dthr AS DATE) BETWEEN '2021-01-01' AND CAST(GETDATE() AS DATE)\n    -- AND A.osm_serie = '121' AND A.osm_num = '21460'\n)\n\nselect \n\n    90                                                  AS ID_SYSTEM\n    ,g.gcc_str_cod                                      AS CD_ESTABELECIMENTO\n    ,G.gcc_descr                                        AS DS_ESTABELECIMENTO\n    ,a.DT_ENTRADA\n    ,A.DT_LANCAMENTO\n    ,A.NR_ATENDIMENTO           \n    ,CAST(A.nr_interno_conta AS VARCHAR(10))\n        + CAST(A.NR_ATENDIMENTO AS VARCHAR(50))         AS NR_INTERNO_CONTA\n    ,emp.emp_cgc                                        as CGC_CONVENIO\n    ,A.cd_convenio                                      AS CD_CONVENIO\n    ,conv.cnv_nome                                      as DS_CONVENIO\n    ,a.CD_PESSOA_FISICA\n    ,A.NM_PACIENTE                                      AS NM_PACIENTE\n    ,A.CD_MEDICO_SOL\n    ,PSOL.psv_nome                                      AS MEDICO_SOLICITANTE\n    ,A.CD_MEDICO_EXECUTANTE\n    ,PEXC.psv_nome                                      AS MEDICO_EXECUTANTE\n    ,PEXC.psv_nome                                      AS MEDICO_RESPONSAVEL\n    ,PEXC.psv_nome                                      AS MEDICO_ATENDIMENTO\n    ,B.str_cod                                          as CD_SETOR_ATENDIMENTO\n    ,b.str_nome                                         as DS_SETOR_ATENDIMENTO\n    ,A.NR_SEQUENCIA\n    -- ,A.smm_num_pai\n    -- ,smk.smk_rot                                        as DS_PROC_PRINC\n    ,A.NR_PROC_INTERNO\n    ,A.DS_PROC_INTERNO\n    ,A.CD_PROCEDIMENTO\n    ,A.DS_PROCEDIMENTO\n    ,c.DS_CLASSIF_PROCEDIMENTO\n    ,A.CD_PROCEDENCIA\n    ,A.QTD                                              AS QTD_ITEM\n    ,A.VL_ITEM                                          AS VL_ITEM_ORIGINAL                 \n    ,A.VL_ITEM + A.VL_ITEM_AJUSTE                       AS VL_ITEM\n    ,a.VL_HM\n    ,a.PERC_DESCONTO\n    ,a.DT_ATUALIZACAO\nfrom prod a\ninner join dbo.str b                (nolock)        on b.str_cod = a.CD_SETOR_ATENDIMENTO  \nleft join dbo.gcc g                (NOLOCK)        on g.gcc_str_cod = b.str_str_cod\ninner join dbo.cnv conv             (NOLOCK)        on conv.cnv_cod = a.cd_convenio\ninner join dbo.emp                  (nolock)        on emp_cod = conv.cnv_emp_cod  \ninner join ctf     c                                on ctf_cod = a.smk_ctf  and ctf_tipo = a.smk_tipo\nINNER JOIN psv     PEXC             (NOLOCK)        ON PEXC.psv_cod = A.CD_MEDICO_EXECUTANTE\nINNER JOIN psv     PSOL             (NOLOCK)        ON PSOL.psv_cod = A.CD_MEDICO_SOL\n\n\nWHERE C.DS_CLASSIF_PROCEDIMENTO IS NOT NULL\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "ID_SYSTEM",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ID_SYSTEM",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DT_ENTRADA",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_ENTRADA",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "DT_LANCAMENTO",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_LANCAMENTO",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "NR_ATENDIMENTO",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "NR_ATENDIMENTO",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "NR_INTERNO_CONTA",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "NR_INTERNO_CONTA",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CGC_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "CGC_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_CONVENIO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_CONVENIO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_PESSOA_FISICA",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_PESSOA_FISICA",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "NM_PACIENTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "NM_PACIENTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_MEDICO_SOL",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MEDICO_SOL",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "MEDICO_SOLICITANTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_SOLICITANTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_MEDICO_EXECUTANTE",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MEDICO_EXECUTANTE",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "MEDICO_EXECUTANTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_EXECUTANTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "MEDICO_RESPONSAVEL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_RESPONSAVEL",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "MEDICO_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "NR_SEQUENCIA",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 18
													},
													"sink": {
														"name": "NR_SEQUENCIA",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 18
													}
												},
												{
													"source": {
														"name": "NR_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "NR_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_CLASSIF_PROCEDIMENTO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_CLASSIF_PROCEDIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_PROCEDENCIA",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_PROCEDENCIA",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "QTD_ITEM",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													},
													"sink": {
														"name": "QTD_ITEM",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													}
												},
												{
													"source": {
														"name": "VL_ITEM_ORIGINAL",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_ITEM_ORIGINAL",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "VL_ITEM",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_ITEM",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "VL_HM",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_HM",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "PERC_DESCONTO",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 15,
														"precision": 27
													},
													"sink": {
														"name": "PERC_DESCONTO",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 15,
														"precision": 27
													}
												},
												{
													"source": {
														"name": "DT_ATUALIZACAO",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_ATUALIZACAO",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_IOF_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_PROD_DIARIA",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Oftalmoclin - Smart Last Month",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "IOF - Smart Last Month",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": "DECLARE @PERIODO AS VARCHAR(7)\n\nSELECT\n    @PERIODO = SUBSTRING(cast(CAST(getdate()-1 AS DATE) as varchar(10)),1,7)\n\nwith ctf as(\n\n    SELECT\n        x.ctf_cod    \n        ,x.ctf_tipo\n        ,case\n            when UPPER(x.ctf_categ) = 'C' then 'Consultas'\n            when UPPER(x.ctf_categ) = 'R' then 'Cirurgias'\n            when UPPER(x.ctf_categ) = 'E' then 'Exames'\n            when UPPER(x.ctf_categ) = 'T' then 'Taxas'\n            when UPPER(x.ctf_categ) = 'D' then 'Diárias'\n            when UPPER(x.ctf_categ) = 'A' then 'Terapia'\n            when UPPER(x.ctf_categ) = 'M' then 'Materiais'\n            when UPPER(x.ctf_categ) = 'S' then 'Materiais Especiais'\n            when UPPER(x.ctf_categ) = 'N' then 'Medicamentos'\n            when UPPER(x.ctf_categ) = 'G' then 'Gases'\n            when UPPER(x.ctf_categ) = 'O' then 'Outros'\n          end DS_CLASSIF_PROCEDIMENTO  \n    from dbo.ctf x\n) \n\n\n,prod as(\nSELECT\n    itm.smm_num_pai\n    ,itm.smm_num\n    ,itm.smm_dthr_exec                                                                      as DT_LANCAMENTO\n    ,a.osm_num                                                                              as NR_ATENDIMENTO\n    ,a.osm_dthr                                                                             as DT_ENTRADA\n    ,a.osm_cnv                                                                              as CD_CONVENIO\n    ,pac.pac_reg                                                                            as CD_PESSOA_FISICA            \n    ,pac.pac_nome                                                                           AS NM_PACIENTE\n    -- ,cast(a.osm_serie as varchar(15)) + '.' + cast(a.osm_num as varchar(5))                 as NR_INTERNO_CONTA   \n    ,a.osm_serie                                                                            as NR_INTERNO_CONTA   \n    ,a.osm_atend                                                                            as CD_TIPO_ATEND\n    ,A.osm_proc                                                                             AS CD_PROCEDENCIA\n    -- ,a.osm_mcnv                                                                             as cd_carterinha_pac\n    -- ,a.osm_cid_cod                                                                          as cd_cid\n    -- ,a.osm_pln_cod                                                                          as cd_plano_convenio\n    ,a.osm_str                                                                              as CD_SETOR_ATENDIMENTO\n    ,itm.smm_str                                                                            as CD_SETOR_EXECUTANTE\n    ,a.osm_mreq                                                                             as CD_MEDICO_SOL\n    ,itm.smm_med                                                                            as CD_MEDICO_EXECUTANTE\n    -- ,itm.smm_cod                                                                            as cd_item_smart\n    -- ,itm.smm_pre_ccv                                                                        as cd_item_conv\n    ,CAST(CAST(a.osm_serie as varchar(10)) \n        + cast(a.osm_num as varchar(50)) \n        + CAST(itm.smm_num AS VARCHAR(50))\n        + CAST(A.OSM_PAC AS VARCHAR(50))\n         AS DECIMAL)                                                                        as NR_SEQUENCIA\n    ,pi.smk_cod                                                                             as NR_PROC_INTERNO       \n    ,pi.smk_amb                                                                             as CD_PROCEDIMENTO\n    ,pi.smk_rot                                                                             as DS_PROC_INTERNO \n    ,pi.smk_nome                                                                            as DS_PROCEDIMENTO\n    ,pi.smk_ctf\n    ,pi.smk_tipo\n    ,itm.smm_motivo_cancela                                                                 as MOTIVO_CANCEL_ITEM\n    ,itm.smm_canc_mot_cod                                                                   as CD_MOTIVO_CANCEL_ITEM\n    ,itm.smm_rpi_serie                                                                      as NR_SERIE_REPASSE\n    ,itm.smm_rpi_num                                                                        as NR_REPASSE\n    ,itm.smm_pacote                                                                         as IE_PACOTE\n    -- ,itm.smm_hon_seq\n    ,itm.smm_fat_serie\n    ,itm.smm_fat\n    ,itm.smm_tipo_fatura\n    ,itm.smm_dthr_alter                                                                     as dt_atualizacao                                                                      \n    ,itm.smm_qt                                                                             as QTD\n    ,itm.smm_vlr                                                                            AS VL_ITEM\n    ,isnull(itm.smm_ajuste_vlr,0)                                                           as VL_ITEM_AJUSTE\n    ,ROUND(ISNULL(round(\n                    (hon.hon_vl1 * itm.smm_qt) \n                  + (itm.smm_vlr + isnull(itm.smm_ajuste_vlr,0)) \n                  * hon.hon_pc1 / 100,3),0\n                  ),2)                                                                      AS VL_HM\n    ,ROUND(ISNULL(mte.mte_perc_desconto,0),2)                                               as PERC_DESCONTO\n\n\nFROM dbo.osm a                  (NOLOCK)\ninner join dbo.pac pac          (NOLOCK) on pac.pac_reg = a.osm_pac\ninner join dbo.smm itm          (NOLOCK) on itm.smm_osm_serie = a.osm_serie and itm.smm_osm = a.osm_num\ninner join dbo.smk pi           (NOLOCK) on pi.smk_cod = itm.smm_cod and pi.smK_tipo = itm.smm_tpcod\n-- left join dbo.hon  hon          (NOLOCK) on hon.hon_seq = itm.smm_hon_seq\nLEFT join dbo.hon  hon          (NOLOCK) on hon.hon_seq = itm.smm_hon_seq\n\nOUTER APPLY (\n    SELECT\n        CASE \n            WHEN (MTE.mte_valor <> 0)\n                THEN MTE.mte_desconto / MTE.mte_valor\n            ELSE 0\n        END AS mte_perc_desconto\n    FROM MTE MTE (NOLOCK)\n    LEFT JOIN NFS NFS (NOLOCK)  ON MTE.MTE_NFS_NUMERO = NFS.nfs_numero AND MTE.MTE_NFS_SERIE = NFS.nfs_serie AND MTE.MTE_NFS_TIPO = NFS.NFS_TIPO\n    WHERE MTE.MTE_SERIE = ITM.SMM_MTE_SERIE AND MTE.MTE_SEQ = ITM.SMM_MTE_SEQ\n)MTE\n\n\nWHERE \n     itm.smm_vlr <> 0\n    and (itm.smm_pacote IS NULL OR ( itm.smm_pacote = 'C' )) \n    and itm.smm_exec <> 'C'\n    and itm.smm_sfat <> 'C'\n    and itm.smm_str like '%'\n    and pi.smk_ctf LIKE '%'\n    AND (itm.smm_sfat IN ('a', 'f', '?', 'p', '?'))\n    and substring(cast(CAST(a.osm_dthr as date) as varchar(10)),1,7) = @PERIODO\n    -- AND CAST(a.osm_dthr AS DATE) BETWEEN '2021-01-01' AND CAST(GETDATE() AS DATE)\n    -- AND A.osm_serie = '121' AND A.osm_num = '21460'\n)\n\nselect \n\n    90                                                  AS ID_SYSTEM\n    ,g.gcc_str_cod                                      AS CD_ESTABELECIMENTO\n    ,G.gcc_descr                                        AS DS_ESTABELECIMENTO\n    ,a.DT_ENTRADA\n    ,A.DT_LANCAMENTO\n    ,A.NR_ATENDIMENTO           \n    ,CAST(A.nr_interno_conta AS VARCHAR(10))\n        + CAST(A.NR_ATENDIMENTO AS VARCHAR(50))         AS NR_INTERNO_CONTA\n    ,emp.emp_cgc                                        as CGC_CONVENIO\n    ,A.cd_convenio                                      AS CD_CONVENIO\n    ,conv.cnv_nome                                      as DS_CONVENIO\n    ,a.CD_PESSOA_FISICA\n    ,A.NM_PACIENTE                                      AS NM_PACIENTE\n    ,A.CD_MEDICO_SOL\n    ,PSOL.psv_nome                                      AS MEDICO_SOLICITANTE\n    ,A.CD_MEDICO_EXECUTANTE\n    ,PEXC.psv_nome                                      AS MEDICO_EXECUTANTE\n    ,PEXC.psv_nome                                      AS MEDICO_RESPONSAVEL\n    ,PEXC.psv_nome                                      AS MEDICO_ATENDIMENTO\n    ,B.str_cod                                          as CD_SETOR_ATENDIMENTO\n    ,b.str_nome                                         as DS_SETOR_ATENDIMENTO\n    ,A.NR_SEQUENCIA\n    -- ,A.smm_num_pai\n    -- ,smk.smk_rot                                        as DS_PROC_PRINC\n    ,A.NR_PROC_INTERNO\n    ,A.DS_PROC_INTERNO\n    ,A.CD_PROCEDIMENTO\n    ,A.DS_PROCEDIMENTO\n    ,c.DS_CLASSIF_PROCEDIMENTO\n    ,A.CD_PROCEDENCIA\n    ,A.QTD                                              AS QTD_ITEM\n    ,A.VL_ITEM                                          AS VL_ITEM_ORIGINAL                 \n    ,A.VL_ITEM + A.VL_ITEM_AJUSTE                       AS VL_ITEM\n    ,a.VL_HM\n    ,a.PERC_DESCONTO\n    ,a.DT_ATUALIZACAO\nfrom prod a\ninner join dbo.str b                (nolock)        on b.str_cod = a.CD_SETOR_ATENDIMENTO  \nleft join dbo.gcc g                (NOLOCK)        on g.gcc_str_cod = b.str_str_cod\ninner join dbo.cnv conv             (NOLOCK)        on conv.cnv_cod = a.cd_convenio\ninner join dbo.emp                  (nolock)        on emp_cod = conv.cnv_emp_cod  \ninner join ctf     c                                on ctf_cod = a.smk_ctf  and ctf_tipo = a.smk_tipo\nINNER JOIN psv     PEXC             (NOLOCK)        ON PEXC.psv_cod = A.CD_MEDICO_EXECUTANTE\nINNER JOIN psv     PSOL             (NOLOCK)        ON PSOL.psv_cod = A.CD_MEDICO_SOL\n\n\nWHERE C.DS_CLASSIF_PROCEDIMENTO IS NOT NULL\n",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "ID_SYSTEM",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "ID_SYSTEM",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "DT_ENTRADA",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_ENTRADA",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "DT_LANCAMENTO",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_LANCAMENTO",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												},
												{
													"source": {
														"name": "NR_ATENDIMENTO",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "NR_ATENDIMENTO",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "NR_INTERNO_CONTA",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "NR_INTERNO_CONTA",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CGC_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "CGC_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_CONVENIO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_CONVENIO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_CONVENIO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_PESSOA_FISICA",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_PESSOA_FISICA",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "NM_PACIENTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "NM_PACIENTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_MEDICO_SOL",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MEDICO_SOL",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "MEDICO_SOLICITANTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_SOLICITANTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_MEDICO_EXECUTANTE",
														"type": "Int32",
														"physicalType": "int"
													},
													"sink": {
														"name": "CD_MEDICO_EXECUTANTE",
														"type": "Int32",
														"physicalType": "int"
													}
												},
												{
													"source": {
														"name": "MEDICO_EXECUTANTE",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_EXECUTANTE",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "MEDICO_RESPONSAVEL",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_RESPONSAVEL",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "MEDICO_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "MEDICO_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_SETOR_ATENDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "NR_SEQUENCIA",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 18
													},
													"sink": {
														"name": "NR_SEQUENCIA",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 18
													}
												},
												{
													"source": {
														"name": "NR_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "NR_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_PROC_INTERNO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "CD_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "DS_PROCEDIMENTO",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "DS_CLASSIF_PROCEDIMENTO",
														"type": "String",
														"physicalType": "varchar"
													},
													"sink": {
														"name": "DS_CLASSIF_PROCEDIMENTO",
														"type": "String",
														"physicalType": "varchar"
													}
												},
												{
													"source": {
														"name": "CD_PROCEDENCIA",
														"type": "String",
														"physicalType": "char"
													},
													"sink": {
														"name": "CD_PROCEDENCIA",
														"type": "String",
														"physicalType": "char"
													}
												},
												{
													"source": {
														"name": "QTD_ITEM",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													},
													"sink": {
														"name": "QTD_ITEM",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 0,
														"precision": 4
													}
												},
												{
													"source": {
														"name": "VL_ITEM_ORIGINAL",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_ITEM_ORIGINAL",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "VL_ITEM",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_ITEM",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "VL_HM",
														"type": "Double",
														"physicalType": "float"
													},
													"sink": {
														"name": "VL_HM",
														"type": "Double",
														"physicalType": "float"
													}
												},
												{
													"source": {
														"name": "PERC_DESCONTO",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 15,
														"precision": 27
													},
													"sink": {
														"name": "PERC_DESCONTO",
														"type": "Decimal",
														"physicalType": "decimal",
														"scale": 15,
														"precision": 27
													}
												},
												{
													"source": {
														"name": "DT_ATUALIZACAO",
														"type": "DateTime",
														"physicalType": "datetime"
													},
													"sink": {
														"name": "DT_ATUALIZACAO",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_PROD_DIARIA",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Day Now",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT cast(day(GETDATE()) as varchar(2)) as day",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DW_ORIGEM",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Day Now",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "day_now",
							"value": {
								"value": "@activity('Day Now').output.firstRow.day",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"day_now": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Producao Diaria"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-20T18:04:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DW_ORIGEM')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITAIGARA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_PROD_DIARIA')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITABUNA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_IOF_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_Oftalmoclin_Prd_DataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Extracao Paciente Care')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Base Tasy HTML Care",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "WITH FILTRO_CIR AS(\n/*FILTRO DE PROCEDIMENTO QUE CLASSIFICA O PROGRAMA CARE*/\nSELECT DISTINCT\n    P.CD_PROCEDIMENTO\n    ,P.DS_PROCEDIMENTO\n    ,'Cirurgia' as grupo_proc\nFROM PROCEDIMENTO P\nWHERE UPPER(P.DS_PROCEDIMENTO) LIKE '%ANTIANGIO%'   OR UPPER(P.DS_PROCEDIMENTO) LIKE '%INTRAVITREA%'\n\n)\n, FITLRO_CONS_EX AS (\n    SELECT DISTINCT\n        P.CD_PROCEDIMENTO\n        ,CASE\n            WHEN P.CD_PROCEDIMENTO IN (10014,10101012) THEN 'Consultas'\n                ELSE 'Exames'\n             END grupo_proc\n         ,p.ds_procedimento    \n        --,decode(upper(GP.ds_grupo_proc),'CONSULTAS',GP.DS_GRUPO_PROC,'Exames') grupo_proc\n    FROM PROCEDIMENTO P\n    --INNER JOIN grupo_proc GP ON gp.cd_grupo_proc = p.cd_grupo_proc\n    WHERE P.CD_PROCEDIMENTO IN (10014\n                                ,10101012\n                                ,41501144\n                                ,41301315\n                                ,41301013\n                                ,50010093\n                                ,41301250\n                                ,41301420\n                                ,50010131\n                                ,50010123\n    )\n    AND UPPER(p.ie_situacao) = 'A'\n\n)\n\n,PROC AS (\n    SELECT\n        a.cd_procedimento\n        ,a.grupo_proc\n    FROM FILTRO_CIR A\n    \n    UNION ALL\n    \n    SELECT\n        a.cd_procedimento\n        ,a.grupo_proc\n    FROM FITLRO_CONS_EX A\n    \n)\n\n, PAC_CARE AS(\nSELECT DISTINCT\n    AP.CD_PESSOA_FISICA\nFROM PROCEDIMENTO_PACIENTE PP\nINNER JOIN ATENDIMENTO_PACIENTE AP ON AP.NR_ATENDIMENTO = PP.NR_ATENDIMENTO\nINNER JOIN FILTRO_CIR F ON F.CD_PROCEDIMENTO = PP.CD_PROCEDIMENTO\n\n)\n\nSELECT \n    1 as ID_SYS\n    ,EMP.CD_EMPRESA\n    ,EMP.DS_NOME_CURTO      AS SHORT_EMPRESA\n    ,ESTAB.CD_ESTABELECIMENTO\n    ,ESTAB.NM_FANTASIA_ESTAB\n    ,AP.IE_TIPO_ATENDIMENTO\n    ,PP.NR_ATENDIMENTO\n    ,AP.CD_PESSOA_FISICA\n    ,PF.NM_PESSOA_FISICA\n    ,DIAG.CD_DOENCA\n    ,DIAG.DS_DOENCA_CID\n    ,y.grupo_proc\n    ,PP.CD_CONVENIO\n    ,PP.CD_MEDICO_EXECUTOR\n    ,MED.NM_GUERRA  as NM_MEDICO\n    ,MED.IE_CORPO_CLINICO\n    ,TRUNC(AP.DT_ENTRADA)     AS DT_ENTRADA\n    ,TRUNC(PP.DT_PROCEDIMENTO) AS DT_PROCEDIMENTO \n    ,PP.CD_PROCEDIMENTO\n    ,P.DS_PROCEDIMENTO\n    ,PP.QT_PROCEDIMENTO\n    ,PP.VL_PROCEDIMENTO\nFROM PROCEDIMENTO_PACIENTE PP\nINNER JOIN ATENDIMENTO_PACIENTE AP ON AP.NR_ATENDIMENTO = PP.NR_ATENDIMENTO\nINNER JOIN PAC_CARE X ON X.CD_PESSOA_FISICA = AP.CD_PESSOA_FISICA\nINNER JOIN PESSOA_FISICA PF ON PF.CD_PESSOA_FISICA = AP.CD_PESSOA_FISICA\nINNER JOIN PROC Y   ON Y.CD_PROCEDIMENTO = PP.CD_PROCEDIMENTO\nINNER JOIN ESTABELECIMENTO ESTAB ON ESTAB.CD_ESTABELECIMENTO = AP.CD_ESTABELECIMENTO\nINNER JOIN MEDICO MED ON MED.CD_PESSOA_FISICA = PP.CD_MEDICO_EXECUTOR\nINNER JOIN EMPRESA EMP ON EMP.CD_EMPRESA = ESTAB.CD_EMPRESA\n\nOUTER APPLY(\n    SELECT\n        P.DS_PROCEDIMENTO\n    FROM PROCEDIMENTO P\n    WHERE P.CD_PROCEDIMENTO = PP.CD_PROCEDIMENTO AND ROWNUM = 1\n)P\n\nOUTER APPLY(\n    SELECT\n        TMP.*\n    FROM(    \n        SELECT \n            DD.NR_ATENDIMENTO\n            ,DD.CD_DOENCA\n            ,CD.DS_DOENCA_CID\n            ,ROW_NUMBER() OVER (PARTITION BY DD.NR_ATENDIMENTO ORDER BY DD.DT_ATUALIZACAO desc) ID_LINHA\n        FROM diagnostico_doenca DD\n        LEFT JOIN CID_DOENCA CD ON CD.CD_DOENCA_CID = DD.CD_DOENCA\n        WHERE DD.IE_CLASSIFICACAO_DOENCA = 'P'\n    )TMP\n    WHERE TMP.ID_LINHA = 1\n        AND TMP.NR_ATENDIMENTO = AP.NR_ATENDIMENTO\n\n)DIAG\n\nWHERE AP.IE_TIPO_ATENDIMENTO <> 3\n        AND AP.CD_PESSOA_FISICA <> 346\n\n\n",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table stg.ptk_care",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_CARE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento/Jornada do Paciente"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_CARE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Filas por hora')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Start",
						"description": "Step added to paralellize execution",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Check HOB file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "HOB_CSV_NC_FilasPorHora",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "HOB file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check HOB file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check HOB file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send HOB failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\HOB não encontrado!",
											"ErrorMessage": "O arquivo HOB\\FilasHora não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy HOB filas hora",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Fila",
														"type": "String"
													},
													"sink": {
														"name": "Fila",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Intervalo",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Atendidas Ate NS",
														"type": "String"
													},
													"sink": {
														"name": "Atendidas_Ate_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Atendidas Apos NS",
														"type": "String"
													},
													"sink": {
														"name": "Atendidas_Apos_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Atendidas",
														"type": "String"
													},
													"sink": {
														"name": "Atendidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos Ate NS",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos_Ate_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos Apos NS",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos_Apos_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos Anuncio Inicial",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos_Anuncio_Inicial",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Timeout",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Timeout",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Fila Cheia",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Fila_Cheia",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Fila Vazia",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Fila_Vazia",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Fila Sem Ags. Disp.",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Fila_Sem_Ags_Disp",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Caixa Postal",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Caixa_Postal",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario Antes",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario_Antes",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario_Intervalo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario Depois",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario_Depois",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Total Recebidas",
														"type": "String"
													},
													"sink": {
														"name": "Total_Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Callback Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Callback_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Callback Nao Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Callback_Nao_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Callback",
														"type": "String"
													},
													"sink": {
														"name": "Callback",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Tempo Toque",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Falado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Falado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Pausa ACW",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Pausa_ACW",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Produtivo AHT",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Produtivo_AHT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "% Nivel Servico",
														"type": "String"
													},
													"sink": {
														"name": "Nivel_Servico",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "% Taxa Atendimento",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_Atendimento",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "% Taxa Abandono",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_Abandono",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Espera",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Espera",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio para Atender",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_para_Atender",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Total para Atender",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_para_Atender",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio para Abandono",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_para_Abandono",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Total para Abandono",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_para_Abandono",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Total Espera",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_Espera",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Agentes Logados - Minimo",
														"type": "String"
													},
													"sink": {
														"name": "Agentes_Logados_Minimo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Agentes Logados - Maximo",
														"type": "String"
													},
													"sink": {
														"name": "Agentes_Logados_Maximo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Chamadas em Espera - Minimo",
														"type": "String"
													},
													"sink": {
														"name": "Chamadas_em_Espera_Minimo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Chamadas em Espera - Medio",
														"type": "String"
													},
													"sink": {
														"name": "Chamadas_em_Espera_Medio",
														"type": "Double"
													}
												},
												{
													"source": {
														"name": "Chamadas em Espera = Maximo",
														"type": "String"
													},
													"sink": {
														"name": "Chamadas_em_Espera_Maximo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "HOB_CSV_NC_FilasPorHora",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_FilasPorHoras",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check HOSAG file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "HOSAG_CSV_NC_FilasPorHora",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "HOSAG file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check HOSAG file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check HOSAG file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send HOSAG failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\HOSAG não encontrado!",
											"ErrorMessage": "O arquivo HOSAG\\FilasHora não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy HOSAG filas horas",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Fila",
														"type": "String"
													},
													"sink": {
														"name": "Fila",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Intervalo",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Atendidas Ate NS",
														"type": "String"
													},
													"sink": {
														"name": "Atendidas_Ate_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Atendidas Apos NS",
														"type": "String"
													},
													"sink": {
														"name": "Atendidas_Apos_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Atendidas",
														"type": "String"
													},
													"sink": {
														"name": "Atendidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos Ate NS",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos_Ate_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos Apos NS",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos_Apos_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos Anuncio Inicial",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos_Anuncio_Inicial",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Timeout",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Timeout",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Fila Cheia",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Fila_Cheia",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Fila Vazia",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Fila_Vazia",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Fila Sem Ags. Disp.",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Fila_Sem_Ags_Disp",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Caixa Postal",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Caixa_Postal",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario Antes",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario_Antes",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario_Intervalo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario Depois",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario_Depois",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Total Recebidas",
														"type": "String"
													},
													"sink": {
														"name": "Total_Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Callback Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Callback_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Callback Nao Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Callback_Nao_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Callback",
														"type": "String"
													},
													"sink": {
														"name": "Callback",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Tempo Toque",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Falado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Falado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Pausa ACW",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Pausa_ACW",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Produtivo AHT",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Produtivo_AHT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "% Nivel Servico",
														"type": "String"
													},
													"sink": {
														"name": "Nivel_Servico",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "% Taxa Atendimento",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_Atendimento",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "% Taxa Abandono",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_Abandono",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Espera",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Espera",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio para Atender",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_para_Atender",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Total para Atender",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_para_Atender",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio para Abandono",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_para_Abandono",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Total para Abandono",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_para_Abandono",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Total Espera",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_Espera",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Agentes Logados - Minimo",
														"type": "String"
													},
													"sink": {
														"name": "Agentes_Logados_Minimo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Agentes Logados - Maximo",
														"type": "String"
													},
													"sink": {
														"name": "Agentes_Logados_Maximo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Chamadas em Espera - Minimo",
														"type": "String"
													},
													"sink": {
														"name": "Chamadas_em_Espera_Minimo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Chamadas em Espera - Medio",
														"type": "String"
													},
													"sink": {
														"name": "Chamadas_em_Espera_Medio",
														"type": "Double"
													}
												},
												{
													"source": {
														"name": "Chamadas em Espera = Maximo",
														"type": "String"
													},
													"sink": {
														"name": "Chamadas_em_Espera_Maximo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "HOSAG_CSV_NC_FilasPorHora",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_FilasPorHoras",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check DH file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DH_CSV_NC_FilasPorHora",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "DH file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check DH file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check DH file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send DH failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\DH não encontrado!",
											"ErrorMessage": "O arquivo DH\\FilasHora não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy DH filas hora",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Fila",
														"type": "String"
													},
													"sink": {
														"name": "Fila",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Intervalo",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Atendidas Ate NS",
														"type": "String"
													},
													"sink": {
														"name": "Atendidas_Ate_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Atendidas Apos NS",
														"type": "String"
													},
													"sink": {
														"name": "Atendidas_Apos_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Atendidas",
														"type": "String"
													},
													"sink": {
														"name": "Atendidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos Ate NS",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos_Ate_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos Apos NS",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos_Apos_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos Anuncio Inicial",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos_Anuncio_Inicial",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Timeout",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Timeout",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Fila Cheia",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Fila_Cheia",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Fila Vazia",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Fila_Vazia",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Fila Sem Ags. Disp.",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Fila_Sem_Ags_Disp",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Caixa Postal",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Caixa_Postal",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario Antes",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario_Antes",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario_Intervalo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario Depois",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario_Depois",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Total Recebidas",
														"type": "String"
													},
													"sink": {
														"name": "Total_Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Callback Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Callback_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Callback Nao Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Callback_Nao_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Callback",
														"type": "String"
													},
													"sink": {
														"name": "Callback",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Tempo Toque",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Falado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Falado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Pausa ACW",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Pausa_ACW",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Produtivo AHT",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Produtivo_AHT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "% Nivel Servico",
														"type": "String"
													},
													"sink": {
														"name": "Nivel_Servico",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "% Taxa Atendimento",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_Atendimento",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "% Taxa Abandono",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_Abandono",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Espera",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Espera",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio para Atender",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_para_Atender",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Total para Atender",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_para_Atender",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio para Abandono",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_para_Abandono",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Total para Abandono",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_para_Abandono",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Total Espera",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_Espera",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Agentes Logados - Minimo",
														"type": "String"
													},
													"sink": {
														"name": "Agentes_Logados_Minimo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Agentes Logados - Maximo",
														"type": "String"
													},
													"sink": {
														"name": "Agentes_Logados_Maximo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Chamadas em Espera - Minimo",
														"type": "String"
													},
													"sink": {
														"name": "Chamadas_em_Espera_Minimo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Chamadas em Espera - Medio",
														"type": "String"
													},
													"sink": {
														"name": "Chamadas_em_Espera_Medio",
														"type": "Double"
													}
												},
												{
													"source": {
														"name": "Chamadas em Espera = Maximo",
														"type": "String"
													},
													"sink": {
														"name": "Chamadas_em_Espera_Maximo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "DH_CSV_NC_FilasPorHora",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_FilasPorHoras",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check HOSL file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "HOSL_CSV_NC_BilheteLigacoes",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "HOSL file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check HOSL file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check HOSL file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send HOSL failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\HOSL não encontrado!",
											"ErrorMessage": "O arquivo HOSL\\FilasHora não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy HOSL filas hora",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Fila",
														"type": "String"
													},
													"sink": {
														"name": "Fila",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Intervalo",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Atendidas Ate NS",
														"type": "String"
													},
													"sink": {
														"name": "Atendidas_Ate_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Atendidas Apos NS",
														"type": "String"
													},
													"sink": {
														"name": "Atendidas_Apos_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Atendidas",
														"type": "String"
													},
													"sink": {
														"name": "Atendidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos Ate NS",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos_Ate_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos Apos NS",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos_Apos_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos Anuncio Inicial",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos_Anuncio_Inicial",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Timeout",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Timeout",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Fila Cheia",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Fila_Cheia",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Fila Vazia",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Fila_Vazia",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Fila Sem Ags. Disp.",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Fila_Sem_Ags_Disp",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Caixa Postal",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Caixa_Postal",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario Antes",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario_Antes",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario_Intervalo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario Depois",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario_Depois",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Total Recebidas",
														"type": "String"
													},
													"sink": {
														"name": "Total_Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Callback Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Callback_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Callback Nao Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Callback_Nao_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Callback",
														"type": "String"
													},
													"sink": {
														"name": "Callback",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Tempo Toque",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Falado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Falado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Pausa ACW",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Pausa_ACW",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Produtivo AHT",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Produtivo_AHT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "% Nivel Servico",
														"type": "String"
													},
													"sink": {
														"name": "Nivel_Servico",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "% Taxa Atendimento",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_Atendimento",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "% Taxa Abandono",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_Abandono",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Espera",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Espera",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio para Atender",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_para_Atender",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Total para Atender",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_para_Atender",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio para Abandono",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_para_Abandono",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Total para Abandono",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_para_Abandono",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Total Espera",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_Espera",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Agentes Logados - Minimo",
														"type": "String"
													},
													"sink": {
														"name": "Agentes_Logados_Minimo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Agentes Logados - Maximo",
														"type": "String"
													},
													"sink": {
														"name": "Agentes_Logados_Maximo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Chamadas em Espera - Minimo",
														"type": "String"
													},
													"sink": {
														"name": "Chamadas_em_Espera_Minimo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Chamadas em Espera - Medio",
														"type": "String"
													},
													"sink": {
														"name": "Chamadas_em_Espera_Medio",
														"type": "Double"
													}
												},
												{
													"source": {
														"name": "Chamadas em Espera = Maximo",
														"type": "String"
													},
													"sink": {
														"name": "Chamadas_em_Espera_Maximo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "HOSL_CSV_NC_FilasPorHora",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_FilasPorHoras",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check INOB file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "INOB_CSV_NC_FilasPorHora",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "INOB file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check INOB file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check INOB file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send INOB failure",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\INOB não encontrado!",
											"ErrorMessage": "O arquivo INOB\\FilasHoras não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy INOB filas horas",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Fila",
														"type": "String"
													},
													"sink": {
														"name": "Fila",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Intervalo",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Atendidas Ate NS",
														"type": "String"
													},
													"sink": {
														"name": "Atendidas_Ate_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Atendidas Apos NS",
														"type": "String"
													},
													"sink": {
														"name": "Atendidas_Apos_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Atendidas",
														"type": "String"
													},
													"sink": {
														"name": "Atendidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos Ate NS",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos_Ate_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos Apos NS",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos_Apos_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos Anuncio Inicial",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos_Anuncio_Inicial",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Timeout",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Timeout",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Fila Cheia",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Fila_Cheia",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Fila Vazia",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Fila_Vazia",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Fila Sem Ags. Disp.",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Fila_Sem_Ags_Disp",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Caixa Postal",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Caixa_Postal",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario Antes",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario_Antes",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario_Intervalo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario Depois",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario_Depois",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Total Recebidas",
														"type": "String"
													},
													"sink": {
														"name": "Total_Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Callback Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Callback_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Callback Nao Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Callback_Nao_Tratados"
													}
												},
												{
													"source": {
														"name": "Callback",
														"type": "String"
													},
													"sink": {
														"name": "Callback",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Tempo Toque",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Falado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Falado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Pausa ACW",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Pausa_ACW",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Produtivo AHT",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Produtivo_AHT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "% Nivel Servico",
														"type": "String"
													},
													"sink": {
														"name": "Nivel_Servico",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "% Taxa Atendimento",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_Atendimento",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "% Taxa Abandono",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_Abandono",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Espera",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Espera",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio para Atender",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_para_Atender",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Total para Atender",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_para_Atender",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio para Abandono",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_para_Abandono",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Total para Abandono",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_para_Abandono",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Total Espera",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_Espera",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Agentes Logados - Minimo",
														"type": "String"
													},
													"sink": {
														"name": "Agentes_Logados_Minimo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Agentes Logados - Maximo",
														"type": "String"
													},
													"sink": {
														"name": "Agentes_Logados_Maximo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Chamadas em Espera - Minimo",
														"type": "String"
													},
													"sink": {
														"name": "Chamadas_em_Espera_Minimo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Chamadas em Espera - Medio",
														"type": "String"
													},
													"sink": {
														"name": "Chamadas_em_Espera_Medio",
														"type": "Double"
													}
												},
												{
													"source": {
														"name": "Chamadas em Espera = Maximo",
														"type": "String"
													},
													"sink": {
														"name": "Chamadas_em_Espera_Maximo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "INOB_CSV_NC_FilasPorHora",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_FilasPorHoras",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Check CSI file exists",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "CSI_CSV_NC_FilasPorHora",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists"
							],
							"storeSettings": {
								"type": "FileServerReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "CSI file exists",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Check CSI file exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\nactivity('Check CSI file exists').output.exists, \ntrue)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Send failure CSI",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Send email",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"EmailTo": "sergio.queiroz@opty.com.br",
											"Subject": "Arquivo Nexcore\\INOB não encontrado!",
											"ErrorMessage": "O arquivo INOB\\Agentes por Dia não foi encontrado",
											"MasterPipeline": {
												"value": "@{pipeline().Pipeline}",
												"type": "Expression"
											}
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy CSI FilasPorHora",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "FileServerReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert"
										},
										"enableStaging": false,
										"enableSkipIncompatibleRow": true,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "Fila",
														"type": "String"
													},
													"sink": {
														"name": "Fila",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Intervalo",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Atendidas Ate NS",
														"type": "String"
													},
													"sink": {
														"name": "Atendidas_Ate_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Atendidas Apos NS",
														"type": "String"
													},
													"sink": {
														"name": "Atendidas_Apos_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Atendidas",
														"type": "String"
													},
													"sink": {
														"name": "Atendidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos Ate NS",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos_Ate_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos Apos NS",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos_Apos_NS",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos Anuncio Inicial",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos_Anuncio_Inicial",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Abandonos",
														"type": "String"
													},
													"sink": {
														"name": "Abandonos",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Timeout",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Timeout",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Fila Cheia",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Fila_Cheia",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Fila Vazia",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Fila_Vazia",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Fila Sem Ags. Disp.",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Fila_Sem_Ags_Disp",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos Caixa Postal",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos_Caixa_Postal",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Roteamentos",
														"type": "String"
													},
													"sink": {
														"name": "Roteamentos",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario Antes",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario_Antes",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario Intervalo",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario_Intervalo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario Depois",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario_Depois",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Fora Horario",
														"type": "String"
													},
													"sink": {
														"name": "Fora_Horario",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Total Recebidas",
														"type": "String"
													},
													"sink": {
														"name": "Total_Recebidas",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Callback Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Callback_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Callback Nao Tratados",
														"type": "String"
													},
													"sink": {
														"name": "Callback_Nao_Tratados",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Callback",
														"type": "String"
													},
													"sink": {
														"name": "Callback",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Tempo Toque",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Toque",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Falado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Falado",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Falado",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Pausa ACW",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Pausa_ACW",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Produtivo AHT",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Produtivo_AHT",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "% Nivel Servico",
														"type": "String"
													},
													"sink": {
														"name": "Nivel_Servico",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "% Taxa Atendimento",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_Atendimento",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "% Taxa Abandono",
														"type": "String"
													},
													"sink": {
														"name": "Taxa_Abandono",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio Espera",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_Espera",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio para Atender",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_para_Atender",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Total para Atender",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_para_Atender",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Medio para Abandono",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Medio_para_Abandono",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Total para Abandono",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_para_Abandono",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Tempo Total Espera",
														"type": "String"
													},
													"sink": {
														"name": "Tempo_Total_Espera",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Agentes Logados - Minimo",
														"type": "String"
													},
													"sink": {
														"name": "Agentes_Logados_Minimo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Agentes Logados - Maximo",
														"type": "String"
													},
													"sink": {
														"name": "Agentes_Logados_Maximo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Chamadas em Espera - Minimo",
														"type": "String"
													},
													"sink": {
														"name": "Chamadas_em_Espera_Minimo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Chamadas em Espera - Medio",
														"type": "String"
													},
													"sink": {
														"name": "Chamadas_em_Espera_Medio",
														"type": "Double"
													}
												},
												{
													"source": {
														"name": "Chamadas em Espera = Maximo",
														"type": "String"
													},
													"sink": {
														"name": "Chamadas_em_Espera_Maximo",
														"type": "Int32"
													}
												},
												{
													"source": {
														"name": "Marca",
														"type": "String"
													},
													"sink": {
														"name": "MARCA",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "CSI_CSV_NC_FilasPorHora",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_TB_NC_FilasPorHoras",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento/Nexcore"
				},
				"annotations": [],
				"lastPublishTime": "2019-11-13T13:27:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/HOB_CSV_NC_FilasPorHora')]",
				"[concat(variables('factoryId'), '/datasets/HOSAG_CSV_NC_FilasPorHora')]",
				"[concat(variables('factoryId'), '/datasets/DH_CSV_NC_FilasPorHora')]",
				"[concat(variables('factoryId'), '/datasets/HOSL_CSV_NC_BilheteLigacoes')]",
				"[concat(variables('factoryId'), '/datasets/INOB_CSV_NC_FilasPorHora')]",
				"[concat(variables('factoryId'), '/datasets/CSI_CSV_NC_FilasPorHora')]",
				"[concat(variables('factoryId'), '/pipelines/Send email')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_NC_FilasPorHoras')]",
				"[concat(variables('factoryId'), '/datasets/HOSL_CSV_NC_FilasPorHora')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Five9')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "STG DW FIVE9_ESP0001",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SQL_DESTINO",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH ESP0001 AS (\n\n    SELECT \nCAST(ID_LIGACAO AS VARCHAR(255)) AS ID_LIGACAO\n,CAST(DATA AS VARCHAR(255)) AS DATA\n,CAST(REGISTRO_DATA_HORA AS VARCHAR(255)) AS REGISTRO_DATA_HORA\n,CAST(CAMPANHA AS VARCHAR(255)) AS CAMPANHA\n,CAST(COMPETENCIA AS VARCHAR(255)) AS COMPETENCIA\n,CAST(AGENTE AS VARCHAR(255)) AS AGENTE\n,CAST(NOME_AGENTE AS VARCHAR(255)) AS NOME_AGENTE\n,CAST(POSICAO AS VARCHAR(255)) AS POSICAO\n,CAST(ANI AS VARCHAR(255)) AS ANI\n,CAST(NOME_CLIENTE AS VARCHAR(255)) AS NOME_CLIENTE\n,CAST(DNIS AS VARCHAR(255)) AS DNIS\n,CAST(TEMPO_LIGACAO AS VARCHAR(255)) AS TEMPO_LIGACAO\n,CAST(TEMPO_FATURAMENTO_ARRED AS VARCHAR(255)) AS TEMPO_FATURAMENTO_ARRED\n,CAST(TEMPO_IVR AS VARCHAR(255)) AS TEMPO_IVR\n,CAST(CAMINHO_IVR AS VARCHAR(255)) AS CAMINHO_IVR\n,CAST(TEMPO_ESPERA_FILA AS VARCHAR(255)) AS TEMPO_ESPERA_FILA\n,CAST(TEMPO_TOQUE AS VARCHAR(255)) AS TEMPO_TOQUE\n,CAST(TEMPO_CONVERSA AS VARCHAR(255)) AS TEMPO_CONVERSA\n,CAST(TEMPO_RETENCAO AS VARCHAR(255)) AS TEMPO_RETENCAO\n,CAST(TEMPO_ESPERA AS VARCHAR(255)) AS TEMPO_ESPERA\n,CAST(TEMPO_ABANDONAR AS VARCHAR(255)) AS TEMPO_ABANDONAR\n,CAST(TEMPO_TOTAL_FILA AS VARCHAR(255)) AS TEMPO_TOTAL_FILA\n,CAST(AP_TEMPO_ATIVIDADE_LIGACAO AS VARCHAR(255)) AS AP_TEMPO_ATIVIDADE_LIGACAO\n,CAST(TRANSFERENCIAS AS VARCHAR(255)) AS TRANSFERENCIAS\n,CAST(CONFERENCIAS AS VARCHAR(255)) AS CONFERENCIAS\n,CAST(RETENCOES AS VARCHAR(255)) AS RETENCOES\n,CAST(ABANDONADA AS VARCHAR(255)) AS ABANDONADA\n,CAST(GRAVACOES AS VARCHAR(255)) AS GRAVACOES\n,CAST(TIPO_CAMPANHA AS VARCHAR(255)) AS TIPO_CAMPANHA\n,CAST(TIPO_LIGACAO AS VARCHAR(255)) AS TIPO_LIGACAO\n,CAST(GRUPO_AGENTES AS VARCHAR(255)) AS GRUPO_AGENTES\n\n    FROM STG.FIVE9_ESP0001\n)\n\n\nMERGE\t           \n\tdw.FIVE9_ESP0001 AS destino           \nUSING            \n\tESP0001 AS origem           \n           \n    ON(        \n        destino.id_ligacao = origem.id_ligacao        \n          )        \n       \n      \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \ndestino.DATA\t\t\t\t\t=origem.DATA,\ndestino.REGISTRO_DATA_HORA\t\t=origem.REGISTRO_DATA_HORA,\ndestino.CAMPANHA\t\t\t\t=origem.CAMPANHA,\ndestino.COMPETENCIA\t\t\t\t=origem.COMPETENCIA,\ndestino.AGENTE\t\t\t\t\t=origem.AGENTE,\ndestino.NOME_AGENTE\t\t\t\t=origem.NOME_AGENTE,\ndestino.POSICAO\t\t\t\t\t=origem.POSICAO,\ndestino.ANI\t\t\t\t\t\t=origem.ANI,\ndestino.NOME_CLIENTE\t\t\t=origem.NOME_CLIENTE,\ndestino.DNIS\t\t\t\t\t=origem.DNIS,\ndestino.TEMPO_LIGACAO\t\t\t=origem.TEMPO_LIGACAO,\ndestino.TEMPO_FATURAMENTO_ARRED\t=origem.TEMPO_FATURAMENTO_ARRED,\ndestino.TEMPO_IVR\t\t\t\t=origem.TEMPO_IVR,\ndestino.CAMINHO_IVR\t\t\t\t=origem.CAMINHO_IVR,\ndestino.TEMPO_ESPERA_FILA\t\t=origem.TEMPO_ESPERA_FILA,\ndestino.TEMPO_TOQUE\t\t\t\t=origem.TEMPO_TOQUE,\ndestino.TEMPO_CONVERSA\t\t\t=origem.TEMPO_CONVERSA,\ndestino.TEMPO_RETENCAO\t\t\t=origem.TEMPO_RETENCAO,\ndestino.TEMPO_ESPERA\t\t\t=origem.TEMPO_ESPERA,\ndestino.TEMPO_ABANDONAR\t\t\t=origem.TEMPO_ABANDONAR,\ndestino.TEMPO_TOTAL_FILA\t\t\t=origem.TEMPO_TOTAL_FILA,\ndestino.AP_TEMPO_ATIVIDADE_LIGACAO\t=origem.AP_TEMPO_ATIVIDADE_LIGACAO,\ndestino.TRANSFERENCIAS\t\t\t\t=origem.TRANSFERENCIAS,\ndestino.CONFERENCIAS\t\t\t\t=origem.CONFERENCIAS,\ndestino.RETENCOES\t\t\t\t\t=origem.RETENCOES,\ndestino.ABANDONADA\t\t\t\t\t=origem.ABANDONADA,\ndestino.GRAVACOES\t\t\t\t\t=origem.GRAVACOES,\ndestino.TIPO_CAMPANHA\t\t\t\t=origem.TIPO_CAMPANHA,\ndestino.TIPO_LIGACAO\t\t\t\t=origem.TIPO_LIGACAO,\ndestino.GRUPO_AGENTES\t\t\t\t=origem.GRUPO_AGENTES\n  \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.id_ligacao\t\n,origem.DATA\n,origem.REGISTRO_DATA_HORA\n,origem.CAMPANHA\n,origem.COMPETENCIA\n,origem.AGENTE\n,origem.NOME_AGENTE\n,origem.POSICAO\n,origem.ANI\n,origem.NOME_CLIENTE\n,origem.DNIS\n,origem.TEMPO_LIGACAO\n,origem.TEMPO_FATURAMENTO_ARRED\n,origem.TEMPO_IVR\n,origem.CAMINHO_IVR\n,origem.TEMPO_ESPERA_FILA\n,origem.TEMPO_TOQUE\n,origem.TEMPO_CONVERSA\n,origem.TEMPO_RETENCAO\n,origem.TEMPO_ESPERA\n,origem.TEMPO_ABANDONAR\n,origem.TEMPO_TOTAL_FILA\n,origem.AP_TEMPO_ATIVIDADE_LIGACAO\n,origem.TRANSFERENCIAS\n,origem.CONFERENCIAS\n,origem.RETENCOES\n,origem.ABANDONADA\n,origem.GRAVACOES\n,origem.TIPO_CAMPANHA\n,origem.TIPO_LIGACAO\n,origem.GRUPO_AGENTES\n);        "
								}
							]
						}
					},
					{
						"name": "STG DW FIVE9_ESP0002",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "STG DW FIVE9_ESP0001",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SQL_DESTINO",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "MERGE\t           \n\tdw.FIVE9_ESP0002 AS destino           \nUSING            \n\tstg.FIVE9_ESP0002 AS origem           \n           \n    ON(        \n        destino.agente = origem.agente \n\t\tAND destino.REGISTRO_HORA_DATA_ACESSO = origem.REGISTRO_HORA_DATA_ACESSO\n\t\tAND destino.REGISTRO_HORA_DATA_SAIDA = origem.REGISTRO_HORA_DATA_SAIDA\n          )        \n       \n      \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \ndestino.DATA_HORA\t\t\t\t\t=origem.DATA_HORA,\ndestino.NOME_AGENTE\t\t\t\t\t=origem.NOME_AGENTE,\ndestino.GRUPO_AGENTES\t\t\t\t=origem.GRUPO_AGENTES,\ndestino.REGISTRO_HORA_DATA_SAIDA\t=origem.REGISTRO_HORA_DATA_SAIDA,\ndestino.TEMPO_LOGIN\t\t\t\t\t=origem.TEMPO_LOGIN,\ndestino.DATA\t\t\t\t\t\t=origem.DATA\n  \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.DATA_HORA\n,origem.AGENTE\n,origem.NOME_AGENTE\n,origem.GRUPO_AGENTES\n,origem.REGISTRO_HORA_DATA_ACESSO\n,origem.REGISTRO_HORA_DATA_SAIDA\n,origem.TEMPO_LOGIN\n,origem.DATA\n);        "
								}
							]
						}
					},
					{
						"name": "STG DW FIVE9_ESP0003",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "STG DW FIVE9_ESP0002",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SQL_DESTINO",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH ESP0003 AS (\n    SELECT DISTINCT\n        A.*\n    FROM STG.FIVE9_ESP0003 A    \n)\n\n\n\nMERGE\t           \n\tdw.FIVE9_ESP0003 AS destino           \nUSING            \n\tESP0003 AS origem           \n           \n    ON(        \n        destino.id_ligacao = origem.id_ligacao \n          )        \n       \n      \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \ndestino.ID_LIGACAO\t\t\t\t\t\t\t=origem.ID_LIGACAO,\ndestino.CAMPANHA\t\t\t\t\t\t\t=origem.CAMPANHA,\ndestino.TIPO_LIGACAO\t\t\t\t\t\t=origem.TIPO_LIGACAO,\ndestino.AGENTE\t\t\t\t\t\t\t\t=origem.AGENTE,\ndestino.NOME_AGENTE\t\t\t\t\t\t\t=origem.NOME_AGENTE,\ndestino.POSICAO\t\t\t\t\t\t\t\t=origem.POSICAO,\ndestino.ANI\t\t\t\t\t\t\t\t\t=origem.ANI,\ndestino.TEMPO_LIGACAO\t\t\t\t\t\t=origem.TEMPO_LIGACAO,\ndestino.TEMPO_FATURAMENTO_ARRENDONDADO\t\t=origem.TEMPO_FATURAMENTO_ARRENDONDADO,\ndestino.TEMPO_RETENCAO\t\t\t\t\t\t=origem.TEMPO_RETENCAO,\ndestino.TEMPO_ESPERA\t\t\t\t\t\t=origem.TEMPO_ESPERA,\ndestino.APÓS_TEMPO_ATIVIDADE_LIGACAO\t\t=origem.APÓS_TEMPO_ATIVIDADE_LIGACAO,\ndestino.TRANSFERENCIAS\t\t\t\t\t\t=origem.TRANSFERENCIAS,\ndestino.CONFERENCIAS\t\t\t\t\t\t=origem.CONFERENCIAS,\ndestino.ABANDONADA\t\t\t\t\t\t\t=origem.ABANDONADA,\ndestino.DATA\t\t\t\t\t\t\t\t=origem.DATA,\ndestino.HORA\t\t\t\t\t\t\t\t=origem.HORA,\ndestino.COMPETENCIA\t\t\t\t\t\t\t=origem.COMPETENCIA,\ndestino.TEMPO_CONVERSA\t\t\t\t\t\t=origem.TEMPO_CONVERSA\n  \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.ID_LIGACAO\n,origem.CAMPANHA\n,origem.TIPO_LIGACAO\n,origem.AGENTE\n,origem.NOME_AGENTE\n,origem.POSICAO\n,origem.ANI\n,origem.TEMPO_LIGACAO\n,origem.TEMPO_FATURAMENTO_ARRENDONDADO\n,origem.TEMPO_RETENCAO\n,origem.TEMPO_ESPERA\n,origem.APÓS_TEMPO_ATIVIDADE_LIGACAO\n,origem.TRANSFERENCIAS\n,origem.CONFERENCIAS\n,origem.ABANDONADA\n,origem.DATA\n,origem.HORA\n,origem.COMPETENCIA\n,origem.TEMPO_CONVERSA\n\n);        \n"
								}
							]
						}
					},
					{
						"name": "STG DW FIVE9_ESP0004",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "STG DW FIVE9_ESP0003",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SQL_DESTINO",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "MERGE\t           \n\tdw.FIVE9_ESP0004 AS destino           \nUSING            \n\tstg.FIVE9_ESP0004 AS origem           \n           \n    ON(        \ndestino.CAMPANHA\t\t\t\t\t=origem.CAMPANHA\t\t\tAND\ndestino.TIPO_LIGACAO\t\t\t\t=origem.TIPO_LIGACAO\t\tAND\ndestino.AGENTE\t\t\t\t\t\t=origem.AGENTE\t\t\t\tAND\ndestino.NOME_AGENTE\t\t\t\t\t=origem.NOME_AGENTE\t\t\tAND\ndestino.POSICAO\t\t\t\t\t\t=origem.POSICAO\t\t\t\tAND\ndestino.ANI\t\t\t\t\t\t\t=origem.ANI\t\t\t\t\tAND\ndestino.DNIS\t\t\t\t\t\t=origem.DNIS\t\t\t\tAND\ndestino.TEMPO_LIGACAO\t\t\t\t=origem.TEMPO_LIGACAO\t\tAND\ndestino.TEMPO_ESPERA_FILA\t\t\t=origem.TEMPO_ESPERA_FILA\tAND\ndestino.TEMPO_CONVERSA\t\t\t\t=origem.TEMPO_CONVERSA\t\tAND\ndestino.TEMPO_ESPERA\t\t\t\t=origem.TEMPO_ESPERA\t\tAND\ndestino.ABANDONADA\t\t\t\t\t=origem.ABANDONADA\t\t\tAND\ndestino.DATA\t\t\t\t\t\t=origem.DATA\t\t\t\tAND\ndestino.HORA\t\t\t\t\t\t=origem.HORA\n          )        \n       \n      \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \ndestino.CAMPANHA\t\t\t\t\t=origem.CAMPANHA,\ndestino.TIPO_LIGACAO\t\t\t\t=origem.TIPO_LIGACAO,\ndestino.AGENTE\t\t\t\t\t\t=origem.AGENTE,\ndestino.NOME_AGENTE\t\t\t\t\t=origem.NOME_AGENTE,\ndestino.POSICAO\t\t\t\t\t\t=origem.POSICAO,\ndestino.ANI\t\t\t\t\t\t\t=origem.ANI,\ndestino.DNIS\t\t\t\t\t\t=origem.DNIS,\ndestino.TEMPO_LIGACAO\t\t\t\t=origem.TEMPO_LIGACAO,\ndestino.TEMPO_ESPERA_FILA\t\t\t=origem.TEMPO_ESPERA_FILA,\ndestino.TEMPO_CONVERSA\t\t\t\t=origem.TEMPO_CONVERSA,\ndestino.TEMPO_ESPERA\t\t\t\t=origem.TEMPO_ESPERA,\ndestino.ABANDONADA\t\t\t\t\t=origem.ABANDONADA,\ndestino.DATA\t\t\t\t\t\t=origem.DATA,\ndestino.HORA\t\t\t\t\t\t=origem.HORA\n  \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.CAMPANHA\n,origem.TIPO_LIGACAO\n,origem.AGENTE\n,origem.NOME_AGENTE\n,origem.POSICAO\n,origem.ANI\n,origem.DNIS\n,origem.TEMPO_LIGACAO\n,origem.TEMPO_ESPERA_FILA\n,origem.TEMPO_CONVERSA\n,origem.TEMPO_ESPERA\n,origem.ABANDONADA\n,origem.DATA\n,origem.HORA\n);"
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/Five9"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL_DESTINO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Geral Atendimentos DAYHORC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Alimenta as informações das tabelas:\n\nAtendimento_ Unidade \nAgendamento_Unidade\nUsuarios_Unidade\nConsultas_Unidade\nAgendas Unidade\n\nPara extração de relatórios do call center.",
				"activities": [
					{
						"name": "Wait",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Atendimento DH",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT pac_reg AS CD_PESSOA_FISICA\n    , rtrim(ltrim(pac_nome)) AS NM_PESSOA_FISICA\n    , convert(CHAR(10), osm_dthr, 121) AS DT_ENTRADA\n    , LEFT(CONVERT(VARCHAR(12), osm_dthr, 114),8) AS HR_ENTRADA\n    , smm_med AS NM_MEDICO\n    , osm_cnv AS CD_CONVENIO\n    , cnv_nome AS DS_CONVENIO\n    , convert(VARCHAR, (convert(VARCHAR, osm_serie) + convert(VARCHAR, osm_num))) AS NR_ATENDIMENTO\n    , emp_cgc AS CNPJ\n    , emp_nome_fantasia AS DS_UNIDADE\n    , emp_nome_fantasia AS MARCA\n    , 0 AS CD_PROCEDENCIA\n    , 'NAO ENCONTRADO' AS DS_PROCEDENCIA\n    , 'NAO ENCONTRADO' AS ID\n    , CONVERT(INT, DAY(osm_dthr)) AS DIA\n    , CONVERT(INT, MONTH(osm_dthr)) AS MES\n    , CONVERT(INT, YEAR(osm_dthr)) AS ANO,\n'Smart DH Itaigara' as BASE\nFROM osm\nINNER JOIN smm\n    ON smm_osm_serie = osm_serie\n        AND smm_osm = osm_num\nINNER JOIN pac\n    ON pac_reg = osm_pac\nINNER JOIN cnv\n    ON osm_cnv = cnv_cod\nINNER JOIN str\n    ON str_cod = osm_str\nINNER JOIN psv\n    ON psv_cod = osm_mreq\nLEFT OUTER JOIN str str_e\n    ON str.str_str_cod = str_e.str_cod\nLEFT OUTER JOIN emp\n    ON str_e.str_emp_cod = emp_cod\nWHERE 1 = 1\n    AND (\n        smm_pacote IS NULL\n        OR (smm_pacote = 'C')\n        )\n    AND smm_sfat NOT IN ('C')\n\nAND osm_dthr BETWEEN GETDATE() - 730 AND GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Atendimento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendamentos DH",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT AGM_PAC AS CD_PESSOA_FISICA\n    , agm.agm_cnv_cod AS CD_CONVENIO\n    , emp_cgc AS CNPJ\n    , CONVERT(DATE, AGM_HINI) AS DATA_AGENDA\n    , LEFT(CONVERT(VARCHAR(12), agm_hini, 114), 8) AS HORA_AGENDA\n    , CASE AGM_ATEND\n        WHEN 'CRG'\n            THEN 'Cirurgia'\n        WHEN 'ASS'\n            THEN 'Consulta'\n        when '' then 'Consulta'\n        ELSE 'Outros'\n        END AS TIPO_AGENDA\n    , pac.PAC_NOME AS NM_PACIENTE\n    , smk.smk_nome AS DS_PROCEDIMENTO_PRINC\n    , ' ' DS_PROCEDIMENTO_ADIC\n    , 1 AS IE_QUANTIDADE\n    , USR_NOME AS NM_USUARIO\n    , psv_nome AS NM_MEDICO\n    , EMP_NOME_FANTASIA AS DS_UNIDADE\n    , EMP_NOME_FANTASIA AS MARCA\n    , CASE \n        WHEN AGM_STAT = 'A'\n            THEN 'Aberta'\n        WHEN AGM_STAT = 'E'\n            THEN 'Executada'\n        WHEN AGM_STAT = 'C'\n            THEN 'Cancelada'\n        WHEN AGM_STAT = 'B'\n            THEN 'Bloqueada'\n        END STATUS_AGENDA\n    , CONVERT(VARCHAR, convert(VARCHAR, AGM_OSM_SERIE) + convert(VARCHAR, AGM_OSM_NUM)) AS NR_ATENDIMENTO\n    , AGM_num AS NR_SEQUENCIA\n    , '' ID\n    , '' AS CD_PROCEDENCIA\n    , agm_proc AS DS_PROCEDENCIA\n    , agm.AGM_DTMRC AS DT_AGENDAMENTO\n    , CONVERT(INT, DAY(AGM_HINI)) AS DIA\n    , CONVERT(INT, MONTH(AGM_HINI)) AS MES\n    , CONVERT(INT, YEAR(AGM_HINI)) AS ANO\n    , ' ' DS_CLASSIFICACAO\n    , ' ' DS_AGRUPAMENTO\n    , agm.AGM_CANC_MOT_COD AS CD_MOTIVO_CANCELAMENTO\n    , agm.AGM_CANC_MOT_TIPO AS DS_MOTIVO_CANCELAMENTO\n    , agm_med AS CD_AGENDA,\n'Smart DH Itaigara' as BASE\nFROM agm\nINNER JOIN usr\n    ON (agm.agm_usr_login = usr.usr_login)\nINNER JOIN psv\n    ON (psv.psv_cod = agm.agm_med)\nINNER JOIN smk\n    ON (\n            agm_smk = smk_cod\n            AND agm_tpsmk = smk_tipo\n            )\nINNER JOIN pac\n    ON (pac_reg = agm_pac)\nINNER JOIN loc\n    ON (AGM_LOC = LOC_COD)\nINNER JOIN str\n    ON (LOC_STR = STR.STR_COD)\nINNER JOIN str str_e\n    ON (STR.STR_STR_COD = STR_E.STR_COD)\nINNER JOIN cnv\n    ON (CNV_COD = AGM_CNV_COD)\nLEFT OUTER JOIN ctf ct1\n    ON (\n            ct1.ctf_cod = smk_ctf\n            AND ct1.ctf_tipo = smk_tipo\n            )\nLEFT OUTER JOIN emp\n    ON emp_cod = str_e.str_emp_cod\n\nWHERE AGM_DTMRC BETWEEN GETDATE() - 730 AND GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Usuarios DH",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select\nusr_login as NM_USUARIO,\nusr_nome as DS_USUARIO,\nusr_status as IE_SITUACAO,\nusr_dt_alter_senha as DT_ATUALIZACAO,\n'DAYHORC -  UNIDADE ITAIGARA' AS DS_UNIDADE,\n'13188370000227' as CNPJ,\n'DH' as MARCA,\n'Smart DH Itaigara' as BASE\nfrom usr",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Usuario",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Consulta DH",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT\nRCL_SMM AS NR_SEQUENCIA,\nCONVERT(DATE,RCL_DTHR_ATUAL) AS DT_ATUALIZACAO,\nCONVERT(VARCHAR,RCL_DTHR_ATUAL,108) as HR_ATUALIZACAO,\n\nCONVERT(VARCHAR,CONVERT(VARCHAR,RCL_OSM_SERIE) + CONVERT(VARCHAR,RCL_OSM)) AS NR_ATENDIMENTO, \n\nRCL_MED AS CD_MEDICO,\nPSV_APEL AS NM_MEDICO,\n'' AS DS_RETORNO,\nCONVERT(VARCHAR,RCL_LAUDO_RTF) AS DS_CONDUTA,\nRCL_PAC AS CD_PESSOA_FISICA,\nCONVERT(VARCHAR,RCL_TXT) AS DS_DIAGNOSTICO,\n'DAYHORC -  UNIDADE ITAIGARA' AS DS_UNIDADE,\n'13188370000227' as CNPJ,\n'DH' AS MARCA,\n'Smart DH Itaigara' as BASE\nFROM RCL\nINNER JOIN PSV ON PSV_COD = RCL_MED\n\nWHERE RCL_DTHR_ATUAL BETWEEN GETDATE() - 730 AND GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Consulta",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendas DH",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT distinct agd_med AS CD_AGENDA \n    , 0 AS DS_AGENDA\n    , 0 CD_TIPO_AGENDA\n    , psv_cod AS CD_PESSOA_FISICA\n    , emp_cgc AS CNPJ\n    , '' AS DS_AREA_ATUACAO\n    , 'A' AS IE_SITUACAO,\n    'Smart DH Itaigara' as BASE\n    -- , CASE \n    --     WHEN (agd_dt_reconstr IS not NULL and AGD_DT_GERA is not null)\n    --         THEN agd_dt_reconstr\n    --     WHEN (agd_dt_reconstr IS NULL and AGD_DT_GERA is not null)\n    --         THEN agd_dt_gera\n    --     ELSE AGD_DT_GERA\n    --     END AS DT_ATUALIZACAO\nFROM agd\nINNER JOIN PSV\n    ON agd_med = psv_cod\nINNER JOIN loc\n    ON loc_cod = agd_loc\nINNER JOIN str\n    ON str_cod = loc_str\nLEFT OUTER JOIN str str_e\n    ON str_e.str_cod = str.str_str_cod\nLEFT OUTER JOIN emp\n    ON emp_cod = str_e.str_emp_cod",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agenda",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Execute Pipeline HOSL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Atendimento DH",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Agendamentos DH",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Usuarios DH",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Consulta DH",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Agendas DH",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Geral Atendimentos HOSL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T13:01:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_ITAIGARA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Atendimento')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agendamento')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Usuario')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Consulta')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agenda')]",
				"[concat(variables('factoryId'), '/pipelines/Geral Atendimentos HOSL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Geral Atendimentos HOB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Alimenta as informações das tabelas:\n\nAtendimento_ Unidade \nAgendamento_Unidade\nUsuarios_Unidade\nConsultas_Unidade\nAgendas Unidade\n\nPara extração de relatórios do call center.",
				"activities": [
					{
						"name": "Atendimento HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select pf.cd_pessoa_fisica, pf.nm_pessoa_fisica, \nto_char(at.dt_entrada,'yyyy-mm-dd') as dt_entrada,\nto_char(at.dt_entrada,'hh24:mi:ss') as hr_entrada, \n\nfast_ops.obter_nome_pf(at.cd_medico_resp) as nm_medico, c.cd_convenio, fast_ops.obter_nome_convenio(c.cd_convenio) AS ds_convenio, \nat.nr_atendimento,\ne.cd_cgc as CNPJ,\nnm_fantasia_estab DS_UNIDADE,\nem.nm_razao_social MARCA,\n\nat.cd_procedencia,\np.ds_procedencia,\n'NAO ENCONTRADO' as ID,\n\nto_char(at.dt_entrada,'dd') dia,\nto_char(at.dt_entrada,'mm') mes,\nto_char(at.dt_entrada,'yyyy') ano,\nto_char(at.dt_cancelamento, 'yyyy-mm-dd') dt_cancelamento,\nto_char(at.dt_atualizacao, 'yyyy-mm-dd') dt_atualizacao,\n'Tasy HTML' as BASE\n\nfrom \nfast_ops.atendimento_paciente at, \nfast_ops.pessoa_fisica pf,\nfast_ops.atend_categoria_convenio c,\nfast_ops.procedencia p,\nfast_ops.estabelecimento e,\nfast_ops.empresa em\nwhere at.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand at.cd_procedencia = p.cd_procedencia (+)\nand at.nr_atendimento = c.nr_atendimento\nand at.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa\n\nAND at.dt_entrada between SYSDATE - 730 AND SYSDATE",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Atendimento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Consulta HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "-- Consulta HOB - Azure\n\nselect o.nr_sequencia as nr_sequencia, \nto_char(o.dt_atualizacao,'yyyy-mm-dd') as dt_atualizacao,\nto_char(o.dt_atualizacao,'hh24:mi:ss') as hr_atualizacao, \no.nr_atendimento, \no.cd_medico as cd_medico ,\nfast_ops.obter_nome_pf(o.cd_medico) as nm_medico, \nc.qt_periodo||' '||c.ie_periodo as ds_retorno,  \nsubstr(z.conduta,1,1000) as ds_conduta,\nfast_ops.obter_pessoa_atendimento(o.nr_atendimento, 'C') as cd_pessoa_fisica,\n\n(select unique d.cd_doenca ||' - '|| a.ds_doenca_cid\nfrom fast_ops.diagnostico_doenca d, \n     fast_ops.cid_doenca a\nwhere a.cd_doenca_cid = d.cd_doenca\nand d.nr_atendimento = o.nr_atendimento\nand d.nr_seq_interno = (select max(x.nr_seq_interno) from fast_ops.diagnostico_doenca x where x.nr_atendimento = d.nr_atendimento)) as ds_diagnostico,\n\nfast_ops.obter_nome_estab(fast_ops.obter_estab_atendimento(o.nr_atendimento)) as DS_UNIDADE,\n\ne.cd_cgc as cnpj,\n\n'HOB' as MARCA,\n'Tasy HTML' as BASE\n\nfrom fast_ops.oft_consulta o,\n     (SELECT a.nr_seq_consulta, b.ds_resultado as conduta\n      FROM   fast_ops.med_avaliacao_paciente a \n      inner join fast_ops.med_avaliacao_result b ON b.nr_seq_avaliacao = a.nr_sequencia \n      WHERE  a.nr_seq_tipo_avaliacao = 34 \n      and  b.nr_seq_item = 457 --456, 458 ) \n      GROUP  BY a.nr_seq_consulta, b.ds_resultado) z,\n      fast_ops.oft_conduta c,\n      fast_ops.estabelecimento e\nwhere o.nr_sequencia = z.nr_seq_consulta\nand o.nr_sequencia = c.nr_seq_consulta\nand o.nr_atendimento is not null\nand fast_ops.obter_estab_atendimento(o.nr_atendimento) = e.cd_estabelecimento\n\nand o.dt_atualizacao between SYSDATE - 730 AND SYSDATE",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Consulta",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendamento HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "-- AGENDAMENTO HOB - Azure\n\nselect  a.cd_pessoa_fisica, \na.cd_convenio, \nfast_ops.obter_cnpj_estabelecimento(ag.cd_estabelecimento) as cnpj,\nto_char((a.hr_inicio) , 'yyyy-mm-dd') as data_agenda,\nto_char((a.hr_inicio) , 'hh24:mi:ss') as hora_agenda,\n'Consulta' as tipo_agenda,\npf.nm_pessoa_fisica as nm_paciente,\nsubstr(fast_ops.obter_desc_procedimento(a.cd_procedimento, a.ie_origem_proced),1,1000) as ds_procedimento_princ,\nsubstr((select Listagg(fast_ops.Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced), ' ;') within GROUP (ORDER BY fast_ops.Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced))  from FAST_OPS.AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia),1,1000) as ds_procedimento_adic,\n1 + (select count(1)from FAST_OPS.AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia) as ie_quantidade,\nfast_ops.obter_nome_usuario(a.nm_usuario_orig) as nm_usuario,\nfast_ops.obter_nome_pf(a.cd_medico_exec) as nm_medico,\ne.nm_fantasia_estab DS_UNIDADE,\nem.nm_razao_social MARCA,\nfast_ops.obter_valor_dominio(83,a.ie_status_agenda) as status_agenda,\na.nr_atendimento,\na.nr_sequencia,\n'NAO ENCONTRADO' as ID,\na.cd_procedencia,\np.ds_procedencia,\nto_char(a.dt_agendamento, 'yyyy-mm-dd') dt_agendamento,\n\nto_char(a.dt_agenda,'dd') dia,\nto_char(a.dt_agenda,'mm') mes,\nto_char(a.dt_agenda,'yyyy') ano,\nac.ds_classificacao,\naa.ds_agrupamento ds_agrupamento,\na.cd_motivo_cancelamento,\nsubstr(fast_ops.obter_ds_motivo_status(a.nr_sequencia, a.cd_agenda),1,200) as ds_motivo_cancelamento,\na.cd_agenda,\nto_char(a.dt_atualizacao, 'yyyy-mm-dd') dt_atualizacao,\n'Tasy HTML' as BASE\n\nfrom FAST_OPS.agenda_paciente a,\n     FAST_OPS.agenda ag,\n     FAST_OPS.pessoa_fisica pf,\n     FAST_OPS.procedencia p,\n     FAST_OPS.agenda_paciente_classif ac,\n     FAST_OPS.agrupamento_agenda aa,\n     FAST_OPS.empresa em,\n     FAST_OPS.estabelecimento e\nwhere a.cd_agenda = ag.cd_agenda\nand a.cd_pessoa_fisica = pf.cd_pessoa_fisica (+)\nand a.cd_procedencia = p.cd_procedencia (+)\nand a.nr_seq_classif_agenda = ac.nr_sequencia (+)\nand ag.nr_seq_agrupamento = aa.nr_sequencia (+)\nand ag.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa\nand a.cd_pessoa_fisica is not null\nand ag.cd_pessoa_fisica is not null\nand ag.cd_tipo_agenda = 2\n\nand a.dt_agendamento between SYSDATE - 730 AND SYSDATE",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Usuarios HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select u.nm_usuario, \nu.ds_usuario, \nu.ie_situacao, \nto_char(u.dt_atualizacao, 'yyyy-mm-dd') dt_atualizacao,\nfast_ops.obter_nome_estabelecimento(u.cd_estabelecimento) as DS_UNIDADE,\ne.cd_cgc as CNPJ,\nfast_ops.obter_nome_empresa(fast_ops.obter_empresa_estab(u.cd_estabelecimento)) as Marca,\n'Tasy HTML' as BASE\nfrom FAST_OPS.usuario u,\n     FAST_OPS.empresa em,\n     FAST_OPS.estabelecimento e\nwhere u.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Usuario",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendas HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT A.CD_AGENDA, A.DS_AGENDA, A.CD_TIPO_AGENDA, A.CD_PESSOA_FISICA, E.CD_CGC as CNPJ, (SELECT X.DS_AREA_ATUACAO FROM fast_ops.AREA_ATUACAO_MEDICA X\nWHERE X.NR_SEQUENCIA = A.NR_SEQ_AREA_ATUACAO) AS DS_AREA_ATUACAO, A.IE_SITUACAO,\nto_char(A.DT_ATUALIZACAO, 'yyyy-mm-dd') DT_ATUALIZACAO,\n'Tasy HTML' as BASE\nFROM FAST_OPS.AGENDA A,\n     FAST_OPS.ESTABELECIMENTO E\nWHERE A.CD_ESTABELECIMENTO = E.CD_ESTABELECIMENTO",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agenda",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-03-04T15:25:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Atendimento')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Consulta')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agendamento')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Usuario')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agenda')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Geral Atendimentos HOSL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Alimenta as informações das tabelas:\n\nAtendimento_ Unidade \nAgendamento_Unidade\nUsuarios_Unidade\nConsultas_Unidade\nAgendas Unidade\n\nPara extração de relatórios do call center.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Atendimento HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT pac_reg AS CD_PESSOA_FISICA\n    , rtrim(ltrim(pac_nome)) AS NM_PESSOA_FISICA\n    , convert(CHAR(10), osm_dthr, 121) AS DT_ENTRADA\n    , LEFT(CONVERT(VARCHAR(12), osm_dthr, 114),8) AS HR_ENTRADA\n    , smm_med AS NM_MEDICO\n    , osm_cnv AS CD_CONVENIO\n    , cnv_nome AS DS_CONVENIO\n    , convert(VARCHAR, (convert(VARCHAR, osm_serie) + convert(VARCHAR, osm_num))) AS NR_ATENDIMENTO\n    , emp_cgc AS CNPJ\n    , emp_nome_fantasia AS DS_UNIDADE\n    , emp_nome_fantasia AS MARCA\n    , 0 AS CD_PROCEDENCIA\n    , 'NAO ENCONTRADO' AS DS_PROCEDENCIA\n    , 'NAO ENCONTRADO' AS ID\n    , CONVERT(INT, DAY(osm_dthr)) AS DIA\n    , CONVERT(INT, MONTH(osm_dthr)) AS MES\n    , CONVERT(INT, YEAR(osm_dthr)) AS ANO,\n'Smart HOSL' as BASE\nFROM osm\nINNER JOIN smm\n    ON smm_osm_serie = osm_serie\n        AND smm_osm = osm_num\nINNER JOIN pac\n    ON pac_reg = osm_pac\nINNER JOIN cnv\n    ON osm_cnv = cnv_cod\nINNER JOIN str\n    ON str_cod = osm_str\nINNER JOIN psv\n    ON psv_cod = osm_mreq\nLEFT OUTER JOIN str str_e\n    ON str.str_str_cod = str_e.str_cod\nLEFT OUTER JOIN emp\n    ON str_e.str_emp_cod = emp_cod\nWHERE 1 = 1\n    AND (\n        smm_pacote IS NULL\n        OR (smm_pacote = 'C')\n        )\n    AND smm_sfat NOT IN ('C')\n\nAND osm_dthr BETWEEN GETDATE() - 730 AND GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Atendimento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendamentos HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT AGM_PAC AS CD_PESSOA_FISICA\n    , agm.agm_cnv_cod AS CD_CONVENIO\n    , emp_cgc AS CNPJ\n    , CONVERT(DATE, AGM_HINI) AS DATA_AGENDA\n    , LEFT(CONVERT(VARCHAR(12), agm_hini, 114), 8) AS HORA_AGENDA\n    , CASE AGM_ATEND\n        WHEN 'CRG'\n            THEN 'Cirurgia'\n        WHEN 'ASS'\n            THEN 'Consulta'\n        when '' then 'Consulta'\n        ELSE 'Outros'\n        END AS TIPO_AGENDA\n    , pac.PAC_NOME AS NM_PACIENTE\n    , smk.smk_nome AS DS_PROCEDIMENTO_PRINC\n    , ' ' DS_PROCEDIMENTO_ADIC\n    , 1 AS IE_QUANTIDADE\n    , USR_NOME AS NM_USUARIO\n    , psv_nome AS NM_MEDICO\n    , EMP_NOME_FANTASIA AS DS_UNIDADE\n    , EMP_NOME_FANTASIA AS MARCA\n    , CASE \n        WHEN AGM_STAT = 'A'\n            THEN 'Aberta'\n        WHEN AGM_STAT = 'E'\n            THEN 'Executada'\n        WHEN AGM_STAT = 'C'\n            THEN 'Cancelada'\n        WHEN AGM_STAT = 'B'\n            THEN 'Bloqueada'\n        END STATUS_AGENDA\n    , CONVERT(VARCHAR, convert(VARCHAR, AGM_OSM_SERIE) + convert(VARCHAR, AGM_OSM_NUM)) AS NR_ATENDIMENTO\n    , AGM_num AS NR_SEQUENCIA\n    , '' ID\n    , '' AS CD_PROCEDENCIA\n    , agm_proc AS DS_PROCEDENCIA\n    , agm.AGM_DTMRC AS DT_AGENDAMENTO\n    , CONVERT(INT, DAY(AGM_HINI)) AS DIA\n    , CONVERT(INT, MONTH(AGM_HINI)) AS MES\n    , CONVERT(INT, YEAR(AGM_HINI)) AS ANO\n    , ' ' DS_CLASSIFICACAO\n    , ' ' DS_AGRUPAMENTO\n    , agm.AGM_CANC_MOT_COD AS CD_MOTIVO_CANCELAMENTO\n    , agm.AGM_CANC_MOT_TIPO AS DS_MOTIVO_CANCELAMENTO\n    , agm_med AS CD_AGENDA,\n    'Smart HOSL' as BASE\nFROM agm\nINNER JOIN usr\n    ON (agm.agm_usr_login = usr.usr_login)\nINNER JOIN psv\n    ON (psv.psv_cod = agm.agm_med)\nINNER JOIN smk\n    ON (\n            agm_smk = smk_cod\n            AND agm_tpsmk = smk_tipo\n            )\nINNER JOIN pac\n    ON (pac_reg = agm_pac)\nINNER JOIN loc\n    ON (AGM_LOC = LOC_COD)\nINNER JOIN str\n    ON (LOC_STR = STR.STR_COD)\nINNER JOIN str str_e\n    ON (STR.STR_STR_COD = STR_E.STR_COD)\nINNER JOIN cnv\n    ON (CNV_COD = AGM_CNV_COD)\nLEFT OUTER JOIN ctf ct1\n    ON (\n            ct1.ctf_cod = smk_ctf\n            AND ct1.ctf_tipo = smk_tipo\n            )\nLEFT OUTER JOIN emp\n    ON emp_cod = str_e.str_emp_cod\n\nWHERE AGM_DTMRC BETWEEN GETDATE() - 730 AND GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Usuarios HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select\nusr_login as NM_USUARIO,\nusr_nome as DS_USUARIO,\nusr_status as IE_SITUACAO,\nusr_dt_alter_senha as DT_ATUALIZACAO,\n'HOSPITAL DE OLHOS SANTA LUZIA SS LTDA' AS DS_UNIDADE,\n'12305371000160' as CNPJ,\n'HOSL' as MARCA,\n'Smart HOSL' as BASE\nfrom usr",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Usuario",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Consulta HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT\nRCL_SMM AS NR_SEQUENCIA,\nCONVERT(DATE,RCL_DTHR_ATUAL) AS DT_ATUALIZACAO,\nCONVERT(VARCHAR,RCL_DTHR_ATUAL,108) as HR_ATUALIZACAO,\n\nCONVERT(VARCHAR,CONVERT(VARCHAR,RCL_OSM_SERIE) + CONVERT(VARCHAR,RCL_OSM)) AS NR_ATENDIMENTO, \n\nRCL_MED AS CD_MEDICO,\nPSV_APEL AS NM_MEDICO,\n'' AS DS_RETORNO,\nCONVERT(VARCHAR,RCL_LAUDO_RTF) AS DS_CONDUTA,\nRCL_PAC AS CD_PESSOA_FISICA,\nCONVERT(VARCHAR,RCL_TXT) AS DS_DIAGNOSTICO,\n'HOSPITAL DE OLHOS SANTA LUZIA SS LTDA' AS DS_UNIDADE,\n'12305371000160' as CNPJ,\n'HOSL' AS MARCA,\n'Smart HOSL' as BASE\nFROM RCL\nINNER JOIN PSV ON PSV_COD = RCL_MED\n\nWHERE RCL_DTHR_ATUAL BETWEEN GETDATE() - 730 AND GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Consulta",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendas HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT distinct agd_med AS CD_AGENDA \n    , 0 AS DS_AGENDA\n    , 0 CD_TIPO_AGENDA\n    , psv_cod AS CD_PESSOA_FISICA\n    , emp_cgc AS CNPJ\n    , '' AS DS_AREA_ATUACAO\n    , 'A' AS IE_SITUACAO,\n    -- , CASE \n    --     WHEN (agd_dt_reconstr IS not NULL and AGD_DT_GERA is not null)\n    --         THEN agd_dt_reconstr\n    --     WHEN (agd_dt_reconstr IS NULL and AGD_DT_GERA is not null)\n    --         THEN agd_dt_gera\n    --     ELSE AGD_DT_GERA\n    --     END AS DT_ATUALIZACAO,\n'Smart HOSL' as BASE\nFROM agd\nINNER JOIN PSV\n    ON agd_med = psv_cod\nINNER JOIN loc\n    ON loc_cod = agd_loc\nINNER JOIN str\n    ON str_cod = loc_str\nLEFT OUTER JOIN str str_e\n    ON str_e.str_cod = str.str_str_cod\nLEFT OUTER JOIN emp\n    ON emp_cod = str_e.str_emp_cod",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agenda",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Execute Pipeline INOB",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Atendimento HOSL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Agendamentos HOSL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Usuarios HOSL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Consulta HOSL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Agendas HOSL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Geral Atendimentos INOB - Smart",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T13:01:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_HOSL_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Atendimento')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agendamento')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Usuario')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Consulta')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agenda')]",
				"[concat(variables('factoryId'), '/pipelines/Geral Atendimentos INOB - Smart')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Geral Atendimentos INOB - Smart')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Alimenta as informações das tabelas:\n\nAtendimento_ Unidade \nAgendamento_Unidade\nUsuarios_Unidade\nConsultas_Unidade\nAgendas Unidade\n\nPara extração de relatórios do call center.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Atendimento INOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT pac_reg AS CD_PESSOA_FISICA\n    , rtrim(ltrim(pac_nome)) AS NM_PESSOA_FISICA\n    , convert(CHAR(10), osm_dthr, 121) AS DT_ENTRADA\n    , LEFT(CONVERT(VARCHAR(12), osm_dthr, 114),8) AS HR_ENTRADA\n    , smm_med AS NM_MEDICO\n    , osm_cnv AS CD_CONVENIO\n    , cnv_nome AS DS_CONVENIO\n    , convert(VARCHAR, (convert(VARCHAR, osm_serie) + convert(VARCHAR, osm_num))) AS NR_ATENDIMENTO\n    , emp_cgc AS CNPJ\n    , emp_nome_fantasia AS DS_UNIDADE\n    , emp_nome_fantasia AS MARCA\n    , 0 AS CD_PROCEDENCIA\n    , 'NAO ENCONTRADO' AS DS_PROCEDENCIA\n    , 'NAO ENCONTRADO' AS ID\n    , CONVERT(INT, DAY(osm_dthr)) AS DIA\n    , CONVERT(INT, MONTH(osm_dthr)) AS MES\n    , CONVERT(INT, YEAR(osm_dthr)) AS ANO,\n'Smart INOB' as BASE\nFROM osm\nINNER JOIN smm\n    ON smm_osm_serie = osm_serie\n        AND smm_osm = osm_num\nINNER JOIN pac\n    ON pac_reg = osm_pac\nINNER JOIN cnv\n    ON osm_cnv = cnv_cod\nINNER JOIN str\n    ON str_cod = osm_str\nINNER JOIN psv\n    ON psv_cod = osm_mreq\nLEFT OUTER JOIN str str_e\n    ON str.str_str_cod = str_e.str_cod\nLEFT OUTER JOIN emp\n    ON str_e.str_emp_cod = emp_cod\nWHERE 1 = 1\n    AND (\n        smm_pacote IS NULL\n        OR (smm_pacote = 'C')\n        )\n    AND smm_sfat NOT IN ('C')\n\nAND osm_dthr BETWEEN GETDATE() - 730 AND GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Atendimento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendamentos INOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT AGM_PAC AS CD_PESSOA_FISICA\n    , agm.agm_cnv_cod AS CD_CONVENIO\n    , emp_cgc AS CNPJ\n    , CONVERT(DATE, AGM_HINI) AS DATA_AGENDA\n    , LEFT(CONVERT(VARCHAR(12), agm_hini, 114), 8) AS HORA_AGENDA\n    , CASE AGM_ATEND\n        WHEN 'CRG'\n            THEN 'Cirurgia'\n        WHEN 'ASS'\n            THEN 'Consulta'\n        when '' then 'Consulta'\n        ELSE 'Outros'\n        END AS TIPO_AGENDA\n    , pac.PAC_NOME AS NM_PACIENTE\n    , smk.smk_nome AS DS_PROCEDIMENTO_PRINC\n    , ' ' DS_PROCEDIMENTO_ADIC\n    , 1 AS IE_QUANTIDADE\n    , USR_NOME AS NM_USUARIO\n    , psv_nome AS NM_MEDICO\n    , EMP_NOME_FANTASIA AS DS_UNIDADE\n    , EMP_NOME_FANTASIA AS MARCA\n    , CASE \n        WHEN AGM_STAT = 'A'\n            THEN 'Aberta'\n        WHEN AGM_STAT = 'E'\n            THEN 'Executada'\n        WHEN AGM_STAT = 'C'\n            THEN 'Cancelada'\n        WHEN AGM_STAT = 'B'\n            THEN 'Bloqueada'\n        END STATUS_AGENDA\n    , CONVERT(VARCHAR, convert(VARCHAR, AGM_OSM_SERIE) + convert(VARCHAR, AGM_OSM_NUM)) AS NR_ATENDIMENTO\n    , AGM_num AS NR_SEQUENCIA\n    , '' ID\n    , '' AS CD_PROCEDENCIA\n    , agm_proc AS DS_PROCEDENCIA\n    , agm.AGM_DTMRC AS DT_AGENDAMENTO\n    , CONVERT(INT, DAY(AGM_HINI)) AS DIA\n    , CONVERT(INT, MONTH(AGM_HINI)) AS MES\n    , CONVERT(INT, YEAR(AGM_HINI)) AS ANO\n    , ' ' DS_CLASSIFICACAO\n    , ' ' DS_AGRUPAMENTO\n    , agm.AGM_CANC_MOT_COD AS CD_MOTIVO_CANCELAMENTO\n    , agm.AGM_CANC_MOT_TIPO AS DS_MOTIVO_CANCELAMENTO\n    , agm_med AS CD_AGENDA,\n'Smart INOB' as BASE\nFROM agm\nINNER JOIN usr\n    ON (agm.agm_usr_login = usr.usr_login)\nINNER JOIN psv\n    ON (psv.psv_cod = agm.agm_med)\nINNER JOIN smk\n    ON (\n            agm_smk = smk_cod\n            AND agm_tpsmk = smk_tipo\n            )\nINNER JOIN pac\n    ON (pac_reg = agm_pac)\nINNER JOIN loc\n    ON (AGM_LOC = LOC_COD)\nINNER JOIN str\n    ON (LOC_STR = STR.STR_COD)\nINNER JOIN str str_e\n    ON (STR.STR_STR_COD = STR_E.STR_COD)\nINNER JOIN cnv\n    ON (CNV_COD = AGM_CNV_COD)\nLEFT OUTER JOIN ctf ct1\n    ON (\n            ct1.ctf_cod = smk_ctf\n            AND ct1.ctf_tipo = smk_tipo\n            )\nLEFT OUTER JOIN emp\n    ON emp_cod = str_e.str_emp_cod\n\nWHERE AGM_DTMRC BETWEEN GETDATE() - 730 AND GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Usuarios INOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select \nusr_login as NM_USUARIO,\nusr_nome as DS_USUARIO,\nusr_status as IE_SITUACAO,\nusr_dt_alter_senha as DT_ATUALIZACAO,\n'INOB' AS DS_UNIDADE,\n'00363702000130' as CNPJ,\n'INOB' as MARCA,\n'Smart INOB' as BASE\nfrom usr",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Usuario",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Consulta INOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT \nRCL_SMM AS NR_SEQUENCIA,\nCONVERT(DATE,RCL_DTHR_ATUAL) AS DT_ATUALIZACAO,\nCONVERT(VARCHAR,RCL_DTHR_ATUAL,108) as HR_ATUALIZACAO,\n\nCONVERT(VARCHAR,CONVERT(VARCHAR,RCL_OSM_SERIE) + CONVERT(VARCHAR,RCL_OSM)) AS NR_ATENDIMENTO, \n\nRCL_MED AS CD_MEDICO,\nPSV_APEL AS NM_MEDICO,\n'' AS DS_RETORNO,\nCONVERT(VARCHAR,RCL_LAUDO_RTF) AS DS_CONDUTA,\nRCL_PAC AS CD_PESSOA_FISICA,\nCONVERT(VARCHAR,RCL_TXT) AS DS_DIAGNOSTICO,\n'INOB' AS DS_UNIDADE,\n'00363702000130' as CNPJ,\n'INOB' AS MARCA,\n'Smart INOB' as BASE\nFROM RCL\nINNER JOIN PSV ON PSV_COD = RCL_MED\n\nWHERE RCL_DTHR_ATUAL BETWEEN GETDATE() - 730 AND GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Consulta",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendas INOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT distinct agd_med AS CD_AGENDA \n    , 0 AS DS_AGENDA\n    , 0 CD_TIPO_AGENDA\n    , psv_cod AS CD_PESSOA_FISICA\n    , emp_cgc AS CNPJ\n    , '' AS DS_AREA_ATUACAO\n    , 'A' AS IE_SITUACAO,\n'Smart INOB' as BASE\n    -- , CASE \n    --     WHEN (agd_dt_reconstr IS not NULL and AGD_DT_GERA is not null)\n    --         THEN agd_dt_reconstr\n    --     WHEN (agd_dt_reconstr IS NULL and AGD_DT_GERA is not null)\n    --         THEN agd_dt_gera\n    --     ELSE AGD_DT_GERA\n    --     END AS DT_ATUALIZACAO\nFROM agd\nINNER JOIN PSV\n    ON agd_med = psv_cod\nINNER JOIN loc\n    ON loc_cod = agd_loc\nINNER JOIN str\n    ON str_cod = loc_str\nLEFT OUTER JOIN str str_e\n    ON str_e.str_cod = str.str_str_cod\nLEFT OUTER JOIN emp\n    ON emp_cod = str_e.str_emp_cod",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agenda",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Execute Pipeline IOF",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Atendimento INOB",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Agendamentos INOB",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Usuarios INOB",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Consulta INOB",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Agendas INOB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Geral Atendimentos IOF",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T13:01:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_HOSL_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Atendimento')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agendamento')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Usuario')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Consulta')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agenda')]",
				"[concat(variables('factoryId'), '/pipelines/Geral Atendimentos IOF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Geral Atendimentos IOF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Alimenta as informações das tabelas:\n\nAtendimento_ Unidade \nAgendamento_Unidade\nUsuarios_Unidade\nConsultas_Unidade\nAgendas Unidade\n\nPara extração de relatórios do call center.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Atendimento IOF",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT  pac_reg AS CD_PESSOA_FISICA\n    , rtrim(ltrim(pac_nome)) AS NM_PESSOA_FISICA\n    , convert(CHAR(10), osm_dthr, 121) AS DT_ENTRADA\n    , LEFT(CONVERT(VARCHAR(12), osm_dthr, 114),8) AS HR_ENTRADA\n    , smm_med AS NM_MEDICO\n    , osm_cnv AS CD_CONVENIO\n    , cnv_nome AS DS_CONVENIO\n    , convert(VARCHAR, (convert(VARCHAR, osm_serie) + convert(VARCHAR, osm_num))) AS NR_ATENDIMENTO\n    , emp_cgc AS CNPJ\n    , emp_nome_fantasia AS DS_UNIDADE\n    , emp_nome_fantasia AS MARCA\n    , 0 AS CD_PROCEDENCIA\n    , 'NAO ENCONTRADO' AS DS_PROCEDENCIA\n    , 'NAO ENCONTRADO' AS ID\n    , CONVERT(INT, DAY(osm_dthr)) AS DIA\n    , CONVERT(INT, MONTH(osm_dthr)) AS MES\n    , CONVERT(INT, YEAR(osm_dthr)) AS ANO,\n'Smart IOF' as BASE\nFROM osm\nINNER JOIN smm\n    ON smm_osm_serie = osm_serie\n        AND smm_osm = osm_num\nINNER JOIN pac\n    ON pac_reg = osm_pac\nINNER JOIN cnv\n    ON osm_cnv = cnv_cod\nINNER JOIN str\n    ON str_cod = osm_str\nINNER JOIN psv\n    ON psv_cod = osm_mreq\nLEFT OUTER JOIN str str_e\n    ON str.str_str_cod = str_e.str_cod\nLEFT OUTER JOIN emp\n    ON str_e.str_emp_cod = emp_cod\nWHERE 1 = 1\n    AND (\n        smm_pacote IS NULL\n        OR (smm_pacote = 'C')\n        )\n    AND smm_sfat NOT IN ('C')\n\nAND osm_dthr BETWEEN GETDATE() - 730 AND GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Atendimento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendamentos IOF",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT AGM_PAC AS CD_PESSOA_FISICA\n    , agm.agm_cnv_cod AS CD_CONVENIO\n    , emp_cgc AS CNPJ\n    , CONVERT(DATE, AGM_HINI) AS DATA_AGENDA\n    , LEFT(CONVERT(VARCHAR(12), agm_hini, 114), 8) AS HORA_AGENDA\n    , CASE AGM_ATEND\n        WHEN 'CRG'\n            THEN 'Cirurgia'\n        WHEN 'ASS'\n            THEN 'Consulta'\n        when '' then 'Consulta'\n        ELSE 'Outros'\n        END AS TIPO_AGENDA\n    , pac.PAC_NOME AS NM_PACIENTE\n    , smk.smk_nome AS DS_PROCEDIMENTO_PRINC\n    , ' ' DS_PROCEDIMENTO_ADIC\n    , 1 AS IE_QUANTIDADE\n    , USR_NOME AS NM_USUARIO\n    , psv_nome AS NM_MEDICO\n    , EMP_NOME_FANTASIA AS DS_UNIDADE\n    , EMP_NOME_FANTASIA AS MARCA\n    , CASE \n        WHEN AGM_STAT = 'A'\n            THEN 'Aberta'\n        WHEN AGM_STAT = 'E'\n            THEN 'Executada'\n        WHEN AGM_STAT = 'C'\n            THEN 'Cancelada'\n        WHEN AGM_STAT = 'B'\n            THEN 'Bloqueada'\n        END STATUS_AGENDA\n    , CONVERT(VARCHAR, convert(VARCHAR, AGM_OSM_SERIE) + convert(VARCHAR, AGM_OSM_NUM)) AS NR_ATENDIMENTO\n    , AGM_num AS NR_SEQUENCIA\n    , '' ID\n    , '' AS CD_PROCEDENCIA\n    , agm_proc AS DS_PROCEDENCIA\n    , agm.AGM_DTMRC AS DT_AGENDAMENTO\n    , CONVERT(INT, DAY(AGM_HINI)) AS DIA\n    , CONVERT(INT, MONTH(AGM_HINI)) AS MES\n    , CONVERT(INT, YEAR(AGM_HINI)) AS ANO\n    , ' ' DS_CLASSIFICACAO\n    , ' ' DS_AGRUPAMENTO\n    , agm.AGM_CANC_MOT_COD AS CD_MOTIVO_CANCELAMENTO\n    , agm.AGM_CANC_MOT_TIPO AS DS_MOTIVO_CANCELAMENTO\n    , agm_med AS CD_AGENDA,\n'Smart IOF' as BASE\nFROM agm\nINNER JOIN usr\n    ON (agm.agm_usr_login = usr.usr_login)\nINNER JOIN psv\n    ON (psv.psv_cod = agm.agm_med)\nINNER JOIN smk\n    ON (\n            agm_smk = smk_cod\n            AND agm_tpsmk = smk_tipo\n            )\nINNER JOIN pac\n    ON (pac_reg = agm_pac)\nINNER JOIN loc\n    ON (AGM_LOC = LOC_COD)\nINNER JOIN str\n    ON (LOC_STR = STR.STR_COD)\nINNER JOIN str str_e\n    ON (STR.STR_STR_COD = STR_E.STR_COD)\nINNER JOIN cnv\n    ON (CNV_COD = AGM_CNV_COD)\nLEFT OUTER JOIN ctf ct1\n    ON (\n            ct1.ctf_cod = smk_ctf\n            AND ct1.ctf_tipo = smk_tipo\n            )\nLEFT OUTER JOIN emp\n    ON emp_cod = str_e.str_emp_cod\nWHERE 1 = 1\n\nAND AGM_DTMRC BETWEEN GETDATE() - 730 AND GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Usuarios IOF",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select\nusr_login as NM_USUARIO,\nusr_nome as DS_USUARIO,\nusr_status as IE_SITUACAO,\nusr_dt_alter_senha as DT_ATUALIZACAO,\n'IOF' AS DS_UNIDADE,\n'40514432000135' as CNPJ,\n'IOF' as MARCA,\n'Smart IOF' as BASE\nfrom usr",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Usuario",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Consulta IOF",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT\nRCL_SMM AS NR_SEQUENCIA,\nCONVERT(DATE,RCL_DTHR_ATUAL) AS DT_ATUALIZACAO,\nCONVERT(VARCHAR,RCL_DTHR_ATUAL,108) as HR_ATUALIZACAO,\n\nCONVERT(VARCHAR,CONVERT(VARCHAR,RCL_OSM_SERIE) + CONVERT(VARCHAR,RCL_OSM)) AS NR_ATENDIMENTO, \n\nRCL_MED AS CD_MEDICO,\nPSV_APEL AS NM_MEDICO,\n'' AS DS_RETORNO,\nCONVERT(VARCHAR,RCL_LAUDO_RTF) AS DS_CONDUTA,\nRCL_PAC AS CD_PESSOA_FISICA,\nCONVERT(VARCHAR,RCL_TXT) AS DS_DIAGNOSTICO,\n'IOF' AS DS_UNIDADE,\n'40514432000135' as CNPJ,\n'IOF' AS MARCA,\n'Smart IOF' as BASE\nFROM RCL\nINNER JOIN PSV ON PSV_COD = RCL_MED\n\nWHERE RCL_DTHR_ATUAL BETWEEN GETDATE() - 730 AND GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Consulta",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendas IOF",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT distinct agd_med AS CD_AGENDA \n    , 0 AS DS_AGENDA\n    , 0 CD_TIPO_AGENDA\n    , psv_cod AS CD_PESSOA_FISICA\n    , emp_cgc AS CNPJ\n    , '' AS DS_AREA_ATUACAO\n    , 'A' AS IE_SITUACAO,\n'Smart IOF' as BASE\n    -- , CASE \n    --     WHEN (agd_dt_reconstr IS not NULL and AGD_DT_GERA is not null)\n    --         THEN agd_dt_reconstr\n    --     WHEN (agd_dt_reconstr IS NULL and AGD_DT_GERA is not null)\n    --         THEN agd_dt_gera\n    --     ELSE AGD_DT_GERA\n    --     END AS DT_ATUALIZACAO\nFROM agd\nINNER JOIN PSV\n    ON agd_med = psv_cod\nINNER JOIN loc\n    ON loc_cod = agd_loc\nINNER JOIN str\n    ON str_cod = loc_str\nLEFT OUTER JOIN str str_e\n    ON str_e.str_cod = str.str_str_cod\nLEFT OUTER JOIN emp\n    ON emp_cod = str_e.str_emp_cod",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agenda",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Execute Pipeline Itabuna",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Atendimento IOF",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Agendamentos IOF",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Usuarios IOF",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Consulta IOF",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Agendas IOF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Geral Atendimentos Itabuna",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T13:01:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_IOF_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Atendimento')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agendamento')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Usuario')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Consulta')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agenda')]",
				"[concat(variables('factoryId'), '/pipelines/Geral Atendimentos Itabuna')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Geral Atendimentos Itabuna')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Alimenta as informações das tabelas:\n\nAtendimento_ Unidade \nAgendamento_Unidade\nUsuarios_Unidade\nConsultas_Unidade\nAgendas Unidade\n\nPara extração de relatórios do call center.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Atendimento Itabuna",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "EXEC sp_getAzureAtendimentos 730",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Atendimento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendamentos Itabuna",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT AGM_PAC AS CD_PESSOA_FISICA\n    , agm.agm_cnv_cod AS CD_CONVENIO\n    , emp_cgc AS CNPJ\n    , CONVERT(DATE, AGM_HINI) AS DATA_AGENDA\n    , LEFT(CONVERT(VARCHAR(12), agm_hini, 114), 8) AS HORA_AGENDA\n    , CASE AGM_ATEND\n        WHEN 'CRG'\n            THEN 'Cirurgia'\n        WHEN 'ASS'\n            THEN 'Consulta'\n        when '' then 'Consulta'\n        ELSE 'Outros'\n        END AS TIPO_AGENDA\n    , pac.PAC_NOME AS NM_PACIENTE\n    , smk.smk_nome AS DS_PROCEDIMENTO_PRINC\n    , ' ' DS_PROCEDIMENTO_ADIC\n    , 1 AS IE_QUANTIDADE\n    , USR_NOME AS NM_USUARIO\n    , psv_nome AS NM_MEDICO\n    , EMP_NOME_FANTASIA AS DS_UNIDADE\n    , EMP_NOME_FANTASIA AS MARCA\n    , CASE \n        WHEN AGM_STAT = 'A'\n            THEN 'Aberta'\n        WHEN AGM_STAT = 'E'\n            THEN 'Executada'\n        WHEN AGM_STAT = 'C'\n            THEN 'Cancelada'\n        WHEN AGM_STAT = 'B'\n            THEN 'Bloqueada'\n        END STATUS_AGENDA\n    , CONVERT(VARCHAR, convert(VARCHAR, AGM_OSM_SERIE) + convert(VARCHAR, AGM_OSM_NUM)) AS NR_ATENDIMENTO\n    , AGM_num AS NR_SEQUENCIA\n    , '' ID\n    , '' AS CD_PROCEDENCIA\n    , agm_proc AS DS_PROCEDENCIA\n    , agm.AGM_DTMRC AS DT_AGENDAMENTO\n    , CONVERT(INT, DAY(AGM_HINI)) AS DIA\n    , CONVERT(INT, MONTH(AGM_HINI)) AS MES\n    , CONVERT(INT, YEAR(AGM_HINI)) AS ANO\n    , ' ' DS_CLASSIFICACAO\n    , ' ' DS_AGRUPAMENTO\n    , agm.AGM_CANC_MOT_COD AS CD_MOTIVO_CANCELAMENTO\n    , agm.AGM_CANC_MOT_TIPO AS DS_MOTIVO_CANCELAMENTO\n    , agm_med AS CD_AGENDA,\n'Smart DH Itabuna' as BASE\nFROM agm\nINNER JOIN usr\n    ON (agm.agm_usr_login = usr.usr_login)\nINNER JOIN psv\n    ON (psv.psv_cod = agm.agm_med)\nINNER JOIN smk\n    ON (\n            agm_smk = smk_cod\n            AND agm_tpsmk = smk_tipo\n            )\nINNER JOIN pac\n    ON (pac_reg = agm_pac)\nINNER JOIN loc\n    ON (AGM_LOC = LOC_COD)\nINNER JOIN str\n    ON (LOC_STR = STR.STR_COD)\nINNER JOIN str str_e\n    ON (STR.STR_STR_COD = STR_E.STR_COD)\nINNER JOIN cnv\n    ON (CNV_COD = AGM_CNV_COD)\nLEFT OUTER JOIN ctf ct1\n    ON (\n            ct1.ctf_cod = smk_ctf\n            AND ct1.ctf_tipo = smk_tipo\n            )\nLEFT OUTER JOIN emp\n    ON emp_cod = str_e.str_emp_cod\n\nWHERE AGM_DTMRC BETWEEN GETDATE() - 730 AND GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Usuarios Itabuna",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select\nusr_login as NM_USUARIO,\nusr_nome as DS_USUARIO,\nusr_status as IE_SITUACAO,\nusr_dt_alter_senha as DT_ATUALIZACAO,\n'Dayhorc ITB' AS DS_UNIDADE,\n'13188370000146' as CNPJ,\n'DH' as MARCA,\n'Smart DH Itabuna' as BASE\nfrom usr",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Usuario",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Consulta Itabuna",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT\nRCL_SMM AS NR_SEQUENCIA,\nCONVERT(DATE,RCL_DTHR_ATUAL) AS DT_ATUALIZACAO,\nCONVERT(VARCHAR,RCL_DTHR_ATUAL,108) as HR_ATUALIZACAO,\n\nCONVERT(VARCHAR,CONVERT(VARCHAR,RCL_OSM_SERIE) + CONVERT(VARCHAR,RCL_OSM)) AS NR_ATENDIMENTO, \n\nRCL_MED AS CD_MEDICO,\nPSV_APEL AS NM_MEDICO,\n'' AS DS_RETORNO,\nCONVERT(VARCHAR,RCL_LAUDO_RTF) AS DS_CONDUTA,\nRCL_PAC AS CD_PESSOA_FISICA,\nCONVERT(VARCHAR,RCL_TXT) AS DS_DIAGNOSTICO,\n'Dayhorc ITB' AS DS_UNIDADE,\n'13188370000146' as CNPJ,\n'DH' AS MARCA,\n'Smart DH Itabuna' as BASE\nFROM RCL\nINNER JOIN PSV ON PSV_COD = RCL_MED\n\nWHERE RCL_DTHR_ATUAL BETWEEN GETDATE() - 730 AND GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Consulta",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendas Itabuna",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT distinct agd_med AS CD_AGENDA \n    , 0 AS DS_AGENDA\n    , 0 CD_TIPO_AGENDA\n    , psv_cod AS CD_PESSOA_FISICA\n    , emp_cgc AS CNPJ\n    , '' AS DS_AREA_ATUACAO\n    , 'A' AS IE_SITUACAO,\n'Smart DH Itabuna' as BASE\n    -- , CASE \n    --     WHEN (agd_dt_reconstr IS not NULL and AGD_DT_GERA is not null)\n    --         THEN agd_dt_reconstr\n    --     WHEN (agd_dt_reconstr IS NULL and AGD_DT_GERA is not null)\n    --         THEN agd_dt_gera\n    --     ELSE AGD_DT_GERA\n    --     END AS DT_ATUALIZACAO\nFROM agd\nINNER JOIN PSV\n    ON agd_med = psv_cod\nINNER JOIN loc\n    ON loc_cod = agd_loc\nINNER JOIN str\n    ON str_cod = loc_str\nLEFT OUTER JOIN str str_e\n    ON str_e.str_cod = str.str_str_cod\nLEFT OUTER JOIN emp\n    ON emp_cod = str_e.str_emp_cod",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agenda",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Execute Pipeline Oftalmoclin",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Atendimento Itabuna",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Agendamentos Itabuna",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Usuarios Itabuna",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Consulta Itabuna",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Agendas Itabuna",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Geral Atendimentos Oftalmoclin",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-10-23T20:59:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_ITABUNA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Atendimento')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agendamento')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Usuario')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Consulta')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agenda')]",
				"[concat(variables('factoryId'), '/pipelines/Geral Atendimentos Oftalmoclin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Geral Atendimentos Oftalmoclin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Alimenta as informações das tabelas:\n\nAtendimento_ Unidade \nAgendamento_Unidade\nUsuarios_Unidade\nConsultas_Unidade\nAgendas Unidade\n\nPara extração de relatórios do call center.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Atendimento Oftalmoclin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT pac_reg AS CD_PESSOA_FISICA\n    , rtrim(ltrim(pac_nome)) AS NM_PESSOA_FISICA\n    , convert(CHAR(10), osm_dthr, 121) AS DT_ENTRADA\n    , LEFT(CONVERT(VARCHAR(12), osm_dthr, 114),8) AS HR_ENTRADA\n    , smm_med AS NM_MEDICO\n    , osm_cnv AS CD_CONVENIO\n    , cnv_nome AS DS_CONVENIO\n    , convert(VARCHAR, (convert(VARCHAR, osm_serie) + convert(VARCHAR, osm_num))) AS NR_ATENDIMENTO\n    , emp_cgc AS CNPJ\n    , emp_nome_fantasia AS DS_UNIDADE\n    , emp_nome_fantasia AS MARCA\n    , 0 AS CD_PROCEDENCIA\n    , 'NAO ENCONTRADO' AS DS_PROCEDENCIA\n    , 'NAO ENCONTRADO' AS ID\n    , CONVERT(INT, DAY(osm_dthr)) AS DIA\n    , CONVERT(INT, MONTH(osm_dthr)) AS MES\n    , CONVERT(INT, YEAR(osm_dthr)) AS ANO,\n'Smart Oftalmoclin' as BASE\nFROM osm\nINNER JOIN smm\n    ON smm_osm_serie = osm_serie\n        AND smm_osm = osm_num\nINNER JOIN pac\n    ON pac_reg = osm_pac\nINNER JOIN cnv\n    ON osm_cnv = cnv_cod\nINNER JOIN str\n    ON str_cod = osm_str\nINNER JOIN psv\n    ON psv_cod = osm_mreq\nLEFT OUTER JOIN str str_e\n    ON str.str_str_cod = str_e.str_cod\nLEFT OUTER JOIN emp\n    ON str_e.str_emp_cod = emp_cod\nWHERE 1 = 1\n    AND (\n        smm_pacote IS NULL\n        OR (smm_pacote = 'C')\n        )\n    AND smm_sfat NOT IN ('C')\n\nAND osm_dthr BETWEEN GETDATE() - 730 AND GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Atendimento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendamentos Oftalmoclin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT AGM_PAC AS CD_PESSOA_FISICA\n    , agm.agm_cnv_cod AS CD_CONVENIO\n    , emp_cgc AS CNPJ\n    , CONVERT(DATE, AGM_HINI) AS DATA_AGENDA\n    , LEFT(CONVERT(VARCHAR(12), agm_hini, 114), 8) AS HORA_AGENDA\n    , CASE AGM_ATEND\n        WHEN 'CRG'\n            THEN 'Cirurgia'\n        WHEN 'ASS'\n            THEN 'Consulta'\n        when '' then 'Consulta'\n        ELSE 'Outros'\n        END AS TIPO_AGENDA\n    , pac.PAC_NOME AS NM_PACIENTE\n    , smk.smk_nome AS DS_PROCEDIMENTO_PRINC\n    , ' ' DS_PROCEDIMENTO_ADIC\n    , 1 AS IE_QUANTIDADE\n    , USR_NOME AS NM_USUARIO\n    , psv_nome AS NM_MEDICO\n    , EMP_NOME_FANTASIA AS DS_UNIDADE\n    , EMP_NOME_FANTASIA AS MARCA\n    , CASE \n        WHEN AGM_STAT = 'A'\n            THEN 'Aberta'\n        WHEN AGM_STAT = 'E'\n            THEN 'Executada'\n        WHEN AGM_STAT = 'C'\n            THEN 'Cancelada'\n        WHEN AGM_STAT = 'B'\n            THEN 'Bloqueada'\n        END STATUS_AGENDA\n    , CONVERT(VARCHAR, convert(VARCHAR, AGM_OSM_SERIE) + convert(VARCHAR, AGM_OSM_NUM)) AS NR_ATENDIMENTO\n    , AGM_num AS NR_SEQUENCIA\n    , '' ID\n    , '' AS CD_PROCEDENCIA\n    , agm_proc AS DS_PROCEDENCIA\n    , agm.AGM_DTMRC AS DT_AGENDAMENTO\n    , CONVERT(INT, DAY(AGM_HINI)) AS DIA\n    , CONVERT(INT, MONTH(AGM_HINI)) AS MES\n    , CONVERT(INT, YEAR(AGM_HINI)) AS ANO\n    , ' ' DS_CLASSIFICACAO\n    , ' ' DS_AGRUPAMENTO\n    , agm.AGM_CANC_MOT_COD AS CD_MOTIVO_CANCELAMENTO\n    , agm.AGM_CANC_MOT_TIPO AS DS_MOTIVO_CANCELAMENTO\n    , agm_med AS CD_AGENDA,\n'Smart Oftalmoclin' as BASE\nFROM agm\nINNER JOIN usr\n    ON (agm.agm_usr_login = usr.usr_login)\nINNER JOIN psv\n    ON (psv.psv_cod = agm.agm_med)\nINNER JOIN smk\n    ON (\n            agm_smk = smk_cod\n            AND agm_tpsmk = smk_tipo\n            )\nINNER JOIN pac\n    ON (pac_reg = agm_pac)\nINNER JOIN loc\n    ON (AGM_LOC = LOC_COD)\nINNER JOIN str\n    ON (LOC_STR = STR.STR_COD)\nINNER JOIN str str_e\n    ON (STR.STR_STR_COD = STR_E.STR_COD)\nINNER JOIN cnv\n    ON (CNV_COD = AGM_CNV_COD)\nLEFT OUTER JOIN ctf ct1\n    ON (\n            ct1.ctf_cod = smk_ctf\n            AND ct1.ctf_tipo = smk_tipo\n            )\nLEFT OUTER JOIN emp\n    ON emp_cod = str_e.str_emp_cod\n\nWHERE AGM_DTMRC BETWEEN GETDATE() - 730 AND GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Usuarios Oftalmoclin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select\nusr_login as NM_USUARIO,\nusr_nome as DS_USUARIO,\nusr_status as IE_SITUACAO,\nusr_dt_alter_senha as DT_ATUALIZACAO,\n'OFTALMOCLIN Hospital de Olhos da Bahia' AS DS_UNIDADE,\n'14307763000194' as CNPJ,\n'OFTALMOCLIN' as MARCA,\n'Smart Oftalmoclin' as BASE\nfrom usr",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Usuario",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Consulta Oftalmoclin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT\nRCL_SMM AS NR_SEQUENCIA,\nCONVERT(DATE,RCL_DTHR_ATUAL) AS DT_ATUALIZACAO,\nCONVERT(VARCHAR,RCL_DTHR_ATUAL,108) as HR_ATUALIZACAO,\n\nCONVERT(VARCHAR,CONVERT(VARCHAR,RCL_OSM_SERIE) + CONVERT(VARCHAR,RCL_OSM)) AS NR_ATENDIMENTO, \n\nRCL_MED AS CD_MEDICO,\nPSV_APEL AS NM_MEDICO,\n'' AS DS_RETORNO,\nCONVERT(VARCHAR,RCL_LAUDO_RTF) AS DS_CONDUTA,\nRCL_PAC AS CD_PESSOA_FISICA,\nCONVERT(VARCHAR,RCL_TXT) AS DS_DIAGNOSTICO,\n'OFTALMOCLIN Hospital de Olhos da Bahia' AS DS_UNIDADE,\n'14307763000194' as CNPJ,\n'IOF' AS MARCA,\n'Smart Oftalmoclin' as BASE\nFROM RCL\nINNER JOIN PSV ON PSV_COD = RCL_MED\n\nWHERE RCL_DTHR_ATUAL BETWEEN GETDATE() - 730 AND GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Consulta",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendas Oftalmoclin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT distinct agd_med AS CD_AGENDA \n    , 0 AS DS_AGENDA\n    , 0 CD_TIPO_AGENDA\n    , psv_cod AS CD_PESSOA_FISICA\n    , emp_cgc AS CNPJ\n    , '' AS DS_AREA_ATUACAO\n    , 'A' AS IE_SITUACAO,\n'Smart Oftalmoclin' as BASE\n    -- , CASE \n    --     WHEN (agd_dt_reconstr IS not NULL and AGD_DT_GERA is not null)\n    --         THEN agd_dt_reconstr\n    --     WHEN (agd_dt_reconstr IS NULL and AGD_DT_GERA is not null)\n    --         THEN agd_dt_gera\n    --     ELSE AGD_DT_GERA\n    --     END AS DT_ATUALIZACAO\nFROM agd\nINNER JOIN PSV\n    ON agd_med = psv_cod\nINNER JOIN loc\n    ON loc_cod = agd_loc\nINNER JOIN str\n    ON str_cod = loc_str\nLEFT OUTER JOIN str str_e\n    ON str_e.str_cod = str.str_str_cod\nLEFT OUTER JOIN emp\n    ON emp_cod = str_e.str_emp_cod",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agenda",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T13:01:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_Oftalmoclin_Prd_DataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Atendimento')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agendamento')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Usuario')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Consulta')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agenda')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Geral Atendimentos Sadalla')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Alimenta as informações das tabelas:\n\nAtendimento_ Unidade \nAgendamento_Unidade\nUsuarios_Unidade\nConsultas_Unidade\nAgendas Unidade\n\nPara extração de relatórios do call center.",
				"activities": [
					{
						"name": "Atendimento Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select pf.cd_pessoa_fisica, pf.nm_pessoa_fisica, \n\nto_char(at.dt_entrada,'yyyy-mm-dd') as dt_entrada,\nto_char(at.dt_entrada,'hh24:mi:ss') as hr_entrada, \n\nobter_nome_pf(at.cd_medico_resp) as nm_medico, c.cd_convenio, obter_nome_convenio(c.cd_convenio) AS ds_convenio, \nat.nr_atendimento,\ne.cd_cgc as CNPJ,\nnm_fantasia_estab DS_UNIDADE,\nem.nm_razao_social MARCA,\n\nat.cd_procedencia,\np.ds_procedencia,\n'NAO ENCONTRADO' as ID,\n\nto_char(at.dt_entrada,'dd') dia,\nto_char(at.dt_entrada,'mm') mes,\nto_char(at.dt_entrada,'yyyy') ano,\nto_char(at.dt_cancelamento, 'yyyy-mm-dd') dt_cancelamento,\nto_char(at.dt_atualizacao, 'yyyy-mm-dd') dt_atualizacao,\n'Tasy Delphi' as BASE\n\nfrom \natendimento_paciente at, \npessoa_fisica pf,\natend_categoria_convenio c,\nprocedencia p,\nestabelecimento e,\nempresa em\nwhere at.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand at.cd_procedencia = p.cd_procedencia (+)\nand at.nr_atendimento = c.nr_atendimento\nand at.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa\n\nAND at.dt_entrada between SYSDATE - 730 AND SYSDATE",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Atendimento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Consulta Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "-- Consulta Sadalla - Azure\n\nselect o.nr_sequencia as nr_sequencia, to_char(o.dt_atualizacao,'yyyy-mm-dd') as dt_atualizacao,\nto_char(o.dt_atualizacao,'hh24:mi:ss') as hr_atualizacao, \no.nr_atendimento, o.cd_profissional as cd_medico ,obter_nome_pf(o.cd_profissional) as nm_medico, r.ds_retorno, substr(o.ds_conduta,1,1000) as ds_conduta,\nobter_pessoa_atendimento(o.nr_atendimento, 'C') as cd_pessoa_fisica,\n\n(select unique d.cd_doenca ||' - '|| a.ds_doenca_cid\nfrom diagnostico_doenca d, \n     cid_doenca a\nwhere a.cd_doenca_cid = d.cd_doenca\nand d.nr_atendimento = o.nr_atendimento\nand d.nr_seq_interno = (select max(x.nr_seq_interno) from diagnostico_doenca x where x.nr_atendimento = d.nr_atendimento)) as ds_diagnostico,\n\nobter_nome_estab(obter_estab_atendimento(o.nr_atendimento)) as DS_UNIDADE,\n\ne.cd_cgc as cnpj,\n\n'SADALLA' as marca,\n'Tasy Delphi' as BASE\n\nfrom oft_consulta_medica o,\n     oft_retorno r,\n     estabelecimento e\nwhere o.nr_seq_retorno = r.nr_sequencia\nand o.nr_atendimento is not null\nand obter_estab_atendimento(o.nr_atendimento) = e.cd_estabelecimento\n\nand o.dt_atualizacao between SYSDATE - 730 AND SYSDATE",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Consulta",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendamento Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "-- Agendamento Sadalla - Azure\n\nselect a.cd_pessoa_fisica, \na.cd_convenio, \nobter_cnpj_estabelecimento(ag.cd_estabelecimento) as cnpj,\nto_char(a.dt_agenda, 'yyyy-mm-dd') as data_agenda,\nto_char(a.dt_agenda, 'hh24:mi:ss') as hora_agenda,\n'Consulta' as tipo_agenda,\npf.nm_pessoa_fisica as nm_paciente,\nobter_desc_procedimento(10502, 1) as ds_procedimento_princ,\n'' ds_procedimento_adic,\n1 as ie_quantidade,\nobter_nome_usuario(a.nm_usuario_origem) as nm_usuario,\nobter_nome_pf(ag.cd_pessoa_fisica) as nm_medico,\nnm_fantasia_estab DS_UNIDADE,\nem.nm_razao_social MARCA,\nobter_valor_dominio(83,a.ie_status_agenda) as status_agenda,\na.nr_atendimento,\na.nr_sequencia,\n'NAO ENCONTRADO' as ID,\na.cd_procedencia,\np.ds_procedencia,\nto_char(a.dt_agendamento, 'yyyy-mm-dd') dt_agendamento,\n\nto_char(a.dt_agenda,'dd') dia,\nto_char(a.dt_agenda,'mm') mes,\nto_char(a.dt_agenda,'yyyy') ano,\nac.ds_classificacao ,\naa.ds_agrupamento ds_agrupamento,\na.cd_motivo_cancelamento,\nsubstr(obter_ds_motivo_status(a.nr_sequencia, a.cd_agenda),1,200) as ds_motivo_cancelamento,\na.cd_agenda,\n\nto_char(a.dt_atualizacao, 'yyyy-mm-dd') dt_atualizacao,\n'Tasy Delphi' as BASE\n\nfrom agenda_consulta a,\n     agenda ag,\n     pessoa_fisica pf,\n     procedencia p,\n     agenda_classif ac,\n     agrupamento_agenda aa,\n     estabelecimento e,\n     empresa em\nwhere a.cd_agenda = ag.cd_agenda\nand a.cd_pessoa_fisica = pf.cd_pessoa_fisica (+)\nand a.cd_procedencia = p.cd_procedencia(+)\nand a.ie_classif_agenda  = ac.cd_classificacao(+)\nand ag.nr_seq_agrupamento = aa.nr_sequencia (+)\nand ag.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa\nand a.cd_pessoa_fisica is not null\nand a.dt_agendamento between SYSDATE - 730 AND SYSDATE",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Clear Base",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Usuarios Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select u.nm_usuario, \nu.ds_usuario, \nu.ie_situacao, \nto_char(u.dt_atualizacao, 'yyyy-mm-dd') dt_atualizacao,\nobter_nome_estabelecimento(u.cd_estabelecimento) as DS_UNIDADE,\ne.cd_cgc as CNPJ,\nobter_nome_empresa(obter_empresa_estab(u.cd_estabelecimento)) as Marca,\n'Tasy Delphi' as BASE\nfrom usuario u,\n     empresa em,\n     estabelecimento e\nwhere u.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Usuario",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendas Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT A.CD_AGENDA, A.DS_AGENDA, A.CD_TIPO_AGENDA, A.CD_PESSOA_FISICA, E.CD_CGC as CNPJ, (SELECT X.DS_AREA_ATUACAO FROM AREA_ATUACAO_MEDICA X\nWHERE X.NR_SEQUENCIA = A.NR_SEQ_AREA_ATUACAO) AS DS_AREA_ATUACAO, A.IE_SITUACAO,\nto_char(A.DT_ATUALIZACAO, 'yyyy-mm-dd') DT_ATUALIZACAO,\n'Tasy Delphi' as BASE\nFROM AGENDA A,\n     ESTABELECIMENTO E\nWHERE A.CD_ESTABELECIMENTO = E.CD_ESTABELECIMENTO",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"enableSkipIncompatibleRow": true
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agenda",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Clear Base",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[CLEARBASEATENDIMENTOUNIDADES]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-12-09T17:32:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Atendimento')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Consulta')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agendamento')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Usuario')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agenda')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Gerar Base CNPJ')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Busca dados",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(1,1)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Copy to CSV CNPJ",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": "    SELECT DISTINCT \n        a.CGC_CONV\n    FROM STG.BI_CNPJ_CONVENIO a\n    WHERE NOT EXISTS (SELECT X.CGC_CONVENIO FROM dw.DimConvenioCGC X WHERE X.CGC_CONVENIO = a.CGC_CONV)\n    AND LEN(A.CGC_CONV) = 14",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "FileServerWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DW_ORIGEM",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "CSV_CNPJ_SYS",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Busca dados",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "    SELECT DISTINCT \n        a.CGC_CONV\n    FROM STG.BI_CNPJ_CONVENIO a\n    WHERE NOT EXISTS (SELECT X.CGC_CONVENIO FROM dw.DimConvenioCGC X WHERE X.CGC_CONVENIO = a.CGC_CONV)\n    AND LEN(A.CGC_CONV) = 14",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DW_ORIGEM",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CNPJ"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-20T18:04:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DW_ORIGEM')]",
				"[concat(variables('factoryId'), '/datasets/CSV_CNPJ_SYS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Gerar Base Consulta CNPJ DB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CNPJ CONV SMART - DH ITG",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT\nreplace(replace(EMP.emp_cgc,'.',''),'-','') CGC_CONV\n--,EMP.emp_raz_soc\n-- ,EMP.emp_nome_fantasia\nFROM CNV (NOLOCK)\ninner join dbo.emp     EMP             (nolock)        on EMP.emp_cod = CNV.cnv_emp_cod\nWHERE len(replace(replace(EMP.emp_cgc,'.',''),'-','')) = 14 and EMP.EMP_CGC NOT IN ('00000000000000')\n-- WHERE UPPER(CNV_CONTRATO) = 'CITO - PF       '\n-- WHERE cnv_nome LIKE '%BRADESCO%'\n-- WHERE CNV_CONTRATO = 'PJ              '\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE STG.BI_CNPJ_CONVENIO",
								"writeBehavior": "insert",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CGC_CONV",
											"type": "String"
										},
										"sink": {
											"name": "CGC_CONV",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_OUT_CNPJ_CONVENIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CNPJ CONV SMART - DH ITB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CNPJ CONV SMART - DH ITG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT\nreplace(replace(EMP.emp_cgc,'.',''),'-','') CGC_CONV\n--,EMP.emp_raz_soc\n-- ,EMP.emp_nome_fantasia\nFROM CNV (NOLOCK)\ninner join dbo.emp     EMP             (nolock)        on EMP.emp_cod = CNV.cnv_emp_cod\nWHERE len(replace(replace(EMP.emp_cgc,'.',''),'-','')) = 14 and EMP.EMP_CGC NOT IN ('00000000000000')\n-- WHERE UPPER(CNV_CONTRATO) = 'CITO - PF       '\n-- WHERE cnv_nome LIKE '%BRADESCO%'\n-- WHERE CNV_CONTRATO = 'PJ              '\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CGC_CONV",
											"type": "String"
										},
										"sink": {
											"name": "CGC_CONV",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_OUT_CNPJ_CONVENIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CNPJ CONV SMART - DH IOF",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CNPJ CONV SMART - DH ITB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT\nreplace(replace(EMP.emp_cgc,'.',''),'-','') CGC_CONV\n--,EMP.emp_raz_soc\n-- ,EMP.emp_nome_fantasia\nFROM CNV (NOLOCK)\ninner join dbo.emp     EMP             (nolock)        on EMP.emp_cod = CNV.cnv_emp_cod\nWHERE len(replace(replace(EMP.emp_cgc,'.',''),'-','')) = 14 and EMP.EMP_CGC NOT IN ('00000000000000')\n-- WHERE UPPER(CNV_CONTRATO) = 'CITO - PF       '\n-- WHERE cnv_nome LIKE '%BRADESCO%'\n-- WHERE CNV_CONTRATO = 'PJ              '\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CGC_CONV",
											"type": "String"
										},
										"sink": {
											"name": "CGC_CONV",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_OUT_CNPJ_CONVENIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CNPJ CONV SMART - Oftalmoclin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CNPJ CONV SMART - DH IOF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT\nreplace(replace(EMP.emp_cgc,'.',''),'-','') CGC_CONV\n--,EMP.emp_raz_soc\n-- ,EMP.emp_nome_fantasia\nFROM CNV (NOLOCK)\ninner join dbo.emp     EMP             (nolock)        on EMP.emp_cod = CNV.cnv_emp_cod\nWHERE len(replace(replace(EMP.emp_cgc,'.',''),'-','')) = 14 and EMP.EMP_CGC NOT IN ('00000000000000')\n-- WHERE UPPER(CNV_CONTRATO) = 'CITO - PF       '\n-- WHERE cnv_nome LIKE '%BRADESCO%'\n-- WHERE CNV_CONTRATO = 'PJ              '\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CGC_CONV",
											"type": "String"
										},
										"sink": {
											"name": "CGC_CONV",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_OUT_CNPJ_CONVENIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CNPJ CONV HTML",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CNPJ CONV SMART - HOSL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT \n    A.CD_CGC    AS CGC_CONV\nFROM CONVENIO A",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_OUT_CNPJ_CONVENIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CNPJ CONV DELPHI",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CNPJ CONV HTML",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT \n    A.CD_CGC    AS CGC_CONV\nFROM CONVENIO A",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_OUT_CNPJ_CONVENIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CNPJ CONV SMART - HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CNPJ CONV SMART - Oftalmoclin",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT\nreplace(replace(EMP.emp_cgc,'.',''),'-','') CGC_CONV\n--,EMP.emp_raz_soc\n-- ,EMP.emp_nome_fantasia\nFROM CNV (NOLOCK)\ninner join dbo.emp     EMP             (nolock)        on EMP.emp_cod = CNV.cnv_emp_cod\nWHERE len(replace(replace(EMP.emp_cgc,'.',''),'-','')) = 14 and EMP.EMP_CGC NOT IN ('00000000000000')\n-- WHERE UPPER(CNV_CONTRATO) = 'CITO - PF       '\n-- WHERE cnv_nome LIKE '%BRADESCO%'\n-- WHERE CNV_CONTRATO = 'PJ              '\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"tableOption": "autoCreate"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CGC_CONV",
											"type": "String"
										},
										"sink": {
											"name": "CGC_CONV",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_OUT_CNPJ_CONVENIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CNPJ"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-20T18:04:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_ITAIGARA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_OUT_CNPJ_CONVENIO')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITABUNA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_IOF_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_Oftalmoclin_Prd_DataSet')]",
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_HOSL_PrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Gerar Base Consulta')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT DISTINCT\nreplace(replace(EMP.emp_cgc,'.',''),'-','') CGC_CONV\n--,EMP.emp_raz_soc\n-- ,EMP.emp_nome_fantasia\nFROM CNV (NOLOCK)\ninner join dbo.emp     EMP             (nolock)        on EMP.emp_cod = CNV.cnv_emp_cod\nWHERE len(replace(replace(EMP.emp_cgc,'.',''),'-','')) = 14 and EMP.EMP_CGC NOT IN ('00000000000000')\n-- WHERE UPPER(CNV_CONTRATO) = 'CITO - PF       '\n-- WHERE cnv_nome LIKE '%BRADESCO%'\n-- WHERE CNV_CONTRATO = 'PJ              '\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "FileServerWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CSV_CNPJ_SYS",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CNPJ"
				},
				"annotations": [],
				"lastPublishTime": "2021-06-09T14:48:22Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_ITAIGARA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/CSV_CNPJ_SYS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historico Agentes por Dia NEXCORE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Start",
						"description": "Step added to paralellize execution",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Agentes por Dia CSI",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Usuario",
											"type": "String"
										},
										"sink": {
											"name": "Usuario",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Intervalo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recusas",
											"type": "String"
										},
										"sink": {
											"name": "Recusas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Internas_Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Transferencias",
											"type": "String"
										},
										"sink": {
											"name": "Transferencias",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "% Taxa de Contato",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_de_Contato",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Atendidas",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Internas_Recebidas",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Tempo Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Efetuadas",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Agente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Agente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Cliente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Cliente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Pausa",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Pausa",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Estouro",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Estouro",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Dispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Disponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Indispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Indisponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Logado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Logado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Deslogado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Deslogado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Falado x Logado",
											"type": "String"
										},
										"sink": {
											"name": "Falado_x_Logado"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "CSI_CSV_NC_AgentesPorDia_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_AgentesPorDia_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agentes por Dia HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Usuario",
											"type": "String"
										},
										"sink": {
											"name": "Usuario",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Intervalo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recusas",
											"type": "String"
										},
										"sink": {
											"name": "Recusas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Internas_Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Transferencias",
											"type": "String"
										},
										"sink": {
											"name": "Transferencias",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "% Taxa de Contato",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_de_Contato",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Atendidas",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Internas_Recebidas",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Tempo Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Efetuadas",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Agente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Agente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Cliente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Cliente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Pausa",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Pausa",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Estouro",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Estouro",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Dispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Disponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Indispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Indisponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Logado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Logado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Deslogado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Deslogado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Falado x Logado",
											"type": "String"
										},
										"sink": {
											"name": "Falado_x_Logado",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "HOB_CSV_NC_AgentesPorDia_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_AgentesPorDia_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agentes por Dia Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Usuario",
											"type": "String"
										},
										"sink": {
											"name": "Usuario",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Intervalo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recusas",
											"type": "String"
										},
										"sink": {
											"name": "Recusas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Internas_Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Transferencias",
											"type": "String"
										},
										"sink": {
											"name": "Transferencias",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "% Taxa de Contato",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_de_Contato",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Atendidas",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Internas_Recebidas",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Tempo Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Efetuadas",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Agente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Agente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Cliente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Cliente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Pausa",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Pausa",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Estouro",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Estouro",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Dispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Disponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Indispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Indisponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Logado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Logado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Deslogado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Deslogado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Falado x Logado",
											"type": "String"
										},
										"sink": {
											"name": "Falado_x_Logado",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "HOSAG_CSV_NC_AgentesPorDia_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_AgentesPorDia_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agentes por Dia INOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Usuario",
											"type": "String"
										},
										"sink": {
											"name": "Usuario",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Intervalo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recusas",
											"type": "String"
										},
										"sink": {
											"name": "Recusas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Internas_Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Transferencias",
											"type": "String"
										},
										"sink": {
											"name": "Transferencias",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "% Taxa de Contato",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_de_Contato",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Atendidas",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Internas_Recebidas",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Tempo Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Efetuadas",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Agente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Agente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Cliente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Cliente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Pausa",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Pausa",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Estouro",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Estouro",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Dispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Disponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Indispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Indisponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Logado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Logado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Deslogado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Deslogado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Falado x Logado",
											"type": "String"
										},
										"sink": {
											"name": "Falado_x_Logado",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "INOB_CSV_NC_AgentesPorDia_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_AgentesPorDia_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agentes por Dia HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Usuario",
											"type": "String"
										},
										"sink": {
											"name": "Usuario",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Intervalo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recusas",
											"type": "String"
										},
										"sink": {
											"name": "Recusas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Internas_Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Transferencias",
											"type": "String"
										},
										"sink": {
											"name": "Transferencias",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "% Taxa de Contato",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_de_Contato",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Atendidas",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Internas_Recebidas",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Tempo Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Efetuadas",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Agente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Agente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Cliente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Cliente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Pausa",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Pausa",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Estouro",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Estouro",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Dispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Disponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Indispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Indisponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Logado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Logado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Deslogado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Deslogado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Falado x Logado",
											"type": "String"
										},
										"sink": {
											"name": "Falado_x_Logado",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "HOSL_CSV_NC_AgentesPorDia_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_AgentesPorDia_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agentes por Dia DH",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Usuario",
											"type": "String"
										},
										"sink": {
											"name": "Usuario",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Intervalo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recusas",
											"type": "String"
										},
										"sink": {
											"name": "Recusas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Internas_Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Transferencias",
											"type": "String"
										},
										"sink": {
											"name": "Transferencias",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "% Taxa de Contato",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_de_Contato",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Atendidas",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Internas_Recebidas",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Tempo Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Efetuadas",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Agente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Agente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Cliente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Cliente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Pausa",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Pausa",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Estouro",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Estouro",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Dispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Disponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Indispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Indisponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Logado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Logado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Deslogado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Deslogado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Falado x Logado",
											"type": "String"
										},
										"sink": {
											"name": "Falado_x_Logado",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DH_CSV_NC_AgentesPorDia_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_AgentesPorDia_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento/Nexcore/Históricos"
				},
				"annotations": [],
				"lastPublishTime": "2019-12-05T20:44:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CSI_CSV_NC_AgentesPorDia_Temp')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_NC_AgentesPorDia_Temp')]",
				"[concat(variables('factoryId'), '/datasets/HOB_CSV_NC_AgentesPorDia_Temp')]",
				"[concat(variables('factoryId'), '/datasets/HOSAG_CSV_NC_AgentesPorDia_Temp')]",
				"[concat(variables('factoryId'), '/datasets/INOB_CSV_NC_AgentesPorDia_Temp')]",
				"[concat(variables('factoryId'), '/datasets/HOSL_CSV_NC_AgentesPorDia_Temp')]",
				"[concat(variables('factoryId'), '/datasets/DH_CSV_NC_AgentesPorDia_Temp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historico Agentes por Hora NEXCORE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Start",
						"description": "Step added to paralellize execution",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Agentes por Hora DH",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Usuario",
											"type": "String"
										},
										"sink": {
											"name": "Usuario",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Intervalo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recusas",
											"type": "String"
										},
										"sink": {
											"name": "Recusas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Internas_Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Transferencias",
											"type": "String"
										},
										"sink": {
											"name": "Transferencias",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "% Taxa de Contato",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_de_Contato",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Atendidas",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Internas_Recebidas",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Tempo Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Efetuadas",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Agente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Agente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Cliente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Cliente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Pausa",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Pausa",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Estouro",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Estouro",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Dispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Disponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Indispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Indisponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Logado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Logado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Deslogado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Deslogado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Falado x Logado",
											"type": "String"
										},
										"sink": {
											"name": "Falado_x_Logado",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DH_CSV_NC_AgentesPorHora_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_AgentesPorHora_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agentes por Hora CSI",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Usuario",
											"type": "String"
										},
										"sink": {
											"name": "Usuario",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Intervalo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recusas",
											"type": "String"
										},
										"sink": {
											"name": "Recusas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Internas_Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Transferencias",
											"type": "String"
										},
										"sink": {
											"name": "Transferencias",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "% Taxa de Contato",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_de_Contato",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Atendidas",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Internas_Recebidas",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Tempo Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Efetuadas",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Agente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Agente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Cliente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Cliente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Pausa",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Pausa",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Estouro",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Estouro",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Dispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Disponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Indispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Indisponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Logado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Logado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Deslogado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Deslogado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Falado x Logado",
											"type": "String"
										},
										"sink": {
											"name": "Falado_x_Logado",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "CSI_CSV_NC_AgentesPorHora_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_AgentesPorHora_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agentes por Hora Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Usuario",
											"type": "String"
										},
										"sink": {
											"name": "Usuario",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Intervalo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recusas",
											"type": "String"
										},
										"sink": {
											"name": "Recusas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Internas_Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Transferencias",
											"type": "String"
										},
										"sink": {
											"name": "Transferencias",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "% Taxa de Contato",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_de_Contato",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Atendidas",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Internas_Recebidas",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Tempo Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Efetuadas",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Agente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Agente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Cliente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Cliente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Pausa",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Pausa",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Estouro",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Estouro",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Dispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Disponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Indispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Indisponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Logado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Logado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Deslogado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Deslogado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Falado x Logado",
											"type": "String"
										},
										"sink": {
											"name": "Falado_x_Logado",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "HOSAG_CSV_NC_AgentesPorHora_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_AgentesPorHora_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agentes por Hora HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Usuario",
											"type": "String"
										},
										"sink": {
											"name": "Usuario",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Intervalo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recusas",
											"type": "String"
										},
										"sink": {
											"name": "Recusas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Internas_Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Transferencias",
											"type": "String"
										},
										"sink": {
											"name": "Transferencias",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "% Taxa de Contato",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_de_Contato",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Atendidas",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Internas_Recebidas",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Tempo Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Efetuadas",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Agente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Agente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Cliente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Cliente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Pausa",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Pausa",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Estouro",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Estouro",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Dispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Disponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Indispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Indisponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Logado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Logado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Deslogado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Deslogado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Falado x Logado",
											"type": "String"
										},
										"sink": {
											"name": "Falado_x_Logado",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "HOB_CSV_NC_AgentesPorHora_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_AgentesPorHora_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agentes por Hora INOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Usuario",
											"type": "String"
										},
										"sink": {
											"name": "Usuario",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Intervalo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recusas",
											"type": "String"
										},
										"sink": {
											"name": "Recusas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Internas_Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Transferencias",
											"type": "String"
										},
										"sink": {
											"name": "Transferencias",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "% Taxa de Contato",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_de_Contato",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Atendidas",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Internas_Recebidas",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Tempo Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Efetuadas",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Agente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Agente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Cliente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Cliente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Pausa",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Pausa",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Estouro",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Estouro",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Dispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Disponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Indispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Indisponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Logado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Logado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Deslogado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Deslogado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Falado x Logado",
											"type": "String"
										},
										"sink": {
											"name": "Falado_x_Logado",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "INOB_CSV_NC_AgentesPorHora_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_AgentesPorHora_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agentes por Hora HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Usuario",
											"type": "String"
										},
										"sink": {
											"name": "Usuario",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Intervalo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recusas",
											"type": "String"
										},
										"sink": {
											"name": "Recusas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Internas_Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Transferencias",
											"type": "String"
										},
										"sink": {
											"name": "Transferencias",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Efetuadas Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Efetuadas_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "% Taxa de Contato",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_de_Contato",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Atendidas",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Internas Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Internas_Recebidas",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Tempo Efetuadas",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Efetuadas",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Agente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Agente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Toque Cliente",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque_Cliente",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Pausa",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Pausa",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Estouro",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Estouro",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Dispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Disponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Indispon�vel",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Indisponivel",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Logado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Logado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Deslogado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Deslogado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Falado x Logado",
											"type": "String"
										},
										"sink": {
											"name": "Falado_x_Logado",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "HOSL_CSV_NC_AgentesPorHora_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_AgentesPorHora_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento/Nexcore/Históricos"
				},
				"annotations": [],
				"lastPublishTime": "2019-11-14T15:21:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DH_CSV_NC_AgentesPorHora_Temp')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_NC_AgentesPorHora_Temp')]",
				"[concat(variables('factoryId'), '/datasets/CSI_CSV_NC_AgentesPorHora_Temp')]",
				"[concat(variables('factoryId'), '/datasets/HOSAG_CSV_NC_AgentesPorHora_Temp')]",
				"[concat(variables('factoryId'), '/datasets/HOB_CSV_NC_AgentesPorHora_Temp')]",
				"[concat(variables('factoryId'), '/datasets/INOB_CSV_NC_AgentesPorHora_Temp')]",
				"[concat(variables('factoryId'), '/datasets/HOSL_CSV_NC_AgentesPorHora_Temp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historico Bilhetes NEXCORE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Start",
						"description": "Step added to paralellize execution",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Bilhete de ligacoes CSI",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Data",
											"type": "DateTime",
											"format": "dd/MM/yyyy"
										},
										"sink": {
											"name": "DATA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Hora",
											"type": "String"
										},
										"sink": {
											"name": "HORA",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Usu�rio",
											"type": "String"
										},
										"sink": {
											"name": "USUARIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tipo",
											"type": "String"
										},
										"sink": {
											"name": "TIPO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Origem",
											"type": "String"
										},
										"sink": {
											"name": "ORIGEM",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Destino",
											"type": "String"
										},
										"sink": {
											"name": "DESTINO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String"
										},
										"sink": {
											"name": "STATUS",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Centro de Custo",
											"type": "String"
										},
										"sink": {
											"name": "CENTRO_DE_CUSTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Tarifado",
											"type": "String"
										},
										"sink": {
											"name": "TEMPO_TARIFADO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Tempo Decorrido",
											"type": "String"
										},
										"sink": {
											"name": "TEMPO_DECORRIDO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Campanha",
											"type": "String"
										},
										"sink": {
											"name": "CAMPANHA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Fila",
											"type": "String"
										},
										"sink": {
											"name": "FILA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Unique ID",
											"type": "String"
										},
										"sink": {
											"name": "UNIQUE_ID",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Linked ID",
											"type": "String"
										},
										"sink": {
											"name": "LINKED_ID",
											"type": "Double"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "CSI_CSV_NC_Bilhete_Ligacoes_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_BilheteLigacoes_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Bilhete de ligacoes DH",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Data",
											"type": "DateTime",
											"format": "dd/MM/yyyy"
										},
										"sink": {
											"name": "DATA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Hora",
											"type": "String"
										},
										"sink": {
											"name": "HORA",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Usu�rio",
											"type": "String"
										},
										"sink": {
											"name": "USUARIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tipo",
											"type": "String"
										},
										"sink": {
											"name": "TIPO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Origem",
											"type": "String"
										},
										"sink": {
											"name": "ORIGEM",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Destino",
											"type": "String"
										},
										"sink": {
											"name": "DESTINO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String"
										},
										"sink": {
											"name": "STATUS",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Centro de Custo",
											"type": "String"
										},
										"sink": {
											"name": "CENTRO_DE_CUSTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Tarifado",
											"type": "String"
										},
										"sink": {
											"name": "TEMPO_TARIFADO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Tempo Decorrido",
											"type": "String"
										},
										"sink": {
											"name": "TEMPO_DECORRIDO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Campanha",
											"type": "String"
										},
										"sink": {
											"name": "CAMPANHA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Fila",
											"type": "String"
										},
										"sink": {
											"name": "FILA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Unique ID",
											"type": "String"
										},
										"sink": {
											"name": "UNIQUE_ID",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Linked ID",
											"type": "String"
										},
										"sink": {
											"name": "LINKED_ID",
											"type": "Double"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DH_CSV_NC_Bilhete_Ligacoes_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_BilheteLigacoes_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Bilhete de ligacoes CSI SADALLA",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Data",
											"type": "DateTime",
											"format": "dd/MM/yyyy"
										},
										"sink": {
											"name": "DATA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Hora",
											"type": "String"
										},
										"sink": {
											"name": "HORA",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Usu�rio",
											"type": "String"
										},
										"sink": {
											"name": "USUARIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tipo",
											"type": "String"
										},
										"sink": {
											"name": "TIPO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Origem",
											"type": "String"
										},
										"sink": {
											"name": "ORIGEM",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Destino",
											"type": "String"
										},
										"sink": {
											"name": "DESTINO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String"
										},
										"sink": {
											"name": "STATUS",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Centro de Custo",
											"type": "String"
										},
										"sink": {
											"name": "CENTRO_DE_CUSTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Tarifado",
											"type": "String"
										},
										"sink": {
											"name": "TEMPO_TARIFADO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Tempo Decorrido",
											"type": "String"
										},
										"sink": {
											"name": "TEMPO_DECORRIDO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Campanha",
											"type": "String"
										},
										"sink": {
											"name": "CAMPANHA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Fila",
											"type": "String"
										},
										"sink": {
											"name": "FILA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Unique ID",
											"type": "String"
										},
										"sink": {
											"name": "UNIQUE_ID",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Linked ID",
											"type": "String"
										},
										"sink": {
											"name": "LINKED_ID",
											"type": "Double"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "HOSL_CSV_NC_Bilhete_Ligacoes_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_BilheteLigacoes_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Bilhete de ligacoes HOBL2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Data",
											"type": "DateTime",
											"format": "dd/MM/yyyy"
										},
										"sink": {
											"name": "DATA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Hora",
											"type": "String"
										},
										"sink": {
											"name": "HORA",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Usu�rio",
											"type": "String"
										},
										"sink": {
											"name": "USUARIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tipo",
											"type": "String"
										},
										"sink": {
											"name": "TIPO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Origem",
											"type": "String"
										},
										"sink": {
											"name": "ORIGEM",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Destino",
											"type": "String"
										},
										"sink": {
											"name": "DESTINO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String"
										},
										"sink": {
											"name": "STATUS",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Centro de Custo",
											"type": "String"
										},
										"sink": {
											"name": "CENTRO_DE_CUSTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Tarifado",
											"type": "String"
										},
										"sink": {
											"name": "TEMPO_TARIFADO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Tempo Decorrido",
											"type": "String"
										},
										"sink": {
											"name": "TEMPO_DECORRIDO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Campanha",
											"type": "String"
										},
										"sink": {
											"name": "CAMPANHA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Fila",
											"type": "String"
										},
										"sink": {
											"name": "FILA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Unique ID",
											"type": "String"
										},
										"sink": {
											"name": "UNIQUE_ID",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Linked ID",
											"type": "String"
										},
										"sink": {
											"name": "LINKED_ID",
											"type": "Double"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "HOB_CSV_NC_Bilhete_Ligacoes_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_BilheteLigacoes_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Bilhete de ligacoes INOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Data",
											"type": "DateTime",
											"format": "dd/MM/yyyy"
										},
										"sink": {
											"name": "DATA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Hora",
											"type": "String"
										},
										"sink": {
											"name": "HORA",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Usu�rio",
											"type": "String"
										},
										"sink": {
											"name": "USUARIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tipo",
											"type": "String"
										},
										"sink": {
											"name": "TIPO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Origem",
											"type": "String"
										},
										"sink": {
											"name": "ORIGEM",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Destino",
											"type": "String"
										},
										"sink": {
											"name": "DESTINO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String"
										},
										"sink": {
											"name": "STATUS",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Centro de Custo",
											"type": "String"
										},
										"sink": {
											"name": "CENTRO_DE_CUSTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Tarifado",
											"type": "String"
										},
										"sink": {
											"name": "TEMPO_TARIFADO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Tempo Decorrido",
											"type": "String"
										},
										"sink": {
											"name": "TEMPO_DECORRIDO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Campanha",
											"type": "String"
										},
										"sink": {
											"name": "CAMPANHA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Fila",
											"type": "String"
										},
										"sink": {
											"name": "FILA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Unique ID",
											"type": "String"
										},
										"sink": {
											"name": "UNIQUE_ID",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Linked ID",
											"type": "String"
										},
										"sink": {
											"name": "LINKED_ID",
											"type": "Double"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "INOB_CSV_NC_Bilhete_Ligacoes_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_BilheteLigacoes_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Bilhete de ligacoes HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Data",
											"type": "DateTime",
											"format": "dd/MM/yyyy"
										},
										"sink": {
											"name": "DATA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "Hora",
											"type": "String"
										},
										"sink": {
											"name": "HORA",
											"type": "TimeSpan"
										}
									},
									{
										"source": {
											"name": "Usu�rio",
											"type": "String"
										},
										"sink": {
											"name": "USUARIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tipo",
											"type": "String"
										},
										"sink": {
											"name": "TIPO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Origem",
											"type": "String"
										},
										"sink": {
											"name": "ORIGEM",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Destino",
											"type": "String"
										},
										"sink": {
											"name": "DESTINO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Status",
											"type": "String"
										},
										"sink": {
											"name": "STATUS",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Centro de Custo",
											"type": "String"
										},
										"sink": {
											"name": "CENTRO_DE_CUSTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Tarifado",
											"type": "String"
										},
										"sink": {
											"name": "TEMPO_TARIFADO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Tempo Decorrido",
											"type": "String"
										},
										"sink": {
											"name": "TEMPO_DECORRIDO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Campanha",
											"type": "String"
										},
										"sink": {
											"name": "CAMPANHA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Fila",
											"type": "String"
										},
										"sink": {
											"name": "FILA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Unique ID",
											"type": "String"
										},
										"sink": {
											"name": "UNIQUE_ID",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Linked ID",
											"type": "String"
										},
										"sink": {
											"name": "LINKED_ID",
											"type": "Double"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "HOSAG_CSV_NC_Bilhete_Ligacoes_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_BilheteLigacoes_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento/Nexcore/Históricos"
				},
				"annotations": [],
				"lastPublishTime": "2019-11-13T13:27:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CSI_CSV_NC_Bilhete_Ligacoes_Temp')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_NC_BilheteLigacoes_Temp')]",
				"[concat(variables('factoryId'), '/datasets/DH_CSV_NC_Bilhete_Ligacoes_Temp')]",
				"[concat(variables('factoryId'), '/datasets/HOSL_CSV_NC_Bilhete_Ligacoes_Temp')]",
				"[concat(variables('factoryId'), '/datasets/HOB_CSV_NC_Bilhete_Ligacoes_Temp')]",
				"[concat(variables('factoryId'), '/datasets/INOB_CSV_NC_Bilhete_Ligacoes_Temp')]",
				"[concat(variables('factoryId'), '/datasets/HOSAG_CSV_NC_Bilhete_Ligacoes_Temp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historico Filas por Hora NEXCORE')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Start",
						"description": "Step added to paralellize execution",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Filas por Hora CSI",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Fila",
											"type": "String"
										},
										"sink": {
											"name": "Fila",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Intervalo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Atendidas Ate NS",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas_Ate_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Atendidas Apos NS",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas_Apos_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos Ate NS",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos_Ate_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos Apos NS",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos_Apos_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos Anuncio Inicial",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos_Anuncio_Inicial",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Timeout",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Timeout",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Fila Cheia",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Fila_Cheia",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Fila Vazia",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Fila_Vazia",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Fila Sem Ags. Disp.",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Fila_Sem_Ags_Disp",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Caixa Postal",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Caixa_Postal",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario Antes",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario_Antes",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario_Intervalo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario Depois",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario_Depois",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Total Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Total_Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Callback Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Callback_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Callback Nao Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Callback_Nao_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Callback",
											"type": "String"
										},
										"sink": {
											"name": "Callback",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Tempo Toque",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Pausa ACW",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Pausa_ACW",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Produtivo AHT",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Produtivo_AHT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Nivel Servico",
											"type": "String"
										},
										"sink": {
											"name": "Nivel_Servico",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Taxa Atendimento",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_Atendimento",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Taxa Abandono",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_Abandono",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Espera",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Espera",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio para Atender",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_para_Atender",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total para Atender",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_para_Atender",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio para Abandono",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_para_Abandono",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total para Abandono",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_para_Abandono",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total Espera",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_Espera",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Agentes Logados - Minimo",
											"type": "String"
										},
										"sink": {
											"name": "Agentes_Logados_Minimo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Agentes Logados - Maximo",
											"type": "String"
										},
										"sink": {
											"name": "Agentes_Logados_Maximo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Chamadas em Espera - Minimo",
											"type": "String"
										},
										"sink": {
											"name": "Chamadas_em_Espera_Minimo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Chamadas em Espera - Medio",
											"type": "String"
										},
										"sink": {
											"name": "Chamadas_em_Espera_Medio",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Chamadas em Espera = Maximo",
											"type": "String"
										},
										"sink": {
											"name": "Chamadas_em_Espera_Maximo",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "CSI_CSV_NC_FilasporHora_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_FilasPorHoras_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Filas por Hora HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Fila",
											"type": "String"
										},
										"sink": {
											"name": "Fila",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Intervalo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Atendidas Ate NS",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas_Ate_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Atendidas Apos NS",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas_Apos_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos Ate NS",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos_Ate_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos Apos NS",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos_Apos_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos Anuncio Inicial",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos_Anuncio_Inicial",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Timeout",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Timeout",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Fila Cheia",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Fila_Cheia",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Fila Vazia",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Fila_Vazia",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Fila Sem Ags. Disp.",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Fila_Sem_Ags_Disp",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Caixa Postal",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Caixa_Postal",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario Antes",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario_Antes",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario_Intervalo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario Depois",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario_Depois",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Total Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Total_Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Callback Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Callback_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Callback Nao Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Callback_Nao_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Callback",
											"type": "String"
										},
										"sink": {
											"name": "Callback",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Tempo Toque",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Pausa ACW",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Pausa_ACW",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Produtivo AHT",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Produtivo_AHT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Nivel Servico",
											"type": "String"
										},
										"sink": {
											"name": "Nivel_Servico",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Taxa Atendimento",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_Atendimento",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Taxa Abandono",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_Abandono",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Espera",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Espera",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio para Atender",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_para_Atender",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total para Atender",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_para_Atender",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio para Abandono",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_para_Abandono",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total para Abandono",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_para_Abandono",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total Espera",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_Espera",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Agentes Logados - Minimo",
											"type": "String"
										},
										"sink": {
											"name": "Agentes_Logados_Minimo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Agentes Logados - Maximo",
											"type": "String"
										},
										"sink": {
											"name": "Agentes_Logados_Maximo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Chamadas em Espera - Minimo",
											"type": "String"
										},
										"sink": {
											"name": "Chamadas_em_Espera_Minimo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Chamadas em Espera - Medio",
											"type": "String"
										},
										"sink": {
											"name": "Chamadas_em_Espera_Medio",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Chamadas em Espera = Maximo",
											"type": "String"
										},
										"sink": {
											"name": "Chamadas_em_Espera_Maximo",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "HOSL_CSV_NC_FilasPorHora_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_FilasPorHoras_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Filas por Hora Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Fila",
											"type": "String"
										},
										"sink": {
											"name": "Fila",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Intervalo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Atendidas Ate NS",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas_Ate_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Atendidas Apos NS",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas_Apos_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos Ate NS",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos_Ate_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos Apos NS",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos_Apos_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos Anuncio Inicial",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos_Anuncio_Inicial",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Timeout",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Timeout",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Fila Cheia",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Fila_Cheia",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Fila Vazia",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Fila_Vazia",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Fila Sem Ags. Disp.",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Fila_Sem_Ags_Disp",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Caixa Postal",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Caixa_Postal",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario Antes",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario_Antes",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario_Intervalo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario Depois",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario_Depois",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Total Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Total_Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Callback Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Callback_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Callback Nao Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Callback_Nao_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Callback",
											"type": "String"
										},
										"sink": {
											"name": "Callback",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Tempo Toque",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Pausa ACW",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Pausa_ACW",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Produtivo AHT",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Produtivo_AHT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Nivel Servico",
											"type": "String"
										},
										"sink": {
											"name": "Nivel_Servico",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Taxa Atendimento",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_Atendimento",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Taxa Abandono",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_Abandono",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Espera",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Espera",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio para Atender",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_para_Atender",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total para Atender",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_para_Atender",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio para Abandono",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_para_Abandono",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total para Abandono",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_para_Abandono",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total Espera",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_Espera",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Agentes Logados - Minimo",
											"type": "String"
										},
										"sink": {
											"name": "Agentes_Logados_Minimo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Agentes Logados - Maximo",
											"type": "String"
										},
										"sink": {
											"name": "Agentes_Logados_Maximo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Chamadas em Espera - Minimo",
											"type": "String"
										},
										"sink": {
											"name": "Chamadas_em_Espera_Minimo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Chamadas em Espera - Medio",
											"type": "String"
										},
										"sink": {
											"name": "Chamadas_em_Espera_Medio",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Chamadas em Espera = Maximo",
											"type": "String"
										},
										"sink": {
											"name": "Chamadas_em_Espera_Maximo",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "HOSAG_CSV_NC_FilasPorHora_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_FilasPorHoras_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Filas por Hora HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Fila",
											"type": "String"
										},
										"sink": {
											"name": "Fila",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Intervalo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Atendidas Ate NS",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas_Ate_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Atendidas Apos NS",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas_Apos_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos Ate NS",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos_Ate_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos Apos NS",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos_Apos_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos Anuncio Inicial",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos_Anuncio_Inicial",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Timeout",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Timeout",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Fila Cheia",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Fila_Cheia",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Fila Vazia",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Fila_Vazia",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Fila Sem Ags. Disp.",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Fila_Sem_Ags_Disp",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Caixa Postal",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Caixa_Postal",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario Antes",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario_Antes",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario_Intervalo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario Depois",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario_Depois",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Total Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Total_Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Callback Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Callback_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Callback Nao Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Callback_Nao_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Callback",
											"type": "String"
										},
										"sink": {
											"name": "Callback",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Tempo Toque",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Pausa ACW",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Pausa_ACW",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Produtivo AHT",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Produtivo_AHT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Nivel Servico",
											"type": "String"
										},
										"sink": {
											"name": "Nivel_Servico",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Taxa Atendimento",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_Atendimento",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Taxa Abandono",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_Abandono",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Espera",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Espera",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio para Atender",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_para_Atender",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total para Atender",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_para_Atender",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio para Abandono",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_para_Abandono",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total para Abandono",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_para_Abandono",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total Espera",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_Espera",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Agentes Logados - Minimo",
											"type": "String"
										},
										"sink": {
											"name": "Agentes_Logados_Minimo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Agentes Logados - Maximo",
											"type": "String"
										},
										"sink": {
											"name": "Agentes_Logados_Maximo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Chamadas em Espera - Minimo",
											"type": "String"
										},
										"sink": {
											"name": "Chamadas_em_Espera_Minimo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Chamadas em Espera - Medio",
											"type": "String"
										},
										"sink": {
											"name": "Chamadas_em_Espera_Medio",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Chamadas em Espera = Maximo",
											"type": "String"
										},
										"sink": {
											"name": "Chamadas_em_Espera_Maximo",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "HOB_CSV_NC_FilasPorHora_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_FilasPorHoras_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Filas por Hora DH",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Fila",
											"type": "String"
										},
										"sink": {
											"name": "Fila",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Intervalo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Atendidas Ate NS",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas_Ate_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Atendidas Apos NS",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas_Apos_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos Ate NS",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos_Ate_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos Apos NS",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos_Apos_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos Anuncio Inicial",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos_Anuncio_Inicial",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Timeout",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Timeout",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Fila Cheia",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Fila_Cheia",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Fila Vazia",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Fila_Vazia",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Fila Sem Ags. Disp.",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Fila_Sem_Ags_Disp",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Caixa Postal",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Caixa_Postal",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario Antes",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario_Antes",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario_Intervalo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario Depois",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario_Depois",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Total Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Total_Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Callback Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Callback_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Callback Nao Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Callback_Nao_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Callback",
											"type": "String"
										},
										"sink": {
											"name": "Callback",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Tempo Toque",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Pausa ACW",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Pausa_ACW",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Produtivo AHT",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Produtivo_AHT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Nivel Servico",
											"type": "String"
										},
										"sink": {
											"name": "Nivel_Servico",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Taxa Atendimento",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_Atendimento",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Taxa Abandono",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_Abandono",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Espera",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Espera",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio para Atender",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_para_Atender",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total para Atender",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_para_Atender",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio para Abandono",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_para_Abandono",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total para Abandono",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_para_Abandono",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total Espera",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_Espera",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Agentes Logados - Minimo",
											"type": "String"
										},
										"sink": {
											"name": "Agentes_Logados_Minimo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Agentes Logados - Maximo",
											"type": "String"
										},
										"sink": {
											"name": "Agentes_Logados_Maximo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Chamadas em Espera - Minimo",
											"type": "String"
										},
										"sink": {
											"name": "Chamadas_em_Espera_Minimo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Chamadas em Espera - Medio",
											"type": "String"
										},
										"sink": {
											"name": "Chamadas_em_Espera_Medio",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Chamadas em Espera = Maximo",
											"type": "String"
										},
										"sink": {
											"name": "Chamadas_em_Espera_Maximo",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "DH_CSV_NC_FilasPorHora_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_FilasPorHoras_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Filas por Hora INOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Fila",
											"type": "String"
										},
										"sink": {
											"name": "Fila",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Intervalo",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Atendidas Ate NS",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas_Ate_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Atendidas Apos NS",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas_Apos_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Atendidas",
											"type": "String"
										},
										"sink": {
											"name": "Atendidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos Ate NS",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos_Ate_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos Apos NS",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos_Apos_NS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos Anuncio Inicial",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos_Anuncio_Inicial",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Abandonos",
											"type": "String"
										},
										"sink": {
											"name": "Abandonos",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Timeout",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Timeout",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Fila Cheia",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Fila_Cheia",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Fila Vazia",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Fila_Vazia",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Fila Sem Ags. Disp.",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Fila_Sem_Ags_Disp",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos Caixa Postal",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos_Caixa_Postal",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Roteamentos",
											"type": "String"
										},
										"sink": {
											"name": "Roteamentos",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario Antes",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario_Antes",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario Intervalo",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario_Intervalo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario Depois",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario_Depois",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Fora Horario",
											"type": "String"
										},
										"sink": {
											"name": "Fora_Horario",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Total Recebidas",
											"type": "String"
										},
										"sink": {
											"name": "Total_Recebidas",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Callback Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Callback_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Callback Nao Tratados",
											"type": "String"
										},
										"sink": {
											"name": "Callback_Nao_Tratados",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Callback",
											"type": "String"
										},
										"sink": {
											"name": "Callback",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Tempo Toque",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Toque",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Falado",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Falado",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Pausa ACW",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Pausa_ACW",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Produtivo AHT",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Produtivo_AHT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Nivel Servico",
											"type": "String"
										},
										"sink": {
											"name": "Nivel_Servico",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Taxa Atendimento",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_Atendimento",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "% Taxa Abandono",
											"type": "String"
										},
										"sink": {
											"name": "Taxa_Abandono",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio Espera",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_Espera",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio para Atender",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_para_Atender",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total para Atender",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_para_Atender",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Medio para Abandono",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Medio_para_Abandono",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total para Abandono",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_para_Abandono",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Tempo Total Espera",
											"type": "String"
										},
										"sink": {
											"name": "Tempo_Total_Espera",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "Agentes Logados - Minimo",
											"type": "String"
										},
										"sink": {
											"name": "Agentes_Logados_Minimo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Agentes Logados - Maximo",
											"type": "String"
										},
										"sink": {
											"name": "Agentes_Logados_Maximo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Chamadas em Espera - Minimo",
											"type": "String"
										},
										"sink": {
											"name": "Chamadas_em_Espera_Minimo",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "Chamadas em Espera - Medio",
											"type": "String"
										},
										"sink": {
											"name": "Chamadas_em_Espera_Medio",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "Chamadas em Espera = Maximo",
											"type": "String"
										},
										"sink": {
											"name": "Chamadas_em_Espera_Maximo",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "INOB_CSV_NC_FilasPorHora_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_NC_FilasPorHoras_Temp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Cria Base Nexcore",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Filas por Hora CSI",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Filas por Hora HOSL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Filas por Hora Sadalla",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Filas por Hora HOB",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Filas por Hora DH",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Filas por Hora INOB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[CREATEBASENEXCORE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento/Nexcore/Históricos"
				},
				"annotations": [],
				"lastPublishTime": "2019-11-14T21:24:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CSI_CSV_NC_FilasporHora_Temp')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_NC_FilasPorHoras_Temp')]",
				"[concat(variables('factoryId'), '/datasets/HOSL_CSV_NC_FilasPorHora_Temp')]",
				"[concat(variables('factoryId'), '/datasets/HOSAG_CSV_NC_FilasPorHora_Temp')]",
				"[concat(variables('factoryId'), '/datasets/HOB_CSV_NC_FilasPorHora_Temp')]",
				"[concat(variables('factoryId'), '/datasets/DH_CSV_NC_FilasPorHora_Temp')]",
				"[concat(variables('factoryId'), '/datasets/INOB_CSV_NC_FilasPorHora_Temp')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INSTITUTO_DR_OSMAR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Agendamento",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Atendimento_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Agendamento]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Agendamento]\n",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_AGENDAMENTO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Agendamento"
								}
							}
						]
					},
					{
						"name": "Agendamento_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Agendamento",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Agendamento_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Agendamento_Diario]\n",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_AGENDAMENTO_DIARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Agendamento_Diario"
								}
							}
						]
					},
					{
						"name": "Atendimento",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "01:30:00",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Atendimento]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Atendimento]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_ATENDIMENTO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Atendimento"
								}
							}
						]
					},
					{
						"name": "Atendimento_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Atendimento",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Atendimento_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Atendimento_Diario]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_ATENDIMENTO_DIARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_atendimento_diario"
								}
							}
						]
					},
					{
						"name": "Faturamento",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Agendamento_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Faturamento]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Faturamento]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_FATURAMENTO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Faturamento"
								}
							}
						]
					},
					{
						"name": "Faturamento_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Faturamento",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Faturamento_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Faturamento_Diario]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_FATURAMENTO_DIARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Faturamento_Diario"
								}
							}
						]
					},
					{
						"name": "Financeiro",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Faturamento_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Financeiro]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Financeiro]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_FINANCEIRO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Financeiro"
								}
							}
						]
					},
					{
						"name": "Financeiro_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Financeiro",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Financeiro_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Financeiro_Diario]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_FINANCEIRO_DIARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Financeiro_Diario"
								}
							}
						]
					},
					{
						"name": "Repasse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Financeiro_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Repasse]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Repasse]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_REPASSE",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Repasse"
								}
							}
						]
					},
					{
						"name": "Repasse_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Repasse",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Repasse_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Repasse_Diario]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_REPASSE_DIARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Repasse_Diario"
								}
							}
						]
					},
					{
						"name": "Questionario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Repasse_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Questionario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Questionario]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_QUESTIONARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_questionario"
								}
							}
						]
					},
					{
						"name": "Questionario_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Questionario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Questionario_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Questionario_Diario]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_QUESTIONARIO_DIARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_questionario_diario"
								}
							}
						]
					},
					{
						"name": "ContasPagarReceber",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Questionario_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_ContasPagarReceber]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_ContasPagarReceber]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_CONTASPAGARRECEBER",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_ContasPagarReceber"
								}
							}
						]
					},
					{
						"name": "ContasPagarReceber_Diarias",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ContasPagarReceber",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_ContasPagarReceber_Diarias]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_ContasPagarReceber_Diarias]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_CONTASPAGARRECEBER_DIARIAS",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_ContasPagarReceber_Diarias"
								}
							}
						]
					},
					{
						"name": "Caixa",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ContasPagarReceber_Diarias",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Caixa]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Caixa]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_CAIXA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Caixa"
								}
							}
						]
					},
					{
						"name": "Caixa_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Caixa",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Caixa_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Caixa_Diario]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_CAIXA_DIARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Caixa_Diario"
								}
							}
						]
					},
					{
						"name": "Paciente",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Caixa_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Paciente]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Paciente]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_PACIENTE",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Paciente"
								}
							}
						]
					},
					{
						"name": "Paciente_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Paciente",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Paciente_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Paciente_Diario]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_PACIENTE_DIARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Paciente_Diario"
								}
							}
						]
					},
					{
						"name": "Teleorientacao",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Paciente_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Teleorientacao]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Teleorientacao]\n",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_TELEORIENTACAO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Teleorientacao"
								}
							}
						]
					},
					{
						"name": "Teleorientacao_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Teleorientacao",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Teleorientacao_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Teleorientacao_Diario]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_TELEORIENTACAO_DIARIA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Teleorientacao_Diaria"
								}
							}
						]
					},
					{
						"name": "Venda",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Teleorientacao_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Venda]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Venda]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_VENDA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Venda"
								}
							}
						]
					},
					{
						"name": "Venda_Diaria",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Venda",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Venda_Diaria]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Venda_Diaria]",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_VENDA_DIARIA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Venda_Diaria"
								}
							}
						]
					},
					{
						"name": "Profissional",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Venda_Diaria",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Profissional]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Profissional]\n",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_PROFISSIONAL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Profissional"
								}
							}
						]
					},
					{
						"name": "Profissional_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Profissional",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[inst_dr_osmar_Profissional_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[inst_dr_osmar_Profissional_Diario]\n",
									"type": "Expression"
								},
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "INST_DR_OSMAR_PROFISSIONAL_DIARIO",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "inst_dr_osmar_Profissional_Diario"
								}
							}
						]
					},
					{
						"name": "ATENDIMENTO MERGE",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Atendimento",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SQL_DESTINO",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH CTE \nAS\n\n(\nSELECT \nA.ATENDIMENTO_CODIGO + '|' + A.atendimento_procedimento_codigo + '|' + LTRIM(RTRIM(REPLACE(A.atendimento_procedimento_convenio,' ',''))) + '|' + CAST(ROW_NUMBER()OVER(PARTITION BY A.ATENDIMENTO_CODIGO, A.ATENDIMENTO_PROCEDIMENTO_CODIGO, A.atendimento_procedimento_convenio ORDER BY A.ATENDIMENTO_HORA DESC) AS VARCHAR(100)) AS FK\n,A.atendimento_codigo\n,A.agendamento_codigo\n,A.atendimento_turno\n,A.atendimento_dia\n,A.atendimento_mes\n,A.atendimento_ano\n,A.atendimento_usuario_cadastro\n,A.atendimento_procedimento_empresa\n,A.atendimento_procedimento_empresa_requisitante\n,A.atendimento_procedimento_profissional_nome\n,A.atendimento_procedimento_profissional_requisitante\n,A.atendimento_procedimento_especialidade_profissional_requisitante\n,A.atendimento_procedimento_convenio\n,A.atendimento_procedimento_plano\n,A.atendimento_procedimento_especialidade\n,A.atendimento_procedimento_nome\n,A.atendimento_procedimento_grupo\n,A.atendimento_procedimento_valor\n,A.atendimento_procedimento_coparticipacao_valor\n,A.atendimento_procedimento_filme_valor\n,A.atendimento_material_medicamento_nome\n,A.atendimento_material_medicamento_valor\n,A.atendimento_material_medicamento_coparticipacao_valor\n,A.atendimento_taxa_nome\n,A.atendimento_taxa_valor\n,A.atendimento_taxa_coparticipacao_valor\n,A.paciente_codigo\n,A.paciente_nome\n,A.paciente_sexo\n,A.paciente_faixa_idade\n,A.paciente_estado\n,A.paciente_cidade\n,A.paciente_bairro\n,A.atendimento_hora\n,A.atendimento_diadasemana\n,A.atendimento_cid_primario\n,A.atendimento_cid_secundario\n,A.atendimento_cid_consultorio\n,A.atendimento_tipo\n,A.atendimento_horainicio_recepcao\n,A.atendimento_horafim_recepcao\n,A.atendimento_horainicio_consultorio\n,A.atendimento_horafim_consultorio\n,A.atendimento_procedimento_codigo\n,A.paciente_cep\n,A.atendimento_profissional_especialidade\n,A.atendimento_previsao_valor_repasse_profissional\n,A.atendimento_previsao_valor_repasse_clinica\n,A.atendimento_passo\n,A.atendimento_codigo_guia\n,A.atendimento_quantidade_executada_procedimento\n,A.atendimento_status_procedimento\nFROM STG.inst_dr_osmar_Atendimento A\n\n)\n\nMERGE\t           \n\tdw.inst_dr_osmar_Atendimento AS destino           \nUSING            \n\tCTE AS origem           \n           \n    ON\t(        \n            origem.fk = destino.fk\n\t\t)        \n\n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \n\ndestino.fk = origem.fk\n,destino.atendimento_codigo = origem.atendimento_codigo\n,destino.agendamento_codigo = origem.agendamento_codigo\n,destino.atendimento_turno = origem.atendimento_turno\n,destino.atendimento_dia = origem.atendimento_dia\n,destino.atendimento_mes = origem.atendimento_mes\n,destino.atendimento_ano = origem.atendimento_ano\n,destino.atendimento_usuario_cadastro = origem.atendimento_usuario_cadastro\n,destino.atendimento_procedimento_empresa = origem.atendimento_procedimento_empresa\n,destino.atendimento_procedimento_empresa_requisitante = origem.atendimento_procedimento_empresa_requisitante\n,destino.atendimento_procedimento_profissional_nome = origem.atendimento_procedimento_profissional_nome\n,destino.atendimento_procedimento_profissional_requisitante = origem.atendimento_procedimento_profissional_requisitante\n,destino.atendimento_procedimento_especialidade_profissional_requisitante = origem.atendimento_procedimento_especialidade_profissional_requisitante\n,destino.atendimento_procedimento_convenio = origem.atendimento_procedimento_convenio\n,destino.atendimento_procedimento_plano = origem.atendimento_procedimento_plano\n,destino.atendimento_procedimento_especialidade = origem.atendimento_procedimento_especialidade\n,destino.atendimento_procedimento_nome = origem.atendimento_procedimento_nome\n,destino.atendimento_procedimento_grupo = origem.atendimento_procedimento_grupo\n,destino.atendimento_procedimento_valor = origem.atendimento_procedimento_valor\n,destino.atendimento_procedimento_coparticipacao_valor = origem.atendimento_procedimento_coparticipacao_valor\n,destino.atendimento_procedimento_filme_valor = origem.atendimento_procedimento_filme_valor\n,destino.atendimento_material_medicamento_nome = origem.atendimento_material_medicamento_nome\n,destino.atendimento_material_medicamento_valor = origem.atendimento_material_medicamento_valor\n,destino.atendimento_material_medicamento_coparticipacao_valor = origem.atendimento_material_medicamento_coparticipacao_valor\n,destino.atendimento_taxa_nome = origem.atendimento_taxa_nome\n,destino.atendimento_taxa_valor = origem.atendimento_taxa_valor\n,destino.atendimento_taxa_coparticipacao_valor = origem.atendimento_taxa_coparticipacao_valor\n,destino.paciente_codigo = origem.paciente_codigo\n,destino.paciente_nome = origem.paciente_nome\n,destino.paciente_sexo = origem.paciente_sexo\n,destino.paciente_faixa_idade = origem.paciente_faixa_idade\n,destino.paciente_estado = origem.paciente_estado\n,destino.paciente_cidade = origem.paciente_cidade\n,destino.paciente_bairro = origem.paciente_bairro\n,destino.atendimento_hora = origem.atendimento_hora\n,destino.atendimento_diadasemana = origem.atendimento_diadasemana\n,destino.atendimento_cid_primario = origem.atendimento_cid_primario\n,destino.atendimento_cid_secundario = origem.atendimento_cid_secundario\n,destino.atendimento_cid_consultorio = origem.atendimento_cid_consultorio\n,destino.atendimento_tipo = origem.atendimento_tipo\n,destino.atendimento_horainicio_recepcao = origem.atendimento_horainicio_recepcao\n,destino.atendimento_horafim_recepcao = origem.atendimento_horafim_recepcao\n,destino.atendimento_horainicio_consultorio = origem.atendimento_horainicio_consultorio\n,destino.atendimento_horafim_consultorio = origem.atendimento_horafim_consultorio\n,destino.atendimento_procedimento_codigo = origem.atendimento_procedimento_codigo\n,destino.paciente_cep = origem.paciente_cep\n,destino.atendimento_profissional_especialidade = origem.atendimento_profissional_especialidade\n,destino.atendimento_previsao_valor_repasse_profissional = origem.atendimento_previsao_valor_repasse_profissional\n,destino.atendimento_previsao_valor_repasse_clinica = origem.atendimento_previsao_valor_repasse_clinica\n,destino.atendimento_passo = origem.atendimento_passo\n,destino.atendimento_codigo_guia = origem.atendimento_codigo_guia\n,destino.atendimento_quantidade_executada_procedimento = origem.atendimento_quantidade_executada_procedimento\n,destino.atendimento_status_procedimento = origem.atendimento_status_procedimento\n\n\n\n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.fk\n,origem.atendimento_codigo\n,origem.agendamento_codigo\n,origem.atendimento_turno\n,origem.atendimento_dia\n,origem.atendimento_mes\n,origem.atendimento_ano\n,origem.atendimento_usuario_cadastro\n,origem.atendimento_procedimento_empresa\n,origem.atendimento_procedimento_empresa_requisitante\n,origem.atendimento_procedimento_profissional_nome\n,origem.atendimento_procedimento_profissional_requisitante\n,origem.atendimento_procedimento_especialidade_profissional_requisitante\n,origem.atendimento_procedimento_convenio\n,origem.atendimento_procedimento_plano\n,origem.atendimento_procedimento_especialidade\n,origem.atendimento_procedimento_nome\n,origem.atendimento_procedimento_grupo\n,origem.atendimento_procedimento_valor\n,origem.atendimento_procedimento_coparticipacao_valor\n,origem.atendimento_procedimento_filme_valor\n,origem.atendimento_material_medicamento_nome\n,origem.atendimento_material_medicamento_valor\n,origem.atendimento_material_medicamento_coparticipacao_valor\n,origem.atendimento_taxa_nome\n,origem.atendimento_taxa_valor\n,origem.atendimento_taxa_coparticipacao_valor\n,origem.paciente_codigo\n,origem.paciente_nome\n,origem.paciente_sexo\n,origem.paciente_faixa_idade\n,origem.paciente_estado\n,origem.paciente_cidade\n,origem.paciente_bairro\n,origem.atendimento_hora\n,origem.atendimento_diadasemana\n,origem.atendimento_cid_primario\n,origem.atendimento_cid_secundario\n,origem.atendimento_cid_consultorio\n,origem.atendimento_tipo\n,origem.atendimento_horainicio_recepcao\n,origem.atendimento_horafim_recepcao\n,origem.atendimento_horainicio_consultorio\n,origem.atendimento_horafim_consultorio\n,origem.atendimento_procedimento_codigo\n,origem.paciente_cep\n,origem.atendimento_profissional_especialidade\n,origem.atendimento_previsao_valor_repasse_profissional\n,origem.atendimento_previsao_valor_repasse_clinica\n,origem.atendimento_passo\n,origem.atendimento_codigo_guia\n,origem.atendimento_quantidade_executada_procedimento\n,origem.atendimento_status_procedimento        \n\n); \n"
								}
							]
						}
					},
					{
						"name": "CONVENIO MERGE",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ATENDIMENTO MERGE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH CONV AS(\n\nSELECT DISTINCT\n    '41' AS ESTABELECIMENTO\n    ,'41|' + LTRIM(RTRIM(REPLACE(REPLACE(UPPER(ATENDIMENTO_PROCEDIMENTO_CONVENIO),' ',''),'-',''))) AS FK_CONVENIO\n    ,LTRIM(RTRIM(REPLACE(REPLACE(UPPER(ATENDIMENTO_PROCEDIMENTO_CONVENIO),' ',''),'-',''))) AS CD_CONVENIO\n    ,ATENDIMENTO_PROCEDIMENTO_CONVENIO AS DS_CONVENIO\n    ,CASE\n        WHEN UPPER(ATENDIMENTO_PROCEDIMENTO_CONVENIO) LIKE '%PARTICULAR%' THEN 'PARTICULAR'\n        WHEN UPPER(ATENDIMENTO_PROCEDIMENTO_CONVENIO) LIKE '%SUS%' THEN 'SUS'\n        ELSE 'CONVÊNIO'\n     END TP_CONVENIO\n    ,'0' AS CD_CGC\n    \nFROM dw.inst_dr_osmar_Atendimento\n\n)\n\nMERGE\t           \n\tDW.inst_dr_osmar_CONVENIO AS destino           \nUSING            \n\tCONV AS origem           \n           \n    ON\t(        \n        origem.FK_CONVENIO = destino.FK_CONVENIO\n\t\t)        \n\n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \nDESTINO.ESTABELECIMENTO = ORIGEM.ESTABELECIMENTO\n,DESTINO.FK_CONVENIO = ORIGEM.FK_CONVENIO\n,DESTINO.CD_CONVENIO = ORIGEM.CD_CONVENIO\n,DESTINO.DS_CONVENIO = ORIGEM.DS_CONVENIO\n,DESTINO.TP_CONVENIO = ORIGEM.TP_CONVENIO\n,DESTINO.CD_CGC = ORIGEM.CD_CGC\n\n\n\n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\nORIGEM.ESTABELECIMENTO\n,ORIGEM.FK_CONVENIO\n,ORIGEM.CD_CONVENIO\n,ORIGEM.DS_CONVENIO\n,ORIGEM.TP_CONVENIO\n,ORIGEM.CD_CGC\n); \n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/P&P"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_AGENDAMENTO')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_STG')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_AGENDAMENTO_DIARIO')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_ATENDIMENTO')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_ATENDIMENTO_DIARIO')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_FATURAMENTO')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_FATURAMENTO_DIARIO')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_FINANCEIRO')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_FINANCEIRO_DIARIO')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_REPASSE')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_REPASSE_DIARIO')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_QUESTIONARIO')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_QUESTIONARIO_DIARIO')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_CONTASPAGARRECEBER')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_CONTASPAGARRECEBER_DIARIAS')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_CAIXA')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_CAIXA_DIARIO')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_PACIENTE')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_PACIENTE_DIARIO')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_TELEORIENTACAO')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_TELEORIENTACAO_DIARIA')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_VENDA')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_VENDA_DIARIA')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_PROFISSIONAL')]",
				"[concat(variables('factoryId'), '/datasets/INST_DR_OSMAR_PROFISSIONAL_DIARIO')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL_DESTINO')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IOV')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lista arquivos",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_HMAISDATADRIVEN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": "urobrasil"
								}
							},
							"fieldList": [
								"childItems",
								"itemType",
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filtro",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lista arquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista arquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endsWith(item().name, 'csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filtro",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filtro').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copia dados para a STG",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('Drop table stg.',activity('Lista arquivos').output.itemName)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_SQL_STG",
											"type": "DatasetReference",
											"parameters": {
												"SCHEMA": "stg",
												"TABELA": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Move arquivo para PROCESSADOS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "STG DW",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@concat(activity('Lista arquivos').output.itemName,'\\Processados')",
													"type": "Expression"
												},
												"File": {
													"value": "@concat(item().name,'-',utcnow())",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Apaga arquivo",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move arquivo para PROCESSADOS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "sv_hmaisbrasildatadriven",
												"type": "LinkedServiceReference"
											},
											"path": "ceop/logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "STG DW",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copia dados para a STG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SQL_DESTINO",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": "MERGE\t           \n\tdw.ortocity AS destino           \nUSING            \n\tstg.ortocity AS origem           \n           \n    ON(        \ndestino.CD_ESTABELECIMENTO\t\t= origem.CD_ESTABELECIMENTO AND\ndestino.DS_ESTABELECIMENTO\t\t= origem.DS_ESTABELECIMENTO AND\ndestino.NR_ATENDIMENTO\t\t\t= origem.NR_ATENDIMENTO AND\ndestino.NR_INTERNO_CONTA\t\t= origem.NR_INTERNO_CONTA AND\ndestino.CD_PESSOA_FISICA\t\t= origem.CD_PESSOA_FISICA AND\ndestino.CD_CONVENIO\t\t\t\t= origem.CD_CONVENIO AND\ndestino.CD_MEDICO_EXECUTANTE\t=\torigem.CD_MEDICO_EXECUTANTE \n)        \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \ndestino.CD_ESTABELECIMENTO=origem.CD_ESTABELECIMENTO ,\ndestino.DS_ESTABELECIMENTO=origem.DS_ESTABELECIMENTO ,\ndestino.NR_ATENDIMENTO=origem.NR_ATENDIMENTO ,\ndestino.NR_INTERNO_CONTA=origem.NR_INTERNO_CONTA ,\ndestino.CD_PESSOA_FISICA=origem.CD_PESSOA_FISICA ,\ndestino.NM_PESSOA_FISICA=origem.NM_PESSOA_FISICA ,\ndestino.DT_NASCIMENTO=origem.DT_NASCIMENTO ,\ndestino.CD_CONVENIO=origem.CD_CONVENIO ,\ndestino.DS_CONVENIO=origem.DS_CONVENIO ,\ndestino.CD_MEDICO_EXECUTANTE=origem.CD_MEDICO_EXECUTANTE ,\ndestino.NM_MEDICO_EXECUTANTE=origem.NM_MEDICO_EXECUTANTE ,\ndestino.CD_SETOR_EXECUTANTE=origem.CD_SETOR_EXECUTANTE ,\ndestino.DS_SETOR_EXECUTANTE=origem.DS_SETOR_EXECUTANTE ,\ndestino.DT_ENTRADA=origem.DT_ENTRADA ,\ndestino.CD_ITEM=origem.CD_ITEM ,\ndestino.DS_ITEM=origem.DS_ITEM ,\ndestino.DT_LANC_ITEM=origem.DT_LANC_ITEM ,\ndestino.QT=origem.QT ,\ndestino.VALOR=origem.VALOR \n\n\n  \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.CD_ESTABELECIMENTO,\norigem.DS_ESTABELECIMENTO,\norigem.NR_ATENDIMENTO,\norigem.NR_INTERNO_CONTA,\norigem.CD_PESSOA_FISICA,\norigem.NM_PESSOA_FISICA,\norigem.DT_NASCIMENTO,\norigem.CD_CONVENIO,\norigem.DS_CONVENIO,\norigem.CD_MEDICO_EXECUTANTE,\norigem.NM_MEDICO_EXECUTANTE,\norigem.CD_SETOR_EXECUTANTE,\norigem.DS_SETOR_EXECUTANTE,\norigem.DT_ENTRADA,\norigem.CD_ITEM,\norigem.DS_ITEM,\norigem.DT_LANC_ITEM,\norigem.QT,\norigem.VALOR\n); "
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/P&P"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN_BINARY')]",
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_STG')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL_DESTINO')]",
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IRIS_CARGA_DINAMICA_ADF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LISTA ORIGEM DESTINO",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "COPY STG TO DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino]",
								"storedProcedureParameters": {
									"COD_TABELA": {
										"type": "String",
										"value": null
									},
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"plataforma": {
										"type": "String",
										"value": "SMART_IRIS_ODBC_XXX"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "DROPA TABELAS DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "DATA_HORA_INICIO_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(\n'select * from ', item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' where ', item().nome_coluna_referencia,' >= ''',\nitem().Data_Inicio, ''' and  ', item().nome_coluna_referencia,' <= ''', item().Data_Fim, ''''\n)",
															"type": "Expression"
														},
														"partitionOption": "None",
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "ORACLE_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET",
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA PARCIAL').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "DATA_HORA_INICIO_COMPLETA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.10:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "PhysicalPartitionsOfTable"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "SQL_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"schema_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"table_name": {
																"value": "@item().NOME_TABELA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA COMPLETA').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "DROPA TABELAS DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA ORIGEM DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 30,
							"activities": [
								{
									"name": "LIMPA TABELA DESTINO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N',\n'''',   \nitem().NOME_SCHEMA_DESTINO,\n'.',\nitem().NOME_TABELA_DESTINO,\n'''',\n') AND type in (N',\n'''',\n'U',\n'''',\n'))',\n' DROP TABLE ',\nitem().NOME_SCHEMA_DESTINO,\n'.',\nitem().NOME_TABELA_DESTINO,\n'  SELECT 0'\n)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					},
					{
						"name": "Copy STG OSM",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG CNV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.osm\n\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table stg.iris_osm",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_osm"
								}
							}
						]
					},
					{
						"name": "Copy STG CNV",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG HON",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.cnv\n\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table stg.iris_CNV",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_cnv"
								}
							}
						]
					},
					{
						"name": "Copy STG CTF",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG OSM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.CTF\n\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table stg.iris_CTF",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_CTF"
								}
							}
						]
					},
					{
						"name": "Copy STG GCC",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG CTF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.GCC\n\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_GCC"
								}
							}
						]
					},
					{
						"name": "Copy STG HON",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG SMM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.HON A\nWHERE SUBSTRING(A.hon_dthr_alt,1,10) >= SUBSTRING(ADDDATE(NOW(),-30),1,10)\n\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_HON"
								}
							}
						]
					},
					{
						"name": "Copy STG PSV",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG GCC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.PSV\n\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_PSV"
								}
							}
						]
					},
					{
						"name": "Copy STG SMK",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG PSV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.SMK\n\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_SMK"
								}
							}
						]
					},
					{
						"name": "Copy STG SMM",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG NFS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.SMM A\nWHERE SUBSTRING(A.smm_dthr_alter,1,10) >= SUBSTRING(ADDDATE(NOW(),-30),1,10)\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_SMM"
								}
							}
						]
					},
					{
						"name": "Copy STG STR",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG SMK",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.STR\n\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_STR"
								}
							}
						]
					},
					{
						"name": "Copy STG NFS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG EXT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.nfs A\nWHERE SUBSTRING(A.nfs_dthr_proc,1,10) >= SUBSTRING(ADDDATE(NOW(),-30),1,10)\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_NFS"
								}
							}
						]
					},
					{
						"name": "Copy STG EMP",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG STR",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.EMP\n\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_EMP"
								}
							}
						]
					},
					{
						"name": "Copy STG FAT",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG EMP",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.FAT\n\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_FAT"
								}
							}
						]
					},
					{
						"name": "Copy STG EXT",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG MNS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT \n96    estabelecimento\n,EXT.ext_osm_serie\n,EXT.ext_osm_num\n,EXT.ext_smm_num\n,EXT.ext_mns_serie\n,EXT.ext_mns_num\n,EXT.ext_dt_mov\n,EXT.ext_valor_glosa\n,EXT.ext_valor_receb\n,EXT.ext_mog_cod\n,EXT.ext_ccr_psv\n,EXT.EXT_PSV_COD\n,EXT.EXT_STATUS_GLOSA\n,EXT.EXT_SGO_COD\n,EXT.EXT_GLOSA_ACATADA\n,EXT.EXT_MTE_SERIE\n,EXT.EXT_MTE_SEQ\n,EXT.ext_qtd\n,EXT.ext_valor_imposto\n,EXT.ext_obs\n,EXT.ext_valor_complemento\n,NULL W\n,NULL EXT_VALOR_IMPOSTO222\n,NULL ext_valor_imp_sem_abater\n,EXT.ext_rpi_serie\n,EXT.ext_rpi_num\n,EXT.ext_rpi_status\n,EXT.ext_rpi_valor\n,EXT.ext_rpi_dthr\n,EXT.ext_rpi_usr_login\n,EXT.ext_rpi_obs\n,EXT.ext_epl_serie\n,EXT.ext_epl_num\n,MNS.MNS_DT_REG\nFROM EXT EXT\nINNER join MNS MNS  on ext.ext_mns_num = mns.MNS_NUM and ext.ext_mns_serie = mns.MNS_SERIE \nWHERE SUBSTRING(MNS.mns_dt_reg,1,10) >= SUBSTRING(ADDDATE(NOW(),-30),1,10)\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_EXT"
								}
							}
						]
					},
					{
						"name": "Copy STG MNS",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG PAC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.mns A\nWHERE SUBSTRING(A.mns_dt_reg,1,10) >= SUBSTRING(ADDDATE(NOW(),-30),1,10)\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_MNS"
								}
							}
						]
					},
					{
						"name": "Copy STG PAC",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG MTE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.pac A\nWHERE SUBSTRING(A.pac_dreg,1,10) >= SUBSTRING(ADDDATE(NOW(),-30),1,10)\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_PAC"
								}
							}
						]
					},
					{
						"name": "Copy STG MTE",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG AGM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.mte A\nWHERE SUBSTRING(A.mte_dt_reg,1,10) >= SUBSTRING(ADDDATE(NOW(),-30),1,10)\n\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_MTE"
								}
							}
						]
					},
					{
						"name": "Copy STG NFL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG FAT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.NFL\n\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_NFL"
								}
							}
						]
					},
					{
						"name": "Copy STG AGM",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "STG TO DW FLE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.agm A\nWHERE SUBSTRING(A.agm_hini,1,10) >= SUBSTRING(ADDDATE(NOW(),-30),1,10)\n\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_AGM"
								}
							}
						]
					},
					{
						"name": "Copy STG FLE",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.fle A\nWHERE SUBSTRING(A.fle_dthr_reg,1,10) >= SUBSTRING(ADDDATE(NOW(),-30),1,10)\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_FLE"
								}
							}
						]
					},
					{
						"name": "Copy STG LOC",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG NFL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.LOC\n\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_LOC"
								}
							}
						]
					},
					{
						"name": "Copy STG GMM",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy STG LOC",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "SELECT  *  FROM dba.GMM\n\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_GMM"
								}
							}
						]
					},
					{
						"name": "COPY STG TO DW",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy STG GMM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "/**\n\ndrop table dw.iris_hon;\nselect '96' as ESTABELECIMENTO,* into dw.iris_hon from stg.iris_hon;\ndrop table dw.iris_smm;\nselect '96' as ESTABELECIMENTO,* into dw.iris_smm from stg.iris_smm;\ndrop table dw.iris_nfs;\nselect '96' as ESTABELECIMENTO,* into dw.iris_nfs from stg.iris_nfs;\ndrop table dw.iris_ext;\nselect '96' as ESTABELECIMENTO,* into dw.iris_ext from stg.iris_ext;\ndrop table dw.iris_mns;\nselect '96' as ESTABELECIMENTO,* into dw.iris_mns from stg.iris_mns;\ndrop table dw.iris_pac;\nselect '96' as ESTABELECIMENTO,* into dw.iris_pac from stg.iris_pac;\ndrop table dw.iris_mte;\nselect '96' as ESTABELECIMENTO,* into dw.iris_mte from stg.iris_mte;\ndrop table dw.iris_agm;\nselect '96' as ESTABELECIMENTO,* into dw.iris_agm from stg.iris_agm;\ndrop table dw.iris_fle;\nselect '96' as ESTABELECIMENTO,* into dw.iris_fle from stg.iris_fle;\n\n\ndrop table dw.iris_osm;\nselect '96' as ESTABELECIMENTO,* into dw.iris_osm from stg.iris_osm;\ndrop table dw.iris_cnv;\nselect '96' as ESTABELECIMENTO,* into dw.iris_cnv from stg.iris_cnv;\ndrop table dw.iris_ctf;\nselect '96' as ESTABELECIMENTO,* into dw.iris_ctf from stg.iris_ctf;\ndrop table dw.iris_gcc;\nselect '96' as ESTABELECIMENTO,* into dw.iris_gcc from stg.iris_gcc;\ndrop table dw.iris_psv;\nselect '96' as ESTABELECIMENTO,* into dw.iris_psv from stg.iris_psv;\ndrop table dw.iris_smk;\nselect '96' as ESTABELECIMENTO,* into dw.iris_smk from stg.iris_smk;\ndrop table dw.iris_str;\nselect '96' as ESTABELECIMENTO,* into dw.iris_str from stg.iris_str;\ndrop table dw.iris_emp;\nselect '96' as ESTABELECIMENTO,* into dw.iris_emp from stg.iris_emp;\ndrop table dw.iris_fat;\nselect '96' as ESTABELECIMENTO,* into dw.iris_fat from stg.iris_fat;\ndrop table dw.iris_nfl;\nselect '96' as ESTABELECIMENTO,* into dw.iris_nfl from stg.iris_nfl;\ndrop table dw.iris_loc;\nselect '96' as ESTABELECIMENTO,* into dw.iris_loc from stg.iris_loc;\ndrop table dw.iris_gmm;\nselect '96' as ESTABELECIMENTO,* into dw.iris_gmm from stg.iris_gmm;\n\n**/"
								}
							]
						}
					},
					{
						"name": "STG TO DW HON",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy STG HON",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH STG_HON \nAS\n(\n\nSELECT DISTINCT\n\t   '96' as estabelecimento\n\t  ,[hon_med]\n      ,[hon_psv_vinc]\n      ,[hon_ctf]\n      ,[hon_str]\n      ,[hon_tpctf]\n      ,[hon_str_solic]\n      ,[hon_seq]\n      ,[hon_aux]\n      ,[hon_cc1]\n      ,[hon_pc1]\n      ,[hon_vl1]\n      ,[hon_cc2]\n      ,[hon_pc2]\n      ,[hon_vl2]\n      ,[hon_cc3]\n      ,[hon_pc3]\n      ,[hon_vl3]\n      ,[hon_cc4]\n      ,[hon_pc4]\n      ,[hon_vl4]\n      ,[hon_cc5]\n      ,[hon_pc5]\n      ,[hon_vl5]\n      ,[hon_cnv_cod]\n      ,CASE  \n\t\t\tWHEN ISDATE(cast(hon_dthr_ini as varchar(1000))) = 1 THEN  cast(hon_dthr_ini as varchar(1000)) -- substring(substring(cast(hon_dthr_ini as varchar(1000)),9,2),1,4) + '/' + substring(substring(cast(hon_dthr_ini as varchar(1000)),6,2),1,4) + '/' + substring(substring(cast(hon_dthr_ini as varchar(1000)),1,10),1,4) \n\t\t\tWHEN ISDATE(cast(hon_dthr_ini as varchar(1000))) <> 1 THEN Null \n\t\tEND as hon_dthr_ini\n      ,[hon_status]\n      ,[HON_USR_LOGIN_CAD]\n      ,[HON_USR_LOGIN_ALT]\n      ,CASE  \n\t\t\tWHEN ISDATE(cast(HON_DTHR_ALT as varchar(1000))) = 1 THEN  cast(HON_DTHR_ALT as varchar(1000)) \n\t\t\tWHEN ISDATE(cast(HON_DTHR_ALT as varchar(1000))) <> 1 THEN Null \n\t   END as HON_DTHR_ALT\n      ,CASE  \n\t\t\tWHEN ISDATE(cast(HON_DTHR_CAD as varchar(1000))) = 1 THEN  cast(HON_DTHR_CAD as varchar(1000)) \n\t\t\tWHEN ISDATE(cast(HON_DTHR_CAD as varchar(1000))) <> 1 THEN Null \n\t   END as HON_DTHR_CAD\n      ,[HON_GMR_COD]\n      ,[HON_CTF_CATEG]\n      ,[HON_EMP_COD]\n      ,[HON_CC6]\n      ,[HON_PC6]\n      ,[HON_VL6]\n      ,[hon_psv_solic]\n      ,[hon_ih_origem]\n      ,[HON_DIA]\n      ,[HON_HOR_INI]\n      ,[HON_HOR_FIM]\n      ,[hon_obs]\n      ,[hon_smk_tipo]\n      ,[hon_smk_cod]\n      ,[hon_forma_pag]\n      ,[hon_ind_rat]\n      ,[hon_gmr_solic]\n      ,[hon_cnv_emp_cod]\n      ,[hon_psv_tipo_solic]\n      ,[hon_tap_cod]\n      ,[hon_dce_id]\n      ,[hon_adicional_1]\n      ,[hon_adicional_2]\n      ,[hon_adicional_3]\n      ,[hon_adicional_4]\n      ,[hon_adicional_5]\n      ,[hon_adicional_6]\n      ,[hon_grupo_id]\n\t  \n  FROM [stg].[iris_HON]  with(nolock)\n\t  )\n\n--Sincronize a tabela de destino com dados atualizados da tabela de origem\nMERGE\t\n\t[a].[tbl_HON] AS destino\nUSING \n\tSTG_HON AS origem\n\n\tON (destino.hon_seq\t\t\t= origem.hon_seq\t\t\tAND \n\t\tdestino.estabelecimento = origem.estabelecimento)\n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração\nWHEN MATCHED \nTHEN UPDATE SET      \ndestino.[hon_med] = origem.[hon_med],\ndestino.[hon_psv_vinc] = origem.[hon_psv_vinc],\ndestino.[hon_ctf] = origem.[hon_ctf],\ndestino.[hon_str] = origem.[hon_str],\ndestino.[hon_tpctf] = origem.[hon_tpctf],\ndestino.[hon_str_solic] = origem.[hon_str_solic],\ndestino.[hon_seq] = origem.[hon_seq],\ndestino.[hon_aux] = origem.[hon_aux],\ndestino.[hon_cc1] = origem.[hon_cc1],\ndestino.[hon_pc1] = origem.[hon_pc1],\ndestino.[hon_vl1] = origem.[hon_vl1],\ndestino.[hon_cc2] = origem.[hon_cc2],\ndestino.[hon_pc2] = origem.[hon_pc2],\ndestino.[hon_vl2] = origem.[hon_vl2],\ndestino.[hon_cc3] = origem.[hon_cc3],\ndestino.[hon_pc3] = origem.[hon_pc3],\ndestino.[hon_vl3] = origem.[hon_vl3],\ndestino.[hon_cc4] = origem.[hon_cc4],\ndestino.[hon_pc4] = origem.[hon_pc4],\ndestino.[hon_vl4] = origem.[hon_vl4],\ndestino.[hon_cc5] = origem.[hon_cc5],\ndestino.[hon_pc5] = origem.[hon_pc5],\ndestino.[hon_vl5] = origem.[hon_vl5],\ndestino.[hon_cnv_cod] = origem.[hon_cnv_cod],\ndestino.[hon_dthr_ini] = origem.[hon_dthr_ini],\ndestino.[hon_status] = origem.[hon_status],\ndestino.[HON_USR_LOGIN_CAD] = origem.[HON_USR_LOGIN_CAD],\ndestino.[HON_USR_LOGIN_ALT] = origem.[HON_USR_LOGIN_ALT],\ndestino.[HON_DTHR_ALT] = origem.[HON_DTHR_ALT],\ndestino.[HON_DTHR_CAD] = origem.[HON_DTHR_CAD],\ndestino.[HON_GMR_COD] = origem.[HON_GMR_COD],\ndestino.[HON_CTF_CATEG] = origem.[HON_CTF_CATEG],\ndestino.[HON_EMP_COD] = origem.[HON_EMP_COD],\ndestino.[HON_CC6] = origem.[HON_CC6],\ndestino.[HON_PC6] = origem.[HON_PC6],\ndestino.[HON_VL6] = origem.[HON_VL6],\ndestino.[hon_psv_solic] = origem.[hon_psv_solic],\ndestino.[hon_ih_origem] = origem.[hon_ih_origem],\ndestino.[HON_DIA] = origem.[HON_DIA],\ndestino.[HON_HOR_INI] = origem.[HON_HOR_INI],\ndestino.[HON_HOR_FIM] = origem.[HON_HOR_FIM],\ndestino.[hon_obs] = origem.[hon_obs],\ndestino.[hon_smk_tipo] = origem.[hon_smk_tipo],\ndestino.[hon_smk_cod] = origem.[hon_smk_cod],\ndestino.[hon_forma_pag] = origem.[hon_forma_pag],\ndestino.[hon_ind_rat] = origem.[hon_ind_rat],\ndestino.[hon_gmr_solic] = origem.[hon_gmr_solic],\ndestino.[hon_cnv_emp_cod] = origem.[hon_cnv_emp_cod],\ndestino.[hon_psv_tipo_solic] = origem.[hon_psv_tipo_solic],\ndestino.[hon_tap_cod] = origem.[hon_tap_cod],\ndestino.[hon_dce_id] = origem.[hon_dce_id],\ndestino.[hon_adicional_1] = origem.[hon_adicional_1],\ndestino.[hon_adicional_2] = origem.[hon_adicional_2],\ndestino.[hon_adicional_3] = origem.[hon_adicional_3],\ndestino.[hon_adicional_4] = origem.[hon_adicional_4],\ndestino.[hon_adicional_5] = origem.[hon_adicional_5],\ndestino.[hon_adicional_6] = origem.[hon_adicional_6],\ndestino.[hon_grupo_id] = origem.[hon_grupo_id]\n\n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT \n\tVALUES (  \norigem.estabelecimento,\norigem.[hon_med],\norigem.[hon_psv_vinc],\norigem.[hon_ctf],\norigem.[hon_str],\norigem.[hon_tpctf],\norigem.[hon_str_solic],\norigem.[hon_seq],\norigem.[hon_aux],\norigem.[hon_cc1],\norigem.[hon_pc1],\norigem.[hon_vl1],\norigem.[hon_cc2],\norigem.[hon_pc2],\norigem.[hon_vl2],\norigem.[hon_cc3],\norigem.[hon_pc3],\norigem.[hon_vl3],\norigem.[hon_cc4],\norigem.[hon_pc4],\norigem.[hon_vl4],\norigem.[hon_cc5],\norigem.[hon_pc5],\norigem.[hon_vl5],\norigem.[hon_cnv_cod],\norigem.[hon_dthr_ini],\norigem.[hon_status],\norigem.[HON_USR_LOGIN_CAD],\norigem.[HON_USR_LOGIN_ALT],\norigem.[HON_DTHR_ALT],\norigem.[HON_DTHR_CAD],\norigem.[HON_GMR_COD],\norigem.[HON_CTF_CATEG],\norigem.[HON_EMP_COD],\norigem.[HON_CC6],\norigem.[HON_PC6],\norigem.[HON_VL6],\norigem.[hon_psv_solic],\norigem.[hon_ih_origem],\norigem.[HON_DIA],\norigem.[HON_HOR_INI],\norigem.[HON_HOR_FIM],\norigem.[hon_obs],\norigem.[hon_smk_tipo],\norigem.[hon_smk_cod],\norigem.[hon_forma_pag],\norigem.[hon_ind_rat],\norigem.[hon_gmr_solic],\norigem.[hon_cnv_emp_cod],\norigem.[hon_psv_tipo_solic],\norigem.[hon_tap_cod],\norigem.[hon_dce_id],\norigem.[hon_adicional_1],\norigem.[hon_adicional_2],\norigem.[hon_adicional_3],\norigem.[hon_adicional_4],\norigem.[hon_adicional_5],\norigem.[hon_adicional_6],\norigem.[hon_grupo_id]\n) ;\n \n\n\n"
								}
							]
						}
					},
					{
						"name": "STG TO DW FLE",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy STG FLE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH STG_FLE \nAS\n(\n\nSELECT DISTINCT\n\t   '96' as estabelecimento\n\t ,CASE  \n\t\t\tWHEN ISDATE(cast(fle_dthr_chegada as varchar(1000))) = 1 THEN  cast(fle_dthr_chegada as varchar(1000))  \n\t\t\tWHEN ISDATE(cast(fle_dthr_chegada as varchar(1000))) <> 1 THEN Null \n\t  END as fle_dthr_chegada\n      ,[FLE_PSV_COD]\n      ,[FLE_STR_COD]\n      ,[FLE_PAC_REG]\n      ,CASE  \n\t\t\tWHEN ISDATE(cast(fle_dthr_atendimento as varchar(1000))) = 1 THEN  cast(fle_dthr_atendimento as varchar(1000))  \n\t\t\tWHEN ISDATE(cast(fle_dthr_atendimento as varchar(1000))) <> 1 THEN Null \n\t   END as fle_dthr_atendimento\n      ,[FLE_ORDEM]\n      ,[FLE_STATUS]\n      ,[FLE_USR_LOGIN]\n    --  ,[FLE_OBS_OLD]\n      ,CASE  \n\t\t\tWHEN ISDATE(cast(fle_dthr_marcada as varchar(1000))) = 1 THEN  cast(fle_dthr_marcada as varchar(1000))  \n\t\t\tWHEN ISDATE(cast(fle_dthr_marcada as varchar(1000))) <> 1 THEN Null \n\t\tEND as fle_dthr_marcada\n      ,[FLE_MARC_EXTRA]\n      ,CASE  \n\t\t\tWHEN ISDATE(cast(FLE_DTHR_FINAL as varchar(1000))) = 1 THEN  cast(FLE_DTHR_FINAL as varchar(1000))  \n\t\t\tWHEN ISDATE(cast(FLE_DTHR_FINAL as varchar(1000))) <> 1 THEN Null \n\t\tEND as FLE_DTHR_FINAL\n      ,[FLE_PSV_RESP]\n      ,[FLE_MFL_RETORNO]\n      ,CASE  \n\t\t\tWHEN ISDATE(cast(FLE_DTHR_REG as varchar(1000))) = 1 THEN  cast(FLE_DTHR_REG as varchar(1000))  \n\t\t\tWHEN ISDATE(cast(FLE_DTHR_REG as varchar(1000))) <> 1 THEN Null \n\t\tEND as FLE_DTHR_REG\n      ,CASE  \n\t\t\tWHEN ISDATE(cast(fle_dthr_chegada_inicial as varchar(1000))) = 1 THEN  cast(fle_dthr_chegada_inicial as varchar(1000))  \n\t\t\tWHEN ISDATE(cast(fle_dthr_chegada_inicial as varchar(1000))) <> 1 THEN Null \n\t   END as fle_dthr_chegada_inicial\n      ,[FLE_PROCED]\n      ,[FLE_COR]\n      ,[FLE_BIP]\n      ,[FLE_VERSAO]\n      ,[FLE_USR_ATENDIMENTO]\n      ,[FLE_USR_FINAL]\n      ,CASE  \n\t\t\tWHEN ISDATE(cast(fle_dthr_hora_aguardo as varchar(1000))) = 1 THEN  cast(fle_dthr_hora_aguardo as varchar(1000))  \n\t\t\tWHEN ISDATE(cast(fle_dthr_hora_aguardo as varchar(1000))) <> 1 THEN Null \n\t\tEND as fle_dthr_hora_aguardo\n\n      ,[FLE_OSM_SERIE]\n      ,[FLE_OSM_NUM]\n      ,[FLE_SMM_NUM]\n      ,[FLE_LOC_COD]\n      ,[FLE_OBS]\n      ,[FLE_OBS_PSV]\n      ,[FLE_PREFERENCIAL]\n      ,[FLE_ID]\n      ,[FLE_SMA_SERIE]\n      ,[FLE_SMA_NUM]\n      ,[FLE_IND_OCUPADO]\n      ,[FLE_PSV_T_PREFIXO]\n      ,[FLE_ID_FILA_SOLICITACAO_RD]\n      ,[FLE_PAC_NOME]\n      ,[FLE_RETORNO]\n      ,[FLE_RISCO_QUEDA]\n      ,[FLE_VULNERAVEL]\n   --   ,[FLE_TOLIFE_EPISODE]\n\t  \n  FROM [stg].[iris_FLE]  with(nolock)\n\t  )\n\n--delete [a].[tbl_FLE] where Estabelecimento = 96\n--select count(*)  from [a].[tbl_FLE] where Estabelecimento = 96  --696.551\n\n--Sincronize a tabela de destino com dados atualizados da tabela de origem\nMERGE\t\n\t[a].[tbl_FLE] AS destino\nUSING \n\tSTG_FLE AS origem\n\n\tON (\n\t\tdestino.estabelecimento\t\t\t= origem.estabelecimento\t\t\tAND\t\n\t\tdestino.FLE_DTHR_CHEGADA\t\t= origem.FLE_DTHR_CHEGADA\t\t\tAND\n\t\tdestino.FLE_PSV_COD\t\t\t\t= origem.FLE_PSV_COD\t\t\t\tAND \n\t\tdestino.FLE_PAC_REG\t\t\t\t= origem.FLE_PAC_REG\t\t\t\tAND\n\t\tdestino.fle_str_cod\t\t\t\t= origem.fle_str_cod\t\t\t\tAND\t\n\n\t\tdestino.FLE_USR_LOGIN\t\t\t= origem.FLE_USR_LOGIN\t\t\t\tAND\n\t\tdestino.fle_loc_cod\t\t\t\t= origem.fle_loc_cod\t\t\t\tAND\n\t\t\n\t\tdestino.FLE_DTHR_ATENDIMENTO\t= origem.FLE_DTHR_ATENDIMENTO\t\tAND\n\t\tdestino.FLE_DTHR_FINAL\t\t\t= origem.FLE_DTHR_FINAL\t\t\t\tAND\n\t\tdestino.FLE_ORDEM\t\t\t\t= origem.FLE_ORDEM\t\t\t\t\tAND\n\t\tdestino.FLE_DTHR_MARCADA\t\t= origem.FLE_DTHR_MARCADA\t\t\t\n\t\t\n\t\t\n\t\n\t\t)\n\n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração\nWHEN MATCHED \nTHEN UPDATE SET      \ndestino.fle_bip=origem.fle_bip,\ndestino.fle_cor=origem.fle_cor,\ndestino.fle_dthr_atendimento=origem.fle_dthr_atendimento,\ndestino.fle_dthr_chegada=origem.fle_dthr_chegada,\ndestino.fle_dthr_chegada_inicial=origem.fle_dthr_chegada_inicial,\ndestino.FLE_DTHR_FINAL=origem.FLE_DTHR_FINAL,\ndestino.fle_dthr_hora_aguardo=origem.fle_dthr_hora_aguardo,\ndestino.fle_dthr_marcada=origem.fle_dthr_marcada,\ndestino.FLE_DTHR_REG=origem.FLE_DTHR_REG,\ndestino.fle_id=origem.fle_id,\ndestino.fle_id_fila_solicitacao_rd=origem.fle_id_fila_solicitacao_rd,\ndestino.fle_ind_ocupado=origem.fle_ind_ocupado,\ndestino.fle_loc_cod=origem.fle_loc_cod,\ndestino.fle_marc_extra=origem.fle_marc_extra,\ndestino.FLE_MFL_RETORNO=origem.FLE_MFL_RETORNO,\ndestino.fle_obs=origem.fle_obs,\ndestino.FLE_OBS_PSV=origem.FLE_OBS_PSV,\ndestino.fle_ordem=origem.fle_ordem,\ndestino.fle_osm_num=origem.fle_osm_num,\ndestino.fle_osm_serie=origem.fle_osm_serie,\ndestino.fle_pac_nome=origem.fle_pac_nome,\ndestino.fle_pac_reg=origem.fle_pac_reg,\ndestino.fle_preferencial=origem.fle_preferencial,\ndestino.fle_proced=origem.fle_proced,\ndestino.fle_psv_cod=origem.fle_psv_cod,\ndestino.FLE_PSV_RESP=origem.FLE_PSV_RESP,\ndestino.fle_psv_t_prefixo=origem.fle_psv_t_prefixo,\ndestino.fle_retorno=origem.fle_retorno,\ndestino.fle_risco_queda=origem.fle_risco_queda,\ndestino.fle_sma_num=origem.fle_sma_num,\ndestino.fle_sma_serie=origem.fle_sma_serie,\ndestino.fle_smm_num=origem.fle_smm_num,\ndestino.fle_status=origem.fle_status,\ndestino.fle_str_cod=origem.fle_str_cod,\ndestino.fle_usr_atendimento=origem.fle_usr_atendimento,\ndestino.fle_usr_final=origem.fle_usr_final,\ndestino.fle_usr_login=origem.fle_usr_login,\ndestino.fle_versao=origem.fle_versao,\ndestino.fle_vulneravel=origem.fle_vulneravel\n\n\n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino\nWHEN NOT MATCHED BY TARGET \nTHEN INSERT \n\tVALUES (  \norigem.estabelecimento,\norigem.fle_dthr_chegada,\norigem.fle_psv_cod,\norigem.fle_str_cod,\norigem.fle_pac_reg,\norigem.fle_dthr_atendimento,\norigem.fle_ordem,\norigem.fle_status,\norigem.fle_usr_login,\norigem.fle_obs,\norigem.fle_dthr_marcada,\norigem.fle_marc_extra,\norigem.FLE_DTHR_FINAL,\norigem.FLE_PSV_RESP,\norigem.FLE_OBS_PSV,\norigem.FLE_MFL_RETORNO,\norigem.FLE_DTHR_REG,\norigem.fle_dthr_chegada_inicial,\norigem.fle_cor,\norigem.fle_bip,\norigem.fle_proced,\norigem.fle_versao,\norigem.fle_usr_atendimento,\norigem.fle_usr_final,\norigem.fle_dthr_hora_aguardo,\norigem.fle_osm_serie,\norigem.fle_osm_num,\norigem.fle_smm_num,\norigem.fle_loc_cod,\norigem.fle_preferencial,\norigem.fle_id,\norigem.fle_sma_serie,\norigem.fle_sma_num,\norigem.fle_ind_ocupado,\norigem.fle_psv_t_prefixo,\norigem.fle_id_fila_solicitacao_rd,\norigem.fle_pac_nome,\norigem.fle_retorno,\norigem.fle_risco_queda,\norigem.fle_vulneravel\n\n) ;\n \n\n\n"
								}
							]
						}
					}
				],
				"concurrency": 5,
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/P&P"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LISTA_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/datasets/DS_IRIS_ODBC')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_STG')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/datasets/ORACLE_DINAMICO')]",
				"[concat(variables('factoryId'), '/datasets/SQL_DINAMICO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IRIS_STORAGE_ACCOUNT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lista arquivos",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_HMAISDATADRIVEN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": "urobrasil"
								}
							},
							"fieldList": [
								"childItems",
								"itemType",
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filtro",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lista arquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista arquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endsWith(item().name, 'csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filtro",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filtro').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copia dados para a STG",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('Drop table stg.',activity('Lista arquivos').output.itemName)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_SQL_STG",
											"type": "DatasetReference",
											"parameters": {
												"SCHEMA": "stg",
												"TABELA": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Move arquivo para PROCESSADOS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "STG DW",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@concat(activity('Lista arquivos').output.itemName,'\\Processados')",
													"type": "Expression"
												},
												"File": {
													"value": "@concat(item().name,'-',utcnow())",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Apaga arquivo",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move arquivo para PROCESSADOS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "sv_hmaisbrasildatadriven",
												"type": "LinkedServiceReference"
											},
											"path": "ceop/logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "STG DW",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copia dados para a STG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SQL_DESTINO",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": "MERGE\t           \n\tdw.ortocity AS destino           \nUSING            \n\tstg.ortocity AS origem           \n           \n    ON(        \ndestino.CD_ESTABELECIMENTO\t\t= origem.CD_ESTABELECIMENTO AND\ndestino.DS_ESTABELECIMENTO\t\t= origem.DS_ESTABELECIMENTO AND\ndestino.NR_ATENDIMENTO\t\t\t= origem.NR_ATENDIMENTO AND\ndestino.NR_INTERNO_CONTA\t\t= origem.NR_INTERNO_CONTA AND\ndestino.CD_PESSOA_FISICA\t\t= origem.CD_PESSOA_FISICA AND\ndestino.CD_CONVENIO\t\t\t\t= origem.CD_CONVENIO AND\ndestino.CD_MEDICO_EXECUTANTE\t=\torigem.CD_MEDICO_EXECUTANTE \n)        \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \ndestino.CD_ESTABELECIMENTO=origem.CD_ESTABELECIMENTO ,\ndestino.DS_ESTABELECIMENTO=origem.DS_ESTABELECIMENTO ,\ndestino.NR_ATENDIMENTO=origem.NR_ATENDIMENTO ,\ndestino.NR_INTERNO_CONTA=origem.NR_INTERNO_CONTA ,\ndestino.CD_PESSOA_FISICA=origem.CD_PESSOA_FISICA ,\ndestino.NM_PESSOA_FISICA=origem.NM_PESSOA_FISICA ,\ndestino.DT_NASCIMENTO=origem.DT_NASCIMENTO ,\ndestino.CD_CONVENIO=origem.CD_CONVENIO ,\ndestino.DS_CONVENIO=origem.DS_CONVENIO ,\ndestino.CD_MEDICO_EXECUTANTE=origem.CD_MEDICO_EXECUTANTE ,\ndestino.NM_MEDICO_EXECUTANTE=origem.NM_MEDICO_EXECUTANTE ,\ndestino.CD_SETOR_EXECUTANTE=origem.CD_SETOR_EXECUTANTE ,\ndestino.DS_SETOR_EXECUTANTE=origem.DS_SETOR_EXECUTANTE ,\ndestino.DT_ENTRADA=origem.DT_ENTRADA ,\ndestino.CD_ITEM=origem.CD_ITEM ,\ndestino.DS_ITEM=origem.DS_ITEM ,\ndestino.DT_LANC_ITEM=origem.DT_LANC_ITEM ,\ndestino.QT=origem.QT ,\ndestino.VALOR=origem.VALOR \n\n\n  \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.CD_ESTABELECIMENTO,\norigem.DS_ESTABELECIMENTO,\norigem.NR_ATENDIMENTO,\norigem.NR_INTERNO_CONTA,\norigem.CD_PESSOA_FISICA,\norigem.NM_PESSOA_FISICA,\norigem.DT_NASCIMENTO,\norigem.CD_CONVENIO,\norigem.DS_CONVENIO,\norigem.CD_MEDICO_EXECUTANTE,\norigem.NM_MEDICO_EXECUTANTE,\norigem.CD_SETOR_EXECUTANTE,\norigem.DS_SETOR_EXECUTANTE,\norigem.DT_ENTRADA,\norigem.CD_ITEM,\norigem.DS_ITEM,\norigem.DT_LANC_ITEM,\norigem.QT,\norigem.VALOR\n); "
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OdbcSource",
								"query": "\nSELECT \nosm_num\n,osm_pac\n,osm_dthr\n,osm_cnv\n,osm_proc\n,osm_mreq\n,osm_str\n,osm_status\n,osm_ind_urg\n,osm_serie\n,osm_hsp_num\n,osm_tipo\n,osm_dt_result\n,osm_atend\n,osm_obs_coleta\n,osm_lta_cod\n,osm_ctle_cnv\n,osm_nota_sala\n,osm_cid_cod\n,osm_obs\n,osm_mcnv\n,OSM_PADRAO_PRECO\n,OSM_DT_SOLIC\n,OSM_HORA_ESP\n,OSM_SUS_GRUPO_ATENDE\n,OSM_SUS_TIPO_ATENDE\n,OSM_CNPJ_SOLIC\n,OSM_SAP_COD\n,OSM_LIB_PAG\n,OSM_LIB_PAG_DTHR\n,OSM_LIB_PAG_USR\n,OSM_MTE_SERIE_BENEF\n,OSM_MTE_SEQ_BENEF\n,OSM_OSM_SERIE_BENEF\n,OSM_OSM_NUM_BENEF\n,OSM_LIB_PAG_SERIE\n,OSM_LIB_PAG_NUM\n,OSM_ASO_MES_REF\n,OSM_NUM_EXTERNO\n,OSM_CML_CNV_COD\n,OSM_LEG_COD\n,OSM_CML_CONV_COD\n,OSM_CML_CONV_NOME\n,OSM_LIB_PAG_NFL_NUM\n,OSM_LIB_PAG_NFL_SERIE\n,OSM_IND_COLETA_DOM\n,OSM_MREQ_IND_SLINE\n,osm_usr_login_cad\n,osm_mreq_2\n,osm_mreq_3\n,osm_dt_solic_2\n,osm_dt_solic_3\n,osm_nota_sala_cobranca_mat\n,OSM_MCNV_PROTOCOLO\n,osm_tipo_acidente\n,osm_tipo_doenca\n,osm_tempo_doenca\n,osm_escala_doenca\n,osm_tiss_indic_clinica\n,osm_tiss_tipo_atende\n,OSM_TISS_TIPO_SAIDA\n,osm_sus_idade\n,osm_sus_sexo\n,osm_dthr_saida\n,osm_empnome_solic\n,osm_tiss_guia_principal\n,osm_cnes_solic\n,osm_w_login\n,osm_w_senha\n,osm_num_externo_alfa\n,osm_pln_cod\n,osm_obs_tiss\n,osm_psv_indic\n,osm_imp_etiq\n,osm_ind_web\n,osm_etiqueta_cip_lsf\n,osm_tipo_audit\n,OSM_PAC_ETIQUETA_CIP_LSF\n,osm_planserv_rat_empresa\n,osm_cod_cebim\n,osm_email_result\n,osm_cr_cor\n,osm_planserv_bm_mot_tipo\n,osm_planserv_bm_mot_cod\n,osm_obs_extenso\n,osm_trak_passagem\n,osm_id_alvaro\n,osm_obs_pend_b2b\n,osm_ind_vacina\n,osm_lib_pag_prt\n,osm_tiss_guia_operadora\n,osm_planserv_rat_dt_emis\n,osm_dthr_biometria_unimed\n,osm_resultado_biometria_unimed\n,OSM_IND_ANTECIPADA\n,OSM_ORI_SOL\n,osm_click_protocolo\n,osm_click_requisicao\n,osm_click_ind_integracao\n,osm_dthr_exp\n,osm_orp_num\n,osm_sus_ind_prog_transp\n,osm_mcnv_protocolo_v2\n,osm_token\n,osm_cod_justificativa\n,osm_status_confirmacao\n,osm_id_integra\n,osm_tp_ident_benef\n  FROM dba.osm\n\n\n",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_IRIS_ODBC",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "iris_osm"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/P&P"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN_BINARY')]",
				"[concat(variables('factoryId'), '/datasets/DS_IRIS_ODBC')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_STG')]",
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL_DESTINO')]",
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Importa CSV Py to AZ')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CSV to AZ",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CSV_CNPJ_PY_AZ_FINAL",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_DIM_CNPJ",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "CNPJ"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-20T18:04:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CSV_CNPJ_PY_AZ_FINAL')]",
				"[concat(variables('factoryId'), '/datasets/AZ_DIM_CNPJ')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Kill_Sessions_Sql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Kill_Sessions_Sql",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "declare @dsql nvarchar(max)=''\n\nselect @dsql = 'kill ' + cast(session_id as varchar(20)) + ';' from SYS.dm_exec_sessions\n\nwhere LOGIN_NAME = 'OPTY_RO_LOGIN'\n\nexec(@dsql)"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "SP_MAPPING_INDEX",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Kill_Sessions_Sql",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_MAPPING_INDEX]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Limpa Tabelas DW",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "SP_MAPPING_INDEX",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "TRUNCATE TABLE dw.tbl_AGENDA;\nTRUNCATE TABLE dw.tbl_AGENDA_PACIENTE;\nTRUNCATE TABLE dw.tbl_AGENDA_CONSULTA;\nTRUNCATE TABLE dw.tbl_AGENDA_CLASSIF;\nTRUNCATE TABLE dw.tbl_AGENDA_MOTIVO_CANCELAMENTO;\nTRUNCATE TABLE dw.tbl_AGENDA_PACIENTE_CLASSIF;\nTRUNCATE TABLE dw.tbl_CID_CATEGORIA;\nTRUNCATE TABLE dw.tbl_CID_DOENCA;\nTRUNCATE TABLE dw.tbl_CLASSE_MATERIAL;\nTRUNCATE TABLE dw.tbl_conta_paciente;\nTRUNCATE TABLE dw.tbl_CONTA_PACIENTE_RESUMO;\nTRUNCATE TABLE dw.tbl_convenio;\nTRUNCATE TABLE dw.tbl_CONVENIO_RETORNO;\nTRUNCATE TABLE dw.tbl_CONVENIO_RETORNO_ITEM;\nTRUNCATE TABLE dw.tbl_empresa;\nTRUNCATE TABLE dw.tbl_estabelecimento;\nTRUNCATE TABLE dw.tbl_estrutura_procedimento;\nTRUNCATE TABLE dw.tbl_local_estoque;\nTRUNCATE TABLE dw.tbl_material;\nTRUNCATE TABLE dw.tbl_medico;\nTRUNCATE TABLE dw.tbl_operacao_estoque;\nTRUNCATE TABLE dw.tbl_pessoa_juridica;\nTRUNCATE TABLE dw.tbl_procedencia;\nTRUNCATE TABLE dw.tbl_procedimento;\nTRUNCATE TABLE dw.tbl_setor_atendimento;\nTRUNCATE TABLE dw.tbl_tipo_valor;\nTRUNCATE TABLE dw.tbl_TITULO_RECEBER;\nTRUNCATE TABLE dw.tbl_TITULO_RECEBER_LIQ;\nTRUNCATE TABLE dw.tbl_valor_dominio;",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Log Tabelas Tasy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Busca SQL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM ADF.CTR_AJUSTE_DW WHERE HABILITA_ETL = 'S'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AZ_SQL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Gera Dados Busca",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Busca SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Busca SQL').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ExtracaoLog",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@replace(item().DS_SQL,'\"','')",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ORACLE_LOG",
											"type": "DatasetReference",
											"parameters": {
												"nm_keyvault": {
													"value": "@item().NOME_KEYVAULT",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_TABELA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Insert Dados Stg Final",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Limpa Tabela Destino",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Busca SQL').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT * FROM ',item().NOME_SCHEMA_TABELA_DESTINO,'.',item().NOME_TABELA_DESTINO)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AZ_SQL",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": {
													"value": "@item().NOME_SCHEMA_TABELA_DESTINO",
													"type": "Expression"
												},
												"tabela_destino": {
													"value": "@concat('DW_AJ_',item().NOME_TABELA_ORIGEM,'_TASY')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Limpa Tabela Destino",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Gera Dados Busca",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Busca SQL').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Truncate Table",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "@concat('BEGIN TRY TRUNCATE TABLE stg.','DW_AJ',item().NOME_TABELA_ORIGEM,'_TASY END TRY BEGIN CATCH PRINT 0 END CATCH ')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Busca Tab Pipeline",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert Dados Stg Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DISTINCT NOME_TABELA_ORIGEM FROM ADF.CTR_AJUSTE_DW\nWHERE HABILITA_ETL = 'S'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AZ_SQL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "LIsta Tabelas",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Busca Tab Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Busca Tab Pipeline').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().NOME_TABELA_ORIGEM",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "PROCEDIMENTO_PACIENTE",
												"activities": [
													{
														"name": "Execute Pipeline1",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "AJ_PROCEDIMENTO_PACIENTE",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {}
														}
													}
												]
											},
											{
												"value": "MATERIAL_ATEND_PACIENTE",
												"activities": [
													{
														"name": "Execute Pipeline2",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "AJ_MATERIAL_ATEND_PACIENTE",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "ODS Producao Diaria Tasy",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Raw data Producao Diaria Tasy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "\nIF (EXISTS (SELECT *    \n                 FROM INFORMATION_SCHEMA.TABLES    \n                 WHERE TABLE_SCHEMA = 'stg'    \n                 AND  TABLE_NAME = 'TBL_ODS_AJ_TASY_PROD_DIARIA_TMP'))   \nBEGIN   \n    drop table stg.TBL_ODS_AJ_TASY_PROD_DIARIA_TMP   \nEND;   \n   \n   \nWITH PROC_PRINC AS(   \n    SELECT    \n         A.ESTABELECIMENTO   \n         ,A.NR_INTERNO_CONTA    \n         ,ROW_NUMBER()OVER(PARTITION BY A.ESTABELECIMENTO, A.NR_INTERNO_CONTA ORDER BY A.VL_ITEM DESC) ID_LINHA   \n         ,cast(A.CD_ITEM as varchar(50)) + '|' + CAST(A.IE_ORIGEM_PROCED AS VARCHAR(10)) AS CD_PROC_PRINCIPAL   \n    FROM STG.tbl_tasy_aj_producao_diaria_tmp A   \n   INNER JOIN VW_ESTRUTURA_PROCEDIMENTO EP ON EP.ESTABELECIMENTO = A.ESTABELECIMENTO AND EP.IE_ORIGEM_PROCED = A.IE_ORIGEM_PROCED AND ('P|'+CAST(EP.CD_PROCEDIMENTO AS VARCHAR(100))) = A.CD_ITEM AND EP.IE_MAT_MED_TX = 0    \n    -- WHERE A.NR_INTERNO_CONTA = 55505   \n    --     AND A.ESTABELECIMENTO = 1   \n)   \n   \nSELECT    \n       CAST(A.ESTABELECIMENTO AS VARCHAR(10))          AS ESTABELECIMENTO   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.NR_INTERNO_CONTA AS VARCHAR(50)) + '|' + CAST(A.NR_SEQUENCIA AS VARCHAR(100)) + '|' + CAST(A.CD_ITEM AS VARCHAR(50))  AS FK_NR_SEQUENCIA   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.CD_ESTABELECIMENTO AS VARCHAR(50))                                                                                    AS FK_CD_ESTABELECIMENTO   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.CD_PESSOA_FISICA AS VARCHAR(50))                                                                                      AS FK_CD_PESSOA_FISICA   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.NR_ATENDIMENTO AS VARCHAR(50))                                                                                        AS FK_NR_ATENDIMENTO   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.NR_INTERNO_CONTA AS VARCHAR(50))                                                                                      AS FK_NR_INTERNO_CONTA   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.CD_CONVENIO AS VARCHAR(50))                                                                                           AS FK_CD_CONVENIO   \n       ,A.DT_ENTRADA                                                       \n       ,A.DT_LANCAMENTO                                                    \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(X.CD_PROC_PRINCIPAL AS VARCHAR(50))                                                                                     AS FK_CD_PROC_PRINCIPAL   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.CD_ITEM AS VARCHAR(100)) + '|' + CAST(A.IE_ORIGEM_PROCED AS VARCHAR(10))                                               AS FK_CD_ITEM   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.NR_PROC_INTERNO AS VARCHAR(100))                                                                                      AS FK_NR_PROC_INTERNO   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.CD_MEDICO_ATENDIMENTO AS VARCHAR(100))                                                                                AS FK_CD_MEDICO_ATENDIMENTO   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.CD_MEDICO_SOL AS VARCHAR(100))                                                                                        AS FK_CD_MEDICO_SOLICITANTE   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.CD_MEDICO_EXECUTANTE AS VARCHAR(100))                                                                                 AS FK_CD_MEDICO_EXECUTANTE   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.CD_MEDICO_RESP AS VARCHAR(100))                                                                                       AS FK_CD_MEDICO_RESPONSAVEL   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.CD_SETOR_ATENDIMENTO AS VARCHAR(100))     AS FK_CD_SETOR_ATENDIMENTO   \n     ,CAST(A.QTD_ITEM AS decimal)                                                                                                                                                 AS QT_ITEM   \n       ,CAST(A.QT_PROCEDIMENTO AS decimal)                                                                                                                                          AS QT_PROCEDIMENTO   \n       ,CAST(A.VL_ITEM  AS money)                                                                                                                                                   AS VL_ITEM      \n       ,CAST(A.VL_ITEM  AS money)                                                                                                                                                   AS VL_ITEM_AJUSTE      \n       ,CAST(A.VL_MEDICO  AS money)                                                                                                                                                 AS VL_HM    \n       ,1                                                                                                                                                                           AS IE_CONSIDERAR      \n       ,GETDATE()                                                                                                                                                                   AS DT_PROCESSAMENTO   \n   \nINTO STG.TBL_ODS_AJ_TASY_PROD_DIARIA_TMP   \nFROM STG.tbl_tasy_aj_producao_diaria_tmp A   \nLEFT JOIN PROC_PRINC X ON A.ESTABELECIMENTO = X.ESTABELECIMENTO AND A.NR_INTERNO_CONTA = X.NR_INTERNO_CONTA AND X.ID_LINHA = 1   \nWHERE A.NR_INTERNO_CONTA IS NOT NULL   \n   "
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Raw data Producao Diaria Tasy",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "LIsta Tabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "IF (EXISTS (SELECT *        \n                 FROM INFORMATION_SCHEMA.TABLES        \n                 WHERE TABLE_SCHEMA = 'stg'        \n                 AND  TABLE_NAME = 'tbl_tasy_aj_producao_diaria_tmp'))       \nBEGIN       \n    drop table stg.tbl_tasy_aj_producao_diaria_tmp       \nEND;        \n        \nwith prod as (        \n        \nselect DISTINCT        \n    pp.estabelecimento,        \n    ap.CD_ESTABELECIMENTO,            \n    PP.nr_atendimento                                              as NR_ATENDIMENTO ,        \n    PP.nr_interno_conta                                            as NR_INTERNO_CONTA ,        \n    CP.cd_convenio_parametro                                       as CD_CONVENIO ,        \n    ap.cd_pessoa_fisica,                \n    AP.dt_entrada                                                  as DT_ENTRADA ,            \n    pp.cd_medico_executor                                          AS CD_MEDICO_EXECUTANTE ,        \n    ap.cd_medico_resp,        \n    ap.cd_medico_atendimento,        \n    pp.cd_medico_req                                               AS CD_MEDICO_SOL,        \n    pp.cd_setor_atendimento,        \n    'P|' + CAST(PP.NR_SEQUENCIA AS VARCHAR(255))                   AS NR_SEQUENCIA,        \n    cast(pp.DT_PROCEDIMENTO as date)                               as DT_LANCAMENTO,         \n    PP.IE_ORIGEM_PROCED                                            AS IE_ORIGEM_PROCED,            \n    'P|'+CAST(PP.cd_procedimento AS VARCHAR(100))                  as CD_ITEM,         \n    PP.NR_SEQ_PROC_INTERNO                                         AS NR_PROC_INTERNO,                \n    PP.qt_procedimento                                             as QTD_ITEM,    \n    CASE    \n        WHEN EP.IE_PACOTE = 0 AND EP.IE_MAT_MED_TX = 0 THEN 1    \n            ELSE 0    \n    END                                                            AS QT_PROCEDIMENTO,                 \n    PP.vl_medico                                                   as VL_MEDICO ,        \n    CASE   \n        WHEN EP.IE_PACOTE = 1 THEN 0   \n            ELSE PP.vl_procedimento   \n    END                                                            as VL_ITEM,        \n    PP.DT_ATUALIZACAO        \n        \n            \nfrom stg.aj_procedimento_paciente          pp           with(nolock)        \n-- inner join stg.tbl_procedimento             P            with(nolock)         on  ((pp.cd_procedimento = p.cd_procedimento)                      and (pp.ie_origem_proced = p.ie_origem_proced)) and pp.estabelecimento = p.ESTABELECIMENTO        \ninner join dw.tbl_atendimento_paciente     ap           with(nolock)         on ap.nr_atendimento = pp.nr_atendimento                           and ap.ESTABELECIMENTO = pp.ESTABELECIMENTO        \nleft join dw.tbl_conta_paciente            cp           with(nolock)         on cp.nr_interno_conta = pp.nr_interno_conta                       and cp.ESTABELECIMENTO = pp.ESTABELECIMENTO        \nOUTER APPLY(        \n        SELECT TOP 1 C.CD_AREA_PROCEDIMENTO, C.IE_PACOTE, C.IE_MAT_MED_TX, C.DS_AREA_PROCEDIMENTO        \n        FROM vw_estrutura_procedimento C        \n        WHERE C.CD_PROCEDIMENTO = PP.CD_PROCEDIMENTO AND C.IE_ORIGEM_PROCED = PP.IE_ORIGEM_PROCED AND C.ESTABELECIMENTO = PP.ESTABELECIMENTO AND C.IE_SITUACAO = 'A'         \n)ep        \n        \nwhere pp.cd_motivo_exc_conta is null        \n        and CP.ie_cancelamento is null        \n        and CP.nr_interno_conta is not null        \n        or (--(ep.CD_AREA_PROCEDIMENTO <> 10 and PP.ESTABELECIMENTO = 1)  OR     \n            (PP.ESTABELECIMENTO = 2 AND PP.NR_PRESCRICAO IS NOT NULL))  \n        -- and cast(pp.DT_ATUALIZACAO as date) >= @DT_PROCESSAMENTO   \n        -- and cp.ESTABELECIMENTO = 1        \n        -- and cp.NR_INTERNO_CONTA = 1305983        \n        -- and pp.nr_atendimento = 938011 and pp.ESTABELECIMENTO = '1'        \n        -- AND PP.NR_ATENDIMENTO = 6324040 AND PP.ESTABELECIMENTO = '2'        \n        -- AND PP.NR_ATENDIMENTO = 6322484 AND PP.ESTABELECIMENTO = '2'        \n                \n    --and obter_area_procedimento(a.cd_procedimento  a.ie_origem_proced) <> 10        \n        \n         \n        \nunion all        \n        \n         \n     \nselect         \n    map.estabelecimento,        \n    ap.cd_estabelecimento,        \n    map.nr_atendimento                                           as NR_ATENDIMENTO ,        \n    map.nr_interno_conta                                         as NR_INTERNO_CONTA,         \n    cp.cd_convenio_parametro                                     as CD_CONVENIO ,        \n    ap.cd_pessoa_fisica,         \n     ap.dt_entrada                                               as DT_ENTRADA ,        \n    0                                                            AS CD_MEDICO_EXECUTANTE,        \n    ap.cd_medico_resp,        \n    ap.cd_medico_atendimento,        \n    0 as CD_MEDICO_SOL,        \n    map.CD_SETOR_ATENDIMENTO,        \n    'M|' + CAST(MAP.NR_SEQUENCIA AS VARCHAR(255)) AS NR_SEQUENCIA,        \n    cast(map.dt_atendimento as date)                            as DT_LANCAMENTO ,        \n    NULL                                                        AS IE_ORIGEM_PROCED,        \n    'M|'+ CAST(map.cd_material AS VARCHAR(100))                 as CD_ITEM ,        \n    0                                                           AS NR_PROC_INTERNO,         \n    map.qt_material                                             as QT_ITEM ,    \n    0                                                           AS QT_PROCEDIMENTO,        \n    0                                                           as VL_MEDICO ,        \n    map.vl_material                                             as VL_ITEM,         \n    MAP.DT_ATUALIZACAO        \n        \nfrom stg.aj_material_atend_paciente            map          with(nolock)          \nleft join dw.tbl_atendimento_paciente           ap           with(nolock)          on ap.nr_atendimento = map.nr_atendimento                             and ap.ESTABELECIMENTO = map.ESTABELECIMENTO        \nleft join dw.tbl_conta_paciente                 cp           with(nolock)          on cp.nr_interno_conta = map.nr_interno_conta                         and cp.ESTABELECIMENTO = map.ESTABELECIMENTO        \n        \n        \nwhere map.cd_motivo_exc_conta is null        \nand cp.ie_cancelamento is null        \nand cp.nr_interno_conta is not null     \nAND ((MAP.ESTABELECIMENTO = 1 AND MAP.NR_PRESCRICAO IS NOT NULL OR MAP.NR_PRESCRICAO IS NULL) OR (MAP.ESTABELECIMENTO = 2 AND MAP.NR_PRESCRICAO IS NOT NULL))  \n-- and cast(map.DT_ATUALIZACAO as date) >= @DT_PROCESSAMENTO              \n-- and cp.estabelecimento = 1        \n-- and cp.nr_interno_conta = 1305983        \n-- and map.nr_atendimento = 938011 and map.ESTABELECIMENTO = '1'        \n-- AND MAP.NR_ATENDIMENTO = 6324040 AND MAP.ESTABELECIMENTO = '2'        \n-- AND MAP.NR_ATENDIMENTO = 6322484 AND MAP.ESTABELECIMENTO = '2'        \n        \n)        \n        \nselect *        \nINTO stg.tbl_tasy_aj_producao_diaria_tmp       \nfrom prod  \n\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/Ajuste DW Tasy/Antigo"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AZ_SQL')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/ORACLE_LOG')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_DINAMICO')]",
				"[concat(variables('factoryId'), '/pipelines/AJ_PROCEDIMENTO_PACIENTE')]",
				"[concat(variables('factoryId'), '/pipelines/AJ_MATERIAL_ATEND_PACIENTE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Log Tabelas Tasy_antigo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Busca SQL",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT * FROM ADF.CTR_AJUSTE_DW WHERE HABILITA_ETL = 'S'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AZ_SQL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Gera Dados Busca",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Busca SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Busca SQL').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ExtracaoLog",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@replace(item().DS_SQL,'\"','')",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ORACLE_LOG",
											"type": "DatasetReference",
											"parameters": {
												"nm_keyvault": {
													"value": "@item().NOME_KEYVAULT",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_TABELA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Insert Dados Stg Final",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Limpa Tabela Destino",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Busca SQL').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('SELECT * FROM ',item().NOME_SCHEMA_TABELA_DESTINO,'.',item().NOME_TABELA_DESTINO)",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AZ_SQL",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": {
													"value": "@item().NOME_SCHEMA_TABELA_DESTINO",
													"type": "Expression"
												},
												"tabela_destino": {
													"value": "@concat('DW_AJ_',item().NOME_TABELA_ORIGEM,'_TASY')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Limpa Tabela Destino",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Gera Dados Busca",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Busca SQL').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Truncate Table",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "@concat('BEGIN TRY TRUNCATE TABLE stg.','DW_AJ',item().NOME_TABELA_ORIGEM,'_TASY END TRY BEGIN CATCH PRINT 0 END CATCH ')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Busca Tab Pipeline",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Insert Dados Stg Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DISTINCT NOME_TABELA_ORIGEM FROM ADF.CTR_AJUSTE_DW\nWHERE HABILITA_ETL = 'S'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AZ_SQL",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "LIsta Tabelas",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Busca Tab Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Busca Tab Pipeline').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().NOME_TABELA_ORIGEM",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "PROCEDIMENTO_PACIENTE",
												"activities": [
													{
														"name": "Execute Pipeline1",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "AJ_PROCEDIMENTO_PACIENTE",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {}
														}
													}
												]
											},
											{
												"value": "MATERIAL_ATEND_PACIENTE",
												"activities": [
													{
														"name": "Execute Pipeline2",
														"type": "ExecutePipeline",
														"dependsOn": [],
														"userProperties": [],
														"typeProperties": {
															"pipeline": {
																"referenceName": "AJ_MATERIAL_ATEND_PACIENTE",
																"type": "PipelineReference"
															},
															"waitOnCompletion": true,
															"parameters": {}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "ODS Producao Diaria Tasy",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Raw data Producao Diaria Tasy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "\nIF (EXISTS (SELECT *    \n                 FROM INFORMATION_SCHEMA.TABLES    \n                 WHERE TABLE_SCHEMA = 'stg'    \n                 AND  TABLE_NAME = 'TBL_ODS_AJ_TASY_PROD_DIARIA_TMP'))   \nBEGIN   \n    drop table stg.TBL_ODS_AJ_TASY_PROD_DIARIA_TMP   \nEND;   \n   \n   \nWITH PROC_PRINC AS(   \n    SELECT    \n         A.ESTABELECIMENTO   \n         ,A.NR_INTERNO_CONTA    \n         ,ROW_NUMBER()OVER(PARTITION BY A.ESTABELECIMENTO, A.NR_INTERNO_CONTA ORDER BY A.VL_ITEM DESC) ID_LINHA   \n         ,cast(A.CD_ITEM as varchar(50)) + '|' + CAST(A.IE_ORIGEM_PROCED AS VARCHAR(10)) AS CD_PROC_PRINCIPAL   \n    FROM STG.tbl_tasy_aj_producao_diaria_tmp A   \n   INNER JOIN VW_ESTRUTURA_PROCEDIMENTO EP ON EP.ESTABELECIMENTO = A.ESTABELECIMENTO AND EP.IE_ORIGEM_PROCED = A.IE_ORIGEM_PROCED AND ('P|'+CAST(EP.CD_PROCEDIMENTO AS VARCHAR(100))) = A.CD_ITEM AND EP.IE_MAT_MED_TX = 0    \n    -- WHERE A.NR_INTERNO_CONTA = 55505   \n    --     AND A.ESTABELECIMENTO = 1   \n)   \n   \nSELECT    \n       CAST(A.ESTABELECIMENTO AS VARCHAR(10))          AS ESTABELECIMENTO   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.NR_INTERNO_CONTA AS VARCHAR(50)) + '|' + CAST(A.NR_SEQUENCIA AS VARCHAR(100)) + '|' + CAST(A.CD_ITEM AS VARCHAR(50))  AS FK_NR_SEQUENCIA   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.CD_ESTABELECIMENTO AS VARCHAR(50))                                                                                    AS FK_CD_ESTABELECIMENTO   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.CD_PESSOA_FISICA AS VARCHAR(50))                                                                                      AS FK_CD_PESSOA_FISICA   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.NR_ATENDIMENTO AS VARCHAR(50))                                                                                        AS FK_NR_ATENDIMENTO   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.NR_INTERNO_CONTA AS VARCHAR(50))                                                                                      AS FK_NR_INTERNO_CONTA   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.CD_CONVENIO AS VARCHAR(50))                                                                                           AS FK_CD_CONVENIO   \n       ,A.DT_ENTRADA                                                       \n       ,A.DT_LANCAMENTO                                                    \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(X.CD_PROC_PRINCIPAL AS VARCHAR(50))                                                                                     AS FK_CD_PROC_PRINCIPAL   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.CD_ITEM AS VARCHAR(100)) + '|' + CAST(A.IE_ORIGEM_PROCED AS VARCHAR(10))                                               AS FK_CD_ITEM   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.NR_PROC_INTERNO AS VARCHAR(100))                                                                                      AS FK_NR_PROC_INTERNO   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.CD_MEDICO_ATENDIMENTO AS VARCHAR(100))                                                                                AS FK_CD_MEDICO_ATENDIMENTO   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.CD_MEDICO_SOL AS VARCHAR(100))                                                                                        AS FK_CD_MEDICO_SOLICITANTE   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.CD_MEDICO_EXECUTANTE AS VARCHAR(100))                                                                                 AS FK_CD_MEDICO_EXECUTANTE   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.CD_MEDICO_RESP AS VARCHAR(100))                                                                                       AS FK_CD_MEDICO_RESPONSAVEL   \n       ,CAST(A.ESTABELECIMENTO AS VARCHAR(10)) + '|' + CAST(A.CD_SETOR_ATENDIMENTO AS VARCHAR(100))     AS FK_CD_SETOR_ATENDIMENTO   \n     ,CAST(A.QTD_ITEM AS decimal)                                                                                                                                                 AS QT_ITEM   \n       ,CAST(A.QT_PROCEDIMENTO AS decimal)                                                                                                                                          AS QT_PROCEDIMENTO   \n       ,CAST(A.VL_ITEM  AS money)                                                                                                                                                   AS VL_ITEM      \n       ,CAST(A.VL_ITEM  AS money)                                                                                                                                                   AS VL_ITEM_AJUSTE      \n       ,CAST(A.VL_MEDICO  AS money)                                                                                                                                                 AS VL_HM    \n       ,1                                                                                                                                                                           AS IE_CONSIDERAR      \n       ,GETDATE()                                                                                                                                                                   AS DT_PROCESSAMENTO   \n   \nINTO STG.TBL_ODS_AJ_TASY_PROD_DIARIA_TMP   \nFROM STG.tbl_tasy_aj_producao_diaria_tmp A   \nLEFT JOIN PROC_PRINC X ON A.ESTABELECIMENTO = X.ESTABELECIMENTO AND A.NR_INTERNO_CONTA = X.NR_INTERNO_CONTA AND X.ID_LINHA = 1   \nWHERE A.NR_INTERNO_CONTA IS NOT NULL   \n   "
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Raw data Producao Diaria Tasy",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "LIsta Tabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "IF (EXISTS (SELECT *        \n                 FROM INFORMATION_SCHEMA.TABLES        \n                 WHERE TABLE_SCHEMA = 'stg'        \n                 AND  TABLE_NAME = 'tbl_tasy_aj_producao_diaria_tmp'))       \nBEGIN       \n    drop table stg.tbl_tasy_aj_producao_diaria_tmp       \nEND;        \n        \nwith prod as (        \n        \nselect DISTINCT        \n    pp.estabelecimento,        \n    ap.CD_ESTABELECIMENTO,            \n    PP.nr_atendimento                                              as NR_ATENDIMENTO ,        \n    PP.nr_interno_conta                                            as NR_INTERNO_CONTA ,        \n    CP.cd_convenio_parametro                                       as CD_CONVENIO ,        \n    ap.cd_pessoa_fisica,                \n    AP.dt_entrada                                                  as DT_ENTRADA ,            \n    pp.cd_medico_executor                                          AS CD_MEDICO_EXECUTANTE ,        \n    ap.cd_medico_resp,        \n    ap.cd_medico_atendimento,        \n    pp.cd_medico_req                                               AS CD_MEDICO_SOL,        \n    pp.cd_setor_atendimento,        \n    'P|' + CAST(PP.NR_SEQUENCIA AS VARCHAR(255))                   AS NR_SEQUENCIA,        \n    cast(pp.DT_PROCEDIMENTO as date)                               as DT_LANCAMENTO,         \n    PP.IE_ORIGEM_PROCED                                            AS IE_ORIGEM_PROCED,            \n    'P|'+CAST(PP.cd_procedimento AS VARCHAR(100))                  as CD_ITEM,         \n    PP.NR_SEQ_PROC_INTERNO                                         AS NR_PROC_INTERNO,                \n    PP.qt_procedimento                                             as QTD_ITEM,    \n    CASE    \n        WHEN EP.IE_PACOTE = 0 AND EP.IE_MAT_MED_TX = 0 THEN 1    \n            ELSE 0    \n    END                                                            AS QT_PROCEDIMENTO,                 \n    PP.vl_medico                                                   as VL_MEDICO ,        \n    CASE   \n        WHEN EP.IE_PACOTE = 1 THEN 0   \n            ELSE PP.vl_procedimento   \n    END                                                            as VL_ITEM,        \n    PP.DT_ATUALIZACAO        \n        \n            \nfrom stg.aj_procedimento_paciente          pp           with(nolock)        \n-- inner join stg.tbl_procedimento             P            with(nolock)         on  ((pp.cd_procedimento = p.cd_procedimento)                      and (pp.ie_origem_proced = p.ie_origem_proced)) and pp.estabelecimento = p.ESTABELECIMENTO        \ninner join dw.tbl_atendimento_paciente     ap           with(nolock)         on ap.nr_atendimento = pp.nr_atendimento                           and ap.ESTABELECIMENTO = pp.ESTABELECIMENTO        \nleft join dw.tbl_conta_paciente            cp           with(nolock)         on cp.nr_interno_conta = pp.nr_interno_conta                       and cp.ESTABELECIMENTO = pp.ESTABELECIMENTO        \nOUTER APPLY(        \n        SELECT TOP 1 C.CD_AREA_PROCEDIMENTO, C.IE_PACOTE, C.IE_MAT_MED_TX, C.DS_AREA_PROCEDIMENTO        \n        FROM vw_estrutura_procedimento C        \n        WHERE C.CD_PROCEDIMENTO = PP.CD_PROCEDIMENTO AND C.IE_ORIGEM_PROCED = PP.IE_ORIGEM_PROCED AND C.ESTABELECIMENTO = PP.ESTABELECIMENTO AND C.IE_SITUACAO = 'A'         \n)ep        \n        \nwhere pp.cd_motivo_exc_conta is null        \n        and CP.ie_cancelamento is null        \n        and CP.nr_interno_conta is not null        \n        or (--(ep.CD_AREA_PROCEDIMENTO <> 10 and PP.ESTABELECIMENTO = 1)  OR     \n            (PP.ESTABELECIMENTO = 2 AND PP.NR_PRESCRICAO IS NOT NULL))  \n        -- and cast(pp.DT_ATUALIZACAO as date) >= @DT_PROCESSAMENTO   \n        -- and cp.ESTABELECIMENTO = 1        \n        -- and cp.NR_INTERNO_CONTA = 1305983        \n        -- and pp.nr_atendimento = 938011 and pp.ESTABELECIMENTO = '1'        \n        -- AND PP.NR_ATENDIMENTO = 6324040 AND PP.ESTABELECIMENTO = '2'        \n        -- AND PP.NR_ATENDIMENTO = 6322484 AND PP.ESTABELECIMENTO = '2'        \n                \n    --and obter_area_procedimento(a.cd_procedimento  a.ie_origem_proced) <> 10        \n        \n         \n        \nunion all        \n        \n         \n     \nselect         \n    map.estabelecimento,        \n    ap.cd_estabelecimento,        \n    map.nr_atendimento                                           as NR_ATENDIMENTO ,        \n    map.nr_interno_conta                                         as NR_INTERNO_CONTA,         \n    cp.cd_convenio_parametro                                     as CD_CONVENIO ,        \n    ap.cd_pessoa_fisica,         \n     ap.dt_entrada                                               as DT_ENTRADA ,        \n    0                                                            AS CD_MEDICO_EXECUTANTE,        \n    ap.cd_medico_resp,        \n    ap.cd_medico_atendimento,        \n    0 as CD_MEDICO_SOL,        \n    map.CD_SETOR_ATENDIMENTO,        \n    'M|' + CAST(MAP.NR_SEQUENCIA AS VARCHAR(255)) AS NR_SEQUENCIA,        \n    cast(map.dt_atendimento as date)                            as DT_LANCAMENTO ,        \n    NULL                                                        AS IE_ORIGEM_PROCED,        \n    'M|'+ CAST(map.cd_material AS VARCHAR(100))                 as CD_ITEM ,        \n    0                                                           AS NR_PROC_INTERNO,         \n    map.qt_material                                             as QT_ITEM ,    \n    0                                                           AS QT_PROCEDIMENTO,        \n    0                                                           as VL_MEDICO ,        \n    map.vl_material                                             as VL_ITEM,         \n    MAP.DT_ATUALIZACAO        \n        \nfrom stg.aj_material_atend_paciente            map          with(nolock)          \nleft join dw.tbl_atendimento_paciente           ap           with(nolock)          on ap.nr_atendimento = map.nr_atendimento                             and ap.ESTABELECIMENTO = map.ESTABELECIMENTO        \nleft join dw.tbl_conta_paciente                 cp           with(nolock)          on cp.nr_interno_conta = map.nr_interno_conta                         and cp.ESTABELECIMENTO = map.ESTABELECIMENTO        \n        \n        \nwhere map.cd_motivo_exc_conta is null        \nand cp.ie_cancelamento is null        \nand cp.nr_interno_conta is not null     \nAND ((MAP.ESTABELECIMENTO = 1 AND MAP.NR_PRESCRICAO IS NOT NULL OR MAP.NR_PRESCRICAO IS NULL) OR (MAP.ESTABELECIMENTO = 2 AND MAP.NR_PRESCRICAO IS NOT NULL))  \n-- and cast(map.DT_ATUALIZACAO as date) >= @DT_PROCESSAMENTO              \n-- and cp.estabelecimento = 1        \n-- and cp.nr_interno_conta = 1305983        \n-- and map.nr_atendimento = 938011 and map.ESTABELECIMENTO = '1'        \n-- AND MAP.NR_ATENDIMENTO = 6324040 AND MAP.ESTABELECIMENTO = '2'        \n-- AND MAP.NR_ATENDIMENTO = 6322484 AND MAP.ESTABELECIMENTO = '2'        \n        \n)        \n        \nselect *        \nINTO stg.tbl_tasy_aj_producao_diaria_tmp       \nfrom prod  \n\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/Ajuste DW Tasy/Antigo"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AZ_SQL')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/ORACLE_LOG')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_DINAMICO')]",
				"[concat(variables('factoryId'), '/pipelines/AJ_PROCEDIMENTO_PACIENTE')]",
				"[concat(variables('factoryId'), '/pipelines/AJ_MATERIAL_ATEND_PACIENTE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Maqplan_Vendas')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Maqplan_Vendas",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Maqplan/VendaPorItem_Carga"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Merge DW Maqplan",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Maqplan_Vendas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_CARGA_MAQPLAN_VENDASITENS"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/Maqplan"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Movimento_Estoque')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Mov Estoque HTML",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "WITH AUX AS(\nselect operacao_estoque.cd_operacao_estoque,\n    dt_movimento_estoque,\n    movimento_estoque.cd_local_estoque,\n    ds_local_estoque,\n    movimento_estoque.cd_estabelecimento,\n    nm_fantasia_estab,\n    movimento_estoque.nr_documento,\n    movimento_estoque.cd_material,\n    /*case \n        when ds_familia is null then 'Sem classificação'\n        else ds_familia\n        end familia_padrao,*/\n    MATERIAL.CD_CLASSE_MATERIAL,   \n    ds_classe_material classe_material,\n    ds_subgrupo_material Subgrupo,\n    ds_grupo_material Grupo,\n    ds_fabricante Fabricante,\n    ds_reduzida,\n    ds_operacao,\n    ie_entrada_saida,\n    cd_acao,\n    case \n        when ds_operacao in ('Consumo', 'Execução Prescrição', 'Consumo da Produção')\n        then sum(qt_movimento)/(avg(QT_CONV_ESTOQUE_CONSUMO))\n        else sum(qt_movimento)\n        end qt_movimento,\n    sum(case when movimento_estoque_valor.cd_tipo_valor = 5 then - movimento_estoque_valor.vl_movimento else + movimento_estoque_valor.vl_movimento end ) valor_movimento\n    \n    from movimento_estoque\n    left join operacao_estoque\n    on movimento_estoque.cd_operacao_estoque = operacao_estoque.cd_operacao_estoque\n    \n    left join estabelecimento\n    on (movimento_estoque.cd_estabelecimento = estabelecimento.cd_estabelecimento)\n    \n    left join local_estoque\n    on (local_estoque.cd_estabelecimento = movimento_estoque.cd_estabelecimento AND\n        local_estoque.cd_local_estoque = movimento_estoque.cd_local_estoque)\n        \n    left join material\n    on (movimento_estoque.cd_material = material.cd_material) \n    \n    left join material_familia\n    on (material.nr_seq_familia = material_familia.nr_sequencia)\n    \n    left join classe_material\n    on (material.cd_classe_material = classe_material.cd_classe_material)\n    \n    left join subgrupo_material\n    on (classe_material.cd_subgrupo_material = subgrupo_material.cd_subgrupo_material)\n    \n    left join grupo_material\n    on (subgrupo_material.cd_grupo_material = grupo_material.cd_grupo_material)\n    \n    left join mat_fabricante\n    on material.nr_seq_fabric =  mat_fabricante.nr_sequencia\n    \n    left join movimento_estoque_valor\n    on movimento_estoque_valor.nr_movimento_estoque = movimento_estoque.nr_movimento_estoque\n\n    --where dt_movimento_estoque >= '01/01/2020' \n\n    GROUP BY operacao_estoque.cd_operacao_estoque,\n        dt_movimento_estoque,\n        movimento_estoque.cd_local_estoque,\n        ds_local_estoque,\n        movimento_estoque.cd_estabelecimento,\n        nm_fantasia_estab,\n        movimento_estoque.nr_documento,\n        movimento_estoque.cd_material,\n        --case when ds_familia is null then 'Sem classificação' else ds_familia end,\n        material.cd_classe_material,\n        ds_classe_material,\n        ds_subgrupo_material,\n        ds_grupo_material,\n        ds_fabricante,\n        ds_reduzida,\n        ds_operacao,\n        ie_entrada_saida,\n        cd_acao\n)\nSELECT \n    TO_CHAR(A.DT_MOVIMENTO_ESTOQUE,'YYYY-MM-DD') AS DATA_MOVIMENTO\n    ,A.CD_LOCAL_ESTOQUE\n    ,A.DS_LOCAL_ESTOQUE\n    ,A.CD_ESTABELECIMENTO\n    ,A.nm_fantasia_estab                         AS DS_ESTABELECIMENTO\n    ,A.CD_MATERIAL\n    ,A.DS_REDUZIDA                                AS DS_MATERIAL_SHORT\n    ,A.CD_CLASSE_MATERIAL\n    ,A.CLASSE_MATERIAL                           AS DS_CLASSE_MATERIAL\n    ,A.cd_operacao_estoque\n    ,A.DS_OPERACAO\n    ,A.QT_MOVIMENTO\n    ,CASE \n        WHEN A.CD_ACAO = 2 THEN A.VALOR_MOVIMENTO * -1\n        ELSE A.VALOR_MOVIMENTO\n     END VL_MOVIMENTO   \nFROM AUX A\nWHERE TO_CHAR(TRUNC(A.DT_MOVIMENTO_ESTOQUE,'MM'),'YYYY-MM-DD') = TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYY-MM-DD')",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DECLARE @MES INT\nDECLARE @ANO INT\n\nSET @MES = MONTH(GETDATE())\nSET @ANO = YEAR(GETDATE())\n\nDELETE FROM MOVIMENTO_ESTOQUE\nWHERE MONTH(DATA_MOVIMENTO) = @MES\n    AND YEAR(DATA_MOVIMENTO) = @ANO",
								"writeBehavior": "insert",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_MOVIMENTO"
										},
										"sink": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOQUE"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_OPERACAO_ESTOQUE"
										},
										"sink": {
											"name": "CD_OPERACAO_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_OPERACAO"
										},
										"sink": {
											"name": "DS_OPERACAO_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_MOVIMENTO"
										},
										"sink": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "VL_MOVIMENTO"
										},
										"sink": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_MOVIMENTO_ESTOQUE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Mov Estoque Delphi",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Mov Estoque HTML",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "WITH AUX AS(\nselect operacao_estoque.cd_operacao_estoque,\n    dt_movimento_estoque,\n    movimento_estoque.cd_local_estoque,\n    ds_local_estoque,\n    movimento_estoque.cd_estabelecimento,\n    nm_fantasia_estab,\n    movimento_estoque.nr_documento,\n    movimento_estoque.cd_material,\n    /*case \n        when ds_familia is null then 'Sem classificação'\n        else ds_familia\n        end familia_padrao,*/\n    MATERIAL.CD_CLASSE_MATERIAL,   \n    ds_classe_material classe_material,\n    ds_subgrupo_material Subgrupo,\n    ds_grupo_material Grupo,\n    ds_fabricante Fabricante,\n    ds_reduzida,\n    ds_operacao,\n    ie_entrada_saida,\n    cd_acao,\n    case \n        when ds_operacao in ('Consumo', 'Execução Prescrição', 'Consumo da Produção')\n        then sum(qt_movimento)/(avg(QT_CONV_ESTOQUE_CONSUMO))\n        else sum(qt_movimento)\n        end qt_movimento,\n    sum(case when movimento_estoque_valor.cd_tipo_valor = 5 then - movimento_estoque_valor.vl_movimento else + movimento_estoque_valor.vl_movimento end ) valor_movimento\n    \n    from movimento_estoque\n    left join operacao_estoque\n    on movimento_estoque.cd_operacao_estoque = operacao_estoque.cd_operacao_estoque\n    \n    left join estabelecimento\n    on (movimento_estoque.cd_estabelecimento = estabelecimento.cd_estabelecimento)\n    \n    left join local_estoque\n    on (local_estoque.cd_estabelecimento = movimento_estoque.cd_estabelecimento AND\n        local_estoque.cd_local_estoque = movimento_estoque.cd_local_estoque)\n        \n    left join material\n    on (movimento_estoque.cd_material = material.cd_material) \n    \n    left join material_familia\n    on (material.nr_seq_familia = material_familia.nr_sequencia)\n    \n    left join classe_material\n    on (material.cd_classe_material = classe_material.cd_classe_material)\n    \n    left join subgrupo_material\n    on (classe_material.cd_subgrupo_material = subgrupo_material.cd_subgrupo_material)\n    \n    left join grupo_material\n    on (subgrupo_material.cd_grupo_material = grupo_material.cd_grupo_material)\n    \n    left join mat_fabricante\n    on material.nr_seq_fabric =  mat_fabricante.nr_sequencia\n    \n    left join movimento_estoque_valor\n    on movimento_estoque_valor.nr_movimento_estoque = movimento_estoque.nr_movimento_estoque\n\n    --where dt_movimento_estoque >= '01/01/2020' \n\n    GROUP BY operacao_estoque.cd_operacao_estoque,\n        dt_movimento_estoque,\n        movimento_estoque.cd_local_estoque,\n        ds_local_estoque,\n        movimento_estoque.cd_estabelecimento,\n        nm_fantasia_estab,\n        movimento_estoque.nr_documento,\n        movimento_estoque.cd_material,\n        --case when ds_familia is null then 'Sem classificação' else ds_familia end,\n        material.cd_classe_material,\n        ds_classe_material,\n        ds_subgrupo_material,\n        ds_grupo_material,\n        ds_fabricante,\n        ds_reduzida,\n        ds_operacao,\n        ie_entrada_saida,\n        cd_acao\n)\nSELECT \n    TO_CHAR(A.DT_MOVIMENTO_ESTOQUE,'YYYY-MM-DD') AS DATA_MOVIMENTO\n    ,A.CD_LOCAL_ESTOQUE\n    ,A.DS_LOCAL_ESTOQUE\n    ,A.CD_ESTABELECIMENTO\n    ,A.nm_fantasia_estab                         AS DS_ESTABELECIMENTO\n    ,A.CD_MATERIAL\n    ,A.DS_REDUZIDA                                AS DS_MATERIAL_SHORT\n    ,A.CD_CLASSE_MATERIAL\n    ,A.CLASSE_MATERIAL                           AS DS_CLASSE_MATERIAL\n    ,A.cd_operacao_estoque\n    ,A.DS_OPERACAO\n    ,A.QT_MOVIMENTO\n    ,CASE \n        WHEN A.CD_ACAO = 2 THEN A.VALOR_MOVIMENTO * -1\n        ELSE A.VALOR_MOVIMENTO\n     END VL_MOVIMENTO   \nFROM AUX A\nWHERE TO_CHAR(TRUNC(A.DT_MOVIMENTO_ESTOQUE,'MM'),'YYYY-MM-DD') = TO_CHAR(TRUNC(SYSDATE,'MM'),'YYYY-MM-DD')",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_MOVIMENTO"
										},
										"sink": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOQUE"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_OPERACAO_ESTOQUE"
										},
										"sink": {
											"name": "CD_OPERACAO_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_OPERACAO"
										},
										"sink": {
											"name": "DS_OPERACAO_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_MOVIMENTO"
										},
										"sink": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "VL_MOVIMENTO"
										},
										"sink": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_MOVIMENTO_ESTOQUE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Mov Estoque ITG - Smart",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Mov Estoque Delphi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF = CAST(SUBSTRING(CAST(CAST(GETDATE() AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE);\n\n\nSELECT DISTINCT \n    CAST(MMA_DATA_MOV AS DATE)  as DATA_MOVIMENTO\n    ,MMA_SBA_COD                AS CD_LOCAL_ESTOOUE\n    ,SBA_NOME                   AS DS_LOCAL_ESTOQUE\n    ,GCC.gcc_cod                AS CD_ESTABELECIMENTO\n    ,GCC.gcc_descr              AS DS_ESTABELECIMENTO\n    ,mma_mat_cod                AS CD_MATERIAL\n    ,MAT_DESC_RESUMIDA          AS DS_MATERIAL_SHORT\n    ,LMA.LMA_COD                AS CD_CLASSE_MATERIAL\n    ,LMA.LMA_NOME               AS DS_CLASSE_MATERIAL\n    ,gmm_cod                    as CD_GRUPO_MATERIAL\n    -- , mma_ism_seq\n    -- , MMA_ISM_SEQ\n    -- , mma_lot_num\n    , gmm_nome                  AS DS_GRUPO_MATERIAL    \n    ,MMA_TIPO_OPERACAO          AS CD_OPERACAO\n    , tmm_descr                 AS DS_OPERACAO\n    , mma_qtd                   AS QT_MOVIMENTO\n    ,cast(mma_valor as decimal) AS VL_MOVIMENTO\nFROM mma with (nolock)\nLEFT JOIN tmm  with (nolock)\n    ON tmm_cod = MMA_TIPO_OPERACAO\nLEFT JOIN mat with (nolock)\n    ON mma_mat_cod = mat_cod\nLEFT JOIN gmm with (nolock)\n    ON gmm_cod = mma_gmm_cod\nLEFT JOIN sba with (nolock)\n    ON sba_cod = mma_sba_cod\nLEFT JOIN str with (nolock)\n    ON str_cod = sba_str_cod\nLEFT JOIN str str_e  with (nolock)\n    ON str.str_str_cod = str_e.str_cod\nLEFT JOIN fne  with (nolock)\n    ON mat_fne_ult_entrada = FNE_COD\nLEFT JOIN GCC GCC (NOLOCK) ON gcc_str_cod = STR.str_str_cod\nLEFT JOIN LMA LMA (NOLOCK) ON LMA.LMA_GMM_COD = MAT_GMM_COD          \n\nWHERE CAST(SUBSTRING(CAST(CAST(MMA_DATA_MOV AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE) = @MES_REF\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOOUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_OPERACAO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_OPERACAO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 14
										},
										"sink": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										},
										"sink": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_MOVIMENTO_ESTOQUE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Mov Estoque ITB - Smart",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Mov Estoque ITG - Smart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF = CAST(SUBSTRING(CAST(CAST(GETDATE() AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE);\n\n\nSELECT DISTINCT \n    CAST(MMA_DATA_MOV AS DATE)  as DATA_MOVIMENTO\n    ,MMA_SBA_COD                AS CD_LOCAL_ESTOOUE\n    ,SBA_NOME                   AS DS_LOCAL_ESTOQUE\n    ,GCC.gcc_cod                AS CD_ESTABELECIMENTO\n    ,GCC.gcc_descr              AS DS_ESTABELECIMENTO\n    ,mma_mat_cod                AS CD_MATERIAL\n    ,MAT_DESC_RESUMIDA          AS DS_MATERIAL_SHORT\n    ,LMA.LMA_COD                AS CD_CLASSE_MATERIAL\n    ,LMA.LMA_NOME               AS DS_CLASSE_MATERIAL\n    ,gmm_cod                    as CD_GRUPO_MATERIAL\n    -- , mma_ism_seq\n    -- , MMA_ISM_SEQ\n    -- , mma_lot_num\n    , gmm_nome                  AS DS_GRUPO_MATERIAL    \n    ,MMA_TIPO_OPERACAO          AS CD_OPERACAO\n    , tmm_descr                 AS DS_OPERACAO\n    , mma_qtd                   AS QT_MOVIMENTO\n    ,cast(mma_valor as decimal) AS VL_MOVIMENTO\nFROM mma with (nolock)\nLEFT JOIN tmm  with (nolock)\n    ON tmm_cod = MMA_TIPO_OPERACAO\nLEFT JOIN mat with (nolock)\n    ON mma_mat_cod = mat_cod\nLEFT JOIN gmm with (nolock)\n    ON gmm_cod = mma_gmm_cod\nLEFT JOIN sba with (nolock)\n    ON sba_cod = mma_sba_cod\nLEFT JOIN str with (nolock)\n    ON str_cod = sba_str_cod\nLEFT JOIN str str_e  with (nolock)\n    ON str.str_str_cod = str_e.str_cod\nLEFT JOIN fne  with (nolock)\n    ON mat_fne_ult_entrada = FNE_COD\nLEFT JOIN GCC GCC (NOLOCK) ON gcc_str_cod = STR.str_str_cod\nLEFT JOIN LMA LMA (NOLOCK) ON LMA.LMA_GMM_COD = MAT_GMM_COD          \n\nWHERE CAST(SUBSTRING(CAST(CAST(MMA_DATA_MOV AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE) = @MES_REF\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOOUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_OPERACAO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_OPERACAO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 14
										},
										"sink": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										},
										"sink": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_MOVIMENTO_ESTOQUE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Mov Estoque IOF - Smart",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Mov Estoque ITB - Smart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF = CAST(SUBSTRING(CAST(CAST(GETDATE() AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE);\n\n\nSELECT DISTINCT \n    CAST(MMA_DATA_MOV AS DATE)  as DATA_MOVIMENTO\n    ,MMA_SBA_COD                AS CD_LOCAL_ESTOOUE\n    ,SBA_NOME                   AS DS_LOCAL_ESTOQUE\n    ,GCC.gcc_cod                AS CD_ESTABELECIMENTO\n    ,GCC.gcc_descr              AS DS_ESTABELECIMENTO\n    ,mma_mat_cod                AS CD_MATERIAL\n    ,MAT_DESC_RESUMIDA          AS DS_MATERIAL_SHORT\n    ,LMA.LMA_COD                AS CD_CLASSE_MATERIAL\n    ,LMA.LMA_NOME               AS DS_CLASSE_MATERIAL\n    ,gmm_cod                    as CD_GRUPO_MATERIAL\n    -- , mma_ism_seq\n    -- , MMA_ISM_SEQ\n    -- , mma_lot_num\n    , gmm_nome                  AS DS_GRUPO_MATERIAL    \n    ,MMA_TIPO_OPERACAO          AS CD_OPERACAO\n    , tmm_descr                 AS DS_OPERACAO\n    , mma_qtd                   AS QT_MOVIMENTO\n    ,cast(mma_valor as decimal) AS VL_MOVIMENTO\nFROM mma with (nolock)\nLEFT JOIN tmm  with (nolock)\n    ON tmm_cod = MMA_TIPO_OPERACAO\nLEFT JOIN mat with (nolock)\n    ON mma_mat_cod = mat_cod\nLEFT JOIN gmm with (nolock)\n    ON gmm_cod = mma_gmm_cod\nLEFT JOIN sba with (nolock)\n    ON sba_cod = mma_sba_cod\nLEFT JOIN str with (nolock)\n    ON str_cod = sba_str_cod\nLEFT JOIN str str_e  with (nolock)\n    ON str.str_str_cod = str_e.str_cod\nLEFT JOIN fne  with (nolock)\n    ON mat_fne_ult_entrada = FNE_COD\nLEFT JOIN GCC GCC (NOLOCK) ON gcc_str_cod = STR.str_str_cod\nLEFT JOIN LMA LMA (NOLOCK) ON LMA.LMA_GMM_COD = MAT_GMM_COD          \n\nWHERE CAST(SUBSTRING(CAST(CAST(MMA_DATA_MOV AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE) = @MES_REF\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOOUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_OPERACAO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_OPERACAO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 14
										},
										"sink": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										},
										"sink": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_MOVIMENTO_ESTOQUE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Mov Estoque OFTALMOCLIN - Smart",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Mov Estoque IOF - Smart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF = CAST(SUBSTRING(CAST(CAST(GETDATE() AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE);\n\n\nSELECT DISTINCT \n    CAST(MMA_DATA_MOV AS DATE)  as DATA_MOVIMENTO\n    ,MMA_SBA_COD                AS CD_LOCAL_ESTOOUE\n    ,SBA_NOME                   AS DS_LOCAL_ESTOQUE\n    ,GCC.gcc_cod                AS CD_ESTABELECIMENTO\n    ,GCC.gcc_descr              AS DS_ESTABELECIMENTO\n    ,mma_mat_cod                AS CD_MATERIAL\n    ,MAT_DESC_RESUMIDA          AS DS_MATERIAL_SHORT\n    ,LMA.LMA_COD                AS CD_CLASSE_MATERIAL\n    ,LMA.LMA_NOME               AS DS_CLASSE_MATERIAL\n    ,gmm_cod                    as CD_GRUPO_MATERIAL\n    -- , mma_ism_seq\n    -- , MMA_ISM_SEQ\n    -- , mma_lot_num\n    , gmm_nome                  AS DS_GRUPO_MATERIAL    \n    ,MMA_TIPO_OPERACAO          AS CD_OPERACAO\n    , tmm_descr                 AS DS_OPERACAO\n    , mma_qtd                   AS QT_MOVIMENTO\n    ,cast(mma_valor as decimal) AS VL_MOVIMENTO\nFROM mma with (nolock)\nLEFT JOIN tmm  with (nolock)\n    ON tmm_cod = MMA_TIPO_OPERACAO\nLEFT JOIN mat with (nolock)\n    ON mma_mat_cod = mat_cod\nLEFT JOIN gmm with (nolock)\n    ON gmm_cod = mma_gmm_cod\nLEFT JOIN sba with (nolock)\n    ON sba_cod = mma_sba_cod\nLEFT JOIN str with (nolock)\n    ON str_cod = sba_str_cod\nLEFT JOIN str str_e  with (nolock)\n    ON str.str_str_cod = str_e.str_cod\nLEFT JOIN fne  with (nolock)\n    ON mat_fne_ult_entrada = FNE_COD\nLEFT JOIN GCC GCC (NOLOCK) ON gcc_str_cod = STR.str_str_cod\nLEFT JOIN LMA LMA (NOLOCK) ON LMA.LMA_GMM_COD = MAT_GMM_COD          \n\nWHERE CAST(SUBSTRING(CAST(CAST(MMA_DATA_MOV AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE) = @MES_REF\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOOUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_OPERACAO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_OPERACAO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 14
										},
										"sink": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										},
										"sink": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_MOVIMENTO_ESTOQUE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Mov Estoque HOSL - Smart",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Mov Estoque OFTALMOCLIN - Smart",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF = CAST(SUBSTRING(CAST(CAST(GETDATE() AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE);\n\n\nSELECT DISTINCT \n    CAST(MMA_DATA_MOV AS DATE)  as DATA_MOVIMENTO\n    ,MMA_SBA_COD                AS CD_LOCAL_ESTOOUE\n    ,SBA_NOME                   AS DS_LOCAL_ESTOQUE\n    ,GCC.gcc_cod                AS CD_ESTABELECIMENTO\n    ,GCC.gcc_descr              AS DS_ESTABELECIMENTO\n    ,mma_mat_cod                AS CD_MATERIAL\n    ,MAT_DESC_RESUMIDA          AS DS_MATERIAL_SHORT\n    ,LMA.LMA_COD                AS CD_CLASSE_MATERIAL\n    ,LMA.LMA_NOME               AS DS_CLASSE_MATERIAL\n    ,gmm_cod                    as CD_GRUPO_MATERIAL\n    -- , mma_ism_seq\n    -- , MMA_ISM_SEQ\n    -- , mma_lot_num\n    , gmm_nome                  AS DS_GRUPO_MATERIAL    \n    ,MMA_TIPO_OPERACAO          AS CD_OPERACAO\n    , tmm_descr                 AS DS_OPERACAO\n    , mma_qtd                   AS QT_MOVIMENTO\n    ,cast(mma_valor as decimal) AS VL_MOVIMENTO\nFROM mma with (nolock)\nLEFT JOIN tmm  with (nolock)\n    ON tmm_cod = MMA_TIPO_OPERACAO\nLEFT JOIN mat with (nolock)\n    ON mma_mat_cod = mat_cod\nLEFT JOIN gmm with (nolock)\n    ON gmm_cod = mma_gmm_cod\nLEFT JOIN sba with (nolock)\n    ON sba_cod = mma_sba_cod\nLEFT JOIN str with (nolock)\n    ON str_cod = sba_str_cod\nLEFT JOIN str str_e  with (nolock)\n    ON str.str_str_cod = str_e.str_cod\nLEFT JOIN fne  with (nolock)\n    ON mat_fne_ult_entrada = FNE_COD\nLEFT JOIN GCC GCC (NOLOCK) ON gcc_str_cod = STR.str_str_cod\nLEFT JOIN LMA LMA (NOLOCK) ON LMA.LMA_GMM_COD = MAT_GMM_COD          \n\nWHERE CAST(SUBSTRING(CAST(CAST(MMA_DATA_MOV AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE) = @MES_REF\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "DATA_MOVIMENTO",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOOUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_OPERACAO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_OPERACAO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_OPERACAO_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 14
										},
										"sink": {
											"name": "QT_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										},
										"sink": {
											"name": "VL_MOVIMENTO",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_MOVIMENTO_ESTOQUE",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"DATA": {
						"type": "String",
						"defaultValue": "2021-05-01"
					}
				},
				"folder": {
					"name": "Estoque"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-20T18:04:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_MOVIMENTO_ESTOQUE')]",
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITAIGARA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITABUNA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_IOF_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_Oftalmoclin_Prd_DataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_HOSL_PrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Nota Fiscal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline que extrai informações de notas fiscais das unidades para compor relatório ao setor de FP&A.",
				"activities": [
					{
						"name": "Nota Fiscal Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select obter_cgc_estabelecimento(n.cd_estabelecimento) as CNPJ,\nobter_nome_estab(n.cd_estabelecimento) as DS_UNIDADE ,\nn.DT_EMISSAO,\ndt_entrada_saida as dt_entrada_saida,\nn.nr_sequencia, \nn.nr_nota_fiscal, \ni.cd_conta_contabil, \nc.ds_conta_contabil, \nobter_nome_pj(n.cd_cgc) as fornecedor,\t\nsum(i.vl_total_item_nf) as vl_total_item_nf,\nSUBSTR(n.ds_observacao,1,100) AS ds_observacao\nfrom nota_fiscal n,\nnota_fiscal_item i,\nconta_contabil c,\noperacao_nota a\nwhere n.nr_sequencia = i.nr_sequencia\nand i.cd_conta_contabil = c.cd_conta_contabil (+)\nand n.cd_operacao_nf = a.cd_operacao_nf (+)\nand a.ie_operacao_fiscal = 'E'\nand n.ie_situacao = 1\ngroup by n.cd_estabelecimento,\nn.cd_estabelecimento ,\nn.DT_EMISSAO,\ndt_entrada_saida,\nn.nr_sequencia, \nn.nr_nota_fiscal, \ni.cd_conta_contabil, \nc.ds_conta_contabil, \nn.cd_cgc,\t\nn.ds_observacao\norder by 5",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Notas_Fiscais",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Nota Fiscal HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select obter_cgc_estabelecimento(n.cd_estabelecimento) as CNPJ,\nobter_nome_estab(n.cd_estabelecimento) as DS_UNIDADE ,\nn.DT_EMISSAO,\ndt_entrada_saida as dt_entrada_saida,\nn.nr_sequencia, \nn.nr_nota_fiscal, \ni.cd_conta_contabil, \nc.ds_conta_contabil, \nobter_nome_pj(n.cd_cgc) as fornecedor,\t\nsum(i.vl_total_item_nf) as vl_total_item_nf,\nSUBSTR(n.ds_observacao,1,100) AS ds_observacao\nfrom nota_fiscal n,\nnota_fiscal_item i,\nconta_contabil c,\noperacao_nota a\nwhere n.nr_sequencia = i.nr_sequencia\nand i.cd_conta_contabil = c.cd_conta_contabil (+)\nand n.cd_operacao_nf = a.cd_operacao_nf (+)\nand a.ie_operacao_fiscal = 'E'\nand n.ie_situacao = 1\ngroup by n.cd_estabelecimento,\nn.cd_estabelecimento ,\nn.DT_EMISSAO,\ndt_entrada_saida,\nn.nr_sequencia, \nn.nr_nota_fiscal, \ni.cd_conta_contabil, \nc.ds_conta_contabil, \nn.cd_cgc,\t\nn.ds_observacao\norder by 5",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Notas_Fiscais",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Nota Fiscal Itaigara",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "  select emp_1.emp_cgc as CNPJ,\n  gcc_descr as DS_UNIDADE,\n  nfe.nfe_dt_entrada as DT_ENTRADA_SAIDA,\n  nfe_dt_emissao AS DT_EMISSAO, \n  convert(varchar,(nfe_serie)) + convert(varchar,(nfe.nfe_num)) as NR_SEQUENCIA,\n  nfe.nfe_num AS NR_NOTA_FISCAL,\n  mcc.mcc_cfo_cod AS CD_CONTA_CONTABIL,\n  cfo_nome AS DS_CONTA_CONTABIL,\n  EMP.EMP_NOME_FANTASIA AS FORNECEDOR,\n  mcc_deb AS VL_TOTAL_ITEM_NF,\n  nfe_obs AS DS_OBSERVACAO\n  from nfe \n\n  LEFT OUTER JOIN CPG ON NFE.NFE_SERIE = CPG.CPG_NFE_SERIE \n  AND NFE.NFE_NUM = CPG.CPG_NFE_NUM \n  AND NFE.NFE_FNE_COD = CPG.CPG_NFE_FNE_COD \n  AND NFE.NFE_TIPO = CPG.CPG_NFE_TIPO \n\n  inner join mcc on mcc_cpg_num = cpg_num and mcc_cpg_serie = cpg_serie\n  inner join cfo on mcc_cfo_cod = cfo_cod\n  inner join emp on emp_cod = cpg_emp_cod\n  inner join ipg on cpg_num = ipg_cpg_num and cpg_serie = ipg_cpg_serie\n  inner join gcc on gcc_cod = IPG_GCC_COD_COLIG\n  inner join str on gcc_str_cod = str_cod\n  inner join emp emp_1 on emp_1.emp_cod = str_emp_cod\n\n  where MCC.MCC_IPG_PARC = 1 \n  and MCC.MCC_TIPO = 'P' \n  and MCC.MCC_IND_CPG_GERACAO IS not NULL ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Notas_Fiscais",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Nota Fiscal HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "  select emp_1.emp_cgc as CNPJ,\n  gcc_descr as DS_UNIDADE,\n  nfe.nfe_dt_entrada as DT_ENTRADA_SAIDA,\n  nfe_dt_emissao AS DT_EMISSAO, \n  convert(varchar,(nfe_serie)) + convert(varchar,(nfe.nfe_num)) as NR_SEQUENCIA,\n  nfe.nfe_num AS NR_NOTA_FISCAL,\n  mcc.mcc_cfo_cod AS CD_CONTA_CONTABIL,\n  cfo_nome AS DS_CONTA_CONTABIL,\n  EMP.EMP_NOME_FANTASIA AS FORNECEDOR,\n  mcc_deb AS VL_TOTAL_ITEM_NF,\n  nfe_obs AS DS_OBSERVACAO\n  from nfe \n\n  LEFT OUTER JOIN CPG ON NFE.NFE_SERIE = CPG.CPG_NFE_SERIE \n  AND NFE.NFE_NUM = CPG.CPG_NFE_NUM \n  AND NFE.NFE_FNE_COD = CPG.CPG_NFE_FNE_COD \n  AND NFE.NFE_TIPO = CPG.CPG_NFE_TIPO \n\n  inner join mcc on mcc_cpg_num = cpg_num and mcc_cpg_serie = cpg_serie\n  inner join cfo on mcc_cfo_cod = cfo_cod\n  inner join emp on emp_cod = cpg_emp_cod\n  inner join ipg on cpg_num = ipg_cpg_num and cpg_serie = ipg_cpg_serie\n  inner join gcc on gcc_cod = IPG_GCC_COD_COLIG\n  inner join str on gcc_str_cod = str_cod\n  inner join emp emp_1 on emp_1.emp_cod = str_emp_cod\n\n  where MCC.MCC_IPG_PARC = 1 \n  and MCC.MCC_TIPO = 'P' \n  and MCC.MCC_IND_CPG_GERACAO IS not NULL ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Notas_Fiscais",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Nota Fiscal Itabuna",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "  select emp_1.emp_cgc as CNPJ,\n  gcc_descr as DS_UNIDADE,\n  nfe.nfe_dt_entrada as DT_ENTRADA_SAIDA,\n  nfe_dt_emissao AS DT_EMISSAO, \n  convert(varchar,(nfe_serie)) + convert(varchar,(nfe.nfe_num)) as NR_SEQUENCIA,\n  nfe.nfe_num AS NR_NOTA_FISCAL,\n  mcc.mcc_cfo_cod AS CD_CONTA_CONTABIL,\n  cfo_nome AS DS_CONTA_CONTABIL,\n  EMP.EMP_NOME_FANTASIA AS FORNECEDOR,\n  mcc_deb AS VL_TOTAL_ITEM_NF,\n  nfe_obs AS DS_OBSERVACAO\n  from nfe \n\n  LEFT OUTER JOIN CPG ON NFE.NFE_SERIE = CPG.CPG_NFE_SERIE \n  AND NFE.NFE_NUM = CPG.CPG_NFE_NUM \n  AND NFE.NFE_FNE_COD = CPG.CPG_NFE_FNE_COD \n  AND NFE.NFE_TIPO = CPG.CPG_NFE_TIPO \n\n  inner join mcc on mcc_cpg_num = cpg_num and mcc_cpg_serie = cpg_serie\n  inner join cfo on mcc_cfo_cod = cfo_cod\n  inner join emp on emp_cod = cpg_emp_cod\n  inner join ipg on cpg_num = ipg_cpg_num and cpg_serie = ipg_cpg_serie\n  inner join gcc on gcc_cod = IPG_GCC_COD_COLIG\n  inner join str on gcc_str_cod = str_cod\n  inner join emp emp_1 on emp_1.emp_cod = str_emp_cod\n\n  where MCC.MCC_IPG_PARC = 1 \n  and MCC.MCC_TIPO = 'P' \n  and MCC.MCC_IND_CPG_GERACAO IS not NULL ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Notas_Fiscais",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Nota Fiscal INOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "  select emp_1.emp_cgc as CNPJ,\n  gcc_descr as DS_UNIDADE,\n  nfe.nfe_dt_entrada as DT_ENTRADA_SAIDA,\n  nfe_dt_emissao AS DT_EMISSAO, \n  convert(varchar,(nfe_serie)) + convert(varchar,(nfe.nfe_num)) as NR_SEQUENCIA,\n  nfe.nfe_num AS NR_NOTA_FISCAL,\n  mcc.mcc_cfo_cod AS CD_CONTA_CONTABIL,\n  cfo_nome AS DS_CONTA_CONTABIL,\n  EMP.EMP_NOME_FANTASIA AS FORNECEDOR,\n  mcc_deb AS VL_TOTAL_ITEM_NF,\n  nfe_obs AS DS_OBSERVACAO\n  from nfe \n\n  LEFT OUTER JOIN CPG ON NFE.NFE_SERIE = CPG.CPG_NFE_SERIE \n  AND NFE.NFE_NUM = CPG.CPG_NFE_NUM \n  AND NFE.NFE_FNE_COD = CPG.CPG_NFE_FNE_COD \n  AND NFE.NFE_TIPO = CPG.CPG_NFE_TIPO \n\n  inner join mcc on mcc_cpg_num = cpg_num and mcc_cpg_serie = cpg_serie\n  inner join cfo on mcc_cfo_cod = cfo_cod\n  inner join emp on emp_cod = cpg_emp_cod\n  inner join ipg on cpg_num = ipg_cpg_num and cpg_serie = ipg_cpg_serie\n  inner join gcc on gcc_cod = IPG_GCC_COD_COLIG\n  inner join str on gcc_str_cod = str_cod\n  inner join emp emp_1 on emp_1.emp_cod = str_emp_cod\n\n  where MCC.MCC_IPG_PARC = 1 \n  and MCC.MCC_TIPO = 'P' \n  and MCC.MCC_IND_CPG_GERACAO IS not NULL ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_INOB_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Notas_Fiscais",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Nota Fiscal IOF",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "  select emp_1.emp_cgc as CNPJ,\n  gcc_descr as DS_UNIDADE,\n  nfe.nfe_dt_entrada as DT_ENTRADA_SAIDA,\n  nfe_dt_emissao AS DT_EMISSAO, \n  convert(varchar,(nfe_serie)) + convert(varchar,(nfe.nfe_num)) as NR_SEQUENCIA,\n  nfe.nfe_num AS NR_NOTA_FISCAL,\n  mcc.mcc_cfo_cod AS CD_CONTA_CONTABIL,\n  cfo_nome AS DS_CONTA_CONTABIL,\n  EMP.EMP_NOME_FANTASIA AS FORNECEDOR,\n  mcc_deb AS VL_TOTAL_ITEM_NF,\n  nfe_obs AS DS_OBSERVACAO\n  from nfe \n\n  LEFT OUTER JOIN CPG ON NFE.NFE_SERIE = CPG.CPG_NFE_SERIE \n  AND NFE.NFE_NUM = CPG.CPG_NFE_NUM \n  AND NFE.NFE_FNE_COD = CPG.CPG_NFE_FNE_COD \n  AND NFE.NFE_TIPO = CPG.CPG_NFE_TIPO \n\n  inner join mcc on mcc_cpg_num = cpg_num and mcc_cpg_serie = cpg_serie\n  inner join cfo on mcc_cfo_cod = cfo_cod\n  inner join emp on emp_cod = cpg_emp_cod\n  inner join ipg on cpg_num = ipg_cpg_num and cpg_serie = ipg_cpg_serie\n  inner join gcc on gcc_cod = IPG_GCC_COD_COLIG\n  inner join str on gcc_str_cod = str_cod\n  inner join emp emp_1 on emp_1.emp_cod = str_emp_cod\n\n  where MCC.MCC_IPG_PARC = 1 \n  and MCC.MCC_TIPO = 'P' \n  and MCC.MCC_IND_CPG_GERACAO IS not NULL ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Notas_Fiscais",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Nota Fiscal Oftalmoclin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "  select emp_1.emp_cgc as CNPJ,\n  gcc_descr as DS_UNIDADE,\n  nfe.nfe_dt_entrada as DT_ENTRADA_SAIDA,\n  nfe_dt_emissao AS DT_EMISSAO, \n  convert(varchar,(nfe_serie)) + convert(varchar,(nfe.nfe_num)) as NR_SEQUENCIA,\n  nfe.nfe_num AS NR_NOTA_FISCAL,\n  mcc.mcc_cfo_cod AS CD_CONTA_CONTABIL,\n  cfo_nome AS DS_CONTA_CONTABIL,\n  EMP.EMP_NOME_FANTASIA AS FORNECEDOR,\n  mcc_deb AS VL_TOTAL_ITEM_NF,\n  nfe_obs AS DS_OBSERVACAO\n  from nfe \n\n  LEFT OUTER JOIN CPG ON NFE.NFE_SERIE = CPG.CPG_NFE_SERIE \n  AND NFE.NFE_NUM = CPG.CPG_NFE_NUM \n  AND NFE.NFE_FNE_COD = CPG.CPG_NFE_FNE_COD \n  AND NFE.NFE_TIPO = CPG.CPG_NFE_TIPO \n\n  inner join mcc on mcc_cpg_num = cpg_num and mcc_cpg_serie = cpg_serie\n  inner join cfo on mcc_cfo_cod = cfo_cod\n  inner join emp on emp_cod = cpg_emp_cod\n  inner join ipg on cpg_num = ipg_cpg_num and cpg_serie = ipg_cpg_serie\n  inner join gcc on gcc_cod = IPG_GCC_COD_COLIG\n  inner join str on gcc_str_cod = str_cod\n  inner join emp emp_1 on emp_1.emp_cod = str_emp_cod\n\n  where MCC.MCC_IPG_PARC = 1 \n  and MCC.MCC_TIPO = 'P' \n  and MCC.MCC_IND_CPG_GERACAO IS not NULL ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Notas_Fiscais",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Fiscal"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Notas_Fiscais')]",
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITAIGARA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_HOSL_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITABUNA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_INOB_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_IOF_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_Oftalmoclin_Prd_DataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OFTALMODIAGNOSE_ADF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LISTA ORIGEM DESTINO",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino]",
								"storedProcedureParameters": {
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"plataforma": {
										"type": "String",
										"value": {
											"value": "SMART_OFTALMODIAGONOSE",
											"type": "Expression"
										}
									},
									"COD_TABELA": {
										"type": "String",
										"value": null
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPA TABELAS DESTINO",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "DATA_HORA_INICIO_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "Data Inicio Banco",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 2,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OdbcSource",
														"query": {
															"value": "@concat(\n'select * from ',item().NOME_TABELA_ORIGEM,' where SUBSTRING(', item().nome_coluna_referencia,',1,10) >= ',variables('DT_INICIO') \n\n )",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "Oftalmodiagnose_ODBC",
														"type": "DatasetReference",
														"parameters": {
															"schema_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"table_name": "@item().NOME_TABELA_ORIGEM"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA PARCIAL').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Data Inicio Banco",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "DT_INICIO",
													"value": {
														"value": "@concat('''',string(formatDateTime(adddays(utcnow(), -30), 'yyyy-MM-dd')),'''')",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "DATA_HORA_INICIO_COMPLETA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OdbcSource",
														"query": {
															"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_OFTALMODIAGNOSE_ODBC_WITH_PARAM",
														"type": "DatasetReference",
														"parameters": {
															"schema_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"table_name": {
																"value": "@item().NOME_TABELA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA COMPLETA').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "LIMPA TABELAS DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA ORIGEM DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "LIMPA TABELA DESTINO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('truncate table ',\nitem().NOME_SCHEMA_DESTINO,\n'.',\nitem().NOME_TABELA_DESTINO,\n' SELECT 0')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					},
					{
						"name": "MERGE",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Script_Merge",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "@concat('EXEC ',item().NOME_PROC)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"DT_INICIO": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LISTA_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/Oftalmodiagnose_ODBC')]",
				"[concat(variables('factoryId'), '/datasets/DS_OFTALMODIAGNOSE_ODBC_WITH_PARAM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OFTALMODIAGNOSE_ADF_BLOB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LISTA ORIGEM DESTINO",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino]",
								"storedProcedureParameters": {
									"COD_TABELA": {
										"type": "String",
										"value": null
									},
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"plataforma": {
										"type": "String",
										"value": "SMART_OFTALMODIAGONOSE"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach_GERA ARQUIVOS",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Apaga Arquivos Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "GERA ARQUIVOS",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "GERA ARQUIVOS_PARCIAL",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OdbcSource",
														"query": {
															"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_OFTALMODIAGNOSE_ODBC_WITH_PARAM",
														"type": "DatasetReference",
														"parameters": {
															"schema_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"table_name": {
																"value": "@item().NOME_TABELA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "Parquet_Oftalmodiagnose",
														"type": "DatasetReference",
														"parameters": {
															"nome_tabela": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											}
										],
										"ifTrueActivities": [
											{
												"name": "GERA ARQUIVOS_COMPLETA",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OdbcSource",
														"query": {
															"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "ParquetSink",
														"storeSettings": {
															"type": "AzureBlobStorageWriteSettings"
														},
														"formatSettings": {
															"type": "ParquetWriteSettings"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_OFTALMODIAGNOSE_ODBC_WITH_PARAM",
														"type": "DatasetReference",
														"parameters": {
															"schema_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"table_name": {
																"value": "@item().NOME_TABELA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "Parquet_Oftalmodiagnose",
														"type": "DatasetReference",
														"parameters": {
															"nome_tabela": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "LIMPA TABELAS DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ForEach_GERA ARQUIVOS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "LIMPA TABELA DESTINO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('IF  EXISTS (SELECT * FROM sys.objects WHERE name = ','''', item().NOME_TABELA_DESTINO,'''',' AND type =' ,'''U''',')', ' \nTRUNCATE TABLE ', item().NOME_SCHEMA_DESTINO, '.', item().NOME_TABELA_DESTINO, \n' select 0')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPA TABELAS DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "DATA_HORA_INICIO_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													},
													{
														"activity": "Data Inicio Banco",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 2,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "CSV_OFTALMODIAGNOSE",
														"type": "DatasetReference",
														"parameters": {
															"nome_tabela": {
																"value": "@concat(item().NOME_TABELA_DESTINO,'.csv')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA PARCIAL').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Data Inicio Banco",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "DT_INICIO",
													"value": {
														"value": "@concat('''',string(formatDateTime(adddays(utcnow(), -30), 'yyyy-MM-dd')),'''')",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "DATA_HORA_INICIO_COMPLETA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobStorageReadSettings",
															"recursive": true,
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "CSV_OFTALMODIAGNOSE",
														"type": "DatasetReference",
														"parameters": {
															"nome_tabela": {
																"value": "@concat(item().NOME_TABELA_DESTINO,'.csv')",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA COMPLETA').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "CARGA DW",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_OFT_SMART_CARGA_DW"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Apaga Arquivos Blob",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA ORIGEM DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Delete1",
									"type": "Delete",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "CSV_OFTALMODIAGNOSE",
											"type": "DatasetReference",
											"parameters": {
												"nome_tabela": {
													"value": "@concat(item().NOME_TABELA_DESTINO,'.csv')",
													"type": "Expression"
												}
											}
										},
										"enableLogging": false,
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					},
					"DT_INICIO": {
						"type": "String"
					},
					"NM_ARQ": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LISTA_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/datasets/CSV_OFTALMODIAGNOSE')]",
				"[concat(variables('factoryId'), '/datasets/DS_OFTALMODIAGNOSE_ODBC_WITH_PARAM')]",
				"[concat(variables('factoryId'), '/datasets/Parquet_Oftalmodiagnose')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OFTALMODIAGNOSE_STORAGE_ACCOUNT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lista arquivos",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_HMAISDATADRIVEN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": "oftalmodiagnose"
								}
							},
							"fieldList": [
								"childItems",
								"itemType",
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filtro",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lista arquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista arquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endsWith(item().name, 'csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filtro",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filtro').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copia dados para a STG",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "\n\n\n",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_SQL_STG",
											"type": "DatasetReference",
											"parameters": {
												"SCHEMA": "stg",
												"TABELA": {
													"value": "@concat('oftalmodiagnose_',substring(item().Name,0,3))\n\n",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Move arquivo para PROCESSADOS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "STG DW",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@concat(activity('Lista arquivos').output.itemName,'\\Processados')",
													"type": "Expression"
												},
												"File": {
													"value": "@concat(item().name,'-',utcnow())",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Apaga arquivo",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move arquivo para PROCESSADOS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "sv_hmaisbrasildatadriven",
												"type": "LinkedServiceReference"
											},
											"path": "ceop/logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "STG DW",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copia dados para a STG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SQL_DESTINO",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": "select 1"
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/P&P"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN_BINARY')]",
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_STG')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL_DESTINO')]",
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ORTOCITY_CARGA_DINAMICA_ADF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LISTA ORIGEM DESTINO",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino]",
								"storedProcedureParameters": {
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"plataforma": {
										"type": "String",
										"value": "ORTOCITY"
									},
									"COD_TABELA": {
										"type": "String",
										"value": null
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPA TABELAS DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "DATA_HORA_INICIO_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 2,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat(\n'select * from ', item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' where ', item().nome_coluna_referencia,' >= ''',\nitem().Data_Inicio, ''' and ', item().nome_coluna_referencia, ' <= ''', item().Data_Fim, ''''\n\n )",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert"
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SQL_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"schema_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"table_name": {
																"value": "@item().NOME_TABELA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA PARCIAL').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "DATA_HORA_INICIO_COMPLETA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "StartTime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 2,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
															"type": "Expression"
														},
														"partitionOption": "None",
														"convertDecimalToInteger": false,
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".txt"
														}
													},
													"enableStaging": false
												},
												"inputs": [
													{
														"referenceName": "DS_ORTOCITY_WITH_PARAM",
														"type": "DatasetReference",
														"parameters": {
															"schema_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"table_name": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_HMAISDATADRIVEN",
														"type": "DatasetReference",
														"parameters": {
															"Filesystem": "ortocity",
															"File": "arquivo.csv"
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA COMPLETA').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "LIMPA TABELAS DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LISTA ORIGEM DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LISTA ORIGEM DESTINO').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "LIMPA TABELA DESTINO",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.05:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "@concat('truncate table ',\nitem().NOME_SCHEMA_DESTINO,\n'.',\nitem().NOME_TABELA_DESTINO,\n' SELECT 0')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": {
													"value": "@item().NOME_SCHEMA_DESTINO",
													"type": "Expression"
												},
												"Tabela_Destino": {
													"value": "@item().NOME_TABELA_DESTINO",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": true
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StartTime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/P&P"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LISTA_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/datasets/SQL_DINAMICO')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/DS_ORTOCITY_WITH_PARAM')]",
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ORTOCITY_STORAGE_ACCOUNT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lista arquivos",
						"type": "GetMetadata",
						"dependsOn": [
							{
								"activity": "GERA ARQUIVO QUERY ORTOCITY",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_HMAISDATADRIVEN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": "ortocity"
								}
							},
							"fieldList": [
								"childItems",
								"itemType",
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filtro",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lista arquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista arquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endsWith(item().name, 'csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filtro",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filtro').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copia dados para a STG",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('Drop table stg.',activity('Lista arquivos').output.itemName)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_SQL_STG",
											"type": "DatasetReference",
											"parameters": {
												"SCHEMA": "stg",
												"TABELA": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Move arquivo para PROCESSADOS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Palativo Stg DW",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@concat(activity('Lista arquivos').output.itemName,'\\Processados')",
													"type": "Expression"
												},
												"File": {
													"value": "@concat(item().name,'-',utcnow())",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Apaga arquivo",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move arquivo para PROCESSADOS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "sv_hmaisbrasildatadriven",
												"type": "LinkedServiceReference"
											},
											"path": "ceop/logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "STG DW",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copia dados para a STG",
											"dependencyConditions": [
												"Skipped"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SQL_DESTINO",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": "WITH REF AS(\n\nSELECT \nPK_ARQUIVO\n\t\t\t,CD_ESTABELECIMENTO\n\t\t\t,DS_ESTABELECIMENTO\n\t\t\t,NR_ATENDIMENTO\n\t\t\t,NR_INTERNO_CONTA\n\t\t\t,CD_PESSOA_FISICA\n\t\t\t,NM_PESSOA_FISICA\n\t\t\t,DT_NASCIMENTO\n\t\t\t,CNPJ_CONVENIO\n\t\t\t,CD_CONVENIO\n\t\t\t,DS_CONVENIO\n\t\t\t,CRM\n\t\t\t,CD_MEDICO_EXECUTANTE\n\t\t\t,NM_MEDICO_EXECUTANTE\n\t\t\t,CD_SETOR_EXECUTANTE\n\t\t\t,DS_SETOR_EXECUTANTE\n\t\t\t,DT_ENTRADA\n\t\t\t,[COD TUSS ou AMB]\n\t\t\t,CD_ITEM\n\t\t\t,DS_ITEM\n\t\t\t,DT_LANC_ITEM\n\t\t\t,QT\n\t\t\t,VALOR\n\n FROM \n\t\t( SELECT \n\t\t\tPK_ARQUIVO\n\t\t\t,CD_ESTABELECIMENTO\n\t\t\t,DS_ESTABELECIMENTO\n\t\t\t,NR_ATENDIMENTO\n\t\t\t,NR_INTERNO_CONTA\n\t\t\t,CD_PESSOA_FISICA\n\t\t\t,NM_PESSOA_FISICA\n\t\t\t,DT_NASCIMENTO\n\t\t\t,CNPJ_CONVENIO\n\t\t\t,CD_CONVENIO\n\t\t\t,DS_CONVENIO\n\t\t\t,CRM\n\t\t\t,CD_MEDICO_EXECUTANTE\n\t\t\t,NM_MEDICO_EXECUTANTE\n\t\t\t,CD_SETOR_EXECUTANTE\n\t\t\t,DS_SETOR_EXECUTANTE\n\t\t\t,DT_ENTRADA\n\t\t\t,[COD TUSS ou AMB]\n\t\t\t,CD_ITEM\n\t\t\t,DS_ITEM\n\t\t\t,DT_LANC_ITEM\n\t\t\t,SUM(CAST(QT AS MONEY)) AS QT\n\t\t\t,SUM(cast(replace(VALOR,',','.') as decimal(19,2))) as VALOR\n\t\t\t\n\n\t\tFROM STG.ortocity\n\t\tGROUP BY\n\t\t\tPK_ARQUIVO\n\t\t\t,CD_ESTABELECIMENTO\n\t\t\t,DS_ESTABELECIMENTO\n\t\t\t,NR_ATENDIMENTO\n\t\t\t,NR_INTERNO_CONTA\n\t\t\t,CD_PESSOA_FISICA\n\t\t\t,NM_PESSOA_FISICA\n\t\t\t,DT_NASCIMENTO\n\t\t\t,CNPJ_CONVENIO\n\t\t\t,CD_CONVENIO\n\t\t\t,DS_CONVENIO\n\t\t\t,CRM\n\t\t\t,CD_MEDICO_EXECUTANTE\n\t\t\t,NM_MEDICO_EXECUTANTE\n\t\t\t,CD_SETOR_EXECUTANTE\n\t\t\t,DS_SETOR_EXECUTANTE\n\t\t\t,DT_ENTRADA\n\t\t\t,[COD TUSS ou AMB]\n\t\t\t,CD_ITEM\n\t\t\t,DS_ITEM\n\t\t\t,DT_LANC_ITEM\n\n\t\t\t) AS A\n\n)\n\n\nMERGE               \n    dw.ortocity AS destino           \nUSING            \n    REF AS ORIGEM           \n           \n    ON(    \n    destino.PK_ARQUIVO    = ORIGEM.PK_ARQUIVO    AND\n    destino.CD_ITEM        = ORIGEM.CD_ITEM     AND\n    destino.NR_ATENDIMENTO = ORIGEM.NR_ATENDIMENTO AND\n    destino.CD_SETOR_EXECUTANTE = ORIGEM.CD_SETOR_EXECUTANTE\n\n)        \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET         \n\n\n\ndestino.PK_ARQUIVO                = ORIGEM.PK_ARQUIVO                ,\ndestino.CD_ESTABELECIMENTO        = ORIGEM.CD_ESTABELECIMENTO        ,\ndestino.DS_ESTABELECIMENTO        = ORIGEM.DS_ESTABELECIMENTO        ,\ndestino.NR_ATENDIMENTO            = ORIGEM.NR_ATENDIMENTO            ,\ndestino.NR_INTERNO_CONTA        = ORIGEM.NR_INTERNO_CONTA        ,\ndestino.CD_PESSOA_FISICA        = ORIGEM.CD_PESSOA_FISICA        ,\ndestino.NM_PESSOA_FISICA        = ORIGEM.NM_PESSOA_FISICA        ,\ndestino.DT_NASCIMENTO            = ORIGEM.DT_NASCIMENTO            ,\ndestino.CNPJ_CONVENIO            = ORIGEM.CNPJ_CONVENIO            ,\ndestino.CD_CONVENIO                = ORIGEM.CD_CONVENIO            ,\ndestino.DS_CONVENIO                = ORIGEM.DS_CONVENIO            ,\ndestino.CRM                        = ORIGEM.CRM                    ,\ndestino.CD_MEDICO_EXECUTANTE    = ORIGEM.CD_MEDICO_EXECUTANTE    ,\ndestino.NM_MEDICO_EXECUTANTE    = ORIGEM.NM_MEDICO_EXECUTANTE    ,\ndestino.CD_SETOR_EXECUTANTE        = ORIGEM.CD_SETOR_EXECUTANTE    ,\ndestino.DS_SETOR_EXECUTANTE        = ORIGEM.DS_SETOR_EXECUTANTE    ,\ndestino.DT_ENTRADA                = ORIGEM.DT_ENTRADA                ,\ndestino.[COD TUSS ou AMB]        = ORIGEM.[COD TUSS ou AMB]        ,        \ndestino.CD_ITEM                    = ORIGEM.CD_ITEM                ,\ndestino.DS_ITEM                    = ORIGEM.DS_ITEM                ,\ndestino.DT_LANC_ITEM            = ORIGEM.DT_LANC_ITEM            ,\ndestino.QT                        = ORIGEM.QT                        ,\ndestino.VALOR                    = ORIGEM.VALOR\n\n\n\n \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n    VALUES (\n\nORIGEM.PK_ARQUIVO                ,\nORIGEM.CD_ESTABELECIMENTO        ,\nORIGEM.DS_ESTABELECIMENTO        ,\nORIGEM.NR_ATENDIMENTO            ,\nORIGEM.NR_INTERNO_CONTA            ,\nORIGEM.CD_PESSOA_FISICA            ,\nORIGEM.NM_PESSOA_FISICA            ,\nORIGEM.DT_NASCIMENTO            ,\nORIGEM.CNPJ_CONVENIO            ,\nORIGEM.CD_CONVENIO                ,\nORIGEM.DS_CONVENIO                ,\nORIGEM.CRM                        ,\nORIGEM.CD_MEDICO_EXECUTANTE        ,\nORIGEM.NM_MEDICO_EXECUTANTE        ,\nORIGEM.CD_SETOR_EXECUTANTE        ,\nORIGEM.DS_SETOR_EXECUTANTE        ,\nORIGEM.DT_ENTRADA                ,\nORIGEM.[COD TUSS ou AMB]        ,    \nORIGEM.CD_ITEM                    ,\nORIGEM.DS_ITEM                    ,\nORIGEM.DT_LANC_ITEM                ,\nORIGEM.QT                        ,\nORIGEM.VALOR\n);\n"
											}
										]
									}
								},
								{
									"name": "Palativo Stg DW",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copia dados para a STG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": "BEGIN\n  TRUNCATE TABLE DW.ORTOCITY\nEND;\n\nBEGIN\n  INSERT INTO DW.ortocity\n  SELECT \n  PK_ARQUIVO\n  \t\t\t,CD_ESTABELECIMENTO\n  \t\t\t,DS_ESTABELECIMENTO\n  \t\t\t,NR_ATENDIMENTO\n  \t\t\t,NR_INTERNO_CONTA\n  \t\t\t,CD_PESSOA_FISICA\n  \t\t\t,NM_PESSOA_FISICA\n  \t\t\t,DT_NASCIMENTO\n  \t\t\t,CNPJ_CONVENIO\n  \t\t\t,CD_CONVENIO\n  \t\t\t,DS_CONVENIO\n  \t\t\t,CRM\n  \t\t\t,CD_MEDICO_EXECUTANTE\n  \t\t\t,NM_MEDICO_EXECUTANTE\n  \t\t\t,CD_SETOR_EXECUTANTE\n  \t\t\t,DS_SETOR_EXECUTANTE\n  \t\t\t,DT_ENTRADA\n  \t\t\t,[COD TUSS ou AMB]\n  \t\t\t,CD_ITEM\n  \t\t\t,DS_ITEM\n  \t\t\t,DT_LANC_ITEM\n  \t\t\t,QT\n  \t\t\t,VALOR\n\n   FROM \n  \t\t( SELECT \n  \t\t\tPK_ARQUIVO\n  \t\t\t,CD_ESTABELECIMENTO\n  \t\t\t,DS_ESTABELECIMENTO\n  \t\t\t,NR_ATENDIMENTO\n  \t\t\t,NR_INTERNO_CONTA\n  \t\t\t,CD_PESSOA_FISICA\n  \t\t\t,NM_PESSOA_FISICA\n  \t\t\t,DT_NASCIMENTO\n  \t\t\t,CNPJ_CONVENIO\n  \t\t\t,CD_CONVENIO\n  \t\t\t,DS_CONVENIO\n  \t\t\t,CRM\n  \t\t\t,CD_MEDICO_EXECUTANTE\n  \t\t\t,NM_MEDICO_EXECUTANTE\n  \t\t\t,CD_SETOR_EXECUTANTE\n  \t\t\t,DS_SETOR_EXECUTANTE\n  \t\t\t,DT_ENTRADA\n  \t\t\t,[COD TUSS ou AMB]\n  \t\t\t,CD_ITEM\n  \t\t\t,DS_ITEM\n  \t\t\t,DT_LANC_ITEM\n  \t\t\t,SUM(CAST(QT AS MONEY)) AS QT\n  \t\t\t,SUM(cast(replace(VALOR,',','.') as decimal(19,2))) as VALOR\n  \n\n  \t\tFROM STG.ortocity\n  \t\tGROUP BY\n  \t\t\tPK_ARQUIVO\n  \t\t\t,CD_ESTABELECIMENTO\n  \t\t\t,DS_ESTABELECIMENTO\n  \t\t\t,NR_ATENDIMENTO\n  \t\t\t,NR_INTERNO_CONTA\n  \t\t\t,CD_PESSOA_FISICA\n  \t\t\t,NM_PESSOA_FISICA\n  \t\t\t,DT_NASCIMENTO\n  \t\t\t,CNPJ_CONVENIO\n  \t\t\t,CD_CONVENIO\n  \t\t\t,DS_CONVENIO\n  \t\t\t,CRM\n  \t\t\t,CD_MEDICO_EXECUTANTE\n  \t\t\t,NM_MEDICO_EXECUTANTE\n  \t\t\t,CD_SETOR_EXECUTANTE\n  \t\t\t,DS_SETOR_EXECUTANTE\n  \t\t\t,DT_ENTRADA\n  \t\t\t,[COD TUSS ou AMB]\n  \t\t\t,CD_ITEM\n  \t\t\t,DS_ITEM\n  \t\t\t,DT_LANC_ITEM\n\n  \t\t\t) AS A\nEND;        \n\n\n"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "GERA ARQUIVO QUERY ORTOCITY",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.05:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": {
									"value": "SELECT \nPK_ARQUIVO,\nCD_ESTABELECIMENTO,\nDS_ESTABELECIMENTO,\nNR_ATENDIMENTO,\nNR_INTERNO_CONTA,\nCD_PESSOA_FISICA,\nNM_PESSOA_FISICA,\nDT_NASCIMENTO,\nCNPJ_CONVENIO,\nCD_CONVENIO,\nDS_CONVENIO,\nCRM,\nCD_MEDICO_EXECUTANTE,\nNM_MEDICO_EXECUTANTE,\nCD_SETOR_EXECUTANTE,\nDS_SETOR_EXECUTANTE,\nDT_ENTRADA,\nCOD_TUSS_CO as \"COD TUSS ou AMB\",\nCD_ITEM_CO as  CD_ITEM,\nDS_ITEM_CO as  DS_ITEM,\nTP_ITEM_CO as  TP_ITEM,\nDT_LANC_ITEM_CO as  DT_LANC_ITEM,\nSUM(NVL(QT_CO,0))+SUM(NVL(QT_PR,0))+SUM(NVL(QT_RX1,0))+SUM(NVL(QT_RX2,0))+SUM(NVL(QT_KIT1,0))+SUM(NVL(QT_KIT2,0))+SUM(NVL(QT_KIT3,0))+SUM(NVL(QT_KIT4,0))+SUM(NVL(QT_TX1,0))+SUM(NVL(QT_TX2,0)) as  QT\n,SUM(NVL(VALOR_CO,0))+SUM(NVL(VALOR_PR,0))+SUM(NVL(VALOR_RX1,0))+SUM(NVL(VALOR_RX2,0))+SUM(NVL(VALOR_KIT1,0))+SUM(NVL(VALOR_KIT2,0))+SUM(NVL(VALOR_KIT3,0))+SUM(NVL(VALOR_KIT4,0))+SUM(NVL(VALOR_TX1,0))+SUM(NVL(VALOR_TX2,0)) as  VALOR\nFROM \n(\n\nselect f.codfat as pk_arquivo\n,a.unidade as cd_estabelecimento\n,a.unidade as ds_estabelecimento\n,f.numficha as nr_atendimento\n,f.numficha as nr_interno_conta\n,f.numreg as cd_pessoa_fisica\n,(select nome from cadpac where cadpac.numreg=f.numreg) as nm_pessoa_fisica\n,(select datanasc from cadpac where cadpac.numreg=f.numreg) as dt_nascimento\n,(select cnpj from cadnome where cadnome.codigo=a.codconv) as cnpj_convenio\n,a.codconv as cd_convenio\n,(select nome from cadconv where cadconv.codconv=a.codconv) as ds_convenio\n,(select crm from cadnome where cadnome.codigo=a.resp1) as crm\n,a.resp1 as cd_medico_executante\n,(select nome from cadmedresp where cadmedresp.codmed=a.resp1) as nm_medico_executante\n,a.tipo as cd_setor_executante\n,a.tipo as ds_setor_executante\n,a.DATAFICHA AS dt_entrada\n--,a.data as dt_entrada\n/* consulta */\n,case when f.tipo='CO' and f.consulta='S' and f.valor_cons>0 then '10101012' else '' end as cod_tuss_co\n,case when f.tipo='CO' and f.consulta='S' and f.valor_cons>0 then 'CO14' else '' end as cd_item_co\n,case when f.tipo='CO' and f.consulta='S' and f.valor_cons>0 then 'CONSULTA' else '' end as ds_item_co\n,case when f.tipo='CO' and f.consulta='S' and f.valor_cons>0 then 'PROCEDIMENTO' else '' end as tp_item_co\n,case when f.tipo='CO' and f.consulta='S' and f.valor_cons>0 then a.datafatura else '' end as dt_lanc_item_co\n,case when f.tipo='CO' and f.consulta='S' and f.valor_cons>0 then '1' else '' end as qt_co\n,case when f.tipo='CO' and f.consulta='S' and f.valor_cons>0 then TO_CHAR(f.valor_cons) else '' end as valor_co\n/* honorario (procedimento) */\n,f.codigo_tuss as cod_tuss_pr\n,f.codigo_m as cd_item_pr\n,f.exame as ds_item_pr\n,case when f.valor_honor>0 then 'PRPOCEDIMENTO' else '' end as tp_item_pr\n,case when f.valor_honor>0 then a.datafatura else '' end as dt_lanc_item_pr\n,case when f.valor_honor>0 then TO_CHAR(f.quant) else '' end as qt_pr\n,case when f.valor_honor>0 then TO_CHAR(f.valor_honor) else '' end as valor_pr\n/* rx1 */\n,f.rx as cod_tuss_rx1\n,f.mrx as cd_item_rx1\n,case when NVL(f.mrx,'x')<>'x' and f.valor_rx>0 then (select exame from tabexame where tabexame.codigo_m=f.mrx and rownum<=1) else '' end as ds_item_rx1\n,case when NVL(f.mrx,'x')<>'x' and f.valor_rx>0 then 'RAIO-X' else '' end as tp_item_rx1\n,case when NVL(f.mrx,'x')<>'x' and f.valor_rx>0 then a.datafatura else '' end as dt_lanc_item_rx1\n,case when NVL(f.mrx,'x')<>'x' and f.valor_rx>0 then TO_CHAR(f.quant) else '' end as qt_rx1\n,case when NVL(f.mrx,'x')<>'x' and f.valor_rx>0 then TO_CHAR(f.valor_rx) else '' end as valor_rx1\n/* rx2 */\n,f.rx2 as cod_tuss_rx2\n,f.mrx2 as cd_item_rx2\n,case when NVL(f.mrx2,'x')<>'x' and f.valor_rx2>0 then (select exame from tabexame where tabexame.codigo_m=f.mrx2 and rownum<=1) else '' end as ds_item_rx2\n,case when NVL(f.mrx2,'x')<>'x' and f.valor_rx2>0 then 'RAIO-X' else '' end as tp_item_rx2\n,case when NVL(f.mrx2,'x')<>'x' and f.valor_rx2>0 then a.datafatura else '' end as dt_lanc_item_rx2\n,case when NVL(f.mrx2,'x')<>'x' and f.valor_rx2>0 then TO_CHAR(f.quant) else '' end as qt_rx2\n,case when NVL(f.mrx2,'x')<>'x' and f.valor_rx2>0 then TO_CHAR(f.valor_rx2) else '' end as valor_rx2\n/* kit1 */\n,case when NVL(f.codnome,'x')<>'x' and f.valor_mat1>0 then (select nome from tabkit1 where tabkit1.codkit=f.codnome and rownum<=1) else '' end as ds_item_kit1\n,case when NVL(f.codnome,'x')<>'x' and f.valor_mat1>0 then 'MAT/MED' else '' end as tp_item_kit1\n,case when NVL(f.codnome,'x')<>'x' and f.valor_mat1>0 then a.datafatura else '' end as dt_lanc_item_kit1\n,case when NVL(f.codnome,'x')<>'x' and f.valor_mat1>0 then TO_CHAR(f.quant) else '' end as qt_kit1\n,case when NVL(f.codnome,'x')<>'x' and f.valor_mat1>0 then TO_CHAR(f.valor_mat1) else '' end as valor_kit1\n/* kit2 */\n,case when NVL(f.codnome2,'x')<>'x' and f.valor_mat2>0 then (select nome from tabkit1 where tabkit1.codkit=f.codnome2 and rownum<=1) else '' end as ds_item_kit2\n,case when NVL(f.codnome2,'x')<>'x' and f.valor_mat2>0 then 'MAT/MED' else '' end as tp_item_kit2\n,case when NVL(f.codnome2,'x')<>'x' and f.valor_mat2>0 then a.datafatura else '' end as dt_lanc_item_kit2\n,case when NVL(f.codnome2,'x')<>'x' and f.valor_mat2>0 then TO_CHAR(f.quant) else '' end as qt_kit2\n,case when NVL(f.codnome2,'x')<>'x' and f.valor_mat2>0 then TO_CHAR(f.valor_mat2) else '' end as valor_kit2\n/* kit3 */\n,case when NVL(f.codnome3,'x')<>'x' and f.valor_mat3>0 then (select nome from tabkit1 where tabkit1.codkit=f.codnome3 and rownum<=1) else '' end as ds_item_kit3\n,case when NVL(f.codnome3,'x')<>'x' and f.valor_mat3>0 then 'MAT/MED' else '' end as tp_item_kit3\n,case when NVL(f.codnome3,'x')<>'x' and f.valor_mat3>0 then a.datafatura else '' end as dt_lanc_item_kit3\n,case when NVL(f.codnome3,'x')<>'x' and f.valor_mat3>0 then TO_CHAR(f.quant) else '' end as qt_kit3\n,case when NVL(f.codnome3,'x')<>'x' and f.valor_mat3>0 then TO_CHAR(f.valor_mat3) else '' end as valor_kit3\n/* kit4 */\n,case when NVL(f.codnome4,'x')<>'x' and f.valor_mat4>0 then (select nome from tabkit1 where tabkit1.codkit=f.codnome4 and rownum<=1) else '' end as ds_item_kit4\n,case when NVL(f.codnome4,'x')<>'x' and f.valor_mat4>0 then 'MAT/MED' else '' end as tp_item_kit4\n,case when NVL(f.codnome4,'x')<>'x' and f.valor_mat4>0 then a.datafatura else '' end as dt_lanc_item_kit4\n,case when NVL(f.codnome4,'x')<>'x' and f.valor_mat4>0 then TO_CHAR(f.quant) else '' end as qt_kit4\n,case when NVL(f.codnome4,'x')<>'x' and f.valor_mat4>0 then TO_CHAR(f.valor_mat4) else '' end as valor_kit4\n/* taxa1 */\n,case when NVL(f.tx,'x')<>'x' and f.valor_tx>0 then (select nome from cadtaxa1 where cadtaxa1.codigo_m=f.tx and rownum<=1) else '' end as ds_item_tx1\n,case when NVL(f.tx,'x')<>'x' and f.valor_tx>0 then 'TAXA' else '' end as tp_item_tx1\n,case when NVL(f.tx,'x')<>'x' and f.valor_tx>0 then a.datafatura else '' end as dt_lanc_item_tx1\n,case when NVL(f.tx,'x')<>'x' and f.valor_tx>0 then TO_CHAR(f.quant) else '' end as qt_tx1\n,case when NVL(f.tx,'x')<>'x' and f.valor_tx>0 then TO_CHAR(f.valor_tx) else '' end as valor_tx1\n/* taxa1 */\n,case when NVL(f.tx2,'x')<>'x' and f.valor_tx2>0 then (select nome from cadtaxa1 where cadtaxa1.codigo_m=f.tx2 and rownum<=1) else '' end as ds_item_tx2\n,case when NVL(f.tx2,'x')<>'x' and f.valor_tx2>0 then 'TAXA' else '' end as tp_item_tx2\n,case when NVL(f.tx2,'x')<>'x' and f.valor_tx2>0 then a.datafatura else '' end as dt_lanc_item_tx2\n,case when NVL(f.tx2,'x')<>'x' and f.valor_tx2>0 then TO_CHAR(f.quant) else '' end as qt_tx2\n,case when NVL(f.tx2,'x')<>'x' and f.valor_tx2>0 then TO_CHAR(f.valor_tx2) else '' end as valor_tx2\n/*  */\nfrom FERNANDO.ARQFAT f\ninner join FERNANDO.CADATEND a on f.numficha=a.numficha\nWHERE a.DATAFICHA  >='2022-01-01'\n--where a.data >= '2022-01-01'\n) \nGROUP BY \nPK_ARQUIVO,\nCD_ESTABELECIMENTO,\nDS_ESTABELECIMENTO,\nNR_ATENDIMENTO,\nNR_INTERNO_CONTA,\nCD_PESSOA_FISICA,\nNM_PESSOA_FISICA,\nDT_NASCIMENTO,\nCNPJ_CONVENIO,\nCD_CONVENIO,\nDS_CONVENIO,\nCRM,\nCD_MEDICO_EXECUTANTE,\nNM_MEDICO_EXECUTANTE,\nCD_SETOR_EXECUTANTE,\nDS_SETOR_EXECUTANTE,\nDT_ENTRADA,\nCOD_TUSS_CO,\nCD_ITEM_CO,\nDS_ITEM_CO,\nTP_ITEM_CO,\nDT_LANC_ITEM_CO",
									"type": "Expression"
								},
								"partitionOption": "None",
								"convertDecimalToInteger": false,
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_ORTOCITY",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_HMAISDATADRIVEN",
								"type": "DatasetReference",
								"parameters": {
									"Filesystem": "ortocity",
									"File": "QUERY_ORTOCITY.csv"
								}
							}
						]
					},
					{
						"name": "Lista Tabelas",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino]",
								"storedProcedureParameters": {
									"COD_TABELA": {
										"type": "String",
										"value": null
									},
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"plataforma": {
										"type": "String",
										"value": "SLFW"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "LIMPAR TABELA DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lista Tabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista Tabelas').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Limpa Tabela",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('TRUNCATE TABLE ',item().NOME_SCHEMA_DESTINO,'.',item().NOME_TABELA_DESTINO)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPAR TABELA DESTINO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista Tabelas').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_INICIO_CARGA_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(\n'select 50 AS ESTABELECIMENTO, A.* from ', item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' A where (', item().nome_coluna_referencia,'INCL >=', \n'''',substring(item().Data_Inicio,0,10),'''',' and ', item().nome_coluna_referencia,'INCL',' <= ', '''',substring(item().Data_Fim,0,10),'''', ') OR (', item().nome_coluna_referencia,'ALTERA',' >= ',\n'''',substring(item().Data_Inicio,0,10),'''', ' and ', item().nome_coluna_referencia,'ALTERA',' <= ', '''',substring(item().Data_Fim,0,10),'''', ')'\n)\n",
															"type": "Expression"
														},
														"partitionOption": "None",
														"convertDecimalToInteger": false,
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SLFW_Dinamico",
														"type": "DatasetReference",
														"parameters": {
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM",
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DATA_INICIO_CARGA_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "Starttime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO_copy1",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('Starttime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": "CARGA PARCIAL",
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": "SUCESSO",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO_copy1",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('Starttime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": "CARGA PARCIAL",
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": "ERRO",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_INICIO_CARGA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(' select 50 AS ESTABELECIMENTO, A.* from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' A')",
															"type": "Expression"
														},
														"partitionOption": "None",
														"convertDecimalToInteger": false,
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SLFW_Dinamico",
														"type": "DatasetReference",
														"parameters": {
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM",
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DATA_INICIO_CARGA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "Starttime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('Starttime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": "CARGA COMPLETA",
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": "SUCESSO",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('Starttime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": "CARGA COMPLETA",
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": "ERRO",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "CARGA DW",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_SLFW_CARGA_DW"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Starttime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN_BINARY')]",
				"[concat(variables('factoryId'), '/datasets/DS_ORTOCITY')]",
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN')]",
				"[concat(variables('factoryId'), '/datasets/LISTA_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_STG')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL_DESTINO')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]",
				"[concat(variables('factoryId'), '/datasets/SLFW_Dinamico')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OTORRINOCENTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copia dados para a STG",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "EXEC SP_PROD_DIARIA_GRUPOHMAIS_DATAMART",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF EXISTS (SELECT 1 FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'otorrinocenter')\n\n    DROP table stg.otorrinocenter",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Otorrinocenter",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "otorrinocenter"
								}
							}
						]
					},
					{
						"name": "EXEC SP_PROD_DIARIA_GRUPOHMAIS_DATAMART",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CARGA DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[dbo].SP_PROD_DIARIA_GRUPOHMAIS_DATAMART",
							"storedProcedureParameters": {
								"CLASSE": {
									"value": null,
									"type": "Int32"
								},
								"CONVENIO": {
									"value": null,
									"type": "Int32"
								},
								"DATA_FINAL": {
									"value": {
										"value": "@formatDateTime(utcnow(),'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"DATA_INICIAL": {
									"value": {
										"value": "@adddays(utcnow(),-45,'yyyy-MM-dd HH:mm:ss')",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"EMPRESA": {
									"value": null,
									"type": "Int32"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_Otorrinocenter",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "MERGE",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copia dados para a STG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SQL_DESTINO",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "-- select * from stg.otorrinocenter with (nolock)\n-- select * from dw.otorrinocenter with (nolock)\n\n\nMERGE\t           \n\tdw.otorrinocenter AS destino           \nUSING            \n\tstg.otorrinocenter AS origem           \n           \n    ON\t(        \n\torigem.pk_otorrinocenter\t\t\t=\tdestino.pk_otorrinocenter\t\t\n\t\t)        \n\n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \n\ndestino.PK_OTORRINOCENTER=origem.PK_OTORRINOCENTER,\ndestino.EMPRESA_ID=origem.EMPRESA_ID,\ndestino.CONVENIO_ID=origem.CONVENIO_ID,\ndestino.EMPRESA=origem.EMPRESA,\ndestino.SETOR=origem.SETOR,\ndestino.CONVENIO=origem.CONVENIO,\ndestino.NOME=origem.NOME,\ndestino.GUIA=origem.GUIA,\ndestino.GUIA_ID=origem.GUIA_ID,\ndestino.STATUS_GUIA=origem.STATUS_GUIA,\ndestino.ESPECIALIDADE=origem.ESPECIALIDADE,\ndestino.DATA_ABERTURA=origem.DATA_ABERTURA,\ndestino.DATA_ENTRADA=origem.DATA_ENTRADA,\ndestino.DATA_SAIDA=origem.DATA_SAIDA,\ndestino.DATA_FECHAMENTO=origem.DATA_FECHAMENTO,\ndestino.DATA_FATURAMENTO=origem.DATA_FATURAMENTO,\ndestino.DATA_ITEM=origem.DATA_ITEM,\ndestino.PROF_RESPONSAVEL=origem.PROF_RESPONSAVEL,\ndestino.PROF_EXECUTANTE=origem.PROF_EXECUTANTE,\ndestino.PROF_SOLICITANTE=origem.PROF_SOLICITANTE,\ndestino.CODIGO_PRODUTO_PRINCIPAL=origem.CODIGO_PRODUTO_PRINCIPAL,\ndestino.PRODUTO_PRINCIPAL=origem.PRODUTO_PRINCIPAL,\ndestino.CODIGO_ITEM=origem.CODIGO_ITEM,\ndestino.ITEM=origem.ITEM,\ndestino.QTD_ITEM=origem.QTD_ITEM,\ndestino.ID_PRODUTOS=origem.ID_PRODUTOS,\ndestino.GRUPO_PRODUTOS=origem.GRUPO_PRODUTOS,\ndestino.VALOR_ATENDIDO=origem.VALOR_ATENDIDO,\ndestino.VALOR_FATURADO=origem.VALOR_FATURADO,\ndestino.VALOR_NAO_FATURADO=origem.VALOR_NAO_FATURADO,\ndestino.VALOR_RECEBIDO=origem.VALOR_RECEBIDO,\ndestino.VALOR_ANALISE=origem.VALOR_ANALISE,\ndestino.VALOR_ACATADO=origem.VALOR_ACATADO,\ndestino.VALOR_REAPRESENTADO=origem.VALOR_REAPRESENTADO,\ndestino.VALOR_RECEBIDO_REAP=origem.VALOR_RECEBIDO_REAP,\ndestino.VALOR_ACATADO_REAP=origem.VALOR_ACATADO_REAP,\ndestino.VALOR_REAPRESENTADO_REAP=origem.VALOR_REAPRESENTADO_REAP,\ndestino.VALOR_ANALISE_REAP=origem.VALOR_ANALISE_REAP,\ndestino.VALOR_FECHAMENTO=origem.VALOR_FECHAMENTO\n\n\n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.PK_OTORRINOCENTER,\norigem.EMPRESA_ID,\norigem.CONVENIO_ID,\norigem.EMPRESA,\norigem.SETOR,\norigem.CONVENIO,\norigem.NOME,\norigem.GUIA,\norigem.GUIA_ID,\norigem.STATUS_GUIA,\norigem.ESPECIALIDADE,\norigem.DATA_ABERTURA,\norigem.DATA_ENTRADA,\norigem.DATA_SAIDA,\norigem.DATA_FECHAMENTO,\norigem.DATA_FATURAMENTO,\norigem.DATA_ITEM,\norigem.PROF_RESPONSAVEL,\norigem.PROF_EXECUTANTE,\norigem.PROF_SOLICITANTE,\norigem.CODIGO_PRODUTO_PRINCIPAL,\norigem.PRODUTO_PRINCIPAL,\norigem.CODIGO_ITEM,\norigem.ITEM,\norigem.QTD_ITEM,\norigem.ID_PRODUTOS,\norigem.GRUPO_PRODUTOS,\norigem.VALOR_ATENDIDO,\norigem.VALOR_FATURADO,\norigem.VALOR_NAO_FATURADO,\norigem.VALOR_RECEBIDO,\norigem.VALOR_ANALISE,\norigem.VALOR_ACATADO,\norigem.VALOR_REAPRESENTADO,\norigem.VALOR_RECEBIDO_REAP,\norigem.VALOR_ACATADO_REAP,\norigem.VALOR_REAPRESENTADO_REAP,\norigem.VALOR_ANALISE_REAP,\norigem.VALOR_FECHAMENTO\n\n); \n\n\n"
								}
							]
						}
					},
					{
						"name": "Lista Tabela",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino]",
								"storedProcedureParameters": {
									"COD_TABELA": {
										"type": "String",
										"value": null
									},
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "N"
									},
									"plataforma": {
										"type": "String",
										"value": "TECHSALLUS"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPAR TABELAS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista Tabela').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat(\n'select 20 AS ESTABELECIMENTO ,A.* from ', item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' A where ', item().nome_coluna_referencia,' >= ''',\nitem().Data_Inicio, ''' and  ', item().nome_coluna_referencia,' <= ''', item().Data_Fim, ''''\n)",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "TECHSALLUS_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"SCHEMA_NAME": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"TABLE_NAME": {
																"value": "@item().NOME_TABELA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DATA_HORA_INICIO_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "Starttime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('startTime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA PARCIAL').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_PARCIAL",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('Starttime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_PARCIAL",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_HORA_INICIO_COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "SqlServerSource",
														"sqlReaderQuery": {
															"value": "@concat(' select 20 AS ESTABELECIMENTO, A.* from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' A')",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "TECHSALLUS_DINAMICO",
														"type": "DatasetReference",
														"parameters": {
															"NOME_KEYVAULT_SECRET": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"SCHEMA_NAME": {
																"value": "@item().NOME_SCHEMA_ORIGEM",
																"type": "Expression"
															},
															"TABLE_NAME": {
																"value": "@item().NOME_TABELA_ORIGEM",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('Starttime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "SUCESSO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.05:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('Starttime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": {
																"value": "@activity('CARGA COMPLETA').error.message",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": {
																"value": "CARGA_COMPLETA",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": {
																"value": "ERRO",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "DATA_HORA_INICIO_COMPLETA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "Starttime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "CARGA DW",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_TECHSALLUS_CARGA_DW]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LIMPAR TABELAS",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lista Tabela",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista Tabela').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Apagar Stg",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSQL_DB_Procedimentos",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "@concat('TRUNCATE TABLE ',item().NOME_SCHEMA_DESTINO,'.',item().NOME_TABELA_DESTINO)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Apaga Pk NULL",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "MERGE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "DELETE FROM DW.OTORRINOCENTER WHERE PK_OTORRINOCENTER IS NULL"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Starttime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Otorrinocenter')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_STG')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Otorrinocenter')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL_DESTINO')]",
				"[concat(variables('factoryId'), '/datasets/LISTA_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/TECHSALLUS_DINAMICO')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orientacao e Conversao Cirurgicas')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline utilizado para alimentar tabelas do SMC:\n\n",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Orientacoes Cirurgicas Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "-- ORIENTAÇÃO\n\nSELECT Z.DT_AGENDA, Z.CD_AGENDA, Z.CD_PESSOA_FISICA, Z.NM_PESSOA_FISICA,Z.IE_LADO,Z.AUTORIZACAO AS DS_AUTORIZACAO,Z.PROCEDIMENTO, Z.CNPJ, Z.DS_UNIDADE, Z.BASE, Z.NR_SEQ_PROC_INTERNO,\n\n(SELECT COUNT(*)\nFROM AGENDA_PACIENTE AB,\n     PESSOA_FISICA PF_1,\n     AGENDA AG_1\nWHERE AB.CD_PESSOA_FISICA = PF_1.CD_PESSOA_FISICA\nAND AB.CD_AGENDA = AG_1.CD_AGENDA\nAND AB.CD_AGENDA NOT IN (4442,4443,4444,4445,4513,4563,4553,5273,4464,4465,4466,4467,4552,3043,11)\nAND AB.CD_PESSOA_FISICA = Z.CD_PESSOA_FISICA\nAND AG_1.CD_TIPO_AGENDA = 1\nAND AB.DT_AGENDA > Z.DT_AGENDA) AS INDICADOR_CIRURGIA\n\nFROM\n\n(SELECT MAX(A.DT_AGENDA) AS DT_AGENDA, A.CD_AGENDA, A.CD_PESSOA_FISICA, PF.NM_PESSOA_FISICA, \nOBTER_VALOR_DOMINIO(1227,A.IE_AUTORIZACAO) AS AUTORIZACAO, \nOBTER_DESC_PROCEDIMENTO(A.CD_PROCEDIMENTO, A.IE_ORIGEM_PROCED) AS PROCEDIMENTO,\n\nA.IE_LADO,\nES.CD_CGC AS CNPJ,\nES.NM_FANTASIA_ESTAB AS DS_UNIDADE,\n'Tasy Delphi' as BASE,\nA.NR_SEQ_PROC_INTERNO\n\nFROM AGENDA_PACIENTE A,\n     PESSOA_FISICA PF,\n     AGENDA AG,\n     ESTABELECIMENTO ES,\n     EMPRESA EM\nWHERE A.CD_PESSOA_FISICA = PF.CD_PESSOA_FISICA\nAND A.CD_AGENDA = AG.CD_AGENDA\nAND AG.CD_ESTABELECIMENTO = ES.CD_ESTABELECIMENTO\nAND ES.CD_EMPRESA = ES.CD_EMPRESA\nAND A.CD_AGENDA IN (4442,4443,4444,4445,4513,4563,4553,5273,4464,4465,4466,4467,4552,3043,11)\nAND AG.CD_TIPO_AGENDA = 1\nGROUP BY A.CD_PESSOA_FISICA, PF.NM_PESSOA_FISICA,A.IE_LADO, OBTER_VALOR_DOMINIO(1227,A.IE_AUTORIZACAO), OBTER_DESC_PROCEDIMENTO(A.CD_PROCEDIMENTO, A.IE_ORIGEM_PROCED),\nES.CD_CGC, ES.NM_FANTASIA_ESTAB, A.CD_AGENDA, A.NR_SEQ_PROC_INTERNO\nORDER BY 1 desc) Z \nWHERE Z.DT_AGENDA BETWEEN SYSDATE - 365 AND SYSDATE + 365",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "DT_AGENDA"
										},
										"sink": {
											"name": "DT_AGENDA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "CD_AGENDA"
										},
										"sink": {
											"name": "CD_AGENDA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NM_PESSOA_FISICA"
										},
										"sink": {
											"name": "NM_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_AUTORIZACAO"
										},
										"sink": {
											"name": "DS_AUTORIZACAO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_LADO"
										},
										"sink": {
											"name": "IE_LADO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "PROCEDIMENTO"
										},
										"sink": {
											"name": "PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CNPJ"
										},
										"sink": {
											"name": "CNPJ",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_UNIDADE"
										},
										"sink": {
											"name": "DS_UNIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BASE"
										},
										"sink": {
											"name": "BASE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "INDICADOR_CIRURGIA"
										},
										"sink": {
											"name": "INDICADOR_CIRURGIA",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Orientacao_Cirurgia_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendamento Cirurgico Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "-- AGENDA CIRURGICA\n\nSELECT\nAB.DT_AGENDA, AB.CD_AGENDA,\nAB.CD_PESSOA_FISICA, \nPF_1.NM_PESSOA_FISICA, \nOBTER_VALOR_DOMINIO(1227,AB.IE_AUTORIZACAO) AS DS_AUTORIZACAO, \nOBTER_DESC_PROCEDIMENTO(AB.CD_PROCEDIMENTO, AB.IE_ORIGEM_PROCED) AS PROCEDIMENTO,\nAB.NR_CIRURGIA,\nAB.IE_LADO,\nAB.CD_CONVENIO,\nES.NM_FANTASIA_ESTAB AS DS_UNIDADE,\nES.CD_CGC AS CNPJ,\n'Tasy Delphi' as BASE,\nAB.NR_SEQ_PROC_INTERNO\nFROM AGENDA_PACIENTE AB,\n     PESSOA_FISICA PF_1,\n     AGENDA AG_1,\n     ESTABELECIMENTO ES,\n     EMPRESA EM\nWHERE AB.CD_PESSOA_FISICA = PF_1.CD_PESSOA_FISICA\nAND AB.CD_AGENDA = AG_1.CD_AGENDA\nAND AG_1.CD_ESTABELECIMENTO = ES.CD_ESTABELECIMENTO\nAND AB.DT_AGENDA BETWEEN SYSDATE - 365 AND SYSDATE + 365\nAND ES.CD_EMPRESA = EM.CD_EMPRESA\nAND AB.CD_AGENDA NOT IN (4442,4443,4444,4445,4513,4563,4553,5273,4464,4465,4466,4467,4552,3043,11)\nAND AG_1.CD_TIPO_AGENDA = 1\nORDER BY 1",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento_Cirurgia_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Orientacoes Cirurgicas HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "-- ORIENTAÇÃO\n\nSELECT Z.DT_AGENDA, Z.CD_AGENDA, Z.CD_PESSOA_FISICA, Z.NM_PESSOA_FISICA,Z.IE_LADO,Z.AUTORIZACAO AS DS_AUTORIZACAO,Z.PROCEDIMENTO, Z.CNPJ, Z.DS_UNIDADE, Z.BASE, Z.NR_SEQ_PROC_INTERNO,\n\n(SELECT COUNT(*)\nFROM AGENDA_PACIENTE AB,\n     PESSOA_FISICA PF_1,\n     AGENDA AG_1\nWHERE AB.CD_PESSOA_FISICA = PF_1.CD_PESSOA_FISICA\nAND AB.CD_AGENDA = AG_1.CD_AGENDA\nAND AB.CD_AGENDA NOT IN (549,802,659,776,665,607,663,666,664,662,660,661,609)\nAND AB.CD_PESSOA_FISICA = Z.CD_PESSOA_FISICA\nAND AG_1.CD_TIPO_AGENDA = 1\nAND AB.DT_AGENDA > Z.DT_AGENDA) AS INDICADOR_CIRURGIA\n\nFROM\n\n(SELECT MAX(A.DT_AGENDAMENTO) AS DT_AGENDA, A.CD_AGENDA, A.CD_PESSOA_FISICA, PF.NM_PESSOA_FISICA, \nOBTER_VALOR_DOMINIO(1227,A.IE_AUTORIZACAO) AS AUTORIZACAO, \nOBTER_DESC_PROCEDIMENTO(A.CD_PROCEDIMENTO, A.IE_ORIGEM_PROCED) AS PROCEDIMENTO,\nA.IE_LADO,\nES.CD_CGC AS CNPJ,\nES.NM_FANTASIA_ESTAB AS DS_UNIDADE,\n'Tasy HTML' as BASE,\nA.NR_SEQ_PROC_INTERNO\n\nFROM AGENDA_PACIENTE A,\n     PESSOA_FISICA PF,\n     AGENDA AG,\n     ESTABELECIMENTO ES,\n     EMPRESA EM\nWHERE A.CD_PESSOA_FISICA = PF.CD_PESSOA_FISICA\nAND A.CD_AGENDA = AG.CD_AGENDA\nAND AG.CD_ESTABELECIMENTO = ES.CD_ESTABELECIMENTO\nAND ES.CD_EMPRESA = ES.CD_EMPRESA\nAND A.CD_AGENDA IN (549,802,659,776,665,607,663,666,664,662,660,661,609)\nAND AG.CD_TIPO_AGENDA = 1\nGROUP BY A.CD_PESSOA_FISICA, PF.NM_PESSOA_FISICA,A.IE_LADO, OBTER_VALOR_DOMINIO(1227,A.IE_AUTORIZACAO), OBTER_DESC_PROCEDIMENTO(A.CD_PROCEDIMENTO, A.IE_ORIGEM_PROCED),\nES.CD_CGC, ES.NM_FANTASIA_ESTAB, A.CD_AGENDA, A.NR_SEQ_PROC_INTERNO\nORDER BY 1 desc) Z \nWHERE Z.DT_AGENDA BETWEEN SYSDATE - 365 AND SYSDATE + 365",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Orientacao_Cirurgia_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendamento Cirurgico HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "-- AGENDA CIRURGICA\n\nSELECT\nAB.DT_AGENDA, AB.CD_AGENDA,\nAB.CD_PESSOA_FISICA, \nPF_1.NM_PESSOA_FISICA, \nOBTER_VALOR_DOMINIO(1227,AB.IE_AUTORIZACAO) AS DS_AUTORIZACAO, \nOBTER_DESC_PROCEDIMENTO(AB.CD_PROCEDIMENTO, AB.IE_ORIGEM_PROCED) AS PROCEDIMENTO,\nAB.NR_CIRURGIA,\nAB.IE_LADO,\nAB.CD_CONVENIO,\nES.NM_FANTASIA_ESTAB AS DS_UNIDADE,\nES.CD_CGC AS CNPJ,\n'Tasy HTML' as BASE,\nAB.NR_SEQ_PROC_INTERNO\nFROM AGENDA_PACIENTE AB,\n     PESSOA_FISICA PF_1,\n     AGENDA AG_1,\n     ESTABELECIMENTO ES,\n     EMPRESA EM\nWHERE AB.CD_PESSOA_FISICA = PF_1.CD_PESSOA_FISICA\nAND AB.CD_AGENDA = AG_1.CD_AGENDA\nAND AG_1.CD_ESTABELECIMENTO = ES.CD_ESTABELECIMENTO\nAND AB.DT_AGENDA BETWEEN SYSDATE - 365 AND SYSDATE + 365\nAND ES.CD_EMPRESA = EM.CD_EMPRESA\nAND AB.CD_AGENDA NOT IN (549,802,659,776,665,607,663,666,664,662,660,661,609)\nAND AG_1.CD_TIPO_AGENDA = 1\nORDER BY 1",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Agendamento_Cirurgia_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Cirurgias"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-12T14:12:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Orientacao_Cirurgia_Unidade')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Agendamento_Cirurgia_Unidade')]",
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pacientes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Carregamento das informações de pacientes de todas as unidades do sistema Tasy e Smart.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Clear Base",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Pacientes DH",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select pac_reg as CD_PESSOA_FISICA, \nrtrim(ltrim(pac_nome)) AS NM_PESSOA_FISICA, \npac_numcpf AS NR_CPF, \nconvert(char(10),pac_nasc,121) as DT_NASCIMENTO, \nPAC_CELULAR AS NR_TELEFONE_CELULAR,\npac_fone AS NR_TELEFONE, \n'13188370000227' AS CNPJ,\n'DAYHORC -  UNIDADE ITAIGARA' as DS_UNIDADE,\n'DH' as MARCA,\npac_reg as NR_PRONTUARIO,\npac_dreg as DT_CADASTRO_ORIGINAL,\npac_dult as DT_ATUALIZACAO,\nPAC_SEXO as IE_SEXO,\npac_cep as CD_CEP,\n'Smart DH Itaigara' as BASE\nfrom pac\ninner join usr on USR_LOGIN = PAC_USR_LOGIN_CAD",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NM_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "NM_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_TELEFONE_CELULAR",
											"type": "String"
										},
										"sink": {
											"name": "NR_TELEFONE_CELULAR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_TELEFONE",
											"type": "String"
										},
										"sink": {
											"name": "NR_TELEFONE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CNPJ",
											"type": "String"
										},
										"sink": {
											"name": "CNPJ",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_UNIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_UNIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_PRONTUARIO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_PRONTUARIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_CADASTRO_ORIGINAL",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_CADASTRO_ORIGINAL",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Pacientes_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Pacientes HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select pac_reg as CD_PESSOA_FISICA, \nrtrim(ltrim(pac_nome)) AS NM_PESSOA_FISICA, \npac_numcpf AS NR_CPF, \nconvert(char(10),pac_nasc,121) as DT_NASCIMENTO, \npac_celular AS NR_TELEFONE_CELULAR,\npac_fone AS NR_TELEFONE, \n'12305371000160' AS CNPJ,\n'HOSPITAL DE OLHOS SANTA LUZIA SS LTDA' as DS_UNIDADE,\n'HOSL' as MARCA,\npac_reg as NR_PRONTUARIO,\npac_dreg as DT_CADASTRO_ORIGINAL,\npac_dult as DT_ATUALIZACAO,\nPAC_SEXO as IE_SEXO,\npac_cep as CD_CEP,\n'Smart HOSL' as BASE\nfrom pac\ninner join usr on USR_LOGIN = PAC_USR_LOGIN_CAD",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Pacientes_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Pacientes INOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select pac_reg as CD_PESSOA_FISICA, \nrtrim(ltrim(pac_nome)) AS NM_PESSOA_FISICA, \npac_numcpf AS NR_CPF, \nconvert(char(10),pac_nasc,121) as DT_NASCIMENTO, \npac_celular AS NR_TELEFONE_CELULAR,\npac_fone AS NR_TELEFONE, \n'00363702000130' AS CNPJ,\n'INOB' as DS_UNIDADE,\n'INOB' as MARCA,\npac_reg as NR_PRONTUARIO,\npac_dreg as DT_CADASTRO_ORIGINAL,\npac_dult as DT_ATUALIZACAO,\nPAC_SEXO as IE_SEXO,\npac_cep as CD_CEP,\n'Smart INOB' as BASE\nfrom pac\ninner join usr on USR_LOGIN = PAC_USR_LOGIN_CAD",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Pacientes_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Pacientes IOF",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select pac_reg as CD_PESSOA_FISICA, \nrtrim(ltrim(pac_nome)) AS NM_PESSOA_FISICA, \npac_numcpf AS NR_CPF, \nconvert(char(10),pac_nasc,121) as DT_NASCIMENTO, \npac_celular AS NR_TELEFONE_CELULAR,\npac_fone AS NR_TELEFONE, \n'40514432000305' AS CNPJ,\n'INSTITUTO DE OLHOS FREITAS LF' as DS_UNIDADE,\n'INSTITUTO DE OLHOS FREITAS LF' as MARCA,\npac_reg as NR_PRONTUARIO,\npac_dreg as DT_CADASTRO_ORIGINAL,\npac_dult as DT_ATUALIZACAO,\nPAC_SEXO as IE_SEXO,\npac_cep as CD_CEP,\n'Smart IOF' as BASE\nfrom pac\ninner join usr on USR_LOGIN = PAC_USR_LOGIN_CAD",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Pacientes_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Pacientes Itabuna",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select pac_reg as CD_PESSOA_FISICA, \nrtrim(ltrim(pac_nome)) AS NM_PESSOA_FISICA, \npac_numcpf AS NR_CPF, \nconvert(char(10),pac_nasc,121) as DT_NASCIMENTO, \npac_celular AS NR_TELEFONE_CELULAR,\npac_fone AS NR_TELEFONE, \n'13188370000146' AS CNPJ,\n'DayHORC ITABUNA' as DS_UNIDADE,\n'DayHORC' as MARCA,\npac_reg as NR_PRONTUARIO,\npac_dreg as DT_CADASTRO_ORIGINAL,\npac_dult as DT_ATUALIZACAO,\nPAC_SEXO as IE_SEXO,\npac_cep as CD_CEP,\n'Smart DH Itabuna' as BASE\nfrom pac\ninner join usr on USR_LOGIN = PAC_USR_LOGIN_CAD",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Pacientes_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Pacientes Oftalmoclin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select pac_reg as CD_PESSOA_FISICA, \nrtrim(ltrim(pac_nome)) AS NM_PESSOA_FISICA, \npac_numcpf AS NR_CPF, \nconvert(char(10),pac_nasc,121) as DT_NASCIMENTO, \npac_celular AS NR_TELEFONE_CELULAR,\npac_fone AS NR_TELEFONE, \n'OFTALMOCLIN Hospital de Olhos da Bahia' AS CNPJ,\n'OFTALMOCLIN' as DS_UNIDADE,\n'OFTALMOCLIN' as MARCA,\npac_reg as NR_PRONTUARIO,\npac_dreg as DT_CADASTRO_ORIGINAL,\npac_dult as DT_ATUALIZACAO,\nPAC_SEXO as IE_SEXO,\npac_cep as CD_CEP,\n'Smart Oftalmoclin' as BASE\nfrom pac\ninner join usr on USR_LOGIN = PAC_USR_LOGIN_CAD",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Pacientes_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Paciente Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select pf.cd_pessoa_fisica,\n       pf.nm_pessoa_fisica,\n       pf.nr_cpf,\n       to_char((pf.dt_nascimento) , 'dd/mm/yyyy') as dt_nascimento,\n       pf.nr_ddd_celular||''||substr(replace(LTRIM(translate(pf.nr_telefone_celular, translate(pf.nr_telefone_celular, '1234567890', ' ') , ' ')),' ',''),1,100) as nr_telefone_celular,\n       obter_compl_pf(pf.cd_pessoa_fisica,1,'DDT')||''||obter_compl_pf(pf.cd_pessoa_fisica,1,'T') as nr_telefone,\n       obter_cnpj_estabelecimento(decode(pf.cd_estabelecimento,null,1,pf.cd_estabelecimento)) as CNPJ,\n       e.nm_fantasia_estab as DS_UNIDADE,\n       em.nm_razao_social as MARCA,\n       pf.nr_prontuario,\n       pf.dt_cadastro_original ,\n       pf.dt_atualizacao,\n       pf.ie_sexo,\n       obter_compl_pf(pf.cd_pessoa_fisica, 1, 'CEP') as cd_cep,\n'Tasy Delphi' as BASE\nfrom pessoa_fisica pf,\n     estabelecimento e,\n     empresa em\nwhere decode(pf.cd_estabelecimento,null,1,pf.cd_estabelecimento) = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Pacientes",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Paciente HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select pf.cd_pessoa_fisica,\n       pf.nm_pessoa_fisica,\n       pf.nr_cpf,\n       to_char((pf.dt_nascimento) , 'dd/mm/yyyy') as dt_nascimento,\n       pf.nr_ddd_celular||''||substr(replace(LTRIM(translate(pf.nr_telefone_celular, translate(pf.nr_telefone_celular, '1234567890', ' ') , ' ')),' ',''),1,100) as nr_telefone_celular,\n       obter_compl_pf(pf.cd_pessoa_fisica,1,'DDT')||''||obter_compl_pf(pf.cd_pessoa_fisica,1,'T') as nr_telefone,\n       obter_cnpj_estabelecimento(decode(pf.cd_estabelecimento,null,1,pf.cd_estabelecimento)) as CNPJ,\n       e.nm_fantasia_estab as DS_UNIDADE,\n       em.nm_razao_social as MARCA,\n       pf.nr_prontuario,\n       pf.dt_cadastro_original ,\n       pf.dt_atualizacao,\n       pf.ie_sexo,\n       obter_compl_pf(pf.cd_pessoa_fisica, 1, 'CEP') as cd_cep,\n'Tasy HTML' as BASE\nfrom pessoa_fisica pf,\n     estabelecimento e,\n     empresa em\nwhere decode(pf.cd_estabelecimento,null,1,pf.cd_estabelecimento) = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Pacientes",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Clear Base",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[CLEARBASEPACIENTES]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Clientes"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_HOSL_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_Pacientes_Unidade')]",
				"[concat(variables('factoryId'), '/datasets/SMART_IOF_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITABUNA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_Oftalmoclin_Prd_DataSet')]",
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Pacientes')]",
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parametros Repasse Medico')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Parametro_Repasse",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Lookup_Datetime SQL",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT DISTINCT DT_ATUALIZACAO\nFROM DBO.PARAMETRO_REPASSE_PG",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AZ",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup_Datetime SQL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get Metadata1').output.lastModified,activity('Lookup_Datetime SQL').output.firstRow.DT_ATUALIZACAO)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy Data",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"additionalColumns": [
												{
													"name": "DT_ATUALIZACAO",
													"value": {
														"value": "@activity('Get Metadata1').output.lastModified",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": "TRUNCATE TABLE DBO.PARAMETRO_REPASSE_PG",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "PK_CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "PK_CD_ESTABELECIMENTO",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "TIPO_PAGAMENTO",
														"type": "String",
														"physicalType": "String"
													},
													"sink": {
														"name": "TIPO_PAGAMENTO",
														"type": "String",
														"physicalType": "nvarchar"
													}
												},
												{
													"source": {
														"name": "DT_ATUALIZACAO",
														"type": "String"
													},
													"sink": {
														"name": "DT_ATUALIZACAO",
														"type": "DateTime",
														"physicalType": "datetime"
													}
												}
											],
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Parametro_Repasse",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_P_REPASSE",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Repasse Médico"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Parametro_Repasse')]",
				"[concat(variables('factoryId'), '/datasets/AZ')]",
				"[concat(variables('factoryId'), '/datasets/AZ_P_REPASSE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipeline Principal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipelines desenvolvidos em conjunto com a empresa Class para a extração das informações de produção. Atualmente desativado.",
				"activities": [
					{
						"name": "Sadalla_Tasy_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select\n\n'Tasy Sadalla' as BASE,\n--x.nr_seq_proc_pacote,\n7 as cd_marca,\n'Hospital de Olhos Sadalla Amin Ghanem' as marca,\n17 as cd_estabelecimento,\nc.nr_atendimento,\n'7'||'17'||c.nr_atendimento as nr_registro_unico,\nx.dt_atualizacao,\nat.dt_entrada,\nc.nr_interno_conta,\nnull as ds_estabelecimento,\npf.cd_pessoa_fisica,\n\npf.dt_nascimento,\npf.nr_cpf,\npf.ie_sexo,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CEP') as nr_cep,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CI') as ds_cidade,\n--pf.cd_pessoa_fisica as cd_pessoa_fisica,\nobter_nome_pf(at.cd_pessoa_fisica) as ds_pessoa_fisica,\nc.cd_convenio_parametro as cd_convenio,\nobter_nome_convenio(c.cd_convenio_parametro) as ds_convenio,\nx.cd_medico_executor,\nobter_nome_pf(x.cd_medico_executor) as ds_medico_executor,\nx.cd_medico_req as cd_medico_requisitante,\nobter_nome_pf(x.cd_medico_req) as ds_medico_requisitante,\nx.ie_origem_proced,\nx.cd_procedimento,\nx.ds_procedimento as ds_procedimento,\nx.classif as ds_classificacao,\n\n(select r.ds_grupo_receita from grupo_receita r where r.nr_sequencia = x.nr_seq_grupo_rec) as ds_classif_procedimento,\n\ncase\nwhen (select r.nr_sequencia from grupo_receita r where r.nr_sequencia = x.nr_seq_grupo_rec) = 12 then x.cd_procedimento\nelse\n\n(select z.cd_procedimento as valor \n from procedimento_paciente z \n where z.nr_atendimento = c.nr_atendimento \n and z.nr_interno_conta = c.nr_interno_conta \n --and z.vl_medico = (select max(w.vl_medico) \n and z.nr_sequencia = (select min(w.nr_sequencia)\n                          from procedimento_paciente w \n                          where w.nr_atendimento = z.nr_atendimento \n                          and w.nr_interno_conta = z.nr_interno_conta\n                          and w.cd_motivo_exc_conta is null\n                          ) \n group by z.cd_procedimento) end cd_proced_principal,\n\ncase\nwhen (select r.nr_sequencia from grupo_receita r where r.nr_sequencia = x.nr_seq_grupo_rec) = 12 then obter_desc_procedimento(x.cd_procedimento, x.ie_origem_proced)\nelse\n\nobter_desc_procedimento(\n\n(select z.cd_procedimento as valor \n   from procedimento_paciente z \n   where z.nr_atendimento = c.nr_atendimento \n   and z.nr_interno_conta = c.nr_interno_conta \n   --and z.vl_medico = (select max(w.vl_medico) \n    and z.nr_sequencia = (select min(w.nr_sequencia)\n                            from procedimento_paciente w \n                            where w.nr_atendimento = z.nr_atendimento \n                            and w.nr_interno_conta = z.nr_interno_conta\n                            and w.cd_motivo_exc_conta is null\n                            ) \n                            group by z.cd_procedimento),\n\n(select min(z.ie_origem_proced) as ie_origem_proced \n   from procedimento_paciente z \n   where z.nr_atendimento = c.nr_atendimento \n   and z.nr_interno_conta = c.nr_interno_conta \n   --and z.vl_medico = (select max(w.vl_medico) \n    and z.nr_sequencia = (select min(w.nr_sequencia)\n                         from procedimento_paciente w \n                         where w.nr_atendimento = z.nr_atendimento \n                         and w.nr_interno_conta = z.nr_interno_conta\n                         and w.cd_motivo_exc_conta is null\n                         ) \n group by z.ie_origem_proced)\n\n)end ds_proced_principal,\n\nx.qt_procedimento,\nc.vl_conta,\nx.vl_procedimento,\nc.ie_status_acerto,\ndecode(c.ie_status_acerto, 1,'Provisorio' , 2 ,'Definitivo') as status_conta,\nx.tuss as cd_tuss,\n(select x.ds_estrutura from  mat_estrutura x, mat_estrutura_cadastro y where x.nr_sequencia = y.nr_seq_estrutura and y.cd_material = x.cd_procedimento) as ds_classif_lio\nfrom atendimento_paciente at,\nconta_paciente c,\npessoa_fisica pf,\n\n(select p.nr_interno_conta, \np.cd_procedimento, \nobter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced) as ds_procedimento, \nobter_valor_dominio(19,pr.ie_classificacao) as classif,\np.cd_medico_executor,\np.cd_medico_req,\np.ie_origem_proced,\np.qt_procedimento,\np.vl_procedimento,\np.vl_medico,\np.nr_sequencia,\np.cd_edicao_amb,\np.cd_convenio,\np.nr_atendimento,\np.cd_motivo_exc_conta,\np.nr_seq_proc_crit_repasse,\nobter_codigo_tuss(p.nr_seq_proc_interno) as tuss,\np.dt_atualizacao,\npr.nr_seq_grupo_rec\nfrom procedimento_paciente p,\n     procedimento pr\nwhere p.cd_procedimento = pr.cd_procedimento\nand p.ie_origem_proced = pr.ie_origem_proced\n\nunion all\nselect mp.nr_interno_conta, \nmp.cd_material as cd_procedimento, \nm.ds_material as ds_procedimento,\nobter_dados_material(m.cd_material,'GRU') as classif,\nobter_medico_resp_atend(mp.nr_atendimento,'C') as cd_medico_executor,\nobter_medico_resp_atend(mp.nr_atendimento,'C') as cd_medico_req,\n0 as ie_origem_proced,\nmp.qt_material,\nmp.vl_material,\n0 vl_medico,\nmp.nr_sequencia,\n'0' as cd_edicao_amb,\nmp.cd_convenio,\nmp.nr_atendimento,\nmp.cd_motivo_exc_conta,\n0 nr_seq_proc_crit_repasse,\n0 tuss,\nmp.dt_atualizacao,\n0 nr_seq_grupo_rec\nfrom material_atend_paciente mp,\n     material m\nwhere mp.cd_material = m.cd_material) x\n\nwhere at.nr_atendimento = c.nr_atendimento\nand c.nr_interno_conta = x.nr_interno_conta\nand at.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand c.ie_cancelamento is null\nand x.cd_motivo_exc_conta is null\nand c.cd_estabelecimento = 1\nand at.dt_entrada BETWEEN sysdate -2 and sysdate\nand c.vl_conta > 0\ngroup by \nc.nr_atendimento,\nat.dt_entrada,\nc.nr_interno_conta,\nc.cd_estabelecimento,\nat.cd_pessoa_fisica,\nc.cd_convenio_parametro,\nc.vl_conta,\nx.nr_sequencia,\nx.vl_medico,\nx.vl_procedimento,\nx.ie_origem_proced,\nx.cd_procedimento,\nx.ds_procedimento,\nx.qt_procedimento,\nx.cd_edicao_amb,\nx.cd_medico_executor,\nc.ie_status_acerto,\nx.nr_atendimento,\nx.cd_convenio,\nat.ie_tipo_atendimento,\nx.nr_interno_conta,\npf.dt_nascimento,\npf.nr_cpf,\nx.cd_medico_req,\npf.ie_sexo,\npf.cd_pessoa_fisica,\nx.classif,\nx.tuss,\nx.nr_seq_grupo_rec,\nx.dt_atualizacao,\nat.nr_atendimento\n\norder by 5,3 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Processa Itens",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Sadalla_Tasy_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SMART_ITAIGARA_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SMART_INOB_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SMART_HOSL_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SMART_ITABUNA_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ProcessTempItems]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Tabela Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processa Itens",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from TEMPTASY\nWhere Processed = 'Sim'",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MARCA",
											"type": "String"
										},
										"sink": {
											"name": "DS_MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "Int64"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										},
										"sink": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MEDICO_EXECUTOR_PARCEIRO",
											"type": "String"
										},
										"sink": {
											"name": "MEDICO_EXECUTOR_PARCEIRO",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlProcedimentosTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Temp Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Tabela Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[TRUNCATETEMPTABLE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SMART_ITAIGARA_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        'Smart DayHorc Itaigara' as BASE\n        ,3 as CD_MARCA\n        ,'DAYHORC' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 7\n            when '9' then 7\n            when '13' then 7\n            when 'SCL' then 7\n            when '901' then 7\n            when 'IOF' then 7\n            when '13' then 8\n            when 'DHI' then 9\n        end as CD_ESTABELECIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 'HBA'\n            when '9' then 'HBA'\n            when '13' then 'HBA'\n            when 'SCL' then 'HBA'\n            when '901' then 'HBA'\n            when 'IOF' then 'HBA'\n            when '13' then 'Itaigara'\n            when 'DHI' then 'Itabuna'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,'') as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,'' as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and osm_dthr >= '2019-02-26'\n        and osm_dthr <= '2019-02-26 23:59:000'\n)\n\nselect \n    CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\n    -- ,smm_rci_serie\n    -- ,smm_rci_num\n    -- ,smm_p_osm_serie\n    -- ,smm_p_osm_num\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "String"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SMART_INOB_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        'Smart INOB' as BASE\n        ,3 as CD_MARCA\n        ,'DAYHORC' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 7\n            when '9' then 7\n            when '13' then 7\n            when 'SCL' then 7\n            when '901' then 7\n            when 'IOF' then 7\n            when '13' then 8\n            when 'DHI' then 9\n        end as CD_ESTABELECIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 'HBA'\n            when '9' then 'HBA'\n            when '13' then 'HBA'\n            when 'SCL' then 'HBA'\n            when '901' then 'HBA'\n            when 'IOF' then 'HBA'\n            when '13' then 'Itaigara'\n            when 'DHI' then 'Itabuna'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,'') as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,'' as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and osm_dthr >= '2019-02-26'\n        and osm_dthr <= '2019-02-26 23:59:000'\n)\n\nselect \n    CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\n    -- ,smm_rci_serie\n    -- ,smm_rci_num\n    -- ,smm_p_osm_serie\n    -- ,smm_p_osm_num\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "String"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_INOB_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SMART_HOSL_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        'Smart HOSL' as BASE\n        ,3 as CD_MARCA\n        ,'DAYHORC' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 7\n            when '9' then 7\n            when '13' then 7\n            when 'SCL' then 7\n            when '901' then 7\n            when 'IOF' then 7\n            when '13' then 8\n            when 'DHI' then 9\n        end as CD_ESTABELECIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 'HBA'\n            when '9' then 'HBA'\n            when '13' then 'HBA'\n            when 'SCL' then 'HBA'\n            when '901' then 'HBA'\n            when 'IOF' then 'HBA'\n            when '13' then 'Itaigara'\n            when 'DHI' then 'Itabuna'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,'') as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,'' as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and osm_dthr >= '2019-02-26'\n        and osm_dthr <= '2019-02-26 23:59:000'\n)\n\nselect \n    CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\n    -- ,smm_rci_serie\n    -- ,smm_rci_num\n    -- ,smm_p_osm_serie\n    -- ,smm_p_osm_num\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "String"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "SMART_ITABUNA_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        'Smart DayHorc Itabuna' as BASE\n        ,3 as CD_MARCA\n        ,'DAYHORC' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 7\n            when '9' then 7\n            when '13' then 7\n            when 'SCL' then 7\n            when '901' then 7\n            when 'IOF' then 7\n            when '13' then 8\n            when 'DHI' then 9\n        end as CD_ESTABELECIMENTO\n        ,case ltrim(str_emp.str_cod) \n            when '18' then 'HBA'\n            when '9' then 'HBA'\n            when '13' then 'HBA'\n            when 'SCL' then 'HBA'\n            when '901' then 'HBA'\n            when 'IOF' then 'HBA'\n            when '13' then 'Itaigara'\n            when 'DHI' then 'Itabuna'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,'') as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,'' as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and osm_dthr >= '2019-02-26'\n        and osm_dthr <= '2019-02-26 23:59:000'\n)\n\nselect \n    CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\n    -- ,smm_rci_serie\n    -- ,smm_rci_num\n    -- ,smm_p_osm_serie\n    -- ,smm_p_osm_num\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "String"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Producao Medica/Produção"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTEMPTable')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlProcedimentosTable')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITAIGARA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_INOB_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_HOSL_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITABUNA_PrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Plan_Recebimento')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Planilha de Recebimento enviado pela área do contas à receber",
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Binary_ContasReceber",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": "contasreceber"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endsWith(item().name, 'xlsx')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Data_File",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "modif_dt",
										"value": {
											"value": "@split(replace(replace(item().name,'Consolidado_Plan_RecebimentoW',''),'.xlsx','N'),'M')\n\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "ForEach2",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('modif_dt')",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@startswith(item(),'C')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "DtModificao",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "dt_modif",
													"value": {
														"value": "@concat(substring(replace(item(),'N',''),0,4)\n,'-',substring(replace(item(),'N',''),4,2)\n,'-',substring(replace(item(),'N',''),6,2)\n,' ',substring(replace(item(),'N',''),9,2)\n,':',substring(replace(item(),'N',''),12,2)\n,':',substring(replace(item(),'N',''),15,2)\n)",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "DtCriacao",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "dt_criacao",
													"value": {
														"value": "@concat(substring(replace(item(),'C',''),0,4)\n,'-',substring(replace(item(),'C',''),4,2)\n,'-',substring(replace(item(),'C',''),6,2)\n,' ',substring(replace(item(),'C',''),9,2)\n,':',substring(replace(item(),'C',''),12,2)\n,':',substring(replace(item(),'C',''),15,2)\n)",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "ForEach3",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Truncate Stg",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"additionalColumns": [
												{
													"name": "DT_CRIACAO_ARQUIVO",
													"value": {
														"value": "@variables('dt_criacao')",
														"type": "Expression"
													}
												},
												{
													"name": "DT_MODIFICAO_ARQUIVO",
													"value": {
														"value": "@variables('dt_modif')",
														"type": "Expression"
													}
												}
											],
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "Excel_Recebimento",
											"type": "DatasetReference",
											"parameters": {
												"FileBlob": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_Plan_Recebimento",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					},
					{
						"name": "Delete File Blob",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "ForEach3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Binary_ContasReceber",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": "contasreceber"
								}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Merge",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Delete File Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH REF AS(\n\nSELECT \nESTABELECIMENTO + '|' + RTRIM(LTRIM(ISNULL([CONVÊNIOS],''))) +'|' + ISNULL([CNPJ],'0') + '|' + [DT CRÉDITO] AS FK_PLAN\n,[ESTABELECIMENTO]\n,RTRIM(LTRIM([CONVÊNIOS])) AS CONVÊNIOS\n,[CNPJ]\n,[DT CRÉDITO]\n,[DT_CRIACAO_ARQUIVO]\n,[DT_MODIFICAO_ARQUIVO]\n,SUM(CAST([VL DO CRÉDITO] AS money)) AS VL_CREDITO\nFROM STG.plan_recebimento_cta_receber\nGROUP BY\nESTABELECIMENTO + '|' + RTRIM(LTRIM(ISNULL([CONVÊNIOS],''))) +'|' + ISNULL([CNPJ],'0') + '|' + [DT CRÉDITO] \n,[ESTABELECIMENTO]\n,RTRIM(LTRIM([CONVÊNIOS])) \n,[CNPJ]\n,[DT CRÉDITO]\n,[DT_CRIACAO_ARQUIVO]\n,[DT_MODIFICAO_ARQUIVO]\n\n)\n\nMERGE\n    dw.PLAN_RECEBIMENTO_CTA_RECEBER as DESTINO\nUSING\n    REF as ORIGEM\non (DESTINO.FK_PLAN = ORIGEM.FK_PLAN)\n\nWHEN MATCHED  \nTHEN UPDATE SET\ndestino.FK_PLAN = origem.FK_PLAN\n,destino.ESTABELECIMENTO = origem.ESTABELECIMENTO\n,destino.CONVÊNIOS = origem.CONVÊNIOS\n,destino.CNPJ = origem.CNPJ\n,destino.[DT CRÉDITO] = origem.[DT CRÉDITO]\n,destino.DT_CRIACAO_ARQUIVO = origem.DT_CRIACAO_ARQUIVO\n,destino.DT_MODIFICAO_ARQUIVO = origem.DT_MODIFICAO_ARQUIVO\n,destino.VL_CREDITO = origem.VL_CREDITO  \n\nWHEN NOT MATCHED BY TARGET  \nTHEN INSERT  \n        Values(            \n            origem.FK_PLAN\n            ,origem.ESTABELECIMENTO\n            ,origem.CONVÊNIOS\n            ,origem.CNPJ\n            ,origem.[DT CRÉDITO]\n            ,origem.DT_CRIACAO_ARQUIVO\n            ,origem.DT_MODIFICAO_ARQUIVO\n            ,origem.VL_CREDITO\n        );"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Truncate Stg",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "TRUNCATE TABLE STG.plan_recebimento_cta_receber"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"modif_dt": {
						"type": "Array"
					},
					"dt_modif": {
						"type": "String"
					},
					"dt_criacao": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/Outros"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Binary_ContasReceber')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/Excel_Recebimento')]",
				"[concat(variables('factoryId'), '/datasets/AZ_Plan_Recebimento')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Posicao Estoque Tasy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lista Query",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[SP_ADF_SEARCH_STORAGE_QUERY_SYS]",
								"storedProcedureParameters": {
									"nm_plataforma": {
										"type": "String",
										"value": "TASY"
									},
									"nm_query": {
										"type": "String",
										"value": "SUPRIMENTOS_MOVIMENTO_ESTOQUE"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "QUERY_DINAMICO",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "EXTRACAO DADOS ORIGEM",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LIMPA TABELA DESTINO",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "PERIODO INICIAL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "PERIODO FINAL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista Query').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CARGA TASY",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@concat(item().DS_SQL,' WHERE A.DT_MOVIMENTO_ESTOQUE BETWEEN ','''',variables('DT_INICIO'),'''',' AND ','''',variables('DT_FINAL'),'''')",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ORACLE_LOG",
											"type": "DatasetReference",
											"parameters": {
												"nm_keyvault": {
													"value": "@item().NOME_KEYVAULT_SECRET",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DESTINO_TABELAS_ADF",
											"type": "DatasetReference",
											"parameters": {
												"Schema_Destino": "stg",
												"Tabela_Destino": {
													"value": "@replace(item().NOME_TABELA_DESTINO,'stg.','')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "LIMPA TABELA DESTINO",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Lista Query",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "TRUNCATE TABLE stg.movimento_estoque_tasy",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "PERIODO INICIAL",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DT_INICIO",
							"value": "01/01/2023"
						}
					},
					{
						"name": "PERIODO FINAL",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DT_FINAL",
							"value": "01/02/2023"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"DT_INICIO": {
						"type": "String"
					},
					"DT_FINAL": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/Suprimentos"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/QUERY_DINAMICO')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/ORACLE_LOG')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Posicao_Estoque')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Posicao Estoque HTML",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select distinct \n    TO_CHAR(SLE.Dt_Mesano_Referencia,'YYYY-MM-DD')           AS MES_REF,\n    TO_CHAR(SLE.cd_estabelecimento)                          AS CD_ESTABELECIMENTO,\n    ESTB.nm_fantasia_estab                                   AS DS_ESTABELECIMENTO,\n    TO_CHAR(SLE.cd_local_estoque)                            AS CD_LOCAL_ESTOQUE,\n    LE.ds_local_estoque,\n    0                                                       AS CD_ALMOXERIFADO,\n    ''                                                      AS DS_ALMOXERIFADO,\n    CAST(SLE.cd_material AS INT)                            AS CD_MATERIAL,\n    MAT.ds_reduzida                                         AS DS_MATERIAL_SHORT,\n    TO_CHAR(MAT_C.CD_CLASSE_MATERIAL)                       AS CD_CLASSE_MATERIAL,    \n    MAT_C.ds_classe_material                                AS DS_CLASSE_MATERIAL,\n    TO_CHAR(MAT_GRP.CD_GRUPO_MATERIAL)                      AS CD_GRUPO_MATERIAL,\n    MAT_GRP.ds_grupo_material                               AS DS_GRUPO_MATERIAL,\n   -- ds_fabricante Fabricante,       \n    SLE.qt_estoque                                          AS QT_ESTOQUE,\n    ROUND(SLE.vl_custo_medio)                               AS VL_MED_UNIT,\n    ROUND(SLE.vl_custo_medio * QT_ESTOQUE,2)                AS VL_TOTAL,\n    TO_CHAR(MAT.IE_CONSIGNADO)                              AS IE_CONSIGNADO\n    from saldo_estoque SLE\n    \n    left join estabelecimento ESTB\n    on (SLE.cd_estabelecimento = ESTB.cd_estabelecimento)\n    \n    left join local_estoque LE\n    on (LE.cd_estabelecimento = SLE.cd_estabelecimento AND\n        LE.cd_local_estoque = SLE.cd_local_estoque)\n        \n    left join material MAT\n    on (SLE.cd_material = MAT.cd_material) \n    \n    left join material_familia MAT_F\n    on (MAT.nr_seq_familia = MAT_F.nr_sequencia)\n    \n    left join classe_material MAT_C\n    on (MAT.cd_classe_material = MAT_C.cd_classe_material)\n    \n    left join subgrupo_material MAT_SUB\n    on (MAT_C.cd_subgrupo_material = MAT_SUB.cd_subgrupo_material)\n    \n    left join grupo_material MAT_GRP\n    on (MAT_SUB.cd_grupo_material = MAT_GRP.cd_grupo_material)\n    \n    left join mat_fabricante MAT_FAB\n    on MAT.nr_seq_fabric =  MAT_FAB.nr_sequencia    \n  \n    --Where To_Char(SLE.Dt_Mesano_Referencia,'DD/MM/YYYY') = TO_CHAR(TRUNC(SYSDATE,'MM')-30,'DD/MM/YYYY')\n    Where To_Char(SLE.Dt_Mesano_Referencia,'DD/MM/YYYY') = TO_CHAR(TRUNC(SYSDATE,'MM'),'DD/MM/YYYY') ",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM ESTOQUE_POSICAO\nWHERE MES_REF = CAST(SUBSTRING(CAST(CAST(GETDATE() AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE)",
								"writeBehavior": "insert",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MES_REF"
										},
										"sink": {
											"name": "MES_REF",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOQUE"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ALMOXERIFADO"
										},
										"sink": {
											"name": "CD_ALMOXERIFADO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_ALMOXERIFADO"
										},
										"sink": {
											"name": "DS_ALMOXERIFADO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_ESTOQUE"
										},
										"sink": {
											"name": "QT_ESTOQUE",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "VL_MED_UNIT"
										},
										"sink": {
											"name": "VL_MED_UNIT",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "VL_TOTAL"
										},
										"sink": {
											"name": "VL_TOTAL",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "IE_CONSIGNADO"
										},
										"sink": {
											"name": "IE_CONSIGNADO",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_ESTOQUE_POSICAO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Posicao Estoque Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Posicao Estoque HTML",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select distinct \n    TO_CHAR(SLE.Dt_Mesano_Referencia,'YYYY-MM-DD')           AS MES_REF,\n    TO_CHAR(SLE.cd_estabelecimento)                          AS CD_ESTABELECIMENTO,\n    ESTB.nm_fantasia_estab                                   AS DS_ESTABELECIMENTO,\n    TO_CHAR(SLE.cd_local_estoque)                            AS CD_LOCAL_ESTOQUE,\n    LE.ds_local_estoque,\n    0                                                       AS CD_ALMOXERIFADO,\n    ''                                                      AS DS_ALMOXERIFADO,\n    CAST(SLE.cd_material AS INT)                            AS CD_MATERIAL,\n    MAT.ds_reduzida                                         AS DS_MATERIAL_SHORT,\n    TO_CHAR(MAT_C.CD_CLASSE_MATERIAL)                       AS CD_CLASSE_MATERIAL,    \n    MAT_C.ds_classe_material                                AS DS_CLASSE_MATERIAL,\n    TO_CHAR(MAT_GRP.CD_GRUPO_MATERIAL)                      AS CD_GRUPO_MATERIAL,\n    MAT_GRP.ds_grupo_material                               AS DS_GRUPO_MATERIAL,\n   -- ds_fabricante Fabricante,       \n    SLE.qt_estoque                                          AS QT_ESTOQUE,\n    ROUND(SLE.vl_custo_medio)                               AS VL_MED_UNIT,\n    ROUND(SLE.vl_custo_medio * QT_ESTOQUE,2)                AS VL_TOTAL,\n    TO_CHAR(MAT.IE_CONSIGNADO)                              AS IE_CONSIGNADO\n    from saldo_estoque SLE\n    \n    left join estabelecimento ESTB\n    on (SLE.cd_estabelecimento = ESTB.cd_estabelecimento)\n    \n    left join local_estoque LE\n    on (LE.cd_estabelecimento = SLE.cd_estabelecimento AND\n        LE.cd_local_estoque = SLE.cd_local_estoque)\n        \n    left join material MAT\n    on (SLE.cd_material = MAT.cd_material) \n    \n    left join material_familia MAT_F\n    on (MAT.nr_seq_familia = MAT_F.nr_sequencia)\n    \n    left join classe_material MAT_C\n    on (MAT.cd_classe_material = MAT_C.cd_classe_material)\n    \n    left join subgrupo_material MAT_SUB\n    on (MAT_C.cd_subgrupo_material = MAT_SUB.cd_subgrupo_material)\n    \n    left join grupo_material MAT_GRP\n    on (MAT_SUB.cd_grupo_material = MAT_GRP.cd_grupo_material)\n    \n    left join mat_fabricante MAT_FAB\n    on MAT.nr_seq_fabric =  MAT_FAB.nr_sequencia    \n  \n    --Where To_Char(SLE.Dt_Mesano_Referencia,'DD/MM/YYYY') = TO_CHAR(TRUNC(SYSDATE,'MM')-30,'DD/MM/YYYY')\n    Where To_Char(SLE.Dt_Mesano_Referencia,'DD/MM/YYYY') = TO_CHAR(TRUNC(SYSDATE,'MM'),'DD/MM/YYYY') ",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MES_REF"
										},
										"sink": {
											"name": "MES_REF",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOQUE"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ALMOXERIFADO"
										},
										"sink": {
											"name": "CD_ALMOXERIFADO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_ALMOXERIFADO"
										},
										"sink": {
											"name": "DS_ALMOXERIFADO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_ESTOQUE"
										},
										"sink": {
											"name": "QT_ESTOQUE",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "VL_MED_UNIT"
										},
										"sink": {
											"name": "VL_MED_UNIT",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "VL_TOTAL"
										},
										"sink": {
											"name": "VL_TOTAL",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "IE_CONSIGNADO"
										},
										"sink": {
											"name": "IE_CONSIGNADO",
											"type": "Int32"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_ESTOQUE_POSICAO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Posicao DH ITG",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Posicao Estoque Sadalla",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF = CAST(SUBSTRING(CAST(CAST(GETDATE() AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE);\n\nWITH AUX AS(\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE) AS estoque\n    , ROUND((\n            SUM(CASE \n                    WHEN etq.etq_cml_preco_medio IS NULL\n                        THEN 0\n                    ELSE etq.etq_cml_preco_medio\n                    END * etq.etq_quantidade) / SUM(ETQ.ETQ_QUANTIDADE)\n            ) * 1.0000000000, 10) etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10) AS valor_total\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n   \nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) <> 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE)\n    , mat.mat_vlr_pm etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10)\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n\nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) = 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , sum(mma_qtd * mma_tipo_es_fator * - 1)\n    , 0\n    , ROUND(sum(mma_valor * mma_tipo_es_fator * - 1), 10)\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MMA.MMA_IND_APLIC_DIRETA\nFROM MMA (nolock)\nLEFT OUTER JOIN ETQ  (nolock)  ON (mma.mma_mat_cod = etq.etq_mat_cod AND mma.mma_sba_cod = etq.etq_sba_cod)\n        , MAT   (nolock)\n        , cfg   (nolock)\n        , gmm   (nolock)\n        , LMA   (nolock)   \n-- WHERE (cast(mma.mma_data_mov as date) BETWEEN '2021-04-01' and '2021-04-30')\nWHERE (cast(mma.mma_data_mov as date) >= @MES_REF)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (MMA.MMA_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (gmm.gmm_cod = mma.mma_gmm_cod)\n    AND (7 = 7)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MMA.MMA_IND_APLIC_DIRETA\n\n)\n\nSELECT \n    @MES_REF                                                                                AS MES_REF,\n    GCC.gcc_cod                                                                             AS CD_ESTABELECIMENTO,\n    GCC.gcc_descr                                                                           AS DS_ESTABELECIMENTO,\n    STR.str_cod                                                                             AS CD_LOCAL_ESTOQUE,\n    STR.str_nome                                                                            AS DS_LOCAL_ESTOQUE,\n    SBA_COD                                                                                 as CD_ALMOXERIFADO,\n    SBA_NOME                                                                                AS DS_ALMOXERIFADO,\n    A.MAT_COD                                                                               AS CD_MATERIAL\n    ,A.MAT_DESC_RESUMIDA                                                                    AS DS_MATERIAL_SHORT\n    ,A.LMA_COD                                                                              AS CD_CLASSE_MATERIAL\n    ,A.LMA_NOME                                                                             AS DS_CLASSE_MATERIAL\n    ,A.gmm_cod                                                                              AS CD_GRUPO_MATERIAL\n    ,A.gmm_nome                                                                             AS DS_GRUPO_MATERIAL\n    ,A.estoque                                                                              AS QT_ESTOQUE\n    ,A.etq_etq_cml_preco_medio                                                              AS VL_MED_UNIT\n    ,A.valor_total                                                                          AS VL_TOTAL\n    ,A.consignado                                                                           AS IE_CONSIGNADO\nFROM AUX A  \nLEFT JOIN SBA SBA (NOLOCK) ON SBA.SBA_COD = A.etq_sba_cod\nLEFT JOIN STR STR (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD\nLEFT JOIN GCC GCC (NOLOCK) ON GCC.gcc_str_cod = STR.str_str_cod ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 38
										},
										"sink": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 38
										},
										"sink": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 38
										},
										"sink": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "IE_CONSIGNADO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "IE_CONSIGNADO",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_ESTOQUE_POSICAO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Posicao DH ITB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Posicao DH ITG",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF = CAST(SUBSTRING(CAST(CAST(GETDATE() AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE);\n\nWITH AUX AS(\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE) AS estoque\n    , ROUND((\n            SUM(CASE \n                    WHEN etq.etq_cml_preco_medio IS NULL\n                        THEN 0\n                    ELSE etq.etq_cml_preco_medio\n                    END * etq.etq_quantidade) / SUM(ETQ.ETQ_QUANTIDADE)\n            ) * 1.0000000000, 10) etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10) AS valor_total\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n   \nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) <> 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE)\n    , mat.mat_vlr_pm etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10)\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n\nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) = 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , sum(mma_qtd * mma_tipo_es_fator * - 1)\n    , 0\n    , ROUND(sum(mma_valor * mma_tipo_es_fator * - 1), 10)\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MMA.MMA_IND_APLIC_DIRETA\nFROM MMA (nolock)\nLEFT OUTER JOIN ETQ  (nolock)  ON (mma.mma_mat_cod = etq.etq_mat_cod AND mma.mma_sba_cod = etq.etq_sba_cod)\n        , MAT   (nolock)\n        , cfg   (nolock)\n        , gmm   (nolock)\n        , LMA   (nolock)   \n-- WHERE (cast(mma.mma_data_mov as date) BETWEEN '2021-04-01' and '2021-04-30')\nWHERE (cast(mma.mma_data_mov as date) >= @MES_REF)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (MMA.MMA_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (gmm.gmm_cod = mma.mma_gmm_cod)\n    AND (7 = 7)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MMA.MMA_IND_APLIC_DIRETA\n\n)\n\nSELECT \n    @MES_REF                                                                                AS MES_REF,\n    GCC.gcc_cod                                                                             AS CD_ESTABELECIMENTO,\n    GCC.gcc_descr                                                                           AS DS_ESTABELECIMENTO,\n    STR.str_cod                                                                             AS CD_LOCAL_ESTOQUE,\n    STR.str_nome                                                                            AS DS_LOCAL_ESTOQUE,\n    SBA_COD                                                                                 as CD_ALMOXERIFADO,\n    SBA_NOME                                                                                AS DS_ALMOXERIFADO,\n    A.MAT_COD                                                                               AS CD_MATERIAL\n    ,A.MAT_DESC_RESUMIDA                                                                    AS DS_MATERIAL_SHORT\n    ,A.LMA_COD                                                                              AS CD_CLASSE_MATERIAL\n    ,A.LMA_NOME                                                                             AS DS_CLASSE_MATERIAL\n    ,A.gmm_cod                                                                              AS CD_GRUPO_MATERIAL\n    ,A.gmm_nome                                                                             AS DS_GRUPO_MATERIAL\n    ,A.estoque                                                                              AS QT_ESTOQUE\n    ,A.etq_etq_cml_preco_medio                                                              AS VL_MED_UNIT\n    ,A.valor_total                                                                          AS VL_TOTAL\n    ,A.consignado                                                                           AS IE_CONSIGNADO\nFROM AUX A  \nLEFT JOIN SBA SBA (NOLOCK) ON SBA.SBA_COD = A.etq_sba_cod\nLEFT JOIN STR STR (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD\nLEFT JOIN GCC GCC (NOLOCK) ON GCC.gcc_str_cod = STR.str_str_cod ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 38
										},
										"sink": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 38
										},
										"sink": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 38
										},
										"sink": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "IE_CONSIGNADO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "IE_CONSIGNADO",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_ESTOQUE_POSICAO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Posicao HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Posicao DH ITB",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF = CAST(SUBSTRING(CAST(CAST(GETDATE() AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE);\n\nWITH AUX AS(\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE) AS estoque\n    , ROUND((\n            SUM(CASE \n                    WHEN etq.etq_cml_preco_medio IS NULL\n                        THEN 0\n                    ELSE etq.etq_cml_preco_medio\n                    END * etq.etq_quantidade) / SUM(ETQ.ETQ_QUANTIDADE)\n            ) * 1.0000000000, 10) etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10) AS valor_total\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n   \nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) <> 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE)\n    , mat.mat_vlr_pm etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10)\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n\nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) = 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , sum(mma_qtd * mma_tipo_es_fator * - 1)\n    , 0\n    , ROUND(sum(mma_valor * mma_tipo_es_fator * - 1), 10)\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MMA.MMA_IND_APLIC_DIRETA\nFROM MMA (nolock)\nLEFT OUTER JOIN ETQ  (nolock)  ON (mma.mma_mat_cod = etq.etq_mat_cod AND mma.mma_sba_cod = etq.etq_sba_cod)\n        , MAT   (nolock)\n        , cfg   (nolock)\n        , gmm   (nolock)\n        , LMA   (nolock)   \n-- WHERE (cast(mma.mma_data_mov as date) BETWEEN '2021-04-01' and '2021-04-30')\nWHERE (cast(mma.mma_data_mov as date) >= @MES_REF)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (MMA.MMA_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (gmm.gmm_cod = mma.mma_gmm_cod)\n    AND (7 = 7)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MMA.MMA_IND_APLIC_DIRETA\n\n)\n\nSELECT \n    @MES_REF                                                                                AS MES_REF,\n    GCC.gcc_cod                                                                             AS CD_ESTABELECIMENTO,\n    GCC.gcc_descr                                                                           AS DS_ESTABELECIMENTO,\n    STR.str_cod                                                                             AS CD_LOCAL_ESTOQUE,\n    STR.str_nome                                                                            AS DS_LOCAL_ESTOQUE,\n    SBA_COD                                                                                 as CD_ALMOXERIFADO,\n    SBA_NOME                                                                                AS DS_ALMOXERIFADO,\n    A.MAT_COD                                                                               AS CD_MATERIAL\n    ,A.MAT_DESC_RESUMIDA                                                                    AS DS_MATERIAL_SHORT\n    ,A.LMA_COD                                                                              AS CD_CLASSE_MATERIAL\n    ,A.LMA_NOME                                                                             AS DS_CLASSE_MATERIAL\n    ,A.gmm_cod                                                                              AS CD_GRUPO_MATERIAL\n    ,A.gmm_nome                                                                             AS DS_GRUPO_MATERIAL\n    ,A.estoque                                                                              AS QT_ESTOQUE\n    ,A.etq_etq_cml_preco_medio                                                              AS VL_MED_UNIT\n    ,A.valor_total                                                                          AS VL_TOTAL\n    ,A.consignado                                                                           AS IE_CONSIGNADO\nFROM AUX A  \nLEFT JOIN SBA SBA (NOLOCK) ON SBA.SBA_COD = A.etq_sba_cod\nLEFT JOIN STR STR (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD\nLEFT JOIN GCC GCC (NOLOCK) ON GCC.gcc_str_cod = STR.str_str_cod ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 38
										},
										"sink": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 38
										},
										"sink": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 38
										},
										"sink": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "IE_CONSIGNADO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "IE_CONSIGNADO",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_ESTOQUE_POSICAO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Posicao Oftalmoclin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Posicao HOSL",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF = CAST(SUBSTRING(CAST(CAST(GETDATE() AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE);\n\nWITH AUX AS(\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE) AS estoque\n    , ROUND((\n            SUM(CASE \n                    WHEN etq.etq_cml_preco_medio IS NULL\n                        THEN 0\n                    ELSE etq.etq_cml_preco_medio\n                    END * etq.etq_quantidade) / SUM(ETQ.ETQ_QUANTIDADE)\n            ) * 1.0000000000, 10) etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10) AS valor_total\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n   \nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) <> 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE)\n    , mat.mat_vlr_pm etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10)\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n\nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) = 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , sum(mma_qtd * mma_tipo_es_fator * - 1)\n    , 0\n    , ROUND(sum(mma_valor * mma_tipo_es_fator * - 1), 10)\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MMA.MMA_IND_APLIC_DIRETA\nFROM MMA (nolock)\nLEFT OUTER JOIN ETQ  (nolock)  ON (mma.mma_mat_cod = etq.etq_mat_cod AND mma.mma_sba_cod = etq.etq_sba_cod)\n        , MAT   (nolock)\n        , cfg   (nolock)\n        , gmm   (nolock)\n        , LMA   (nolock)   \n-- WHERE (cast(mma.mma_data_mov as date) BETWEEN '2021-04-01' and '2021-04-30')\nWHERE (cast(mma.mma_data_mov as date) >= @MES_REF)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (MMA.MMA_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (gmm.gmm_cod = mma.mma_gmm_cod)\n    AND (7 = 7)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MMA.MMA_IND_APLIC_DIRETA\n\n)\n\nSELECT \n    @MES_REF                                                                                AS MES_REF,\n    GCC.gcc_cod                                                                             AS CD_ESTABELECIMENTO,\n    GCC.gcc_descr                                                                           AS DS_ESTABELECIMENTO,\n    STR.str_cod                                                                             AS CD_LOCAL_ESTOQUE,\n    STR.str_nome                                                                            AS DS_LOCAL_ESTOQUE,\n    SBA_COD                                                                                 as CD_ALMOXERIFADO,\n    SBA_NOME                                                                                AS DS_ALMOXERIFADO,\n    A.MAT_COD                                                                               AS CD_MATERIAL\n    ,A.MAT_DESC_RESUMIDA                                                                    AS DS_MATERIAL_SHORT\n    ,A.LMA_COD                                                                              AS CD_CLASSE_MATERIAL\n    ,A.LMA_NOME                                                                             AS DS_CLASSE_MATERIAL\n    ,A.gmm_cod                                                                              AS CD_GRUPO_MATERIAL\n    ,A.gmm_nome                                                                             AS DS_GRUPO_MATERIAL\n    ,A.estoque                                                                              AS QT_ESTOQUE\n    ,A.etq_etq_cml_preco_medio                                                              AS VL_MED_UNIT\n    ,A.valor_total                                                                          AS VL_TOTAL\n    ,A.consignado                                                                           AS IE_CONSIGNADO\nFROM AUX A  \nLEFT JOIN SBA SBA (NOLOCK) ON SBA.SBA_COD = A.etq_sba_cod\nLEFT JOIN STR STR (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD\nLEFT JOIN GCC GCC (NOLOCK) ON GCC.gcc_str_cod = STR.str_str_cod ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 38
										},
										"sink": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 38
										},
										"sink": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 38
										},
										"sink": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "IE_CONSIGNADO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "IE_CONSIGNADO",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_ESTOQUE_POSICAO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Posicao IOF",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Posicao Oftalmoclin",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "DECLARE @MES_REF DATE\n\nSET @MES_REF = CAST(SUBSTRING(CAST(CAST(GETDATE() AS DATE) AS VARCHAR(30)),1,7)+'-01' AS DATE);\n\nWITH AUX AS(\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE) AS estoque\n    , ROUND((\n            SUM(CASE \n                    WHEN etq.etq_cml_preco_medio IS NULL\n                        THEN 0\n                    ELSE etq.etq_cml_preco_medio\n                    END * etq.etq_quantidade) / SUM(ETQ.ETQ_QUANTIDADE)\n            ) * 1.0000000000, 10) etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10) AS valor_total\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n   \nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) <> 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , SUM(ETQ.ETQ_QUANTIDADE)\n    , mat.mat_vlr_pm etq_etq_cml_preco_medio\n    , ROUND(SUM(CASE \n                WHEN etq.etq_cml_preco_medio IS NULL\n                    THEN 0\n                ELSE etq.etq_cml_preco_medio\n                END * etq.etq_quantidade), 10)\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nFROM MAT    (nolock)\n    , cfg   (nolock)\n    , gmm   (nolock)\n    , LMA   (nolock)\n    , ETQ   (nolock)\n\nWHERE (LMA.LMA_GMM_COD = gmm.gmm_cod)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (ETQ.ETQ_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (8 = 8)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN MAT.MAT_IND_CONSIGNADO = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MAT.MAT_IND_APLIC_DIRETA\nHAVING SUM(etq.etq_quantidade) = 0\n\nUNION ALL\n\nSELECT \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , sum(mma_qtd * mma_tipo_es_fator * - 1)\n    , 0\n    , ROUND(sum(mma_valor * mma_tipo_es_fator * - 1), 10)\n    , mat.mat_prc_ult_entrada AS saldo_residual\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END AS consignado\n    , MMA.MMA_IND_APLIC_DIRETA\nFROM MMA (nolock)\nLEFT OUTER JOIN ETQ  (nolock)  ON (mma.mma_mat_cod = etq.etq_mat_cod AND mma.mma_sba_cod = etq.etq_sba_cod)\n        , MAT   (nolock)\n        , cfg   (nolock)\n        , gmm   (nolock)\n        , LMA   (nolock)   \n-- WHERE (cast(mma.mma_data_mov as date) BETWEEN '2021-04-01' and '2021-04-30')\nWHERE (cast(mma.mma_data_mov as date) >= @MES_REF)\n    AND (LMA.LMA_GMM_COD = MAT.MAT_GMM_COD)\n    AND (LMA.LMA_COD = MAT.MAT_LMA_COD)\n    AND (MMA.MMA_MAT_COD = MAT.MAT_COD)\n    AND (MAT.MAT_COD > 0)\n    AND (gmm.gmm_cod = mma.mma_gmm_cod)\n    AND (7 = 7)\nGROUP BY \n    ETQ.etq_sba_cod\n    , MAT.MAT_COD\n    , MAT.MAT_DESC_RESUMIDA\n    , MAT.MAT_CONS_MEDIO\n    , MAT.MAT_UNM_COD_SAIDA\n    , MAT.mat_vlr_pm\n    , cfg.cfg_emp\n    , LMA.LMA_NOME\n    , gmm.gmm_nome\n    , gmm.gmm_cod\n    , LMA.LMA_COD\n    , mat.mat_prc_ult_entrada\n    , mat.mat_unm_cod_entrada\n    , MAT.MAT_IND_FRACIONADO\n    , MAT.MAT_FAT_CONV_S_V\n    , CASE \n        WHEN mma.mma_ind_consig = 'S'\n            THEN 'S'\n        ELSE 'N'\n        END\n    , MMA.MMA_IND_APLIC_DIRETA\n\n)\n\nSELECT \n    @MES_REF                                                                                AS MES_REF,\n    GCC.gcc_cod                                                                             AS CD_ESTABELECIMENTO,\n    GCC.gcc_descr                                                                           AS DS_ESTABELECIMENTO,\n    STR.str_cod                                                                             AS CD_LOCAL_ESTOQUE,\n    STR.str_nome                                                                            AS DS_LOCAL_ESTOQUE,\n    SBA_COD                                                                                 as CD_ALMOXERIFADO,\n    SBA_NOME                                                                                AS DS_ALMOXERIFADO,\n    A.MAT_COD                                                                               AS CD_MATERIAL\n    ,A.MAT_DESC_RESUMIDA                                                                    AS DS_MATERIAL_SHORT\n    ,A.LMA_COD                                                                              AS CD_CLASSE_MATERIAL\n    ,A.LMA_NOME                                                                             AS DS_CLASSE_MATERIAL\n    ,A.gmm_cod                                                                              AS CD_GRUPO_MATERIAL\n    ,A.gmm_nome                                                                             AS DS_GRUPO_MATERIAL\n    ,A.estoque                                                                              AS QT_ESTOQUE\n    ,A.etq_etq_cml_preco_medio                                                              AS VL_MED_UNIT\n    ,A.valor_total                                                                          AS VL_TOTAL\n    ,A.consignado                                                                           AS IE_CONSIGNADO\nFROM AUX A  \nLEFT JOIN SBA SBA (NOLOCK) ON SBA.SBA_COD = A.etq_sba_cod\nLEFT JOIN STR STR (NOLOCK) ON STR.str_cod = SBA.SBA_STR_COD\nLEFT JOIN GCC GCC (NOLOCK) ON GCC.gcc_str_cod = STR.str_str_cod ",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										},
										"sink": {
											"name": "MES_REF",
											"type": "DateTime",
											"physicalType": "date"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_LOCAL_ESTOQUE",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_ALMOXERIFADO",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_MATERIAL",
											"type": "Int32",
											"physicalType": "int"
										},
										"sink": {
											"name": "CD_MATERIAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_MATERIAL_SHORT",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "DS_CLASSE_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "char"
										},
										"sink": {
											"name": "CD_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "DS_GRUPO_MATERIAL",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 38
										},
										"sink": {
											"name": "QT_ESTOQUE",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 7,
											"precision": 38
										},
										"sink": {
											"name": "VL_MED_UNIT",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 10,
											"precision": 38
										},
										"sink": {
											"name": "VL_TOTAL",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 0,
											"precision": 18
										}
									},
									{
										"source": {
											"name": "IE_CONSIGNADO",
											"type": "String",
											"physicalType": "varchar"
										},
										"sink": {
											"name": "IE_CONSIGNADO",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_ESTOQUE_POSICAO",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Estoque"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-20T18:04:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_ESTOQUE_POSICAO')]",
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITAIGARA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITABUNA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_HOSL_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_Oftalmoclin_Prd_DataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_IOF_PrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Procedure_Marca')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Procedure_Marca",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "sp_UPDATETRADEMARKV2",
							"storedProcedureParameters": {
								"CNPJ_FIELDNAME": {
									"value": "cd_cgc_estab",
									"type": "String"
								},
								"INITIALS_FIELDNAME": {
									"value": "SIGLA_UNIDADE",
									"type": "String"
								},
								"MARK_FIELDNAME": {
									"value": "MARCA",
									"type": "String"
								},
								"TABLENAME": {
									"value": "Aging_Baixa_Titulo_Receber",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Contas a receber"
				},
				"annotations": [],
				"lastPublishTime": "2019-09-10T17:22:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Processamento e Armaz')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP Processa Prod Diaria",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SP_PROCESSA_PROD_DIARIA]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Producao Diaria"
				},
				"annotations": [],
				"lastPublishTime": "2021-07-20T18:04:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Producao Medica HOB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline desenvolvido para extração de informações de produção medica das unidades com o sistema Tasy e Smart.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Producao Procedimentos HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select \n\n'Tasy HTML' as BASE,\ne.cd_cgc as CNPJ,\ne.nm_fantasia_estab as marca,\np.dt_atualizacao,\np.nr_atendimento,\nat.dt_entrada,\np.nr_interno_conta,\n--obter_nome_estab(c.cd_estabelecimento) as ds_estabelecimento,\npf.cd_pessoa_fisica,\npf.dt_nascimento,\npf.nr_cpf,\npf.ie_sexo,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CEP') as nr_cep,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CI') as ds_cidade,\nobter_nome_pf(at.cd_pessoa_fisica) as ds_pessoa_fisica,\np.cd_convenio as cd_convenio,\nobter_nome_convenio(c.cd_convenio_parametro) as ds_convenio,\np.cd_medico_executor,\nobter_nome_pf(p.cd_medico_executor) as ds_medico_executor,\np.cd_medico_req as cd_medico_requisitante,\nobter_nome_pf(p.cd_medico_req) as ds_medico_requisitante,\np.ie_origem_proced as ie_origem_procedimento,\np.cd_procedimento,\nobter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced) as ds_procedimento, \nobter_valor_dominio(19,pr.ie_classificacao) as ds_classificacao,\np.qt_procedimento,\n--c.vl_conta,\np.vl_procedimento,\nc.ie_status_acerto,\ndecode(c.ie_status_acerto, 1,'Provisorio' , 2 ,'Definitivo') as status_conta,\n'' as cd_tuss,\np.nr_seq_proc_interno\nfrom procedimento_paciente p,\natendimento_paciente at,\npessoa_fisica pf,\nprocedimento pr,\nconta_paciente c,\nestabelecimento e,\nempresa em\nwhere p.nr_atendimento = at.nr_atendimento\nand at.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand p.cd_procedimento = pr.cd_procedimento\nand p.ie_origem_proced = pr.ie_origem_proced\nand p.nr_interno_conta = c.nr_interno_conta\nand at.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa\nand p.cd_motivo_exc_conta is null\nand c.ie_cancelamento is null\nand at.dt_entrada between sysdate - 730 and sysdate",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Unidade_Producao_Medica",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Producao Materiais HOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select 'Tasy HTML' as BASE,\ne.cd_cgc as CNPJ,\ne.nm_fantasia_estab as marca,\nmp.dt_atualizacao,\nmp.nr_atendimento,\nat.dt_entrada,\nmp.nr_interno_conta,\npf.cd_pessoa_fisica,\npf.dt_nascimento,\npf.nr_cpf,\npf.ie_sexo,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CEP') as nr_cep,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CI') as ds_cidade,\nobter_nome_pf(at.cd_pessoa_fisica) as ds_pessoa_fisica,\nmp.cd_convenio as cd_convenio,\nobter_nome_convenio(c.cd_convenio_parametro) as ds_convenio,\nat.cd_medico_atendimento as cd_medico_executor,\nobter_nome_pf(at.cd_medico_atendimento) as ds_medico_executor,\nmp.cd_medico_prescritor as cd_medico_requisitante,\nobter_nome_pf(mp.cd_medico_prescritor) as ds_medico_requisitante,\n' ' ie_origem_procedimento,\nmp.cd_material as cd_procedimento,\nm.ds_material as ds_procedimento, \n'Material'  ds_classificacao,\nmp.qt_material as qt_procedimento,\nmp.vl_material as vl_procedimento,\nc.ie_status_acerto,\ndecode(c.ie_status_acerto, 1,'Provisorio' , 2 ,'Definitivo') as status_conta,\n'' as cd_tuss,\n0 as nr_seq_proc_interno\nfrom  conta_paciente c,\n      material_atend_paciente mp,\n      material m,\n      estabelecimento e,\n      atendimento_paciente at,\n      pessoa_fisica pf\nwhere c.nr_atendimento = mp.nr_atendimento\nand c.nr_interno_conta = mp.nr_interno_conta\nand mp.cd_material = m.cd_material\nand c.cd_estabelecimento = e.cd_estabelecimento\nand mp.nr_atendimento = at.nr_atendimento\nand at.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand mp.dt_atualizacao between sysdate -730 and sysdate\nand mp.cd_motivo_exc_conta is null",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Unidade_Producao_Medica",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Convenios",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select cn.cd_convenio, cn.ds_convenio, e.cd_estabelecimento, e.cd_cgc as cnpj\nfrom convenio cn,\n     convenio_estabelecimento ce,\n     estabelecimento e\nwhere cn.cd_convenio = ce.cd_convenio\nand ce.cd_estabelecimento = e.cd_estabelecimento\norder by 2",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Convenio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Setor",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select a.cd_setor_atendimento, a.ds_setor_atendimento, e.cd_cgc as cnpj\nfrom setor_atendimento a,\nestabelecimento e\nwhere a.cd_estabelecimento = e.cd_estabelecimento\nand e.ie_situacao = 'A'",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Setor",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Execute HOSL",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Producao Procedimentos HOB",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Producao Materiais HOB",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Convenios",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Setor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Producao Medica HOSL",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Produção Médica CSI"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Unidade_Producao_Medica')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Convenio')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Setor')]",
				"[concat(variables('factoryId'), '/pipelines/Producao Medica HOSL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Producao Medica HOSL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline desenvolvido para extração de informações de produção medica das unidades com o sistema Tasy e Smart.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Producao Procedimentos HOSL",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "    select\n        'Smart HOSL' as BASE\n        ,EMP_CGC as CNPJ\n        ,gcc_descr as MARCA\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_ATENDIMENTO --duvida\n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,0) as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIFICACAO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as STATUS_CONTA\n        ,0 as CD_TUSS,\n        0 as NR_SEQ_PROC_INTERNO\n    from \n        osm\n        inner join smm on (smm_osm_serie = osm_serie and smm_osm = osm_num)\n        inner join str str_osm on (str_osm.str_cod = osm_str)\n        inner join str str_emp on (str_osm.str_str_cod = str_emp.str_cod)\n        inner join pac on (pac_reg = osm_pac)inner join cnv on (cnv_cod = osm_cnv)\n        inner join psv psv_exe on (psv_exe.psv_cod = smm_med)\n        inner join psv psv_req on (psv_req.psv_cod = smm_med)\n        inner join smk on (smk_cod = smm_cod and smk_tipo = smm_tpcod)\n        inner join gcc on (str_emp.str_cod = gcc_cod)\n        \n        inner join emp ON (emp_cod = str_emp.str_emp_cod)\n\n        inner join ctf on (ctf_cod = smk_ctf and ctf_tipo = smk_tipo)\n        left outer join tab on (tab_cod = smm_tab_cod)\n    where \n        1 = 1\n        and convert(varchar(10), osm_dthr, 103) = convert(varchar(10), getdate(), 103)\nand osm_dthr between GETDATE() - 730 and GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Unidade_Producao_Medica",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Convenios",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select cnv_cod AS CD_CONVENIO, cnv.cnv_nome AS DS_CONVENIO, gcc.gcc_cod AS CD_ESTABELECIMENTO, emp.emp_cgc AS CNPJ\nfrom cnv,\n     gcc,\n     str,\n     emp\nwhere gcc.gcc_str_cod = str_cod\nand str_emp_cod = emp_cod\nand emp_cgc <> '-'\nand cnv_cod <> '999'\nand cnv_stat = 'A'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Convenio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Setor",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT STR_COD AS CD_SETOR_ATENDIMENTO, \nSTR_NOME AS DS_SETOR_ATENDIMENTO, \nEMP_CGC AS CNPJ\nFROM STR, EMP\nWHERE STR_EMP_COD = EMP_COD\nAND EMP_CGC <> '-'\nAND STR_COD <> '999'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Setor",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Execute INOB",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Producao Procedimentos HOSL",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Convenios",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Setor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Producao Medica INOB",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Produção Médica CSI"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_HOSL_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Unidade_Producao_Medica')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Convenio')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Setor')]",
				"[concat(variables('factoryId'), '/pipelines/Producao Medica INOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Producao Medica INOB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline desenvolvido para extração de informações de produção medica das unidades com o sistema Tasy e Smart.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Producao Procedimentos INOB",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": " select\n        'INOB' as BASE\n        ,EMP_CGC as CNPJ\n        ,gcc_descr as MARCA\n        ,smm_dthr_alter as DT_ATUALIZACAO\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_ATENDIMENTO --duvida\n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,0) as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIFICACAO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as STATUS_CONTA\n        ,0 as CD_TUSS,\n        0 as NR_SEQ_PROC_INTERNO\n    from \n        osm\n        inner join smm on (smm_osm_serie = osm_serie and smm_osm = osm_num)\n        inner join str str_osm on (str_osm.str_cod = osm_str)\n        inner join str str_emp on (str_osm.str_str_cod = str_emp.str_cod)\n        inner join pac on (pac_reg = osm_pac)inner join cnv on (cnv_cod = osm_cnv)\n        inner join psv psv_exe on (psv_exe.psv_cod = smm_med)\n        inner join psv psv_req on (psv_req.psv_cod = smm_med)\n        inner join smk on (smk_cod = smm_cod and smk_tipo = smm_tpcod)\n        inner join gcc on (str_emp.str_cod = gcc_cod)\n        \n        inner join emp ON (emp_cod = str_emp.str_emp_cod)\n\n        inner join ctf on (ctf_cod = smk_ctf and ctf_tipo = smk_tipo)\n        left outer join tab on (tab_cod = smm_tab_cod)\n    where \n        1 = 1\n        --and convert(varchar(10), osm_dthr, 103) = convert(varchar(10), getdate(), 103)\nand osm_dthr between GETDATE() - 730 and GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_INOB_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Unidade_Producao_Medica",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Convenios",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select cnv_cod AS CD_CONVENIO, cnv.cnv_nome AS DS_CONVENIO, gcc.gcc_cod AS CD_ESTABELECIMENTO, emp.emp_cgc AS CNPJ\nfrom cnv,\n     gcc,\n     str,\n     emp\nwhere gcc.gcc_str_cod = str_cod\nand str_emp_cod = emp_cod\nand emp_cgc <> '-'\nand cnv_cod <> '999'\nand cnv_stat = 'A'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_INOB_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Convenio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Setor",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT STR_COD AS CD_SETOR_ATENDIMENTO, \nSTR_NOME AS DS_SETOR_ATENDIMENTO, \nEMP_CGC AS CNPJ\nFROM STR, EMP\nWHERE STR_EMP_COD = EMP_COD\nAND EMP_CGC <> '-'\nAND STR_COD <> '999'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_INOB_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Setor",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Execute IOF",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Producao Procedimentos INOB",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Convenios",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Setor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Producao Medica IOF",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Produção Médica CSI"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_INOB_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Unidade_Producao_Medica')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Convenio')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Setor')]",
				"[concat(variables('factoryId'), '/pipelines/Producao Medica IOF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Producao Medica IOF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline desenvolvido para extração de informações de produção medica das unidades com o sistema Tasy e Smart.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Producao Procedimentos IOF",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select \n        'Smart IOF' as BASE\n        ,EMP_CGC as CNPJ\n        ,gcc.gcc_descr as MARCA\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_ATENDIMENTO --duvida\n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,0) as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIFICACAO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as STATUS_CONTA\n        ,0 as CD_TUSS,\n        0 as NR_SEQ_PROC_INTERNO\n    from \n        osm\n        inner join smm on (smm_osm_serie = osm_serie and smm_osm = osm_num)\n        inner join str str_osm on (str_osm.str_cod = osm_str)\n        inner join str str_emp on (str_osm.str_str_cod = str_emp.str_cod)\n        inner join pac on (pac_reg = osm_pac)\n        inner join cnv on (cnv_cod = osm_cnv)\n        inner join psv psv_exe on (psv_exe.psv_cod = smm_med)\n        inner join psv psv_req on (psv_req.psv_cod = smm_med)\n        inner join smk on (smk_cod = smm_cod and smk_tipo = smm_tpcod)\n        inner join ctf on (ctf_cod = smk_ctf and ctf_tipo = smk_tipo)\n        \n        inner join emp ON (emp_cod = str_emp.str_emp_cod)\n        inner join gcc ON (gcc_str_cod = str_emp.str_cod)\n\n        left outer join tab on (tab_cod = smm_tab_cod)\n        \n    where \n        1 = 1\n        and convert(varchar(10), osm_dthr, 103) = convert(varchar(10), getdate(), 103)\nand osm_dthr between GETDATE() - 730 and GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Unidade_Producao_Medica",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Convenios",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select cnv_cod AS CD_CONVENIO, cnv.cnv_nome AS DS_CONVENIO, gcc.gcc_cod AS CD_ESTABELECIMENTO, emp.emp_cgc AS CNPJ\nfrom cnv,\n     gcc,\n     str,\n     emp\nwhere gcc.gcc_str_cod = str_cod\nand str_emp_cod = emp_cod\nand emp_cgc <> '-'\nand cnv_cod <> '999'\nand cnv_stat = 'A'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Convenio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Setor",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT STR_COD AS CD_SETOR_ATENDIMENTO, \nSTR_NOME AS DS_SETOR_ATENDIMENTO, \nEMP_CGC AS CNPJ\nFROM STR, EMP\nWHERE STR_EMP_COD = EMP_COD\nAND EMP_CGC <> '-'\nAND STR_COD <> '999'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Setor",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Execute Itabuna",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Producao Procedimentos IOF",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Convenios",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Setor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Producao Medica Itabuna",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Produção Médica CSI"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:27Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_IOF_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Unidade_Producao_Medica')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Convenio')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Setor')]",
				"[concat(variables('factoryId'), '/pipelines/Producao Medica Itabuna')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Producao Medica Itabuna')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline desenvolvido para extração de informações de produção medica das unidades com o sistema Tasy e Smart.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Producao Procedimentos Itabuna",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select\n        'Smart Itabuna' as BASE\n        ,EMP_CGC as CNPJ\n        ,gcc_descr as MARCA\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_ATENDIMENTO --duvida\n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,0) as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIFICACAO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as STATUS_CONTA\n        ,0 as CD_TUSS,\n        0 as NR_SEQ_PROC_INTERNO\n    from \n        osm\n        inner join smm on (smm_osm_serie = osm_serie and smm_osm = osm_num)\n        inner join str str_osm on (str_osm.str_cod = osm_str)\n        inner join str str_emp on (str_osm.str_str_cod = str_emp.str_cod)\n        inner join pac on (pac_reg = osm_pac)inner join cnv on (cnv_cod = osm_cnv)\n        inner join psv psv_exe on (psv_exe.psv_cod = smm_med)\n        inner join psv psv_req on (psv_req.psv_cod = smm_med)\n        inner join smk on (smk_cod = smm_cod and smk_tipo = smm_tpcod)\n        inner join gcc on (str_emp.str_cod = gcc_cod)\n        \n        inner join emp ON (emp_cod = str_emp.str_emp_cod)\n\n        inner join ctf on (ctf_cod = smk_ctf and ctf_tipo = smk_tipo)\n        left outer join tab on (tab_cod = smm_tab_cod)\n    where \n        1 = 1\n        and convert(varchar(10), osm_dthr, 103) = convert(varchar(10), getdate(), 103)\nand osm_dthr between GETDATE() - 730 and GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Unidade_Producao_Medica",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Convenios",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select cnv_cod AS CD_CONVENIO, cnv.cnv_nome AS DS_CONVENIO, gcc.gcc_cod AS CD_ESTABELECIMENTO, emp.emp_cgc AS CNPJ\nfrom cnv,\n     gcc,\n     str,\n     emp\nwhere gcc.gcc_str_cod = str_cod\nand str_emp_cod = emp_cod\nand emp_cgc <> '-'\nand cnv_cod <> '999'\nand cnv_stat = 'A'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Convenio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Setor",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT STR_COD AS CD_SETOR_ATENDIMENTO, \nSTR_NOME AS DS_SETOR_ATENDIMENTO, \nEMP_CGC AS CNPJ\nFROM STR, EMP\nWHERE STR_EMP_COD = EMP_COD\nAND EMP_CGC <> '-'\nAND STR_COD <> '999'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Setor",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Execute Itaigara",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Producao Procedimentos Itabuna",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Convenios",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Setor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Producao Medica Itaigara",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Produção Médica CSI"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_ITABUNA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Unidade_Producao_Medica')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Convenio')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Setor')]",
				"[concat(variables('factoryId'), '/pipelines/Producao Medica Itaigara')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Producao Medica Itaigara')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline desenvolvido para extração de informações de produção medica das unidades com o sistema Tasy e Smart.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Producao Procedimentos DH",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "    select\n        'Smart Itaigara' as BASE\n        ,EMP_CGC as CNPJ\n        ,gcc_descr as MARCA\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_ATENDIMENTO --duvida\n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,0) as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIFICACAO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as STATUS_CONTA\n        ,0 as CD_TUSS,\n        0 as NR_SEQ_PROC_INTERNO\n    from \n        osm\n        inner join smm on (smm_osm_serie = osm_serie and smm_osm = osm_num)\n        inner join str str_osm on (str_osm.str_cod = osm_str)\n        inner join str str_emp on (str_osm.str_str_cod = str_emp.str_cod)\n        inner join pac on (pac_reg = osm_pac)inner join cnv on (cnv_cod = osm_cnv)\n        inner join psv psv_exe on (psv_exe.psv_cod = smm_med)\n        inner join psv psv_req on (psv_req.psv_cod = smm_med)\n        inner join smk on (smk_cod = smm_cod and smk_tipo = smm_tpcod)\n        inner join gcc on (str_emp.str_cod = gcc_cod)\n        \n        inner join emp ON (emp_cod = str_emp.str_emp_cod)\n\n        inner join ctf on (ctf_cod = smk_ctf and ctf_tipo = smk_tipo)\n        left outer join tab on (tab_cod = smm_tab_cod)\n    where \n        1 = 1\n        and convert(varchar(10), osm_dthr, 103) = convert(varchar(10), getdate(), 103)\nand osm_dthr between GETDATE() - 730 and GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Unidade_Producao_Medica",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Convenios",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select cnv_cod AS CD_CONVENIO, cnv.cnv_nome AS DS_CONVENIO, gcc.gcc_cod AS CD_ESTABELECIMENTO, emp.emp_cgc AS CNPJ\nfrom cnv,\n     gcc,\n     str,\n     emp\nwhere gcc.gcc_str_cod = str_cod\nand str_emp_cod = emp_cod\nand emp_cgc <> '-'\nand cnv_cod <> '999'\nand cnv_stat = 'A'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Convenio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Setor",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT STR_COD AS CD_SETOR_ATENDIMENTO, \nSTR_NOME AS DS_SETOR_ATENDIMENTO, \nEMP_CGC AS CNPJ\nFROM STR, EMP\nWHERE STR_EMP_COD = EMP_COD\nAND EMP_CGC <> '-'\nAND STR_COD <> '999'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Setor",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Execute Oftamoclin",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Producao Procedimentos DH",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Convenios",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Setor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Producao Medica Oftalmoclin",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Produção Médica CSI"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_ITAIGARA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Unidade_Producao_Medica')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Convenio')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Setor')]",
				"[concat(variables('factoryId'), '/pipelines/Producao Medica Oftalmoclin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Producao Medica Oftalmoclin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline desenvolvido para extração de informações de produção medica das unidades com o sistema Tasy e Smart.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Producao Procedimentos Oftamoclin",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select \n        'Oftalmoclin' as BASE\n        ,EMP_CGC as CNPJ\n        ,gcc.gcc_descr as MARCA\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_ATENDIMENTO --duvida\n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,0) as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIFICACAO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as STATUS_CONTA\n        ,0 as CD_TUSS,\n        0 as NR_SEQ_PROC_INTERNO\n    from \n        osm\n        inner join smm on (smm_osm_serie = osm_serie and smm_osm = osm_num)\n        inner join str str_osm on (str_osm.str_cod = osm_str)\n        inner join str str_emp on (str_osm.str_str_cod = str_emp.str_cod)\n        inner join pac on (pac_reg = osm_pac)\n        inner join cnv on (cnv_cod = osm_cnv)\n        inner join psv psv_exe on (psv_exe.psv_cod = smm_med)\n        inner join psv psv_req on (psv_req.psv_cod = smm_med)\n        inner join smk on (smk_cod = smm_cod and smk_tipo = smm_tpcod)\n        inner join ctf on (ctf_cod = smk_ctf and ctf_tipo = smk_tipo)\n        \n        inner join emp ON (emp_cod = str_emp.str_emp_cod)\n        inner join gcc ON (gcc_str_cod = str_emp.str_cod)\n\n        left outer join tab on (tab_cod = smm_tab_cod)\n        \n    where \n        1 = 1\n        and convert(varchar(10), osm_dthr, 103) = convert(varchar(10), getdate(), 103)\nand osm_dthr between GETDATE() - 730 and GETDATE()",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Unidade_Producao_Medica",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Convenios",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select cnv_cod AS CD_CONVENIO, cnv.cnv_nome AS DS_CONVENIO, gcc.gcc_cod AS CD_ESTABELECIMENTO, emp.emp_cgc AS CNPJ\nfrom cnv,\n     gcc,\n     str,\n     emp\nwhere gcc.gcc_str_cod = str_cod\nand str_emp_cod = emp_cod\nand emp_cgc <> '-'\nand cnv_cod <> '999'\nand cnv_stat = 'A'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Convenio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Setor",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT STR_COD AS CD_SETOR_ATENDIMENTO, \nSTR_NOME AS DS_SETOR_ATENDIMENTO, \nEMP_CGC AS CNPJ\nFROM STR, EMP\nWHERE STR_EMP_COD = EMP_COD\nAND EMP_CGC <> '-'\nAND STR_COD <> '999'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Setor",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Execute Sadalla",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Producao Procedimentos Oftamoclin",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Convenios",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Setor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Producao Medica Sadalla",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Produção Médica CSI"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_Oftalmoclin_Prd_DataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Unidade_Producao_Medica')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Convenio')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Setor')]",
				"[concat(variables('factoryId'), '/pipelines/Producao Medica Sadalla')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Producao Medica Sadalla')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline desenvolvido para extração de informações de produção medica das unidades com o sistema Tasy e Smart.",
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Producao Procedimentos Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select \n\n'Tasy Delphi' as BASE,\ne.cd_cgc as CNPJ,\ne.nm_fantasia_estab as marca,\np.dt_atualizacao,\np.nr_atendimento,\nat.dt_entrada,\np.nr_interno_conta,\n--obter_nome_estab(c.cd_estabelecimento) as ds_estabelecimento,\npf.cd_pessoa_fisica,\npf.dt_nascimento,\npf.nr_cpf,\npf.ie_sexo,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CEP') as nr_cep,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CI') as ds_cidade,\nobter_nome_pf(at.cd_pessoa_fisica) as ds_pessoa_fisica,\np.cd_convenio as cd_convenio,\nobter_nome_convenio(c.cd_convenio_parametro) as ds_convenio,\np.cd_medico_executor,\nobter_nome_pf(p.cd_medico_executor) as ds_medico_executor,\np.cd_medico_req as cd_medico_requisitante,\nobter_nome_pf(p.cd_medico_req) as ds_medico_requisitante,\np.ie_origem_proced as ie_origem_procedimento,\np.cd_procedimento,\nobter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced) as ds_procedimento, \nobter_valor_dominio(19,pr.ie_classificacao) as ds_classificacao,\np.qt_procedimento,\n--c.vl_conta,\np.vl_procedimento,\nc.ie_status_acerto,\ndecode(c.ie_status_acerto, 1,'Provisorio' , 2 ,'Definitivo') as status_conta,\n'' as cd_tuss,\np.nr_seq_proc_interno\nfrom procedimento_paciente p,\natendimento_paciente at,\npessoa_fisica pf,\nprocedimento pr,\nconta_paciente c,\nestabelecimento e,\nempresa em\nwhere p.nr_atendimento = at.nr_atendimento\nand at.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand p.cd_procedimento = pr.cd_procedimento\nand p.ie_origem_proced = pr.ie_origem_proced\nand p.nr_interno_conta = c.nr_interno_conta\nand at.cd_estabelecimento = e.cd_estabelecimento\nand e.cd_empresa = em.cd_empresa\nand p.cd_motivo_exc_conta is null\nand c.ie_cancelamento is null\nand at.dt_entrada between sysdate - 730 and sysdate",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Unidade_Producao_Medica",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Producao Materiais Sadalla",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select 'Tasy Delphi' as BASE,\ne.cd_cgc as CNPJ,\ne.nm_fantasia_estab as marca,\nmp.dt_atualizacao,\nmp.nr_atendimento,\nat.dt_entrada,\nmp.nr_interno_conta,\npf.cd_pessoa_fisica,\npf.dt_nascimento,\npf.nr_cpf,\npf.ie_sexo,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CEP') as nr_cep,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CI') as ds_cidade,\nobter_nome_pf(at.cd_pessoa_fisica) as ds_pessoa_fisica,\nmp.cd_convenio as cd_convenio,\nobter_nome_convenio(c.cd_convenio_parametro) as ds_convenio,\nat.cd_medico_atendimento as cd_medico_executor,\nobter_nome_pf(at.cd_medico_atendimento) as ds_medico_executor,\nmp.cd_medico_prescritor as cd_medico_requisitante,\nobter_nome_pf(mp.cd_medico_prescritor) as ds_medico_requisitante,\n' ' as ie_origem_procedimento,\nmp.cd_material as cd_procedimento,\nm.ds_material as ds_procedimento, \n'Material'  ds_classificacao,\nmp.qt_material as qt_procedimento,\nmp.vl_material as vl_procedimento,\nc.ie_status_acerto,\ndecode(c.ie_status_acerto, 1,'Provisorio' , 2 ,'Definitivo') as status_conta,\n'' as cd_tuss,\n0 as nr_seq_proc_interno\nfrom  conta_paciente c,\n      material_atend_paciente mp,\n      material m,\n      estabelecimento e,\n      atendimento_paciente at,\n      pessoa_fisica pf\nwhere c.nr_atendimento = mp.nr_atendimento\nand c.nr_interno_conta = mp.nr_interno_conta\nand mp.cd_material = m.cd_material\nand c.cd_estabelecimento = e.cd_estabelecimento\nand mp.nr_atendimento = at.nr_atendimento\nand at.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand at.dt_entrada between sysdate - 730 and sysdate\nand mp.cd_motivo_exc_conta is null",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Unidade_Producao_Medica",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Convenios",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select cn.cd_convenio, cn.ds_convenio, e.cd_estabelecimento, e.cd_cgc as cnpj\nfrom convenio cn,\n     convenio_estabelecimento ce,\n     estabelecimento e\nwhere cn.cd_convenio = ce.cd_convenio\nand ce.cd_estabelecimento = e.cd_estabelecimento\norder by 2",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Convenio",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Setor",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select a.cd_setor_atendimento, a.ds_setor_atendimento, e.cd_cgc as cnpj\nfrom setor_atendimento a,\nestabelecimento e\nwhere a.cd_estabelecimento = e.cd_estabelecimento\nand e.ie_situacao = 'A'",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Setor",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Produção Médica CSI"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Unidade_Producao_Medica')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Convenio')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Setor')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Repasse_Medico')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "AuxAtendimento",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ParquetSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": {
										"value": "aux_atendimento.parquet",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "ParquetReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE STG.auxatend_repasse",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Parquet_AuxAtend",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AuxAtend_Repasse",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/Repasse Médico"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Parquet_AuxAtend')]",
				"[concat(variables('factoryId'), '/datasets/AuxAtend_Repasse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Reprocessar Datamart Recebimento Tasy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SP_REPROCESSA_RECEBIMENTO_DATAMART_TASY",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_REPROCESSA_RECEBIMENTO_DATAMART_TASY"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/Ajuste DW Tasy/Antigo"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Retornos HOB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Ret_Pacientes_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select at.nr_atendimento as ultimo_atendimento, \npf.cd_pessoa_fisica, \nsubstr(pf.nm_pessoa_fisica,1,200) as nm_pessoa_fisica,\nsubstr(replace(LTRIM(translate(pf.nr_telefone_celular, translate(pf.nr_telefone_celular, '1234567890', ' ') , ' ')),' ',''),1,100) as nr_telefone_celular,\nsubstr(replace(LTRIM(translate(cpf.nr_telefone, translate(cpf.nr_telefone, '1234567890', ' ') , ' ')),' ',''),1,100) as nr_telefone,\nsubstr(cpf.ds_email,1,100) as ds_email,\n\nobter_cgc_estabelecimento(decode(pf.cd_estabelecimento, null, 1, pf.cd_estabelecimento)) as cnpj,\n'Nao informado' marca,\n'Nao informado' sigla_unidade,\n\npf.dt_nascimento,\npf.nr_cpf\n\nfrom pessoa_fisica pf,\natendimento_paciente at,\ncompl_pessoa_fisica cpf\nwhere pf.cd_pessoa_fisica = at.cd_pessoa_fisica (+)\nand pf.cd_pessoa_fisica = cpf.cd_pessoa_fisica\nand cpf.ie_tipo_complemento = 1\nand pf.ie_funcionario = 'N'\nand at.nr_atendimento = (select max(x.nr_atendimento) from atendimento_paciente x where x.cd_pessoa_fisica = pf.cd_pessoa_fisica)",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Ret_Pacientes_unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Ret_Atendimento_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select  at.nr_atendimento, at.cd_medico_resp as cd_medico, at.dt_entrada, at.cd_estabelecimento, e.cd_cgc, pf.nm_pessoa_fisica as nm_medico, e.nm_fantasia_estab, \n        cn.ds_convenio, at.cd_pessoa_fisica\nfrom atendimento_paciente at, \n     estabelecimento e,\n     pessoa_fisica pf,\n     atend_categoria_convenio c,\n     convenio cn\nwhere pf.cd_pessoa_fisica = at.cd_medico_resp\nand at.nr_atendimento = (select max(x.nr_atendimento) from atendimento_paciente x where x.cd_pessoa_fisica = at.cd_pessoa_fisica)\nand at.nr_atendimento = c.nr_atendimento\nand c.cd_convenio = cn.cd_convenio\nand at.cd_estabelecimento = e.cd_estabelecimento",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Ret_Atendimentos_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Ret_Agendamento_Futuros_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select  a.cd_pessoa_fisica, a.cd_convenio, \nto_char((a.hr_inicio) , 'dd/mm/yyyy') as data_agenda,\nto_char((a.hr_inicio) , 'hh24:mi:ss') as hora_agenda,\nag.cd_tipo_agenda,\npf.nm_pessoa_fisica as nm_medico,\nsubstr(obter_desc_procedimento(a.cd_procedimento, a.ie_origem_proced),1,200) as ds_procedimento_princ,\n\nsubstr((select Listagg(Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced), ' ;') within GROUP (ORDER BY Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced))  from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia),1,1000) as ds_procedimento_adic,\n\n1 + (select count(1)from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia) as ie_quantidade,\n\nobter_nome_usuario(a.nm_usuario_orig) as nm_usuario\n\nfrom agenda_paciente a,\n     agenda ag,\n     pessoa_fisica pf\nwhere a.cd_agenda = ag.cd_agenda\nand ag.cd_pessoa_fisica = pf.cd_pessoa_fisica \nand a.dt_agenda between inicio_dia(sysdate) and fim_dia(sysdate + 720)\nand a.cd_pessoa_fisica is not null\nand a.hr_inicio = (select max(x.hr_inicio) from agenda_paciente x where x.cd_pessoa_fisica = a.cd_pessoa_fisica)\nand ag.cd_tipo_agenda = 2\ngroup by \na.cd_pessoa_fisica, \na.cd_convenio, \nag.cd_tipo_agenda,\npf.nm_pessoa_fisica,\na.hr_inicio,\na.cd_procedimento,\na.ie_origem_proced,\na.nr_sequencia,\na.nm_usuario_orig",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Ret_Agendamentos_Futuros_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Ret_Consulta_Paciente_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select max(o.nr_sequencia) as nr_sequencia, o.dt_atualizacao, o.nr_atendimento, o.cd_medico as cd_medico ,obter_nome_pf(o.cd_medico) as nm_medico, c.qt_periodo||' '||c.ie_periodo as ds_retorno,  substr(z.conduta,1,1000) as ds_conduta,\nobter_pessoa_atendimento(o.nr_atendimento, 'C') as cd_pessoa_fisica\nfrom oft_consulta o,\n     (SELECT a.nr_seq_consulta, b.ds_resultado as conduta\n      FROM   med_avaliacao_paciente a \n      inner join med_avaliacao_result b ON b.nr_seq_avaliacao = a.nr_sequencia \n      WHERE  a.nr_seq_tipo_avaliacao = 34 \n      and  b.nr_seq_item = 457 --456, 458 ) \n      GROUP  BY a.nr_seq_consulta, b.ds_resultado) z,\n      oft_conduta c\nwhere o.nr_sequencia = z.nr_seq_consulta\nand o.nr_sequencia = c.nr_seq_consulta\nand o.nr_atendimento is not null\ngroup by o.nr_atendimento, o.dt_atualizacao, o.cd_pessoa_fisica, o.cd_medico, obter_nome_pf(o.cd_medico), z.conduta, c.qt_periodo, c.ie_periodo",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Ret_Consulta_Oft_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Create_Proximas_Consultas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Ret_Pacientes_Unidade",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Ret_Atendimento_Unidade",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Ret_Agendamento_Futuros_Unidade",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Ret_Consulta_Paciente_Unidade",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[CREATEPROXIMASCONSULTAS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera_tipo_agendas",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Altera_marca",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERTIPOAGENDAS]",
							"storedProcedureParameters": {
								"FIELDNAME_DEST": {
									"value": "CD_TIPO_AGENDA",
									"type": "String"
								},
								"FIELDNAME_ORIG": {
									"value": "CD_TIPO_AGENDA",
									"type": "String"
								},
								"TABLENAME": {
									"value": "Ret_Proximas_Consultas",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera_marca",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Create_Proximas_Consultas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "sp_UPDATETRADEMARKV2",
							"storedProcedureParameters": {
								"CNPJ_FIELDNAME": {
									"value": "CNPJ",
									"type": "String"
								},
								"INITIALS_FIELDNAME": {
									"value": "SIGLA_UNIDADE",
									"type": "String"
								},
								"MARK_FIELDNAME": {
									"value": "MARCA",
									"type": "String"
								},
								"TABLENAME": {
									"value": "Ret_Proximas_Consultas",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera_telefones",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Altera_tipo_agendas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_ALTERTELEPHONEMASK]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Altera_marca_TBPacientes",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Ret_Pacientes_Unidade",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "sp_UPDATETRADEMARKV2",
							"storedProcedureParameters": {
								"CNPJ_FIELDNAME": {
									"value": "CNPJ",
									"type": "String"
								},
								"INITIALS_FIELDNAME": {
									"value": "SIGLA_UNIDADE",
									"type": "String"
								},
								"MARK_FIELDNAME": {
									"value": "MARCA",
									"type": "String"
								},
								"TABLENAME": {
									"value": "Ret_Pacientes_Unidade",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento/Retornos"
				},
				"annotations": [],
				"lastPublishTime": "2019-10-25T19:04:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_Ret_Pacientes_unidade')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_Ret_Atendimentos_Unidade')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_Ret_Agendamentos_Futuros_Unidade')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_Ret_Consulta_Oft_Unidade')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Retornos Sadalla')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Ret_Pacientes_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select at.nr_atendimento as ultimo_atendimento, \npf.cd_pessoa_fisica, \nsubstr(pf.nm_pessoa_fisica,1,200) as nm_pessoa_fisica,\nsubstr(replace(LTRIM(translate(pf.nr_telefone_celular, translate(pf.nr_telefone_celular, '1234567890', ' ') , ' ')),' ',''),1,100) as nr_telefone_celular,\nsubstr(replace(LTRIM(translate(cpf.nr_telefone, translate(cpf.nr_telefone, '1234567890', ' ') , ' ')),' ',''),1,100) as nr_telefone,\nsubstr(cpf.ds_email,1,100) as ds_email,\n\nobter_cgc_estabelecimento(decode(pf.cd_estabelecimento, null, 1, pf.cd_estabelecimento)) as cnpj,\n'Nao informado' marca,\n'Nao informado' sigla_unidade,\n\npf.dt_nascimento,\npf.nr_cpf\n\nfrom pessoa_fisica pf,\natendimento_paciente at,\ncompl_pessoa_fisica cpf\nwhere pf.cd_pessoa_fisica = at.cd_pessoa_fisica (+)\nand pf.cd_pessoa_fisica = cpf.cd_pessoa_fisica\nand cpf.ie_tipo_complemento = 1\nand pf.ie_funcionario = 'N'\nand at.nr_atendimento = (select max(x.nr_atendimento) from atendimento_paciente x where x.cd_pessoa_fisica = pf.cd_pessoa_fisica)",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Ret_Pacientes_unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Ret_Agendamento_Futuros_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select a.cd_pessoa_fisica, a.cd_convenio, \nto_char(a.dt_agenda, 'dd/mm/yyyy') as data_agenda,\nto_char(a.dt_agenda, 'hh24:mi:ss') as hora_agenda,\nag.cd_tipo_agenda,\npf.nm_pessoa_fisica as nm_medico,\nobter_desc_procedimento(10502, 1) as ds_procedimento_princ,\n'' ds_procedimento_adic,\n1 as ie_quantidade,\nobter_nome_usuario(a.nm_usuario_origem) as nm_usuario\nfrom agenda_consulta a,\n     agenda ag,\n     pessoa_fisica pf\nwhere a.cd_agenda = ag.cd_agenda\nand ag.cd_pessoa_fisica = pf.cd_pessoa_fisica \nand a.dt_agenda between inicio_dia(sysdate) and fim_dia(sysdate + 720)\nand a.cd_pessoa_fisica is not null\nand a.dt_agenda = (select max(x.dt_agenda) from agenda_consulta x where x.cd_pessoa_fisica = a.cd_pessoa_fisica)",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Ret_Agendamentos_Futuros_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Ret_Consulta_Paciente_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select max(o.nr_sequencia) as nr_sequencia, o.dt_atualizacao, o.nr_atendimento, o.cd_profissional as cd_medico ,obter_nome_pf(o.cd_profissional) as nm_medico, r.ds_retorno, substr(o.ds_conduta,1,1000) as ds_conduta,\nobter_pessoa_atendimento(o.nr_atendimento, 'C') as cd_pessoa_fisica\nfrom oft_consulta_medica o,\n     oft_retorno r\nwhere o.nr_seq_retorno = r.nr_sequencia\nand o.nr_atendimento is not null\ngroup by o.dt_atualizacao ,o.nr_atendimento, o.cd_profissional,obter_nome_pf(o.cd_profissional), r.ds_retorno, o.ds_conduta",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Ret_Consulta_Oft_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Clear_Base",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Ret_Agendamentos_Fututos_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select a.cd_pessoa_fisica, a.cd_convenio, \nto_char(a.dt_agenda, 'dd/mm/yyyy') as data_agenda,\nto_char(a.dt_agenda, 'hh24:mi:ss') as hora_agenda,\nag.cd_tipo_agenda,\npf.nm_pessoa_fisica as nm_medico,\nobter_desc_procedimento(10502, 1) as ds_procedimento_princ,\n'' ds_procedimento_adic,\n1 as ie_quantidade,\nobter_nome_usuario(a.nm_usuario_origem) as nm_usuario\nfrom agenda_consulta a,\n     agenda ag,\n     pessoa_fisica pf\nwhere a.cd_agenda = ag.cd_agenda\nand ag.cd_pessoa_fisica = pf.cd_pessoa_fisica \nand a.dt_agenda between inicio_dia(sysdate) and fim_dia(sysdate + 720)\nand a.cd_pessoa_fisica is not null\nand a.dt_agenda = (select max(x.dt_agenda) from agenda_consulta x where x.cd_pessoa_fisica = a.cd_pessoa_fisica)",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Ret_Agendamentos_Futuros_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Pacientes_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select pf.cd_pessoa_fisica,\n       pf.nm_pessoa_fisica,\n       pf.nr_cpf,\n       to_char((pf.dt_nascimento) , 'dd/mm/yyyy') as dt_nascimento,\n       substr(replace(LTRIM(translate(pf.nr_telefone_celular, translate(pf.nr_telefone_celular, '1234567890', ' ') , ' ')),' ',''),1,100) as nr_telefone_celular,\n       substr(replace(LTRIM(translate(cpf.nr_telefone, translate(cpf.nr_telefone, '1234567890', ' ') , ' ')),' ',''),1,100) as nr_telefone\nfrom pessoa_fisica pf,\n     compl_pessoa_fisica cpf\nwhere pf.cd_pessoa_fisica = cpf.cd_pessoa_fisica\nand cpf.ie_tipo_complemento = 1\nand pf.ie_funcionario = 'N'",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Pacientes_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Agendamentos_Fututos_Unidade",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select  a.cd_pessoa_fisica, a.cd_convenio, \nobter_cnpj_estabelecimento(ag.cd_estabelecimento) as cnpj,\nto_char((a.dt_agenda) , 'dd/mm/yyyy') as data_agenda,\nto_char((a.dt_agenda) , 'hh24:mi:ss') as hora_agenda,\nag.cd_tipo_agenda,\npf.nm_pessoa_fisica as nm_paciente,\nobter_desc_procedimento(10502, 1) as ds_procedimento_princ,\nsubstr((select Listagg(Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced), ' ;') within GROUP (ORDER BY Obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced))  from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia),1,1000) as ds_procedimento_adic,\n1 + (select count(1)from AGENDA_PACIENTE_PROC p where p.nr_sequencia = a.nr_sequencia) as ie_quantidade,\nobter_nome_usuario(a.nm_usuario_origem) as nm_usuario,\nobter_nome_pf(ag.cd_pessoa_fisica) as nm_medico,\n'NAO ENCONTRADO' SIGLA_UNIDADE,\n'NAO ENCONTRADO' MARCA,\nobter_valor_dominio(83,a.ie_status_agenda) as status_agenda\nfrom agenda ag,\n     agenda_consulta a,\n     pessoa_fisica pf\nwhere ag.cd_agenda = a.cd_agenda\nand   pf.cd_pessoa_fisica  = a.cd_pessoa_fisica\nand a.dt_agenda between inicio_dia(sysdate) and fim_dia(sysdate + 720)\nand   a.cd_pessoa_fisica is not null",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_TB_Agendamentos_Futuros_Unidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Clear_Base",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[CLEARBASERETORNOS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Atendimento/Retornos"
				},
				"annotations": [],
				"lastPublishTime": "2019-10-17T21:38:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_Ret_Pacientes_unidade')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_Ret_Agendamentos_Futuros_Unidade')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_Ret_Consulta_Oft_Unidade')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_Pacientes_Unidade')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_TB_Agendamentos_Futuros_Unidade')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART - HOSL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipelines desenvolvidos em conjunto com a empresa Class para a extração das informações de produção. Atualmente desativado.",
				"activities": [
					{
						"name": "SMART_HOSL_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        'Smart HOSL' as BASE\n        ,6 as CD_MARCA\n        ,'HOSL' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case str_emp.str_cod\n            when '10' then 13\n            when '70' then 15\n            when '11' then 14\n            when '910' then 13\n            when '191' then 16\n            when '91' then 13\n        end as CD_ESTABELECIMENTO\n        ,case str_emp.str_cod\n            when '10' then 'Gruta'\n            when '70' then 'Patio'\n            when '11' then 'Harmony'\n            when '910' then 'Gruta'\n            when '191' then 'Parque'\n            when '91' then 'Gruta'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,0) as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,0 as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and convert(varchar(10), osm_dthr, 103) = convert(varchar(10), getdate(), 103)\n)\n\nselect \n    BASE\n    ,CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' ))\n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCED_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCED_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BASE",
											"type": "String"
										},
										"sink": {
											"name": "BASE",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Processa Itens",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SMART_HOSL_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ProcessTempItems]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Tasy - Tabela Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processa Itens",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from TEMPTASY\nWhere Processed = 'Sim'",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MARCA",
											"type": "String"
										},
										"sink": {
											"name": "DS_MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PROCED_PRINCIPAL"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO_PRINCIPAL"
										}
									},
									{
										"source": {
											"name": "DS_PROCED_PRINCIPAL"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										},
										"sink": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "TIPO_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "TIPO_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CRM",
											"type": "String"
										},
										"sink": {
											"name": "CRM_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MPE",
											"type": "String"
										},
										"sink": {
											"name": "MPE_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "INTERCOMPANY",
											"type": "String"
										},
										"sink": {
											"name": "INTERCOMPANY_EXECUTOR",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlProcedimentosTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Temp Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Tasy - Tabela Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[TRUNCATETEMPTABLE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Producao Medica/Desenvolvimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SMART_HOSL_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTEMPTable')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlProcedimentosTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART - IOF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipelines desenvolvidos em conjunto com a empresa Class para a extração das informações de produção. Atualmente desativado.",
				"activities": [
					{
						"name": "Processa Itens",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SMART_IOF_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ProcessTempItems]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Tasy - Tabela Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processa Itens",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from TEMPTASY\nWhere Processed = 'Sim'",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MARCA",
											"type": "String"
										},
										"sink": {
											"name": "DS_MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PROCED_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCED_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										},
										"sink": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "TIPO_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "TIPO_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CRM",
											"type": "String"
										},
										"sink": {
											"name": "CRM_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MPE",
											"type": "String"
										},
										"sink": {
											"name": "MPE_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "INTERCOMPANY",
											"type": "String"
										},
										"sink": {
											"name": "INTERCOMPANY_EXECUTOR",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlProcedimentosTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Temp Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Tasy - Tabela Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[TRUNCATETEMPTABLE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SMART_IOF_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        'Smart IOF' as BASE\n        ,3 as CD_MARCA\n        ,'DAYHORC' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case str_emp.str_cod \n            when '008' then 11\n        end as CD_ESTABELECIMENTO\n        ,case str_emp.str_cod \n            when '008' then 'IOF'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,0) as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,0 as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and convert(varchar(10), osm_dthr, 103) = convert(varchar(10), getdate(), 103)\n)\n\nselect \n    BASE\n    ,CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCED_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCED_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BASE",
											"type": "String"
										},
										"sink": {
											"name": "BASE",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_IOF_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Producao Medica/Desenvolvimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTEMPTable')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlProcedimentosTable')]",
				"[concat(variables('factoryId'), '/datasets/SMART_IOF_PrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART - ITABUNA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipelines desenvolvidos em conjunto com a empresa Class para a extração das informações de produção. Atualmente desativado.",
				"activities": [
					{
						"name": "Processa Itens",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SMART_ITABUNA_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ProcessTempItems]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Tasy - Tabela Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processa Itens",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from TEMPTASY\nWhere Processed = 'Sim'",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MARCA",
											"type": "String"
										},
										"sink": {
											"name": "DS_MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PROCED_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCED_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										},
										"sink": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "TIPO_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "TIPO_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CRM",
											"type": "String"
										},
										"sink": {
											"name": "CRM_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MPE",
											"type": "String"
										},
										"sink": {
											"name": "MPE_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "INTERCOMPANY",
											"type": "String"
										},
										"sink": {
											"name": "INTERCOMPANY_EXECUTOR",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlProcedimentosTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Temp Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Tasy - Tabela Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[TRUNCATETEMPTABLE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SMART_ITABUNA_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        'Smart DayHorc Itabuna' as BASE\n        ,3 as CD_MARCA\n        ,'DAYHORC' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case str_emp.str_cod\n            when 'DHE' then 10\n            when 'DHI' then 9\n            when 'EFV' then 10\n            when 'CRY' then 9\n            when 'DAI' then 8\n            when 'EMS' then 10\n        end as CD_ESTABELECIMENTO\n        ,case str_emp.str_cod\n            when 'DHE' then 'Eunapolis'\n            when 'DHI' then 'Itabuna'\n            when 'EFV' then 'Eunapolis'\n            when 'CRY' then 'Itabuna'\n            when 'DAI' then 'Itaigara'\n            when 'EMS' then 'Eunapolis'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,0) as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,0 as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and convert(varchar(10), osm_dthr, 103) = convert(varchar(10), getdate(), 103)\n)\n\nselect \n    BASE\n    ,CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "Int64"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCED_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCED_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BASE",
											"type": "String"
										},
										"sink": {
											"name": "BASE",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_ITABUNA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Producao Medica/Desenvolvimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTEMPTable')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlProcedimentosTable')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITABUNA_PrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART - ITAIGARA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipelines desenvolvidos em conjunto com a empresa Class para a extração das informações de produção. Atualmente desativado.",
				"activities": [
					{
						"name": "Processa Itens",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "SMART_ITAIGARA_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ProcessTempItems]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Tasy - Tabela Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processa Itens",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from TEMPTASY\nWhere Processed = 'Sim'",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MARCA",
											"type": "String"
										},
										"sink": {
											"name": "DS_MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PROCED_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCED_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										},
										"sink": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "TIPO_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "TIPO_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CRM",
											"type": "String"
										},
										"sink": {
											"name": "CRM_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MPE",
											"type": "String"
										},
										"sink": {
											"name": "MPE_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "INTERCOMPANY",
											"type": "String"
										},
										"sink": {
											"name": "INTERCOMPANY_EXECUTOR",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlProcedimentosTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Temp Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Tasy - Tabela Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[TRUNCATETEMPTABLE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SMART_ITAIGARA_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "WITH db as (\n    select \n        'Smart DayHorc Itaigara' as BASE\n        ,3 as CD_MARCA\n        ,'DAYHORC' as DS_MARCA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) AS NS_REGISTRO_UNICO --duvida\n        ,smm_dthr_alter as DT_ATUALIZACAO \n        ,osm_dthr as DT_ENTRADA\n        ,convert(varchar,osm_serie) + convert(varchar,osm_num) as NR_INTERNO_CONTA --duvida\n        ,smm_num as NR_ATENDIMENTO\n        ,case str_emp.str_cod\n            when 'DHE' then 10\n            when '9' then 7\n            when '13' then 7\n            when '4' then 8\n            when 'FUR' then 7\n            when 'DH' then 8\n            when '18' then 7\n            when 'IOF' then 7\n            when '901' then 7\n            when '16' then 7\n            when 'DHI' then 9\n        end as CD_ESTABELECIMENTO\n        ,case str_emp.str_cod\n            when 'DHE' then 'Eunapolis'\n            when '9' then 'HBA'\n            when '13' then 'HBA'\n            when '4' then 'Itaigara'\n            when 'FUR' then 'HBA'\n            when 'DH' then 'Itaigara'\n            when '18' then 'HBA'\n            when 'IOF' then 'HBA'\n            when '901' then 'HBA'\n            when '16' then 'HBA'\n            when 'DHI' then 'Itabuna'\n        end as DS_ESTABELECIMENTO\n        ,osm_pac as CD_PESSOA_FISICA\n        ,pac_nasc as DT_NASCIMENTO\n        ,pac_numcpf as NR_CPF\n        ,pac_sexo as IE_SEXO\n        ,pac_cep as NR_CEP\n        ,case \n            when isnumeric(pac_cid) = 1 then (select cde_nome from cde where cde_cod = pac_cid)\n        else pac_cid end as DS_CIDADE\n        ,pac_nome as DS_PESSOA_FISICA\n        ,cnv_cod as CD_CONVENIO\n        ,cnv_nome as DS_CONVENIO\n        ,psv_exe.psv_cod as CD_MEDICO_EXECUTOR\n        ,psv_exe.psv_apel as DS_MEDICO_EXECUTOR\n        ,psv_req.psv_cod as CD_MEDICO_REQUISITANTE\n        ,psv_req.psv_apel as DS_MEDICO_REQUISITANTE\n        ,isnull(tab_padrao,0) as IE_ORIGEM_PROCEDIMENTO\n        ,smm_cod as CD_PROCEDIMENTO\n        ,smk_rot as DS_PROCEDIMENTO\n        ,case ctf_categ \n            when 'C' then 'Consulta'\n            when 'E' then 'Exames'\n            when 'R' then 'Cirurgia'\n            when 'T' then 'Taxas'\n            when 'A' then 'Terapia'\n            when 'O' then 'Outras'\n            when 'M' then 'Materiais'\n            when 'S' then 'Materiais Especiais'\n            when 'N' then 'Medicamentos'\n            when 'G' then 'Gases'\n            when 'O' then 'Outros'\n        end as DS_CLASSIF_PROCEDIMENTO\n        ,smm_qt as QT_PROCEDIMENTO\n        ,smm_vlr + isnull(smm_ajuste_vlr,0) as VL_PROCEDIMENTO\n        ,case \n            when smm_fat_serie is not null then 2\n        else 1 end AS IE_STATUS_ACERTO\n        ,case \n            when smm_fat_serie is not null then 'Definitivo'\n        else 'Provisório' end as IE_STATUS_CONTA\n        ,0 as CD_TUSS \n        ,'' DS_CLASSIF_LIO\n        ,smm_sfat\n        ,smm_pacote\n        ,smm_num_pai\n        ,smm_p_osm_serie\n        ,smm_p_osm_num\n        ,smm_p_smm_num\n        ,smm_hsp_num\n        ,smm_rci_serie\n        ,smm_rci_num\n    from \n        osm\n        inner join smm on (\n            smm_osm_serie = osm_serie\n            and smm_osm = osm_num\n        )\n        inner join str str_osm on (\n            str_osm.str_cod = osm_str\n        )\n        inner join str str_emp on (\n            str_osm.str_str_cod = str_emp.str_cod\n        )\n        inner join pac on (\n            pac_reg = osm_pac\n        )\n        inner join cnv on (\n            cnv_cod = osm_cnv\n        )\n        inner join psv psv_exe on (\n            psv_exe.psv_cod = smm_med\n        )\n        inner join psv psv_req on (\n            psv_req.psv_cod = smm_med\n        )\n        inner join smk on (\n            smk_cod = smm_cod\n            and smk_tipo = smm_tpcod\n        )\n        inner join ctf on (\n            ctf_cod = smk_ctf\n            and ctf_tipo = smk_tipo\n        )\n        left outer join tab on (\n            tab_cod = smm_tab_cod\n        )\n    where \n        1 = 1\n        and convert(varchar(10), osm_dthr, 103) = convert(varchar(10), getdate(), 103)\n)\n\nselect \n    BASE\n    ,CD_MARCA\n    ,DS_MARCA\n    ,NS_REGISTRO_UNICO\n    ,DT_ATUALIZACAO\n    ,DT_ENTRADA\n    ,NR_INTERNO_CONTA\n    ,NR_ATENDIMENTO\n    ,CD_ESTABELECIMENTO\n    ,DS_ESTABELECIMENTO\n    ,CD_PESSOA_FISICA\n    ,DT_NASCIMENTO\n    ,NR_CPF\n    ,IE_SEXO\n    ,NR_CEP\n    ,DS_CIDADE\n    ,DS_PESSOA_FISICA\n    ,CD_CONVENIO\n    ,DS_CONVENIO\n    ,CD_MEDICO_EXECUTOR\n    ,DS_MEDICO_EXECUTOR\n    ,CD_MEDICO_REQUISITANTE\n    ,DS_MEDICO_REQUISITANTE\n    ,IE_ORIGEM_PROCEDIMENTO\n    ,CD_PROCEDIMENTO\n    ,DS_PROCEDIMENTO\n    ,DS_CLASSIF_PROCEDIMENTO\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select    \n            CD_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as CD_PROCEDIMENTO_PRINCIPAL\n    ,case \n        when smm_num_pai is null then DS_PROCEDIMENTO\n    else (select \n            DS_PROCEDIMENTO \n        from \n            db tmp \n        where \n            tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n            and db.smm_num_pai = tmp.NR_ATENDIMENTO\n        ) end as DS_PROCEDIMENTO_PRINCIPAL\n    ,QT_PROCEDIMENTO\n    ,(select \n        sum(VL_PROCEDIMENTO) \n    from \n        db tmp \n    where \n        tmp.NR_INTERNO_CONTA = db.NR_INTERNO_CONTA \n        and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n        and smm_sfat not in ('C')\n    ) AS VL_CONTA \n    ,VL_PROCEDIMENTO\n    ,IE_STATUS_ACERTO\n    ,IE_STATUS_CONTA\n    ,CD_TUSS\n    ,DS_CLASSIF_LIO\n    -- ,smm_rci_serie\n    -- ,smm_rci_num\n    -- ,smm_p_osm_serie\n    -- ,smm_p_osm_num\nfrom \n    db\nwhere\n    1 = 1\n    and VL_PROCEDIMENTO <> 0\n    and (smm_pacote IS NULL OR ( smm_pacote = 'C' )) \n    and smm_sfat not in ('C')",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MARCA",
											"type": "String"
										},
										"sink": {
											"name": "MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NS_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_INTERNO_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "NR_INTERNO_CONTA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCED_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCED_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Decimal"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "BASE",
											"type": "String"
										},
										"sink": {
											"name": "BASE",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Producao Medica/Desenvolvimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTEMPTable')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlProcedimentosTable')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITAIGARA_PrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Send email')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Send notification",
						"description": "Generic pipeline for sending email using Azure Logic App",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-53.eastus2.logic.azure.com:443/workflows/464dec07d29247d9961de309d3bce20f/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=sh4Xorsyt738hlUwbioYqXIxNAoMWRw8gey3yBcg8fc",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"DataFactoryName": "@{pipeline().DataFactory}",
								"PipelineName": "@{pipeline().parameters.MasterPipeline}",
								"Subject": "@{pipeline().parameters.Subject}",
								"ErrorMessage": "@{pipeline().parameters.ErrorMessage}",
								"EmailTo": "@pipeline().parameters.EmailTo"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"EmailTo": {
						"type": "string",
						"defaultValue": "No email set!"
					},
					"Subject": {
						"type": "string",
						"defaultValue": "No subject set!"
					},
					"ErrorMessage": {
						"type": "string",
						"defaultValue": "No message set!"
					},
					"MasterPipeline": {
						"type": "string",
						"defaultValue": "No pipeline set!"
					}
				},
				"annotations": [],
				"lastPublishTime": "2019-10-07T12:43:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TEST_ORTOCITY')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lista Tabelas",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[adf].[sp_origem_destino]",
								"storedProcedureParameters": {
									"COD_TABELA": {
										"type": "String",
										"value": "340"
									},
									"Dt_inicio_manual": {
										"type": "DateTime",
										"value": null
									},
									"manual": {
										"type": "String",
										"value": "S"
									},
									"plataforma": {
										"type": "String",
										"value": "SLFW"
									}
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "LISTA_TABELAS_ADF",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "PROCESSA ETL",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lista Tabelas",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista Tabelas').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "SE CARGA COMPLETA",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().TIPO_CARGA,'COMPLETA')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "CARGA PARCIAL",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_INICIO_CARGA_PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(\n'select 50 AS ESTABELECIMENTO, A.* from ', item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' A where (TO_CHAR(', item().nome_coluna_referencia,'INCL,\"YYYY-MM-DD HH24:MI:SS\"',' >= ''',\nitem().Data_Inicio, ' and  TO_CHAR(', item().nome_coluna_referencia,'INCL,\"YYYY-MM-DD HH24:MI:SS\")',' <= ''', item().Data_Fim, ') OR (TO_CHAR(', item().nome_coluna_referencia,'ALTERA,\"YYYY-MM-DD HH24:MI:SS\")\"',' >= ''',\nitem().Data_Inicio, ' and  TO_CHAR(', item().nome_coluna_referencia,'ALTERA,\"YYYY-MM-DD HH24:MI:SS\")',' <= ''', item().Data_Fim, ')'\n)",
															"type": "Expression"
														},
														"partitionOption": "None",
														"convertDecimalToInteger": false,
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SLFW_Dinamico",
														"type": "DatasetReference",
														"parameters": {
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM",
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DATA_INICIO_CARGA_PARCIAL",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "Starttime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL SUCESSO_copy1",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('Starttime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": "CARGA PARCIAL",
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": "SUCESSO",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO PARCIAL ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA PARCIAL",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('Starttime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": "CARGA PARCIAL",
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA PARCIAL').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": "ERRO",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "CARGA COMPLETA",
												"type": "Copy",
												"dependsOn": [
													{
														"activity": "DATA_INICIO_CARGA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "OracleSource",
														"oracleReaderQuery": {
															"value": "@concat(' select 50 AS ESTABELECIMENTO, A.* from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM,' A')",
															"type": "Expression"
														},
														"partitionOption": "None",
														"convertDecimalToInteger": false,
														"queryTimeout": "02:00:00"
													},
													"sink": {
														"type": "AzureSqlSink",
														"writeBehavior": "insert",
														"sqlWriterUseTableLock": false,
														"tableOption": "autoCreate",
														"disableMetricsCollection": false
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "SLFW_Dinamico",
														"type": "DatasetReference",
														"parameters": {
															"schema_name": "@item().NOME_SCHEMA_ORIGEM",
															"table_name": "@item().NOME_TABELA_ORIGEM",
															"NOME_KEYVAULT_SECRET": "@item().NOME_KEYVAULT_SECRET"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DESTINO_TABELAS_ADF",
														"type": "DatasetReference",
														"parameters": {
															"Schema_Destino": {
																"value": "@item().NOME_SCHEMA_DESTINO",
																"type": "Expression"
															},
															"Tabela_Destino": {
																"value": "@item().NOME_TABELA_DESTINO",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"name": "DATA_INICIO_CARGA",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "Starttime",
													"value": {
														"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA SUCESSO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('Starttime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": "CARGA COMPLETA",
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": "SUCESSO",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "LOG PROCESSAMENTO COMPLETA ERRO",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "CARGA COMPLETA",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[adf].[SP_LOG_PROCESSAMENTO]",
													"storedProcedureParameters": {
														"CODIGO_TABELA": {
															"value": {
																"value": "@item().codigo_tabela",
																"type": "Expression"
															},
															"type": "String"
														},
														"COMANDO_SQL": {
															"value": {
																"value": "@concat(' select * from  ',item().NOME_SCHEMA_ORIGEM,'.',item().NOME_TABELA_ORIGEM)",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_FIM": {
															"value": {
																"value": "@replace(string(convertTimeZone(utcnow(),'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_HORA_EXECUCAO": {
															"value": {
																"value": "@replace(string(convertTimeZone(pipeline().TriggerTime,'UTC','E. South America Standard Time') ),'T',' ')",
																"type": "Expression"
															},
															"type": "String"
														},
														"DATA_INICIO": {
															"value": {
																"value": "@variables('Starttime')",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_EXECUCAO": {
															"value": {
																"value": "@pipeline().RunId",
																"type": "Expression"
															},
															"type": "String"
														},
														"ID_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerId",
																"type": "Expression"
															},
															"type": "String"
														},
														"MENSAGEM_ERRO": {
															"value": null,
															"type": "String"
														},
														"NOME_ADF": {
															"value": {
																"value": "@pipeline().DataFactory",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_CONTAINER": {
															"value": "CARGA COMPLETA",
															"type": "String"
														},
														"NOME_ORIGEM": {
															"value": {
																"value": "@item().NOME_KEYVAULT_SECRET",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PIPELINE": {
															"value": {
																"value": "@pipeline().Pipeline",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_PROCESSO": {
															"value": null,
															"type": "String"
														},
														"NOME_TABELA_ORIGEM": {
															"value": {
																"value": "@item().nome_tabela_origem",
																"type": "Expression"
															},
															"type": "String"
														},
														"NOME_TRIGGER": {
															"value": {
																"value": "@pipeline().TriggerName",
																"type": "Expression"
															},
															"type": "String"
														},
														"QUANTIDADE_REGISTROS": {
															"value": {
																"value": "@activity('CARGA COMPLETA').output.rowsCopied",
																"type": "Expression"
															},
															"type": "String"
														},
														"TIPO_FINALIZACAO": {
															"value": "ERRO",
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "AzureSQL_DB_Procedimentos",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "LIMPAR TABELA DESTINO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "PROCESSA ETL",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista Tabelas').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Limpa Tabela",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('TRUNCATE TABLE ',item().NOME_SCHEMA_DESTINO,'.',item().NOME_TABELA_DESTINO)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"Starttime": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/LISTA_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/SLFW_Dinamico')]",
				"[concat(variables('factoryId'), '/datasets/DESTINO_TABELAS_ADF')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TUSS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "Binary_ANS",
								"type": "DatasetReference",
								"parameters": {
									"folder": "tuss"
								}
							},
							"fieldList": [
								"itemName",
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filter1",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endswith(item().name,'csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filter1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filter1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Carga Dados ANS TUSS",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('TRUNCATE TABLE stg.',activity('Get Metadata1').output.itemName,'_tuss')}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "CSV_ANS_TUSS",
											"type": "DatasetReference",
											"parameters": {
												"Filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_SQL_STG",
											"type": "DatasetReference",
											"parameters": {
												"SCHEMA": "stg",
												"TABELA": {
													"value": "@concat(activity('Get Metadata1').output.itemName,'_tuss')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Merge DW",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "EXEC SP_CARGA_ANS_TUSS"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "ANS"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Binary_ANS')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/CSV_ANS_TUSS')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_STG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tasy - HTML')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipelines desenvolvidos em conjunto com a empresa Class para a extração das informações de produção. Atualmente desativado.",
				"activities": [
					{
						"name": "Processa Itens",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Tasy_Cloud_CopyData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ProcessTempItems]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Tabela Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processa Itens",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from TEMPTASY\nWhere Processed = 'Sim'",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MARCA",
											"type": "String"
										},
										"sink": {
											"name": "DS_MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PROCED_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCED_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										},
										"sink": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "TIPO_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "TIPO_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CRM",
											"type": "String"
										},
										"sink": {
											"name": "CRM_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MPE",
											"type": "String"
										},
										"sink": {
											"name": "MPE_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "INTERCOMPANY",
											"type": "String"
										},
										"sink": {
											"name": "INTERCOMPANY_EXECUTOR",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlProcedimentosTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Temp Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Tabela Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[TRUNCATETEMPTABLE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Tasy_Cloud_CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT 'Tasy HTML' as BASE\n    , c.cd_estabelecimento\n    , DECODE(C.CD_ESTABELECIMENTO, 1,1,2,1,3,1,4,1,5,2,6,2,7,3,8,3,9,3,10,3,11,4,12,5,13,6,14,6,15,6,16,6,17,7,18,7,19,7,20,8,21,8,22,8)  as cd_marca\n    , DECODE(C.CD_ESTABELECIMENTO, 1,'HOB',2,'HOB',3,'HOB',4,'HOB',5,'INOB',6,'INOB',7,'DAYHORC',8,'DAYHORC',9,'DAYHORC',10,'DAYHORC',11,'IOF',12,'IOV',13,'HOSL',14,'HOSL',15,'HOSL',16,'HOSL',17,'SADALLA',18,'SADALLA',19,'SADALLA',20,'HCLOE',21,'HCLOE',22,'HCLOE')  as marca\n    , c.nr_atendimento\n    , decode(c.cd_estabelecimento,1,1,20,2,21,2)||decode(c.cd_estabelecimento,1,1,3,4,16,2,8,4,21,5,20,6)||c.nr_atendimento as nr_registro_unico\n    --, x.nr_sequencia as nr_registro_unico\n    , x.dt_atualizacao\n    , at.dt_entrada\n    , c.nr_interno_conta\n    , obter_nome_estabelecimento(c.cd_estabelecimento) as ds_estabelecimento\n    , pf.cd_pessoa_fisica\n    , pf.dt_nascimento\n    , pf.nr_cpf\n    , pf.ie_sexo\n    , obter_compl_pf(pf.cd_pessoa_fisica,1,'CEP') as nr_cep\n    , obter_compl_pf(pf.cd_pessoa_fisica,1,'CI') as ds_cidade\n    --, pf.cd_pessoa_fisica as cd_pessoa_fisica\n    , obter_nome_pf(at.cd_pessoa_fisica) as ds_pessoa_fisica\n    , c.cd_convenio_parametro as cd_convenio\n    , obter_nome_convenio(c.cd_convenio_parametro) as ds_convenio\n    , x.cd_medico_executor\n    , obter_nome_pf(x.cd_medico_executor) as ds_medico_executor\n    , x.cd_medico_req as cd_medico_requisitante\n    , obter_nome_pf(x.cd_medico_req) as ds_medico_requisitante\n    , x.ie_origem_proced\n    , x.cd_procedimento\n    , x.ds_procedimento as ds_procedimento\n    , x.classif as ds_classificacao\n    , case\n        when (x.ds_procedimento like '%onsult%') or obter_area_procedimento(x.cd_procedimento,x.ie_origem_proced) in (11) then 'Consulta'\n        when (x.ds_procedimento like '%Taxa%') then 'Taxa'\n        when (obter_area_procedimento(x.cd_procedimento,x.ie_origem_proced) in (15,14,5,4,12)) or x.cd_procedimento in ('30312043','41301420','50010140','20101198','30306019','50060015','100101083','100101226','100101227','100101137', '100101090') then 'Exames'\n        when  x.ie_origem_proced = 0 then 'Cirurgia'\n        when (obter_area_procedimento(x.cd_procedimento,x.ie_origem_proced) not in (15,14,5,4,12)) then 'Cirurgia'\n        when  obter_area_procedimento(\n            (select unique p.cd_proced_pacote \n            from pacote p\n                , pacote_tipo_acomodacao xl \n            where p.nr_seq_pacote = xl.nr_seq_pacote \n                and xl.cd_procedimento = x.cd_procedimento \n                and p.cd_convenio = c.cd_convenio_parametro \n                and xl.ie_tipo_acomod = 2 \n                and obter_area_procedimento(xl.cd_procedimento,xl.ie_origem_proced) in (10))\n            , (select unique p.ie_origem_proced\n            from pacote p\n                , pacote_tipo_acomodacao xl \n            where p.nr_seq_pacote = xl.nr_seq_pacote \n                and xl.cd_procedimento = x.cd_procedimento  \n                and p.cd_convenio = c.cd_convenio_parametro \n                and xl.ie_tipo_acomod = 2 \n                and obter_area_procedimento(xl.cd_procedimento,xl.ie_origem_proced) in (10))) in (15,14,5,4,12) then 'Exames'   \n        when obter_area_procedimento(\n            (select unique p.cd_proced_pacote \n            from pacote p\n                , pacote_tipo_acomodacao xl \n            where p.nr_seq_pacote = xl.nr_seq_pacote \n                and xl.cd_procedimento = x.cd_procedimento  \n                and p.cd_convenio = c.cd_convenio_parametro  \n                and xl.ie_tipo_acomod = 2 \n                and obter_area_procedimento(xl.cd_procedimento,xl.ie_origem_proced) in (10))\n            , (select unique p.ie_origem_proced\n            from pacote p\n                , pacote_tipo_acomodacao xl \n            where p.nr_seq_pacote = xl.nr_seq_pacote \n                and xl.cd_procedimento = x.cd_procedimento  \n                and p.cd_convenio = c.cd_convenio_parametro  \n                and xl.ie_tipo_acomod = 2 \n                and obter_area_procedimento(xl.cd_procedimento,xl.ie_origem_proced) in (10))) not in (15,14,5,4,12) then 'Cirurgia' \n      end ds_classif_procedimento\n    , case \n        when (select unique obter_area_procedimento(x.cd_procedimento,x.ie_origem_proced) as area \n            from procedimento_paciente x \n            where obter_area_procedimento(x.cd_procedimento,x.ie_origem_proced) = 13 \n            and x.nr_atendimento = c.nr_atendimento) not in (14,4) then substr((select max(x.cd_procedimento) as area from procedimento_paciente x where obter_area_procedimento(x.cd_procedimento,x.ie_origem_proced) = 13 and x.nr_atendimento = c.nr_atendimento and x.nr_interno_conta = c.nr_interno_conta),1,255) \n        when (obter_area_procedimento(x.cd_procedimento,x.ie_origem_proced) in (11,14,15,5,4,12)) or (x.ds_procedimento like '%onsult%') then substr(x.cd_procedimento,1,255)\n        when obter_especialidade_proced(x.cd_procedimento,x.ie_origem_proced) = 80000 then substr(x.cd_procedimento,1,255)\n        when obter_area_procedimento(x.cd_procedimento,x.ie_origem_proced) = 10 then (select unique to_char(p.cd_proced_pacote) from pacote p, pacote_tipo_acomodacao xl where p.nr_seq_pacote = xl.nr_seq_pacote and xl.cd_procedimento = x.cd_procedimento and p.cd_convenio = c.cd_convenio_parametro and p.nr_seq_pacote = x.nr_seq_proc_pacote)\n      end as cd_proced_principal\n    , case\n        when (select unique obter_area_procedimento(x.cd_procedimento,x.ie_origem_proced) as area from procedimento_paciente x where obter_area_procedimento(x.cd_procedimento,x.ie_origem_proced) = 13 and x.nr_atendimento = c.nr_atendimento) not in (14,4) then substr((select unique obter_desc_procedimento(x.cd_procedimento,x.ie_origem_proced) as area from procedimento_paciente x where obter_area_procedimento(x.cd_procedimento,x.ie_origem_proced) = 13 and x.cd_procedimento = (select max(x.cd_procedimento) as area from procedimento_paciente x where obter_area_procedimento(x.cd_procedimento,x.ie_origem_proced) = 13 and x.nr_atendimento = c.nr_atendimento)and x.nr_atendimento = c.nr_atendimento and x.nr_interno_conta = c.nr_interno_conta),1,255)\n        when (obter_area_procedimento(x.cd_procedimento,x.ie_origem_proced) in (11,14,15,5,4,12)) or (x.ds_procedimento like '%onsult%') then substr(x.ds_procedimento,1,255) \n        when obter_especialidade_proced(x.cd_procedimento,x.ie_origem_proced) = 80000 then substr(x.ds_procedimento,1,255)\n        when obter_area_procedimento(x.cd_procedimento,x.ie_origem_proced) = 10 then (select unique obter_desc_procedimento(p.cd_proced_pacote,p.ie_origem_proced) from pacote p, pacote_tipo_acomodacao xl where p.nr_seq_pacote = xl.nr_seq_pacote and xl.cd_procedimento = x.cd_procedimento and p.cd_convenio = c.cd_convenio_parametro and p.nr_seq_pacote = x.nr_seq_proc_pacote) \n      end as ds_proced_principal\n    , x.qt_procedimento\n    , c.vl_conta\n    , x.vl_procedimento\n    , c.ie_status_acerto\n    , decode(c.ie_status_acerto, 1,'Provisorio' , 2 ,'Definitivo') as status_conta\n    , x.tuss as cd_tuss\n    , (select max(x.ds_estrutura) \n        from mat_estrutura x\n            , mat_estrutura_cadastro y \n        where y.nr_seq_estrutura = x.nr_sequencia \n            and y.cd_material = x.cd_procedimento) as ds_classif_lio\nFROM atendimento_paciente at\n    , conta_paciente c\n    , proc_criterio_repasse pc\n    , pessoa_fisica pf\n    , agenda_paciente ag\n    , (select p.nr_interno_conta\n        , p.cd_procedimento\n        , obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced) as ds_procedimento\n        , obter_valor_dominio(19,pr.ie_classificacao) as classif\n        , p.cd_medico_executor\n        , p.cd_medico_req\n        , p.ie_origem_proced\n        , p.qt_procedimento\n        , p.vl_procedimento\n        , p.vl_medico\n        , max(p.nr_sequencia) as nr_sequencia\n        , p.cd_edicao_amb\n        , p.cd_convenio\n        , p.nr_atendimento\n        , p.cd_motivo_exc_conta\n        , p.nr_seq_proc_crit_repasse\n        , obter_codigo_tuss(p.nr_seq_proc_interno) as tuss\n        , p.dt_atualizacao\n        , p.nr_seq_proc_pacote\n    from procedimento_paciente p\n        , procedimento pr\n    where p.cd_procedimento = pr.cd_procedimento\n        and p.ie_origem_proced = pr.ie_origem_proced\n        and pr.ie_situacao = 'A' \n        and p.cd_motivo_exc_conta is null\n    group by p.nr_interno_conta\n        , p.cd_procedimento\n        , obter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced)\n        , obter_valor_dominio(19,pr.ie_classificacao)\n        , p.cd_medico_executor\n        , p.cd_medico_req\n        , p.ie_origem_proced\n        , p.qt_procedimento\n        , p.vl_procedimento\n        , p.vl_medico\n        , p.cd_edicao_amb\n        , p.cd_convenio\n        , p.nr_atendimento\n        , p.cd_motivo_exc_conta\n        , p.nr_seq_proc_crit_repasse\n        , obter_codigo_tuss(p.nr_seq_proc_interno)\n        , p.dt_atualizacao\n        , p.nr_seq_proc_pacote\n    union all\n    select mp.nr_interno_conta\n        , mp.cd_material as cd_procedimento\n        , m.ds_material as ds_procedimento\n        , obter_dados_material(m.cd_material,'GRU') as classif\n        , obter_medico_resp_atend(mp.nr_atendimento,'C') as cd_medico_executor\n        , obter_medico_resp_atend(mp.nr_atendimento,'C') as cd_medico_req\n        , 0 as ie_origem_proced\n        , mp.qt_material\n        , mp.vl_material\n        , 0 vl_medico\n        , mp.nr_sequencia\n        , '0' as cd_edicao_amb\n        , mp.cd_convenio\n        , mp.nr_atendimento\n        , mp.cd_motivo_exc_conta\n        , 0 nr_seq_proc_crit_repasse\n        , 0 tuss\n        , mp.dt_atualizacao\n        , mp.nr_seq_proc_pacote\n    from material_atend_paciente mp\n        , material m\n    where mp.cd_material = m.cd_material) x\nwhere at.nr_atendimento = c.nr_atendimento\n    and c.nr_interno_conta = x.nr_interno_conta\n    and at.cd_pessoa_fisica = pf.cd_pessoa_fisica\n    and x.nr_seq_proc_crit_repasse = pc.nr_sequencia (+)\n    and x.nr_atendimento = ag.nr_atendimento (+)\n    and c.ie_cancelamento is null\n    and x.cd_motivo_exc_conta is null\n    and c.vl_conta  <> 0\n    and obter_nome_pf(at.cd_pessoa_fisica) not like 'Teste'\n    and at.dt_entrada between sysdate - 2 and sysdate - 1\ngroup by c.nr_atendimento\n    , at.dt_entrada\n    , c.nr_interno_conta\n    , c.cd_estabelecimento\n    , decode(c.cd_estabelecimento,8,4,c.cd_estabelecimento)\n    , at.cd_pessoa_fisica\n    , c.cd_convenio_parametro\n    , c.vl_conta\n    , x.nr_sequencia\n    , x.vl_medico\n    , x.vl_procedimento\n    , x.ie_origem_proced\n    , x.cd_procedimento\n    , x.ds_procedimento\n    , x.qt_procedimento\n    , x.cd_edicao_amb\n    , x.cd_medico_executor\n    , c.ie_status_acerto\n    , x.nr_atendimento\n    , x.cd_convenio\n    , at.ie_tipo_atendimento\n    , x.nr_interno_conta\n    , pf.dt_nascimento\n    , pf.nr_cpf\n    , x.cd_medico_req\n    , ag.cd_agenda\n    , pf.ie_sexo\n    , pf.cd_pessoa_fisica\n    , x.classif\n    , x.tuss\n    , x.dt_atualizacao\n    , x.nr_seq_proc_pacote\norder by 5,3 desc",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Producao Medica/Desenvolvimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTEMPTable')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlProcedimentosTable')]",
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tasy - Sadalla')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipelines desenvolvidos em conjunto com a empresa Class para a extração das informações de produção. Atualmente desativado.",
				"activities": [
					{
						"name": "Copy procedures",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select \n\n'Tasy Sadalla' as BASE,\n7 as cd_marca,\n'Hospital de Olhos Sadalla Amin Ghanem' as marca,\n17 as cd_estabelecimento,\np.nr_atendimento,\n'7'||'17'||p.nr_atendimento as nr_registro_unico,\np.dt_atualizacao,\nat.dt_entrada,\np.nr_interno_conta,\nobter_nome_estab(c.cd_estabelecimento) as ds_estabelecimento,\npf.cd_pessoa_fisica,\npf.dt_nascimento,\npf.nr_cpf,\npf.ie_sexo,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CEP') as nr_cep,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CI') as ds_cidade,\nobter_nome_pf(at.cd_pessoa_fisica) as ds_pessoa_fisica,\np.cd_convenio as cd_convenio,\nobter_nome_convenio(c.cd_convenio_parametro) as ds_convenio,\np.cd_medico_executor,\nobter_nome_pf(p.cd_medico_executor) as ds_medico_executor,\np.cd_medico_req as cd_medico_requisitante,\nobter_nome_pf(p.cd_medico_req) as ds_medico_requisitante,\np.ie_origem_proced,\np.cd_procedimento,\nobter_desc_procedimento(p.cd_procedimento, p.ie_origem_proced) as ds_procedimento, \nobter_valor_dominio(19,pr.ie_classificacao) as ds_classificacao,\n'' as ds_classif_procedimento,\n0 as cd_proced_principal,\n'' ds_proced_principal,\np.qt_procedimento,\nc.vl_conta,\np.vl_procedimento,\nc.ie_status_acerto,\ndecode(c.ie_status_acerto, 1,'Provisorio' , 2 ,'Definitivo') as status_conta,\n'' as cd_tuss,\n'' as ds_classif_lio\nfrom procedimento_paciente p,\natendimento_paciente at,\npessoa_fisica pf,\nprocedimento pr,\nconta_paciente c\nwhere p.nr_atendimento = at.nr_atendimento\nand at.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand p.cd_procedimento = pr.cd_procedimento\nand p.ie_origem_proced = pr.ie_origem_proced\nand p.nr_interno_conta = c.nr_interno_conta\nand p.cd_motivo_exc_conta is null\nand c.ie_cancelamento is null\nand at.dt_entrada between sysdate - 1 and sysdate",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Processa Itens",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy procedures",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Copy materials",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ProcessTempItems]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Tabela Final",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Processa Itens",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from TEMPTASY\nWhere Processed = 'Sim'",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										},
										"sink": {
											"name": "NR_REGISTRO_UNICO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MARCA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_MARCA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "MARCA",
											"type": "String"
										},
										"sink": {
											"name": "DS_MARCA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ATUALIZACAO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_ENTRADA",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_ATENDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "NR_ATENDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_ESTABELECIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_ESTABELECIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_PESSOA_FISICA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										},
										"sink": {
											"name": "DT_NASCIMENTO",
											"type": "DateTime"
										}
									},
									{
										"source": {
											"name": "NR_CPF",
											"type": "String"
										},
										"sink": {
											"name": "NR_CPF",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_SEXO",
											"type": "String"
										},
										"sink": {
											"name": "IE_SEXO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "NR_CEP",
											"type": "String"
										},
										"sink": {
											"name": "NR_CEP",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CIDADE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CIDADE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										},
										"sink": {
											"name": "DS_PESSOA_FISICA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "CD_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_EXECUTOR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "CD_MEDICO_REQUISITANTE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										},
										"sink": {
											"name": "DS_MEDICO_REQUISITANTE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_ORIGEM_PROCED",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_PROCED_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "CD_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCED_PRINCIPAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										},
										"sink": {
											"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA_AUXILIAR",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA_AUXILIAR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CATEGORIA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CATEGORIA",
											"type": "String"
										},
										"sink": {
											"name": "DS_CATEGORIA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSE",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSE",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSE",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSE",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_CLASSIF_LIO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										},
										"sink": {
											"name": "DS_CLASSIF_LIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "QT_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "QT_PROCEDIMENTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										},
										"sink": {
											"name": "QT_AJUSTADA",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "VL_CONTA",
											"type": "Double"
										},
										"sink": {
											"name": "VL_CONTA",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "VL_PROCEDIMENTO",
											"type": "Double"
										},
										"sink": {
											"name": "VL_PROCEDIMENTO",
											"type": "Single"
										}
									},
									{
										"source": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										},
										"sink": {
											"name": "IE_STATUS_ACERTO",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										},
										"sink": {
											"name": "DS_STATUS_CONTA",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CD_TUSS",
											"type": "Int32"
										},
										"sink": {
											"name": "CD_TUSS",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "TIPO_CONVENIO",
											"type": "String"
										},
										"sink": {
											"name": "TIPO_CONVENIO",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "CRM",
											"type": "String"
										},
										"sink": {
											"name": "CRM_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "MPE",
											"type": "String"
										},
										"sink": {
											"name": "MPE_EXECUTOR",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "INTERCOMPANY",
											"type": "String"
										},
										"sink": {
											"name": "INTERCOMPANY_EXECUTOR",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlProcedimentosTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Truncate Temp Table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Tabela Final",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[TRUNCATETEMPTABLE]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Copy materials",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select \n\n'Tasy Sadalla' as BASE,\n7 as cd_marca,\n'Hospital de Olhos Sadalla Amin Ghanem' as marca,\n17 as cd_estabelecimento,\np.nr_atendimento,\n'7'||'17'||p.nr_atendimento as nr_registro_unico,\np.dt_atualizacao,\nat.dt_entrada,\np.nr_interno_conta,\nobter_nome_estab(c.cd_estabelecimento) as ds_estabelecimento,\npf.cd_pessoa_fisica,\npf.dt_nascimento,\npf.nr_cpf,\npf.ie_sexo,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CEP') as nr_cep,\nobter_compl_pf(pf.cd_pessoa_fisica,1,'CI') as ds_cidade,\nobter_nome_pf(at.cd_pessoa_fisica) as ds_pessoa_fisica,\np.cd_convenio as cd_convenio,\nobter_nome_convenio(c.cd_convenio_parametro) as ds_convenio,\nci.cd_medico_cirurgiao as cd_medico_executor,\nobter_nome_pf(ci.cd_medico_cirurgiao) as ds_medico_executor,\nci.cd_medico_cirurgiao as cd_medico_requisitante,\nobter_nome_pf(ci.cd_medico_cirurgiao) as ds_medico_requisitante,\n'' as ie_origem_proced,\np.cd_material as cd_procedimento,\npr.ds_material as ds_procedimento, \n'Material' as ds_classificacao,\n'' as ds_classif_procedimento,\n0 as cd_proced_principal,\n'' ds_proced_principal,\np.qt_material as qt_procedimento,\nc.vl_conta,\np.vl_material as vl_procedimento,\nc.ie_status_acerto,\ndecode(c.ie_status_acerto, 1,'Provisorio' , 2 ,'Definitivo') as status_conta,\n0 as cd_tuss,\n'' as ds_classif_lio\nfrom material_atend_paciente p,\natendimento_paciente at,\npessoa_fisica pf,\nmaterial pr,\nconta_paciente c,\ncirurgia ci\nwhere p.nr_atendimento = at.nr_atendimento\nand at.cd_pessoa_fisica = pf.cd_pessoa_fisica\nand p.cd_material = pr.cd_material\nand p.nr_interno_conta = c.nr_interno_conta\nand p.nr_cirurgia = ci.nr_cirurgia\nand p.nr_atendimento = ci.nr_atendimento\nand p.cd_motivo_exc_conta is null\nand c.ie_cancelamento is null\nand at.dt_entrada between sysdate - 1 and sysdate",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBatchSize": 10000,
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AzureSqlTEMPTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Producao Medica/Desenvolvimento"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTEMPTable')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlProcedimentosTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Titulos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Titulos HTML5",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT  \n        A.CD_CGC CNPJ,\n        B.DS_RAZAO_SOCIAL NM_RAZAOSOCIAL,\n        B.NM_FANTASIA,\n        A.NR_TITULO,\n        A.NR_NOTA_FISCAL,\n        A.DT_EMISSAO,\n        A.DT_VENCIMENTO DT_VENCIMENTO_ORIGINAL,\n        A.DT_PAGAMENTO_PREVISTO DT_VENCIMENTO_PRORROGADO,\n        A.VL_TITULO VL_BRUTO,\n        A.VL_SALDO_JUROS,\n        A.VL_SALDO_MULTA,\n        OBTER_DADOS_TITULO_RECEBER(A.NR_TITULO, 'VLL') VL_LIQUIDO,\n        A.VL_SALDO_TITULO,\n        OBTER_VL_AMENOR_TIT(A.NR_TITULO,'A',A.DT_ATUALIZACAO) as VL_AMENOR,\n        Obter_valor_dominio(710, a.ie_situacao) as situacao,\n        E.NM_FANTASIA_ESTAB AS SIGLA_UNIDADE,\n        EM.NM_RAZAO_SOCIAL as MARCA,\n        E.CD_CGC\nFROM    TITULO_RECEBER A, \n        PESSOA_JURIDICA B,\n        ESTABELECIMENTO E,\n        EMPRESA EM \nwhere   b.cd_cgc = a.cd_cgc\nAND     a.CD_ESTABELECIMENTO = E.CD_ESTABELECIMENTO\nAND     E.CD_EMPRESA = EM.CD_EMPRESA",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Titulos Sadalla",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "SELECT  \n        A.CD_CGC CNPJ,\n        B.DS_RAZAO_SOCIAL NM_RAZAOSOCIAL,\n        B.NM_FANTASIA,\n        A.NR_TITULO,\n        A.NR_NOTA_FISCAL,\n        A.DT_EMISSAO,\n        A.DT_VENCIMENTO DT_VENCIMENTO_ORIGINAL,\n        A.DT_PAGAMENTO_PREVISTO DT_VENCIMENTO_PRORROGADO,\n        A.VL_TITULO VL_BRUTO,\n        A.VL_SALDO_JUROS,\n        A.VL_SALDO_MULTA,\n        OBTER_DADOS_TITULO_RECEBER(A.NR_TITULO, 'VLL') VL_LIQUIDO,\n        A.VL_SALDO_TITULO,\n        OBTER_VL_AMENOR_TIT(A.NR_TITULO,'A',A.DT_ATUALIZACAO) as VL_AMENOR,\n        Obter_valor_dominio(710, a.ie_situacao) as situacao,\n        E.NM_FANTASIA_ESTAB AS SIGLA_UNIDADE,\n        EM.NM_RAZAO_SOCIAL as MARCA,\n        E.CD_CGC\nFROM    TITULO_RECEBER A, \n        PESSOA_JURIDICA B,\n        ESTABELECIMENTO E,\n        EMPRESA EM \nwhere   b.cd_cgc = a.cd_cgc\nAND     a.CD_ESTABELECIMENTO = E.CD_ESTABELECIMENTO\nAND     E.CD_EMPRESA = EM.CD_EMPRESA",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SadallaTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Titulos DH",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "SELECT\n    (SELECT X.emp_cgc FROM EMP X WHERE X.emp_cod = NFS_EMP_COD) AS CNPJ,\n    (SELECT X.emp_raz_soc FROM EMP X WHERE X.emp_cod = NFS_EMP_COD) AS NM_RAZAOSOCIAL,\n    (SELECT X.emp_nome_fantasia FROM EMP X WHERE X.emp_cod = NFS_EMP_COD) AS NM_FANTASIA,\n    nfs_numero as NR_TITULO,\n\n    nfs_dt_emis as DT_EMISSAO,\n    nfs_dt_vcto as DT_VENCIMENTO_ORIGINAL,\n    nfs_dt_vcto as DT_VENCIMENTO_PRORROGADO,\n    nfs_valor as VL_BRUTO,\n    nfs_vlr_multa as VL_SALDO_MULTA,\n    nfs_valor - v_nfs_saldo.v_a_maior as VL_LIQUIDO,\n    CASE WHEN nfs_status = 'A' THEN nfs_valor\n    ELSE 0\n    END AS VL_SALDO_TITULO,\n    v_nfs_saldo.v_perda as VL_AMENOR,\n    nfs_status as SITUACAO,\n    emp.emp_raz_soc AS SIGLA_UNIDADE ,\n    emp.emp_nome_fantasia AS MARCA,\n    EMP.emp_cgc AS CD_CGC\nFROM NFS,\n     STR,\n     EMP,\n     v_nfs_saldo\nWHERE NFS.nfs_str_cod = str.str_str_cod\nand str_emp_cod = EMP_COD\nand nfs_numero = v_nfs_saldo.v_numero\nand nfs_serie = v_nfs_saldo.v_serie",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_ITAIGARA_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Titulos HOSL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "    SELECT nfs.nfs_tipo,   \n        nfs.nfs_serie,   \n        nfs.nfs_numero,   \n        nfs.nfs_dt_emis,   \n        nfs.nfs_dt_vcto,   \n        nfs.nfs_valor,   \n        nfs.nfs_vlr_multa,   \n        cnv.cnv_nome,   \n        emp.emp_nome_fantasia,   \n        nfs.nfs_emp_codigo,   \n        nfs.nfs_emp_cod,   \n        nfs.nfs_vlr_iss,   \n        cfg.cfg_emp, \n        cfg.cfg_cgc,  \n        cnv.cnv_ccr_banco,   \n        nfs.nfs_vlr_ir,   \n        cfg.cfg_vlrfilme,   \n        nfs.nfs_perc_iss,   \n        nfs.nfs_perc_ir,   \n        nfs.nfs_perc_multa,   \n        nfs.nfs_remessa,   \n        cfg.cfg_tol_ent_diaria,   \n        nfs.nfs_perc_juro,   \n        nfs.nfs_vlr_outros_imp,   \n        MNS.MNS_DT,   \n        SUM ( coalesce ( MNS.mns_vlr, 0 ) ) as mns_mns_vlr,  \n        MNS.MNS_TIPO, \n\t\tMNS.MNS_NFS_TIPO, \n\t\tmns.mns_mns_serie, \n\t\tmns.mns_mns_num, \n\t\tmns.mns_serie, \n\t\tmns.mns_num, \n\t\t--cfg.cfg_vlrfilme, \n\t\tnfs.nfs_nde_tipo, \n\t\t--nfs.nfs_vlr_ir, \n\t\tmns.mns_obs,\n\t\t'?',\n\t\tnfs.nfs_ind_tipo_fatura,\n\t\tnfs.nfs_nfl_serie, \n\t\tnfs.nfs_nfl_num,\n\t\tmns.mns_nfl_serie,\n\t\tmns.mns_nfl_num,\n\t\t'-' as rdi_cre_cod,\n\t\t1 as tot_parc,\n\t\t1 as parc,\n\t\tsum ( coalesce ( mns.mns_vlr_complemento, 0 ) ) as mns_mns_vlr_complemento, \n\t\tnfs.nfs_dt_receb,\n\t\tcfg.cfg_vlrfilme as saldo_ini,\n\t\tcfg.cfg_vlrfilme as gni_v,\n\t\tnfs.nfs_dt_envio,   \n\t\tsum ( coalesce ( mns.mns_vlr_glosa, 0 ) ) as mns_mns_vlr_glosa_receb,\n\t\tnfs.nfs_ns_serie, \n\t\tnfs.nfs_ns_numero, \t\n\t\tcnv.cnv_caixa_fatura,\n\t\tsum(m.imposto) as imposto  \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS \nLEFT JOIN (SELECT  \n       mns.mns_serie as serie, \n       mns.mns_num as numero, \n       mns.mns_nfs_serie as nfs_serie,\n       mns.mns_nfs_numero as nfs_numero,\n       mns.mns_nfs_tipo as nfs_tipo,    \n       (SELECT sum ( m2.mns_vlr ) \n        \tFROM mns m2, nfs \n\t\t\tWHERE  ( m2.mns_mns_serie = mns.mns_serie ) AND \n\t\t\t\t\t( m2.mns_mns_num = mns.mns_num ) AND \n               ( m2.mns_nfs_serie = nfs.nfs_serie ) AND\n               ( m2.mns_nfs_numero = nfs.nfs_numero ) AND\n               ( m2.mns_nfs_tipo = nfs.nfs_tipo )) AS imposto\n\t\t\tFROM   cnv, \n\t\t\t\t\t emp, \n\t\t\t\t\t nfs, \n\t\t\t\t\t cfg, \n\t\t\t\t\t mns \n\t\t\t WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n\t\t\t\t( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n\t\t\t\t( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n\t\t\t\t( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n\t\t\t\t( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n\t\t\t\t( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND\n\t\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100) AND  \n\t\t\t\t( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t\t( 8=8 ) AND \n\t\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) )\n\t\t\tGROUP  BY   mns.mns_serie , \n\t\t\t\t\t mns.mns_num , \n\t\t\t\t\t mns.mns_nfs_serie ,\n\t\t\t\t\t mns.mns_nfs_numero ,\n\t\t\t\t\t mns.mns_nfs_tipo  \n\n) m ON m.serie = mns.mns_serie and m.numero = mns.mns_num and m.nfs_serie = mns.mns_nfs_serie and m.nfs_numero = mns.mns_nfs_numero and m.nfs_tipo = mns.mns_nfs_tipo\n\n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND\n\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100 ) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t( 8=8 ) AND \n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) ) \nGROUP BY nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         nfs.nfs_dt_vcto,   \n         nfs.nfs_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp,   \n         cnv.cnv_ccr_banco,   \n         --nfs.nfs_vlr_ir,   \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   \n         MNS.MNS_DT,   \n         MNS.MNS_TIPO, \n\t\t MNS.MNS_NFS_TIPO, \n\t\t mns.mns_mns_serie, \n\t\t mns.mns_mns_num, \n\t\t mns.mns_serie, \n\t\t mns.mns_num, \n\t\t cfg.cfg_vlrfilme, \n\t\t nfs.nfs_nde_tipo, \n\t\t nfs.nfs_vlr_ir, \n\t\t mns.mns_obs,\n\t\t nfs.nfs_ind_tipo_fatura,\n\t\t nfs.nfs_nfl_serie, \n\t\t nfs.nfs_nfl_num,\n\t\t mns.mns_nfl_serie,\n\t\t mns.mns_nfl_num,\n\t\t nfs.nfs_dt_receb,\n\t\t cfg.cfg_vlrfilme,\n\t\t --cfg.cfg_vlrfilme,\n\t\t nfs.nfs_dt_envio,\n\t\t nfs.nfs_ns_serie, \n\t\t nfs.nfs_ns_numero, \t\n\t\t cnv.cnv_caixa_fatura,\n         cfg.cfg_cgc      \n\nUNION ALL   \n\n  SELECT nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         nfs.nfs_dt_vcto,   \n         nfs.nfs_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp,\n         cfg.cfg_cgc,   \n         cnv.cnv_ccr_banco,   \n         nfs.nfs_vlr_ir,   \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   \n         CASE WHEN mns.mns_tipo = 'NR' THEN b.nfs_dt_vcto ELSE MNS.MNS_DT END,   \n         SUM ( coalesce ( MNS.mns_vlr, 0 ) ),   \n         MNS.MNS_TIPO, \n\t\t\tMNS.MNS_NFS_TIPO, \n\t\t\tmns.mns_mns_serie, \n\t\t\tmns.mns_mns_num, \n\t\t\tmns.mns_serie, \n\t\t\tmns.mns_num, \n\t\t\t--0 as, \n\t\t\tb.nfs_nde_tipo, \n\t\t\t--nfs.nfs_vlr_ir, \n\t\t\tmns.mns_obs, \n\t\t\t'?' as nula1,\n\t\t\tnfs.nfs_ind_tipo_fatura,\n\t\t\tnfs.nfs_nfl_serie, \n\t\t\tnfs.nfs_nfl_num, \n\t\t\tmns.mns_nfl_serie,\n\t\t\tmns.mns_nfl_num,\n\t\t\t'-' as nula2,\n\t\t\t1 as nula3,\n\t\t    1 as nula4,\n\t\t\tSUM ( coalesce ( mns.mns_vlr_complemento, 0 ) ), \n\t\t\tnfs.nfs_dt_receb,\n\t\t\t0,\n\t\t\t0,\n\t\t\tnfs.nfs_dt_envio,   \n\t\t\tsum ( coalesce ( mns.mns_vlr_glosa, 0 ) ),\n\t\t\tnfs.nfs_ns_serie, \n\t\t\tnfs.nfs_ns_numero, \t\n\t\t\tcnv.cnv_caixa_fatura,\n         0                        \n    FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS, \n\t\t\tnfs b  \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n\t\t\t( MNS.MNS_NFS_SERIE = b.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = b.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = b.nfs_tipo) and  \n         ( nfs.NFS_SERIE = b.nfs_ns_serie ) and  \n         ( nfs.NFS_NUMERO = b.nfs_ns_numero ) and  \n         ( nfs.NFS_TIPO = b.nfs_ns_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo <> 'NC' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND\n\t\t\t( nfs.nfs_dt_vcto >= GETDATE() - 100 ) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND\n\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t( 8=8 ) AND \t\n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) )\nGROUP BY nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         nfs.nfs_dt_vcto,   \n         nfs.nfs_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp,   \n         cnv.cnv_ccr_banco,   \n         nfs.nfs_vlr_ir,   \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   \n         CASE WHEN mns.mns_tipo = 'NR' THEN b.nfs_dt_vcto ELSE MNS.MNS_DT END,   \n         MNS.MNS_TIPO, \n\t\t MNS.MNS_NFS_TIPO, \n\t\t mns.mns_mns_serie, \n\t\t mns.mns_mns_num, \n\t\t mns.mns_serie, \n\t\t mns.mns_num, \n\t\t b.nfs_nde_tipo, \n\t\t nfs.nfs_vlr_ir, \n\t\t mns.mns_obs, \n\t\t nfs.nfs_ind_tipo_fatura,\n\t\t nfs.nfs_nfl_serie, \n\t\t nfs.nfs_nfl_num, \n\t\t mns.mns_nfl_serie,\n\t\t mns.mns_nfl_num,\n\t\t nfs.nfs_dt_receb,\n\t\t nfs.nfs_dt_envio,\n\t\t nfs.nfs_ns_serie, \n\t\t nfs.nfs_ns_numero, \t\n\t\t cnv.cnv_caixa_fatura,\n         cfg.cfg_cgc \n\n         --------------------------OK 1   \n\nUNION ALL \n\n  SELECT nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         nfs.nfs_dt_vcto,   \n         nfs.nfs_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp, \n         cfg.cfg_cgc,   \n         cnv.cnv_ccr_banco,   \n         nfs.nfs_vlr_ir,   \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   ---------------\n         NFS.NFS_DT_EMIS,   \n         0 as mns_mns_vlr,   \n         'A' as MNS_TIPO, \n\t\t\tNFS.NFS_TIPO, -------\n\t\t\t0 as mns_mns_serie,\n\t\t\t0 as mns_mns_num,\n\t\t\t1 as mns_serie,\n\t\t\t1 as mns_num,\n\t\t\t--0 as , \n\t\t\tnfs.nfs_nde_tipo, \n\t\t\t--nfs.nfs_vlr_ir, \n\t\t\tcfg.cfg_comp,\n\t\t\t'?' as nula1,\n\t\t\tnfs.nfs_ind_tipo_fatura,\n\t\t\tnfs.nfs_nfl_serie, \n\t\t\tnfs.nfs_nfl_num, \n\t\t\t'?' as mns_nfl_serie,\n\t\t\t0 as mns_nfl_num,\n\t\t\t'-' as nula2,\n\t\t\t1 as nula3,\n\t\t\t1 as nula4,\n\t\t\t0 as mns_mns_vlr_complemento, \n\t\t\tnfs.nfs_dt_receb,\n\t\t\t0 as saldo_ini,\n\t\t\t0 as gni_v,\n\t\t\tnfs.nfs_dt_envio,   \n\t\t\t0 as mns_mns_vlr_glosa_receb,\n\t\t\tnfs.nfs_ns_serie, \n\t\t\tnfs.nfs_ns_numero, \t\n\t\t\tcnv.cnv_caixa_fatura,\n         0  as  imposto              \n    FROM cnv,   \n         emp,   \n         nfs,   \n         cfg  \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_dt_vcto >= GETDATE()  - 100) AND  \n         ( nfs.nfs_dt_vcto < GETDATE() ) AND  \n         ( nfs.nfs_tipo <> 'NC' ) AND\n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND \n\t\t\tNOT EXISTS ( SELECT mte.mte_serie FROM mte\n\t\t\t\t\t\t\t\tWHERE ( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t\t\t\t\t\t\t\t( mte.mte_tipo in ( 'C', 'E', 'O', 'D' ) ) ) AND\n\t\t\tNOT EXISTS ( SELECT MNS.MNS_NUM FROM MNS \n\t\t\t\t\t\t\t\tWHERE ( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t\t\t\t\t\t\t\t( 8=8 ) AND \n\t\t\t\t\t\t\t\t\t\t( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n\t\t\t\t\t\t\t         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n\t\t\t\t\t\t\t         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) ) \n -------------- OK  2\nUNION ALL \n\n  SELECT nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         rdi.rdi_vcto,   \n         rdi.rdi_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp,  \n         cfg.cfg_cgc,  \n         cnv.cnv_ccr_banco,   \n         nfs.nfs_vlr_ir,   \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   \n         MNS.MNS_DT,   \n         MNS.mns_vlr,  \n         MNS.MNS_TIPO, \n\t\t MNS.MNS_NFS_TIPO, \n\t\t mns.mns_mns_serie, \n\t\t mns.mns_mns_num, \n\t\t mns.mns_serie, \n\t\t mns.mns_num, \n\t\t --cfg.cfg_vlrfilme, \n\t\t nfs.nfs_nde_tipo, \n\t\t --nfs.nfs_vlr_ir, \n\t\t pac.pac_nome,\n\t\t rdi.rdi_forma_pag,\n\t\t nfs.nfs_ind_tipo_fatura,\n\t\t nfs.nfs_nfl_serie, \n\t\t nfs.nfs_nfl_num, \n\t\t mns.mns_nfl_serie,\n\t\t mns.mns_nfl_num,\n\t\t rdi.rdi_cre_cod,\n\t\t ( SELECT COUNT (*) FROM rdi b\n\t\t \tWHERE ( b.rdi_mte_serie = rdi.rdi_mte_serie ) AND\n\t\t\t\t\t\t( b.rdi_mte_seq = rdi.rdi_mte_seq ) AND          \n\t\t\t\t\t\t( b.rdi_forma_pag = rdi.rdi_forma_pag ) AND\n\t\t\t\t\t\t( b.rdi_recepcao <> 'S' ) ) as tot_parc,\n\t\t\t( SELECT COUNT (*) FROM rdi b\n\t\t\t\tWHERE ( b.rdi_mte_serie = rdi.rdi_mte_serie ) AND\n\t\t\t\t\t\t( b.rdi_mte_seq = rdi.rdi_mte_seq ) AND          \n\t\t\t\t\t\t( b.rdi_forma_pag = rdi.rdi_forma_pag ) AND\n\t\t\t\t\t\t( b.rdi_recepcao <> 'S' ) AND\n\t\t\t\t\t\t( b.rdi_seq <= rdi.rdi_seq ) ) as parc,\n\t\t mns.mns_vlr_complemento, \n\t\t nfs.nfs_dt_receb,\n\t\t 0 as saldo_ini,\n\t\t 0 as gni_v,\n\t\t nfs.nfs_dt_envio,   \n\t\t 0 as mns_mns_vlr_glosa_receb,\n\t\t nfs.nfs_ns_serie, \n\t\t nfs.nfs_ns_numero, \t\n\t\t cnv.cnv_caixa_fatura,\n         0 as imposto         \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS,\n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND\n\t\t\t( rdi.rdi_vcto >= GETDATE() - 100 ) AND  \n            ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t\t( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t\t( rdi.rdi_recepcao <> 'S' ) AND \n\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t\t( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t( mte.mte_status = 'D' ) AND \n\t\t\t( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t\t( 8=8 ) AND \n\t\t    ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t\t( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t\t( rdi.rdi_mns_serie = mns.mns_serie ) AND\n\t\t\t( rdi.rdi_mns_num = mns.mns_num ) AND \n\t\t\t( rdi.rdi_mcc_serie_dep is not null ) AND \n\t\t\t( ( mte.mte_tipo <> 'C' ) OR\n\t\t\t  ( EXISTS ( SELECT tca_cod FROM tca\n\t\t\t\t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) ) \n\n---- OK 3\n\nUNION ALL \n\n  SELECT nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         rdi.rdi_vcto,   \n         rdi.rdi_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp,  \n         cfg.cfg_cgc,  \n         cnv.cnv_ccr_banco,   \n         nfs.nfs_vlr_ir,   \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   \n         MTE.MTE_DTHR as MNS_DT,   \n         0 as mns_mns_vlr,   \n         'A' as MNS_TIPO, \n\t\t\tNFS.NFS_TIPO, \n\t\t\t0 as mns_mns_serie,\n\t\t\t0 as mns_mns_num,\n\t\t\t1 as mns_serie,\n\t\t\t1 as mns_num,\n\t\t\t--0, \n\t\t\tnfs.nfs_nde_tipo, \n\t\t\t--nfs.nfs_vlr_ir, \n\t\t\tpac.pac_nome,\n\t\t\trdi.rdi_forma_pag,\n\t\t\tnfs.nfs_ind_tipo_fatura,\n\t\t\tnfs.nfs_nfl_serie, \n\t\t\tnfs.nfs_nfl_num, \n\t\t\t'?' as mns_nfl_serie,\n\t\t\t0 as mns_nfl_num,\n\t\t\trdi.rdi_cre_cod,\n\t\t\t( SELECT COUNT (*) FROM rdi b\n\t\t\t\tWHERE ( b.rdi_mte_serie = rdi.rdi_mte_serie ) AND\n\t\t\t\t\t\t( b.rdi_mte_seq = rdi.rdi_mte_seq ) AND          \n\t\t\t\t\t\t( b.rdi_forma_pag = rdi.rdi_forma_pag ) AND\n\t\t\t\t\t\t( b.rdi_recepcao <> 'S' ) ) as tot_parc,\n\t\t\t( SELECT COUNT (*) FROM rdi b\n\t\t\t\tWHERE ( b.rdi_mte_serie = rdi.rdi_mte_serie ) AND\n\t\t\t\t\t\t( b.rdi_mte_seq = rdi.rdi_mte_seq ) AND          \n\t\t\t\t\t\t( b.rdi_forma_pag = rdi.rdi_forma_pag ) AND\n\t\t\t\t\t\t( b.rdi_recepcao <> 'S' ) AND\n\t\t\t\t\t\t( b.rdi_seq <= rdi.rdi_seq ) ) as parc,\n\t\t\t0 as mns_mns_vlr_complemento, \n\t\t\tnfs.nfs_dt_receb,\n\t\t\t0 as saldo_ini,\n\t\t\t0 as gni_v,\n\t\t\tnfs.nfs_dt_envio,   \n\t\t\t0 as mns_mns_vlr_glosa_receb,\n\t\t\tnfs.nfs_ns_serie, \n\t\t\tnfs.nfs_ns_numero, \t\n\t\t\tcnv.cnv_caixa_fatura,\n         0 as imposto     \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND\n\t\t\t( rdi.rdi_vcto >= GETDATE() - 100 ) AND  \n            ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t\t( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t\t( rdi.rdi_recepcao <> 'S' ) AND \n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t\t( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t( mte.mte_status = 'D' ) AND \n\t\t\t( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t    ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t\t( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t\t( ( mte.mte_tipo <> 'C' ) OR\n\t\t\t  ( EXISTS ( SELECT tca_cod FROM tca\n\t\t\t\t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) ) AND \n\t\t\t( ( rdi.rdi_mcc_serie_dep is null ) OR \n\t\t\t  ( rdi.rdi_forma_pag = 'X' ) OR \n\t\t\t  ( rdi.rdi_seq_subst is null AND \n\t\t\t\t NOT EXISTS ( SELECT mns.mns_serie FROM mns\n\t\t\t\t\t\t\t\t\tWHERE ( rdi.rdi_mns_serie = mns.mns_serie ) AND\n\t\t\t\t\t\t\t\t\t\t\t( rdi.rdi_mns_num = mns.mns_num ) AND\n\t\t\t\t\t\t\t\t\t\t\t( mns.mns_ind_liberado = 'S' ) ) ) ) \n ------- OK 4\nUNION ALL \n\n  SELECT nfs.nfs_tipo,   \n         nfs.nfs_serie,   \n         nfs.nfs_numero,   \n         nfs.nfs_dt_emis,   \n         rdi.rdi_vcto,   \n         rdi.rdi_valor,   \n         nfs.nfs_vlr_multa,   \n         cnv.cnv_nome,   \n         emp.emp_nome_fantasia,   \n         nfs.nfs_emp_codigo,   \n         nfs.nfs_emp_cod,   \n         nfs.nfs_vlr_iss,   \n         cfg.cfg_emp,\n         cfg.cfg_cgc,    \n         cnv.cnv_ccr_banco,   \n         nfs.nfs_vlr_ir,   \n         cfg.cfg_vlrfilme,   \n         nfs.nfs_perc_iss,   \n         nfs.nfs_perc_ir,   \n         nfs.nfs_perc_multa,   \n         nfs.nfs_remessa,   \n         cfg.cfg_tol_ent_diaria,   \n         nfs.nfs_perc_juro,   \n         nfs.nfs_vlr_outros_imp,   \n         ( SELECT MIN ( mcc.mcc_dt ) FROM mcc\n\t\t\t\tWHERE ( mcc.mcc_serie = rdi.rdi_mcc_serie_dep ) AND\n\t\t\t\t\t\t( mcc.mcc_lote = rdi.rdi_mcc_lote_dep ) ) as mns_dt,   \n         rdi.rdi_valor,  \n         MNS.MNS_TIPO, \n\t\t\tMNS.MNS_NFS_TIPO, \n\t\t\tmns.mns_mns_serie, \n\t\t\tmns.mns_mns_num, \n\t\t\tmns.mns_serie, \n\t\t\tmns.mns_num, \n\t\t\t--cfg.cfg_vlrfilme, \n\t\t\tnfs.nfs_nde_tipo, \n\t\t\t--nfs.nfs_vlr_ir, \n\t\t\tpac.pac_nome,\n\t\t\trdi.rdi_forma_pag,\n\t\t\tnfs.nfs_ind_tipo_fatura,\n\t\t\tnfs.nfs_nfl_serie, \n\t\t\tnfs.nfs_nfl_num, \n\t\t\tmns.mns_nfl_serie,\n\t\t\tmns.mns_nfl_num,\n\t\t\trdi.rdi_cre_cod,\n\t\t\t( SELECT COUNT (*) FROM rdi b\n\t\t\t\tWHERE ( b.rdi_mte_serie = rdi.rdi_mte_serie ) AND\n\t\t\t\t\t\t( b.rdi_mte_seq = rdi.rdi_mte_seq ) AND          \n\t\t\t\t\t\t( b.rdi_forma_pag = rdi.rdi_forma_pag ) AND\n\t\t\t\t\t\t( b.rdi_recepcao <> 'S' ) ) as tot_parc,\n\t\t\t( SELECT COUNT (*) FROM rdi b\n\t\t\t\tWHERE ( b.rdi_mte_serie = rdi.rdi_mte_serie ) AND\n\t\t\t\t\t\t( b.rdi_mte_seq = rdi.rdi_mte_seq ) AND          \n\t\t\t\t\t\t( b.rdi_forma_pag = rdi.rdi_forma_pag ) AND\n\t\t\t\t\t\t( b.rdi_recepcao <> 'S' ) AND\n\t\t\t\t\t\t( b.rdi_seq <= rdi.rdi_seq ) ) as parc,\n\t\t\tmns.mns_vlr_complemento, \n\t\t\tnfs.nfs_dt_receb,\n\t\t\t0 as saldo_ini,\n\t\t\t0 as gni_v,\n\t\t\tnfs.nfs_dt_envio,   \n\t\t\t0 as mns_mns_vlr_glosa_receb,\n\t\t\tnfs.nfs_ns_serie, \n\t\t\tnfs.nfs_ns_numero, \t\n\t\t\tcnv.cnv_caixa_fatura,\n         0  as imposto        \n     FROM cnv,   \n         emp,   \n         nfs,   \n         cfg,   \n         MNS,\n\t\t\tmte, \n\t\t\trdi,\n\t\t\tpac, \n\t\t\trdi b   \n   WHERE ( emp.emp_cod = nfs.nfs_emp_cod ) and  \n         ( MNS.MNS_NFS_SERIE = nfs.nfs_serie) and  \n         ( MNS.MNS_NFS_NUMERO = nfs.nfs_numero) and  \n         ( MNS.MNS_NFS_TIPO = nfs.nfs_tipo) and  \n         ( cnv.cnv_cod = nfs.nfs_emp_codigo ) and  \n         ( nfs.nfs_tipo = 'NC' ) AND \n\t\t\t--( nfs.nfs_tipo in ( :a_sNfsTipos ) ) AND\n\t\t\t( rdi.rdi_vcto >= GETDATE()-100 ) AND  \n         ( rdi.rdi_vcto < GETDATE() ) AND\n\t\t\t( rdi.rdi_forma_pag <> 'U' ) AND \n\t\t\t( rdi.rdi_recepcao <> 'S' ) AND \n\t\t\t( mns.mns_mns_serie is null ) AND\n\t\t\t( mns.mns_ind_liberado = 'S' ) AND \n\t\t\t( nfs.nfs_status = 'P' ) AND \n\t\t\t( mte.mte_pac_reg = pac.pac_reg ) AND \n\t\t\t( mte.mte_nfs_tipo = nfs.nfs_tipo ) AND\n\t\t\t( mte.mte_nfs_serie = nfs.nfs_serie ) AND\n\t\t\t( mte.mte_nfs_numero = nfs.nfs_numero ) AND\n\t\t\t( mte.mte_status = 'D' ) AND \n\t\t\t( mte.mte_tipo not in ( 'E', 'D' ) ) AND\n\t\t\t( 8=8 ) AND \n\t\t   ( mte.mte_serie = rdi.rdi_mte_serie ) AND\n\t\t\t( mte.mte_seq = rdi.rdi_mte_seq ) AND\n\t\t\t( b.rdi_mte_serie = rdi.rdi_mte_serie ) AND\n\t\t\t( b.rdi_mte_seq = rdi.rdi_mte_seq ) AND\n\t\t\t( b.rdi_seq = rdi.rdi_seq_subst ) AND \n\t\t\t( b.rdi_mns_serie = mns.mns_serie ) AND\n\t\t\t( b.rdi_mns_num = mns.mns_num ) AND \n\t\t\t( rdi.rdi_mcc_serie_dep is not null ) AND \n\t\t\t( ( mte.mte_tipo <> 'C' ) OR\n\t\t\t  ( EXISTS ( SELECT tca_cod FROM tca\n\t\t\t\t\t\t\t\tWHERE ( tca.tca_cod = mte.mte_tca_cod ) AND\n\t\t\t\t\t\t\t\t\t\t( tca.tca_ind_cr = 'S' ) ) ) OR \n\t\t\t  ( EXISTS ( SELECT udp_valor FROM udp \n\t\t\t\t\t\t\t\tWHERE ( udp.udp_mte_serie_dep = mte.mte_serie ) AND\n\t\t\t\t\t\t\t\t\t\t( udp.udp_mte_seq_dep = mte.mte_seq ) ) ) )  \n",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "SMART_HOSL_PrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Titulos_Receber",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Contas a receber"
				},
				"annotations": [],
				"lastPublishTime": "2019-12-05T20:44:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Titulos_Receber')]",
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITAIGARA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_HOSL_PrdDataSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Titulos_Pagar')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Pipeline em desenvolvimento com informações de titulos a pagar.",
				"activities": [
					{
						"name": "Titulos_Pagar",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select obter_nome_estab(t.cd_estabelecimento) as estabelecimento,\n       t.cd_cgc,\n       obter_razao_social(t.cd_cgc) as nm_razaosocial,\n       obter_nome_fantasia_pj(t.cd_cgc) nm_fantasia,\n       t.nr_titulo,\n       t.nr_seq_nota_fiscal,\n       t.dt_emissao,\n       t.dt_vencimento_original,\n       t.dt_vencimento_atual,\n       t.vl_titulo,\n       t.vl_saldo_titulo,\n       t.vl_saldo_juros,\n       t.vl_saldo_multa,\n       t.vl_dia_antecipacao,\n       t.vl_bordero,\n       t.vl_juros_bordero,\n       t.vl_multa_bordero,\n       t.vl_desconto_bordero,\n       t.vl_ir,\n       t.vl_imposto_munic,\n       t.vl_inss,\n       t.vl_out_desp_bordero,\n       t.vl_titulo_estrang,\n       t.vl_cotacao,\n       obter_valor_dominio(501,t.ie_situacao) as situacao\nfrom titulo_pagar t",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert"
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "CloudTasyPrdDataSet",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_TB_Titulos_Pagar",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Contas a Pagar"
				},
				"annotations": [],
				"lastPublishTime": "2020-02-10T20:56:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_TB_Titulos_Pagar')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UPO')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lista arquivos",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_HMAISDATADRIVEN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": "upo"
								}
							},
							"fieldList": [
								"childItems",
								"itemType",
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filtro",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lista arquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista arquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endsWith(item().name, 'csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filtro",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filtro').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copia dados para a STG",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[upo]') AND type in (N'U'))\nDROP TABLE [stg].[upo]",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_SQL_STG",
											"type": "DatasetReference",
											"parameters": {
												"SCHEMA": "stg",
												"TABELA": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Move arquivo para PROCESSADOS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "STG DW",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@concat(activity('Lista arquivos').output.itemName,'\\Processados')",
													"type": "Expression"
												},
												"File": {
													"value": "@concat(item().name,'-',utcnow())",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Apaga arquivo",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move arquivo para PROCESSADOS",
											"dependencyConditions": [
												"Skipped"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "sv_hmaisbrasildatadriven",
												"type": "LinkedServiceReference"
											},
											"path": "ceop/logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "STG DW",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copia dados para a STG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SQL_DESTINO",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": "MERGE\t           \n\tdw.upo AS destino           \nUSING            \n\tstg.upo AS origem           \n           \n    ON\t(        \norigem.Pedido\t\t\t=\tdestino.Pedido\t\tAND\norigem.PedidoSeq\t\t=\tdestino.PedidoSeq\tAND\norigem.Tipo \t\t\t=\tdestino.Tipo\t\tAND\norigem.CodPrest \t\t=\tdestino.CodPrest\tAND\norigem.num_crm_medico \t=\tdestino.num_crm_medico\t\n\t\t)        \n\n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \n\ndestino.CdUnidade=origem.CdUnidade,\ndestino.Unidade=origem.Unidade,\ndestino.Pedido=origem.Pedido,\ndestino.TipoPedido=origem.TipoPedido,\ndestino.Conta=origem.Conta,\ndestino.CodPac=origem.CodPac,\ndestino.Paciente=origem.Paciente,\ndestino.data_nascimento=origem.data_nascimento,\ndestino.CodConv=origem.CodConv,\ndestino.ConvPlano=origem.ConvPlano,\ndestino.GrupoConv=origem.GrupoConv,\ndestino.cnpj=origem.cnpj,\ndestino.CodPrest=origem.CodPrest,\ndestino.NomePrestador=origem.NomePrestador,\ndestino.conselho_medico=origem.conselho_medico,\ndestino.num_crm_medico=origem.num_crm_medico,\ndestino.data_abertura=origem.data_abertura,\ndestino.Tipo=origem.Tipo,\ndestino.SubTipo=origem.SubTipo,\ndestino.datahora_cadastro=origem.datahora_cadastro,\ndestino.PedidoSeq=origem.PedidoSeq,\ndestino.Cod=origem.Cod,\ndestino.Item=origem.Item,\ndestino.quantidade=origem.quantidade,\ndestino.ValorParticular=origem.ValorParticular,\ndestino.ValorConvenio=origem.ValorConvenio\n\n\n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.CdUnidade,\norigem.Unidade,\norigem.Pedido,\norigem.TipoPedido,\norigem.Conta,\norigem.CodPac,\norigem.Paciente,\norigem.data_nascimento,\norigem.CodConv,\norigem.ConvPlano,\norigem.GrupoConv,\norigem.cnpj,\norigem.CodPrest,\norigem.NomePrestador,\norigem.conselho_medico,\norigem.num_crm_medico,\norigem.data_abertura,\norigem.Tipo,\norigem.SubTipo,\norigem.datahora_cadastro,\norigem.PedidoSeq,\norigem.Cod,\norigem.Item,\norigem.quantidade,\norigem.ValorParticular,\norigem.ValorConvenio\n); "
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Stg Convenio",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "DECLARE @ESTABELECIMENTO VARCHAR(10)\n\nTRUNCATE TABLE STG.UPO_CONVENIO\n\nSELECT @ESTABELECIMENTO = ID_SYSTEM \nFROM v_plataforma_dw WHERE UPPER(DS_SYSTEM) = 'UPO' \n\n;\n\nWITH LST_CONV AS(\nSELECT DISTINCT\n    A.CodConv AS CD_CONVENIO\n    ,A.GrupoConv AS DS_CONVENIO   \nFROM DW.upo A WITH(NOLOCK) \n)\n\n,REF AS(\n\nSELECT\n    @ESTABELECIMENTO + '|' + CAST(TMP.CD_CONVENIO AS VARCHAR(100)) AS FK_CONVENIO\n    ,TMP.CD_CONVENIO\n    ,TMP.DS_CONVENIO\n    ,CASE\n        WHEN UPPER(TMP.DS_CONVENIO) LIKE '%PARTICULAR%' THEN 'PARTICULAR'\n        WHEN UPPER(TMP.DS_CONVENIO) LIKE '%SUS%' THEN 'SUS'\n        ELSE 'CONVÊNIO'\n     END TIPO_CONVENIO\n    ,TMP.CD_CGC    \nFROM(\n\nSELECT\n    A.*\n    ,CNPJ.cnpj AS CD_CGC\n    ,ROW_NUMBER()OVER(PARTITION BY A.CD_CONVENIO ORDER BY A.CD_CONVENIO) ID_LINHA\nFROM LST_CONV A\nOUTER APPLY(\n        SELECT TOP 1\n            X.CodConv\n            ,X.cnpj\n        FROM DW.UPO X WITH(NOLOCK) \n        WHERE X.CodConv = A.CD_CONVENIO\n        ) CNPJ\n) TMP\nWHERE TMP.ID_LINHA = 1)\n\nINSERT INTO STG.UPO_CONVENIO\nSELECT * FROM REF\n"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "CARGA DW",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Stg Convenio",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "EXEC SP_UPO_CARGA_DW"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Dimensao Procedimento",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CARGA DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_CARGA_TBL_UPO_PROCEDIMENTO"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN_BINARY')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_STG')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL_DESTINO')]",
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UPO_FPA')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lista arquivos",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_HMAISDATADRIVEN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": "upofpa"
								}
							},
							"fieldList": [
								"childItems",
								"itemType",
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filtro",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lista arquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista arquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endsWith(item().name, 'xlsx')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filtro",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filtro').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copia dados para a STG",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "ExcelSource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[upofpa]') AND type in (N'U'))\nDROP TABLE [stg].[upofpa]",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "EXECL_BLOB_DIN",
											"type": "DatasetReference",
											"parameters": {
												"FileSystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_SQL_STG",
											"type": "DatasetReference",
											"parameters": {
												"SCHEMA": "stg",
												"TABELA": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Move arquivo para PROCESSADOS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "STG DW",
											"dependencyConditions": [
												"Skipped"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@concat(activity('Lista arquivos').output.itemName,'\\Processados')",
													"type": "Expression"
												},
												"File": {
													"value": "@concat(item().name,'-',utcnow())",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "STG DW",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copia dados para a STG",
											"dependencyConditions": [
												"Skipped"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SQL_DESTINO",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": "MERGE\t           \n\tdw.upo AS destino           \nUSING            \n\tstg.upo AS origem           \n           \n    ON\t(        \norigem.Pedido\t\t\t=\tdestino.Pedido\t\tAND\norigem.PedidoSeq\t\t=\tdestino.PedidoSeq\tAND\norigem.Tipo \t\t\t=\tdestino.Tipo\t\tAND\norigem.CodPrest \t\t=\tdestino.CodPrest\tAND\norigem.num_crm_medico \t=\tdestino.num_crm_medico\t\n\t\t)        \n\n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \n\ndestino.CdUnidade=origem.CdUnidade,\ndestino.Unidade=origem.Unidade,\ndestino.Pedido=origem.Pedido,\ndestino.TipoPedido=origem.TipoPedido,\ndestino.Conta=origem.Conta,\ndestino.CodPac=origem.CodPac,\ndestino.Paciente=origem.Paciente,\ndestino.data_nascimento=origem.data_nascimento,\ndestino.CodConv=origem.CodConv,\ndestino.ConvPlano=origem.ConvPlano,\ndestino.GrupoConv=origem.GrupoConv,\ndestino.cnpj=origem.cnpj,\ndestino.CodPrest=origem.CodPrest,\ndestino.NomePrestador=origem.NomePrestador,\ndestino.conselho_medico=origem.conselho_medico,\ndestino.num_crm_medico=origem.num_crm_medico,\ndestino.data_abertura=origem.data_abertura,\ndestino.Tipo=origem.Tipo,\ndestino.SubTipo=origem.SubTipo,\ndestino.datahora_cadastro=origem.datahora_cadastro,\ndestino.PedidoSeq=origem.PedidoSeq,\ndestino.Cod=origem.Cod,\ndestino.Item=origem.Item,\ndestino.quantidade=origem.quantidade,\ndestino.ValorParticular=origem.ValorParticular,\ndestino.ValorConvenio=origem.ValorConvenio\n\n\n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.CdUnidade,\norigem.Unidade,\norigem.Pedido,\norigem.TipoPedido,\norigem.Conta,\norigem.CodPac,\norigem.Paciente,\norigem.data_nascimento,\norigem.CodConv,\norigem.ConvPlano,\norigem.GrupoConv,\norigem.cnpj,\norigem.CodPrest,\norigem.NomePrestador,\norigem.conselho_medico,\norigem.num_crm_medico,\norigem.data_abertura,\norigem.Tipo,\norigem.SubTipo,\norigem.datahora_cadastro,\norigem.PedidoSeq,\norigem.Cod,\norigem.Item,\norigem.quantidade,\norigem.ValorParticular,\norigem.ValorConvenio\n); "
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/P&P"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN_BINARY')]",
				"[concat(variables('factoryId'), '/datasets/EXECL_BLOB_DIN')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_STG')]",
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL_DESTINO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Agendamento",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Agendamento]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Agendamento]\n\n\n",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Urobrasil_Agendamento",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Agendamento"
								}
							}
						]
					},
					{
						"name": "Agendamento_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Agendamento",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Agendamento_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Agendamento_Diario]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Urobrasil_Agendamento_Diario",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Agendamento_Diario"
								}
							}
						]
					},
					{
						"name": "Atendimento",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Agendamento_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Atendimento]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Atendimento]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Atendimento",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Atendimento"
								}
							}
						]
					},
					{
						"name": "Atendimento_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Atendimento",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Atendimento_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Atendimento_Diario]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Atendimento_Diario",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Atendimento_Diario"
								}
							}
						]
					},
					{
						"name": "Faturamento",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Atendimento_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Faturamento]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Faturamento]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Faturamento",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Faturamento"
								}
							}
						]
					},
					{
						"name": "Faturamento_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Faturamento",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Faturamento_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Faturamento_Diario]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Faturamento_Diario",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Faturamento_Diario"
								}
							}
						]
					},
					{
						"name": "Financeiro",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Faturamento_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Financeiro]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Financeiro]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Financeiro",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Financeiro"
								}
							}
						]
					},
					{
						"name": "Financeiro_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Financeiro",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Financeiro_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Financeiro_Diario]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Financeiro_Diario",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Financeiro_Diario"
								}
							}
						]
					},
					{
						"name": "Repasse",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Financeiro_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Repasse]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Repasse]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Repasse",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Repasse"
								}
							}
						]
					},
					{
						"name": "Repasse_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Repasse",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Repasse_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Repasse_Diario]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Repasse_Diario",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Repasse_Diario"
								}
							}
						]
					},
					{
						"name": "Questionario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Repasse_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Questionario]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Questionario]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Questionario",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_questionario"
								}
							}
						]
					},
					{
						"name": "Questionario_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Questionario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Questionario_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Questionario_Diario]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Questionario_Diario",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_questionario_diario"
								}
							}
						]
					},
					{
						"name": "ContasPagarReceber",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Questionario_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_ContasPagarReceber]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_ContasPagarReceber]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_ContasPagarReceber",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_ContasPagarReceber"
								}
							}
						]
					},
					{
						"name": "ContasPagarReceber_Diarias",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ContasPagarReceber",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_ContasPagarReceber_Diarias]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_ContasPagarReceber_Diarias]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_ContasPagarReceberDiarias",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_ContasPagarReceber_Diarias"
								}
							}
						]
					},
					{
						"name": "Caixa",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ContasPagarReceber_Diarias",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Caixa]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Caixa]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Caixa",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Caixa"
								}
							}
						]
					},
					{
						"name": "Caixa_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Caixa",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Caixa_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Caixa_Diario]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Caixa_DIario",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Caixa_Diario"
								}
							}
						]
					},
					{
						"name": "Paciente",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Caixa_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Paciente]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Paciente]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Paciente",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Paciente"
								}
							}
						]
					},
					{
						"name": "Paciente_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Paciente",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Paciente_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Paciente_Diario]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Paciente_Diario",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Paciente_Diario"
								}
							}
						]
					},
					{
						"name": "Teleorientacao",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Paciente_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Teleorientacao]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Teleorientacao]\n",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Teleorientacao",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Teleorientacao"
								}
							}
						]
					},
					{
						"name": "Teleorientacao_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Teleorientacao",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Teleorientacao_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Teleorientacao_Diario]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Teleorientacao_Diario",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Teleorientacao_Diaria"
								}
							}
						]
					},
					{
						"name": "Venda",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Teleorientacao_Diario",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Venda]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Venda]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Venda",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Venda"
								}
							}
						]
					},
					{
						"name": "Venda_Diaria",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Venda",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Venda_Diaria]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Venda_Diaria]",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Venda_Diaria",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Venda_Diaria"
								}
							}
						]
					},
					{
						"name": "Profissional",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Venda_Diaria",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Profissional]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Profissional]\n",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Profissional",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Profissional"
								}
							}
						]
					},
					{
						"name": "Profissional_Diario",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Profissional",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[stg].[urobrasil_Profissional_Diario]') AND type in (N'U'))\nDROP TABLE [stg].[urobrasil_Profissional_Diario]\n",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "UROBRASIL_Profissional_Diario",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZ_SQL_STG",
								"type": "DatasetReference",
								"parameters": {
									"SCHEMA": "stg",
									"TABELA": "urobrasil_Profissional_Diario"
								}
							}
						]
					},
					{
						"name": "ATENDIMENTO MERGE",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Atendimento",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SQL_DESTINO",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH CTE \nAS\n\n(\nSELECT DISTINCT \n\t   [atendimento_codigo]\n      ,[agendamento_codigo]\n      ,[atendimento_turno]\n      ,[atendimento_dia]\n      ,[atendimento_mes]\n      ,[atendimento_ano]\n      ,[atendimento_usuario_cadastro]\n      ,[atendimento_procedimento_empresa]\n      ,[atendimento_procedimento_empresa_requisitante]\n      ,[atendimento_procedimento_profissional_nome]\n      ,[atendimento_procedimento_profissional_requisitante]\n      ,[atendimento_procedimento_especialidade_profissional_requisitante]\n      ,[atendimento_procedimento_convenio]\n      ,[atendimento_procedimento_plano]\n      ,[atendimento_procedimento_especialidade]\n      ,[atendimento_procedimento_nome]\n      ,[atendimento_procedimento_grupo]\n      ,[atendimento_procedimento_valor]\n      ,[atendimento_procedimento_coparticipacao_valor]\n      ,[atendimento_procedimento_filme_valor]\n      ,[atendimento_material_medicamento_nome]\n      ,[atendimento_material_medicamento_valor]\n      ,[atendimento_material_medicamento_coparticipacao_valor]\n      ,[atendimento_taxa_nome]\n      ,[atendimento_taxa_valor]\n      ,[atendimento_taxa_coparticipacao_valor]\n      ,[paciente_codigo]\n      ,[paciente_nome]\n      ,[paciente_sexo]\n      ,[paciente_faixa_idade]\n      ,[paciente_estado]\n      ,[paciente_cidade]\n      ,[paciente_bairro]\n      ,[atendimento_hora]\n      ,[atendimento_diadasemana]\n      ,[atendimento_cid_primario]\n      ,[atendimento_cid_secundario]\n      ,[atendimento_cid_consultorio]\n      ,[atendimento_tipo]\n      ,[atendimento_horainicio_recepcao]\n      ,[atendimento_horafim_recepcao]\n      ,[atendimento_horainicio_consultorio]\n      ,[atendimento_horafim_consultorio]\n      ,[atendimento_procedimento_codigo]\n      ,[paciente_cep]\n      ,[atendimento_profissional_especialidade]\n      ,[atendimento_previsao_valor_repasse_profissional]\n      ,[atendimento_previsao_valor_repasse_clinica]\n      ,[atendimento_passo]\n  FROM [stg].[urobrasil_Atendimento]\n\n)\n\nMERGE\t           \n\tdw.urobrasil_Atendimento AS destino           \nUSING            \n\tCTE AS origem           \n           \n    ON\t(        \n\torigem.atendimento_codigo\t\t\t\t\t\t=\tdestino.atendimento_codigo\t\t\t\t\t\t\tAND\n\torigem.atendimento_procedimento_codigo\t\t\t=\tdestino.atendimento_procedimento_codigo\t\t\t\tAND\n\torigem.atendimento_procedimento_plano\t\t\t=\tdestino.atendimento_procedimento_plano\t\t\t\tAND\n\torigem.atendimento_procedimento_convenio\t\t=\tdestino.atendimento_procedimento_convenio\t\t\tAND\n\torigem.atendimento_material_medicamento_nome\t=\tdestino.atendimento_material_medicamento_nome\t\tAND\t\n\torigem.atendimento_procedimento_valor\t\t\t=\tdestino.atendimento_procedimento_valor\t\t\n\t\t)        \n\n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \n\ndestino.atendimento_codigo=origem.atendimento_codigo,\ndestino.agendamento_codigo=origem.agendamento_codigo,\ndestino.atendimento_turno=origem.atendimento_turno,\ndestino.atendimento_dia=origem.atendimento_dia,\ndestino.atendimento_mes=origem.atendimento_mes,\ndestino.atendimento_ano=origem.atendimento_ano,\ndestino.atendimento_usuario_cadastro=origem.atendimento_usuario_cadastro,\ndestino.atendimento_procedimento_empresa=origem.atendimento_procedimento_empresa,\ndestino.atendimento_procedimento_empresa_requisitante=origem.atendimento_procedimento_empresa_requisitante,\ndestino.atendimento_procedimento_profissional_nome=origem.atendimento_procedimento_profissional_nome,\ndestino.atendimento_procedimento_profissional_requisitante=origem.atendimento_procedimento_profissional_requisitante,\ndestino.atendimento_procedimento_especialidade_profissional_requisitante=origem.atendimento_procedimento_especialidade_profissional_requisitante,\ndestino.atendimento_procedimento_convenio=origem.atendimento_procedimento_convenio,\ndestino.atendimento_procedimento_plano=origem.atendimento_procedimento_plano,\ndestino.atendimento_procedimento_especialidade=origem.atendimento_procedimento_especialidade,\ndestino.atendimento_procedimento_nome=origem.atendimento_procedimento_nome,\ndestino.atendimento_procedimento_grupo=origem.atendimento_procedimento_grupo,\ndestino.atendimento_procedimento_valor=origem.atendimento_procedimento_valor,\ndestino.atendimento_procedimento_coparticipacao_valor=origem.atendimento_procedimento_coparticipacao_valor,\ndestino.atendimento_procedimento_filme_valor=origem.atendimento_procedimento_filme_valor,\ndestino.atendimento_material_medicamento_nome=origem.atendimento_material_medicamento_nome,\ndestino.atendimento_material_medicamento_valor=origem.atendimento_material_medicamento_valor,\ndestino.atendimento_material_medicamento_coparticipacao_valor=origem.atendimento_material_medicamento_coparticipacao_valor,\ndestino.atendimento_taxa_nome=origem.atendimento_taxa_nome,\ndestino.atendimento_taxa_valor=origem.atendimento_taxa_valor,\ndestino.atendimento_taxa_coparticipacao_valor=origem.atendimento_taxa_coparticipacao_valor,\ndestino.paciente_codigo=origem.paciente_codigo,\ndestino.paciente_nome=origem.paciente_nome,\ndestino.paciente_sexo=origem.paciente_sexo,\ndestino.paciente_faixa_idade=origem.paciente_faixa_idade,\ndestino.paciente_estado=origem.paciente_estado,\ndestino.paciente_cidade=origem.paciente_cidade,\ndestino.paciente_bairro=origem.paciente_bairro,\ndestino.atendimento_hora=origem.atendimento_hora,\ndestino.atendimento_diadasemana=origem.atendimento_diadasemana,\ndestino.atendimento_cid_primario=origem.atendimento_cid_primario,\ndestino.atendimento_cid_secundario=origem.atendimento_cid_secundario,\ndestino.atendimento_cid_consultorio=origem.atendimento_cid_consultorio,\ndestino.atendimento_tipo=origem.atendimento_tipo,\ndestino.atendimento_horainicio_recepcao=origem.atendimento_horainicio_recepcao,\ndestino.atendimento_horafim_recepcao=origem.atendimento_horafim_recepcao,\ndestino.atendimento_horainicio_consultorio=origem.atendimento_horainicio_consultorio,\ndestino.atendimento_horafim_consultorio=origem.atendimento_horafim_consultorio,\ndestino.atendimento_procedimento_codigo=origem.atendimento_procedimento_codigo,\ndestino.paciente_cep=origem.paciente_cep,\ndestino.atendimento_profissional_especialidade=origem.atendimento_profissional_especialidade,\ndestino.atendimento_previsao_valor_repasse_profissional=origem.atendimento_previsao_valor_repasse_profissional,\ndestino.atendimento_previsao_valor_repasse_clinica=origem.atendimento_previsao_valor_repasse_clinica,\ndestino.atendimento_passo=origem.atendimento_passo\n\n\n\n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.atendimento_codigo,\norigem.agendamento_codigo,\norigem.atendimento_turno,\norigem.atendimento_dia,\norigem.atendimento_mes,\norigem.atendimento_ano,\norigem.atendimento_usuario_cadastro,\norigem.atendimento_procedimento_empresa,\norigem.atendimento_procedimento_empresa_requisitante,\norigem.atendimento_procedimento_profissional_nome,\norigem.atendimento_procedimento_profissional_requisitante,\norigem.atendimento_procedimento_especialidade_profissional_requisitante,\norigem.atendimento_procedimento_convenio,\norigem.atendimento_procedimento_plano,\norigem.atendimento_procedimento_especialidade,\norigem.atendimento_procedimento_nome,\norigem.atendimento_procedimento_grupo,\norigem.atendimento_procedimento_valor,\norigem.atendimento_procedimento_coparticipacao_valor,\norigem.atendimento_procedimento_filme_valor,\norigem.atendimento_material_medicamento_nome,\norigem.atendimento_material_medicamento_valor,\norigem.atendimento_material_medicamento_coparticipacao_valor,\norigem.atendimento_taxa_nome,\norigem.atendimento_taxa_valor,\norigem.atendimento_taxa_coparticipacao_valor,\norigem.paciente_codigo,\norigem.paciente_nome,\norigem.paciente_sexo,\norigem.paciente_faixa_idade,\norigem.paciente_estado,\norigem.paciente_cidade,\norigem.paciente_bairro,\norigem.atendimento_hora,\norigem.atendimento_diadasemana,\norigem.atendimento_cid_primario,\norigem.atendimento_cid_secundario,\norigem.atendimento_cid_consultorio,\norigem.atendimento_tipo,\norigem.atendimento_horainicio_recepcao,\norigem.atendimento_horafim_recepcao,\norigem.atendimento_horainicio_consultorio,\norigem.atendimento_horafim_consultorio,\norigem.atendimento_procedimento_codigo,\norigem.paciente_cep,\norigem.atendimento_profissional_especialidade,\norigem.atendimento_previsao_valor_repasse_profissional,\norigem.atendimento_previsao_valor_repasse_clinica,\norigem.atendimento_passo\n\n); \n"
								}
							]
						}
					},
					{
						"name": "CONVENIO MERGE",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ATENDIMENTO MERGE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH CONV AS(\n\nSELECT DISTINCT\n    '40' AS ESTABELECIMENTO\n    ,'40|' + LTRIM(RTRIM(REPLACE(REPLACE(UPPER(ATENDIMENTO_PROCEDIMENTO_CONVENIO),' ',''),'-',''))) AS FK_CONVENIO\n    ,LTRIM(RTRIM(REPLACE(REPLACE(UPPER(ATENDIMENTO_PROCEDIMENTO_CONVENIO),' ',''),'-',''))) AS CD_CONVENIO\n    ,ATENDIMENTO_PROCEDIMENTO_CONVENIO AS DS_CONVENIO\n    ,CASE\n        WHEN UPPER(ATENDIMENTO_PROCEDIMENTO_CONVENIO) LIKE '%PARTICULAR%' THEN 'PARTICULAR'\n        WHEN UPPER(ATENDIMENTO_PROCEDIMENTO_CONVENIO) LIKE '%SUS%' THEN 'SUS'\n        ELSE 'CONVÊNIO'\n     END TP_CONVENIO\n    ,'0' AS CD_CGC\n        \nFROM dw.urobrasil_Atendimento\n\n)\n\nMERGE\t           \n\tDW.UROBRASIL_CONVENIO AS destino           \nUSING            \n\tCONV AS origem           \n           \n    ON\t(        \n        origem.FK_CONVENIO = destino.FK_CONVENIO\n\t\t)        \n\n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \nDESTINO.ESTABELECIMENTO = ORIGEM.ESTABELECIMENTO\n,DESTINO.FK_CONVENIO = ORIGEM.FK_CONVENIO\n,DESTINO.CD_CONVENIO = ORIGEM.CD_CONVENIO\n,DESTINO.DS_CONVENIO = ORIGEM.DS_CONVENIO\n,DESTINO.TP_CONVENIO = ORIGEM.TP_CONVENIO\n,DESTINO.CD_CGC = ORIGEM.CD_CGC\n\n\n\n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\nORIGEM.ESTABELECIMENTO\n,ORIGEM.FK_CONVENIO\n,ORIGEM.CD_CONVENIO\n,ORIGEM.DS_CONVENIO\n,ORIGEM.TP_CONVENIO\n,ORIGEM.CD_CGC\n); "
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Urobrasil_Agendamento')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_STG')]",
				"[concat(variables('factoryId'), '/datasets/Urobrasil_Agendamento_Diario')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Atendimento')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Atendimento_Diario')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Faturamento')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Faturamento_Diario')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Financeiro')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Financeiro_Diario')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Repasse')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Repasse_Diario')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Questionario')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Questionario_Diario')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_ContasPagarReceber')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_ContasPagarReceberDiarias')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Caixa')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Caixa_DIario')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Paciente')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Paciente_Diario')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Teleorientacao')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Teleorientacao_Diario')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Venda')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Venda_Diaria')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Profissional')]",
				"[concat(variables('factoryId'), '/datasets/UROBRASIL_Profissional_Diario')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL_DESTINO')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VISAO CENTER')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lista arquivos",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_HMAISDATADRIVEN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": "urobrasil"
								}
							},
							"fieldList": [
								"childItems",
								"itemType",
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filtro",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lista arquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista arquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endsWith(item().name, 'csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filtro",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filtro').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copia dados para a STG",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('Drop table stg.',activity('Lista arquivos').output.itemName)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_SQL_STG",
											"type": "DatasetReference",
											"parameters": {
												"SCHEMA": "stg",
												"TABELA": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Move arquivo para PROCESSADOS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "STG DW",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@concat(activity('Lista arquivos').output.itemName,'\\Processados')",
													"type": "Expression"
												},
												"File": {
													"value": "@concat(item().name,'-',utcnow())",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Apaga arquivo",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move arquivo para PROCESSADOS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "sv_hmaisbrasildatadriven",
												"type": "LinkedServiceReference"
											},
											"path": "ceop/logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "STG DW",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copia dados para a STG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SQL_DESTINO",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": "MERGE\t           \n\tdw.ortocity AS destino           \nUSING            \n\tstg.ortocity AS origem           \n           \n    ON(        \ndestino.CD_ESTABELECIMENTO\t\t= origem.CD_ESTABELECIMENTO AND\ndestino.DS_ESTABELECIMENTO\t\t= origem.DS_ESTABELECIMENTO AND\ndestino.NR_ATENDIMENTO\t\t\t= origem.NR_ATENDIMENTO AND\ndestino.NR_INTERNO_CONTA\t\t= origem.NR_INTERNO_CONTA AND\ndestino.CD_PESSOA_FISICA\t\t= origem.CD_PESSOA_FISICA AND\ndestino.CD_CONVENIO\t\t\t\t= origem.CD_CONVENIO AND\ndestino.CD_MEDICO_EXECUTANTE\t=\torigem.CD_MEDICO_EXECUTANTE \n)        \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \ndestino.CD_ESTABELECIMENTO=origem.CD_ESTABELECIMENTO ,\ndestino.DS_ESTABELECIMENTO=origem.DS_ESTABELECIMENTO ,\ndestino.NR_ATENDIMENTO=origem.NR_ATENDIMENTO ,\ndestino.NR_INTERNO_CONTA=origem.NR_INTERNO_CONTA ,\ndestino.CD_PESSOA_FISICA=origem.CD_PESSOA_FISICA ,\ndestino.NM_PESSOA_FISICA=origem.NM_PESSOA_FISICA ,\ndestino.DT_NASCIMENTO=origem.DT_NASCIMENTO ,\ndestino.CD_CONVENIO=origem.CD_CONVENIO ,\ndestino.DS_CONVENIO=origem.DS_CONVENIO ,\ndestino.CD_MEDICO_EXECUTANTE=origem.CD_MEDICO_EXECUTANTE ,\ndestino.NM_MEDICO_EXECUTANTE=origem.NM_MEDICO_EXECUTANTE ,\ndestino.CD_SETOR_EXECUTANTE=origem.CD_SETOR_EXECUTANTE ,\ndestino.DS_SETOR_EXECUTANTE=origem.DS_SETOR_EXECUTANTE ,\ndestino.DT_ENTRADA=origem.DT_ENTRADA ,\ndestino.CD_ITEM=origem.CD_ITEM ,\ndestino.DS_ITEM=origem.DS_ITEM ,\ndestino.DT_LANC_ITEM=origem.DT_LANC_ITEM ,\ndestino.QT=origem.QT ,\ndestino.VALOR=origem.VALOR \n\n\n  \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.CD_ESTABELECIMENTO,\norigem.DS_ESTABELECIMENTO,\norigem.NR_ATENDIMENTO,\norigem.NR_INTERNO_CONTA,\norigem.CD_PESSOA_FISICA,\norigem.NM_PESSOA_FISICA,\norigem.DT_NASCIMENTO,\norigem.CD_CONVENIO,\norigem.DS_CONVENIO,\norigem.CD_MEDICO_EXECUTANTE,\norigem.NM_MEDICO_EXECUTANTE,\norigem.CD_SETOR_EXECUTANTE,\norigem.DS_SETOR_EXECUTANTE,\norigem.DT_ENTRADA,\norigem.CD_ITEM,\norigem.DS_ITEM,\norigem.DT_LANC_ITEM,\norigem.QT,\norigem.VALOR\n); "
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/P&P"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN_BINARY')]",
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_STG')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL_DESTINO')]",
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VISAO_DF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "STG DW",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "API VisaoDF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "SQL_DESTINO",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "WITH TMP AS (\n    SELECT \n        A.NR_ATENDIMENTO\n        ,ROW_NUMBER() OVER(PARTITION BY A.NR_ATENDIMENTO, A.CD_ESTABELECIMENTO, A.CD_ITEM_UNICO, A.DT_ENTRADA ORDER BY A.DT_ENTRADA DESC) ID_LINHA\n    FROM STG.visaodf_prod A \n\n)\nDELETE FROM TMP WHERE ID_LINHA >= 2\n\nMERGE\t           \n\tdw.visaodf AS destino           \nUSING            \n\tSTG.visaodf_prod AS origem           \n           \n    ON\t(        \n\norigem.nr_atendimento\t\t\t=\tdestino.nr_atendimento\t\tAND\norigem.cd_estabelecimento\t\t=\tdestino.cd_estabelecimento\tAND\norigem.cd_item_unico \t\t\t=\tdestino.cd_item_unico\tAND\norigem.DT_ENTRADA               =   destino.DT_ENTRADA\n\t\t)        \n\n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET           \n\ndestino.NR_ATENDIMENTO=origem.NR_ATENDIMENTO,\ndestino.CD_ESTABELECIMENTO=origem.CD_ESTABELECIMENTO,\ndestino.DS_ESTABELECIMENTO=origem.DS_ESTABELECIMENTO,\ndestino.NT_INTERNO_CONTA=origem.NT_INTERNO_CONTA,\ndestino.CD_PESSOA_FISICA=origem.CD_PESSOA_FISICA,\ndestino.NM_PESSOA_FISICA=origem.NM_PESSOA_FISICA,\ndestino.DT_NASCIMENTO=origem.DT_NASCIMENTO,\ndestino.CNPJ_CONVENIO=origem.CNPJ_CONVENIO,\ndestino.CD_CONVENIO=origem.CD_CONVENIO,\ndestino.DS_CONVENIO=origem.DS_CONVENIO,\ndestino.CRM=origem.CRM,\ndestino.CD_MEDICO_EXECUTANTE=origem.CD_MEDICO_EXECUTANTE,\ndestino.NM_MEDICOEXECUTANTE=origem.NM_MEDICOEXECUTANTE,\ndestino.CD_SETOR_EXECUTANTE=origem.CD_SETOR_EXECUTANTE,\ndestino.DS_SETOR_EXECUTANTE=origem.DS_SETOR_EXECUTANTE,\ndestino.DT_ENTRADA=origem.DT_ENTRADA,\ndestino.COD_TUSS=origem.COD_TUSS,\ndestino.CD_ITEM_UNICO=origem.CD_ITEM_UNICO,\ndestino.CD_ITEM=origem.CD_ITEM,\ndestino.DS_ITEM=origem.DS_ITEM,\ndestino.CTP_ITEM=origem.CTP_ITEM,\ndestino.DTP_ITEM=origem.DTP_ITEM,\ndestino.QTD=origem.QTD,\ndestino.VALORUNITARIO=origem.VALORUNITARIO,\ndestino.VALOR=origem.VALOR\n\n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n\tVALUES (\norigem.NR_ATENDIMENTO,\norigem.CD_ESTABELECIMENTO,\norigem.DS_ESTABELECIMENTO,\norigem.NT_INTERNO_CONTA,\norigem.CD_PESSOA_FISICA,\norigem.NM_PESSOA_FISICA,\norigem.DT_NASCIMENTO,\norigem.CNPJ_CONVENIO,\norigem.CD_CONVENIO,\norigem.DS_CONVENIO,\norigem.CRM,\norigem.CD_MEDICO_EXECUTANTE,\norigem.NM_MEDICOEXECUTANTE,\norigem.CD_SETOR_EXECUTANTE,\norigem.DS_SETOR_EXECUTANTE,\norigem.DT_ENTRADA,\norigem.COD_TUSS,\norigem.CD_ITEM_UNICO,\norigem.CD_ITEM,\norigem.DS_ITEM,\norigem.CTP_ITEM,\norigem.DTP_ITEM,\norigem.QTD,\norigem.VALORUNITARIO,\norigem.VALOR\n); "
								}
							]
						}
					},
					{
						"name": "API VisaoDF",
						"type": "DatabricksNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:25:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Visao_DF/API_PROD_VISAODF"
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricks",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dimensao Convenio",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "STG DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "sp_carga_visaodf_tbl_convenio"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Dimensao Procedimento",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "STG DW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "SP_CARGA_TBL_VISAODF_CAD_PROCEDIMENTO"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/2_Pipeline_Cargas_DW"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL_DESTINO')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDatabricks')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VISAO_DF_LEGADO')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "VISAODF_LEG_FPA",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "CSV_VISAODF_LEG_FPA",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "AZSQL_DINAMICO",
								"type": "DatasetReference",
								"parameters": {
									"schema_destino": "dw",
									"tabela_destino": "visaodf_leg_fpa"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/P&P"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/CSV_VISAODF_LEG_FPA')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_DINAMICO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VISAO_DF_STORAGE_ACCOUNT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lista arquivos",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_HMAISDATADRIVEN_BINARY",
								"type": "DatasetReference",
								"parameters": {
									"FileSystem": "visaodf"
								}
							},
							"fieldList": [
								"childItems",
								"itemType",
								"itemName",
								"lastModified"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "Filtro",
						"type": "Filter",
						"dependsOn": [
							{
								"activity": "Lista arquivos",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lista arquivos').output.childItems",
								"type": "Expression"
							},
							"condition": {
								"value": "@endsWith(item().name, 'csv')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Filtro",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Filtro').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copia dados para a STG",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"preCopyScript": {
												"value": "@{concat('Drop table stg.',activity('Lista arquivos').output.itemName)}",
												"type": "Expression"
											},
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AZ_SQL_STG",
											"type": "DatasetReference",
											"parameters": {
												"SCHEMA": "stg",
												"TABELA": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Move arquivo para PROCESSADOS",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "STG DW",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@concat(activity('Lista arquivos').output.itemName,'\\Processados')",
													"type": "Expression"
												},
												"File": {
													"value": "@concat(item().name,'-',utcnow())",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Apaga arquivo",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "Move arquivo para PROCESSADOS",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_HMAISDATADRIVEN",
											"type": "DatasetReference",
											"parameters": {
												"Filesystem": {
													"value": "@activity('Lista arquivos').output.itemName",
													"type": "Expression"
												},
												"File": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "sv_hmaisbrasildatadriven",
												"type": "LinkedServiceReference"
											},
											"path": "ceop/logs"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										}
									}
								},
								{
									"name": "STG DW",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copia dados para a STG",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SQL_DESTINO",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": "MERGE               \n    dw.visaodf AS destino           \nUSING            \n    stg.visaodf AS ORIGEM           \n           \n    ON(    \n    destino.NR_ATENDIMENTO\t\t= origem.NR_ATENDIMENTO\t\t\tAND\n    destino.CD_ESTABELECIMENTO\t= origem.CD_ESTABELECIMENTO\t\tAND\n    destino.NT_INTERNO_CONTA\t= origem.NT_INTERNO_CONTA\t\tAND\n    destino.CD_PESSOA_FISICA\t= origem.CD_PESSOA_FISICA\t\tAND\n\tdestino.cd_convenio\t\t\t= origem.cd_convenio\t\t\tAND\n\tdestino.cd_item_unico\t\t= origem.cd_item_unico\t\t\tAND\n\tdestino.dt_entrada\t\t\t= origem.dt_entrada\t\t\t\n\n\n)        \n--Quando os registros são correspondidos, atualize os registros se houver alguma alteração           \nWHEN MATCHED            \nTHEN UPDATE SET         \n\ndestino.NR_ATENDIMENTO\t\t\t= origem.NR_ATENDIMENTO,\ndestino.CD_ESTABELECIMENTO\t\t= origem.CD_ESTABELECIMENTO,\ndestino.DS_ESTABELECIMENTO\t\t= origem.DS_ESTABELECIMENTO,\ndestino.NT_INTERNO_CONTA\t\t= origem.NT_INTERNO_CONTA,\ndestino.CD_PESSOA_FISICA\t\t= origem.CD_PESSOA_FISICA,\ndestino.NM_PESSOA_FISICA\t\t= origem.NM_PESSOA_FISICA,\ndestino.DT_NASCIMENTO\t\t\t= origem.DT_NASCIMENTO,\ndestino.CNPJ_CONVENIO\t\t\t= origem.CNPJ_CONVENIO,\ndestino.CD_CONVENIO\t\t\t\t= origem.CD_CONVENIO,\ndestino.DS_CONVENIO\t\t\t\t= origem.DS_CONVENIO,\ndestino.CRM\t\t\t\t\t\t= origem.CRM,\ndestino.CD_MEDICO_EXECUTANTE\t= origem.CD_MEDICO_EXECUTANTE,\ndestino.NM_MEDICOEXECUTANTE\t\t= origem.NM_MEDICOEXECUTANTE,\ndestino.CD_SETOR_EXECUTANTE\t\t= origem.CD_SETOR_EXECUTANTE,\ndestino.DS_SETOR_EXECUTANTE\t\t= origem.DS_SETOR_EXECUTANTE,\ndestino.DT_ENTRADA\t\t\t\t= origem.DT_ENTRADA,\ndestino.COD_TUSS\t\t\t\t= origem.COD_TUSS,\ndestino.CD_ITEM_UNICO\t\t\t= origem.CD_ITEM_UNICO,\ndestino.CD_ITEM\t\t\t\t\t= origem.CD_ITEM,\ndestino.DS_ITEM\t\t\t\t\t= origem.DS_ITEM,\ndestino.CTP_ITEM\t\t\t\t= origem.CTP_ITEM,\ndestino.DTP_ITEM\t\t\t\t= origem.DTP_ITEM,\ndestino.DT_LANC_ITEM\t\t\t= origem.DT_LANC_ITEM,\ndestino.QTD\t\t\t\t\t\t= origem.QTD,\ndestino.VALORUNITARIO\t\t\t= origem.VALORUNITARIO,\ndestino.VALOR\t\t\t\t\t= origem.VALOR\n\n \n--Quando nenhum registro é correspondido, insira os registros de entrada da tabela de origem para a tabela de destino           \nWHEN NOT MATCHED BY TARGET            \nTHEN INSERT            \n    VALUES (\n\norigem.NR_ATENDIMENTO,\norigem.CD_ESTABELECIMENTO,\norigem.DS_ESTABELECIMENTO,\norigem.NT_INTERNO_CONTA,\norigem.CD_PESSOA_FISICA,\norigem.NM_PESSOA_FISICA,\norigem.DT_NASCIMENTO,\norigem.CNPJ_CONVENIO,\norigem.CD_CONVENIO,\norigem.DS_CONVENIO,\norigem.CRM,\norigem.CD_MEDICO_EXECUTANTE,\norigem.NM_MEDICOEXECUTANTE,\norigem.CD_SETOR_EXECUTANTE,\norigem.DS_SETOR_EXECUTANTE,\norigem.DT_ENTRADA,\norigem.COD_TUSS,\norigem.CD_ITEM_UNICO,\norigem.CD_ITEM,\norigem.DS_ITEM,\norigem.CTP_ITEM,\norigem.DTP_ITEM,\norigem.DT_LANC_ITEM,\norigem.QTD,\norigem.VALORUNITARIO,\norigem.VALOR\n\n\n);\n"
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Data Warehouse/P&P"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN_BINARY')]",
				"[concat(variables('factoryId'), '/datasets/DS_HMAISDATADRIVEN')]",
				"[concat(variables('factoryId'), '/datasets/AZ_SQL_STG')]",
				"[concat(variables('factoryId'), '/linkedServices/SQL_DESTINO')]",
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Workflows Requestia')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Extrai informações específicas para serem processadas nos workflows do Office Flow",
				"activities": [
					{
						"name": "Extract CAPEX",
						"description": "Copy NFD tickets to REQUESTIA_CAPEXNFD table, solving timeout in Microsoft Flow that send weekly mail from sergio.queiroz@opty.com.br account",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_EXTRACTCAPEXREQUESTS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Extract TISS",
						"description": "Copy TISS tickets to specific table, solving timeout in Microsoft Flow that send weekly mail from sergio.queiroz@opty.com.br account",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Start",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[sp_EXTRACTTISSREQUESTS]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Start",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Apoio"
				},
				"annotations": [],
				"lastPublishTime": "2019-10-09T15:23:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZSQL_DINAMICO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_destino": {
						"type": "string"
					},
					"tabela_destino": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_destino",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tabela_destino",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZSQL_TB_Agendamentos_Futuros_Unidade')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Retornos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_CONVENIO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CNPJ",
						"type": "varchar"
					},
					{
						"name": "DATA_AGENDA",
						"type": "date"
					},
					{
						"name": "HORA_AGENDA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "CD_TIPO_AGENDA",
						"type": "varchar"
					},
					{
						"name": "NM_PACIENTE",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO_PRINC",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO_ADIC",
						"type": "varchar"
					},
					{
						"name": "IE_QUANTIDADE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_USUARIO",
						"type": "varchar"
					},
					{
						"name": "MEDICO",
						"type": "varchar"
					},
					{
						"name": "SIGLA_UNIDADE",
						"type": "varchar"
					},
					{
						"name": "MARCA",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Agendamentos_Futuros_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZSQL_TB_NC_AgentesPorDia')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/Azure"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Usuario",
						"type": "varchar"
					},
					{
						"name": "Intervalo",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Atendidas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Recusas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Recebidas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Internas_Recebidas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Transferencias",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Efetuadas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Efetuadas_Tratados",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Taxa_de_Contato",
						"type": "varchar"
					},
					{
						"name": "Tempo_Atendidas",
						"type": "varchar"
					},
					{
						"name": "Tempo_Internas_Recebidas",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Efetuadas",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Medio_Falado",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Total_Falado",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Toque_Agente",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Toque_Cliente",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Pausa",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Estouro",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Disponivel",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Indisponivel",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Logado",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Deslogado",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Falado_x_Logado",
						"type": "time",
						"scale": 7
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[Nexcore_AgentesPorDia]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZSQL_TB_NC_AgentesPorDia_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/Azure"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Usuario",
						"type": "varchar"
					},
					{
						"name": "Intervalo",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Atendidas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Recusas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Recebidas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Internas_Recebidas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Transferencias",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Efetuadas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Efetuadas_Tratados",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Taxa_de_Contato",
						"type": "varchar"
					},
					{
						"name": "Tempo_Atendidas",
						"type": "varchar"
					},
					{
						"name": "Tempo_Internas_Recebidas",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Efetuadas",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Medio_Falado",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Total_Falado",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Toque_Agente",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Toque_Cliente",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Pausa",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Estouro",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Disponivel",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Indisponivel",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Logado",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Deslogado",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Falado_x_Logado",
						"type": "time",
						"scale": 7
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[Nexcore_AgentesPorDia_temp]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZSQL_TB_NC_AgentesPorHora')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/Azure"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Usuario",
						"type": "varchar"
					},
					{
						"name": "Intervalo",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Atendidas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Recusas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Recebidas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Internas_Recebidas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Transferencias",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Efetuadas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Efetuadas_Tratados",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Taxa_de_Contato",
						"type": "varchar"
					},
					{
						"name": "Tempo_Atendidas",
						"type": "varchar"
					},
					{
						"name": "Tempo_Internas_Recebidas",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Efetuadas",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Medio_Falado",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Total_Falado",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Toque_Agente",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Toque_Cliente",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Pausa",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Estouro",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Disponivel",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Indisponivel",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Logado",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Deslogado",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Falado_x_Logado",
						"type": "time",
						"scale": 7
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[Nexcore_AgentesPorHora]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZSQL_TB_NC_AgentesPorHora_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/Azure"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Usuario",
						"type": "varchar"
					},
					{
						"name": "Intervalo",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Atendidas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Recusas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Recebidas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Internas_Recebidas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Transferencias",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Efetuadas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Efetuadas_Tratados",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Taxa_de_Contato",
						"type": "varchar"
					},
					{
						"name": "Tempo_Atendidas",
						"type": "varchar"
					},
					{
						"name": "Tempo_Internas_Recebidas",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Efetuadas",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Medio_Falado",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Total_Falado",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Toque_Agente",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Toque_Cliente",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Pausa",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Estouro",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Disponivel",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Indisponivel",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Logado",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Tempo_Deslogado",
						"type": "time",
						"scale": 7
					},
					{
						"name": "Falado_x_Logado",
						"type": "time",
						"scale": 7
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[Nexcore_AgentesPorHora_temp]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZSQL_TB_NC_BilheteLigacoes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Tabela Azure SQL Server Procedimentos.dbo.BilheteLigacoes",
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/Azure"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DATA",
						"type": "date"
					},
					{
						"name": "HORA",
						"type": "time",
						"scale": 7
					},
					{
						"name": "USUARIO",
						"type": "varchar"
					},
					{
						"name": "TIPO",
						"type": "varchar"
					},
					{
						"name": "ORIGEM",
						"type": "varchar"
					},
					{
						"name": "DESTINO",
						"type": "varchar"
					},
					{
						"name": "STATUS",
						"type": "varchar"
					},
					{
						"name": "CENTRO_DE_CUSTO",
						"type": "varchar"
					},
					{
						"name": "TEMPO_TARIFADO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TEMPO_DECORRIDO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CAMPANHA",
						"type": "varchar"
					},
					{
						"name": "FILA",
						"type": "varchar"
					},
					{
						"name": "UNIQUE_ID",
						"type": "float",
						"precision": 15
					},
					{
						"name": "LINKED_ID",
						"type": "float",
						"precision": 15
					},
					{
						"name": "MARCA",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[Nexcore_BilheteLigacoes]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZSQL_TB_NC_BilheteLigacoes_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Tabela Azure SQL Server Procedimentos.dbo.BilheteLigacoes",
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/Azure"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DATA",
						"type": "date"
					},
					{
						"name": "HORA",
						"type": "time",
						"scale": 7
					},
					{
						"name": "USUARIO",
						"type": "varchar"
					},
					{
						"name": "TIPO",
						"type": "varchar"
					},
					{
						"name": "ORIGEM",
						"type": "varchar"
					},
					{
						"name": "DESTINO",
						"type": "varchar"
					},
					{
						"name": "STATUS",
						"type": "varchar"
					},
					{
						"name": "CENTRO_DE_CUSTO",
						"type": "varchar"
					},
					{
						"name": "TEMPO_TARIFADO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TEMPO_DECORRIDO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CAMPANHA",
						"type": "varchar"
					},
					{
						"name": "FILA",
						"type": "varchar"
					},
					{
						"name": "UNIQUE_ID",
						"type": "float",
						"precision": 15
					},
					{
						"name": "LINKED_ID",
						"type": "float",
						"precision": 15
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[Nexcore_BilheteLigacoes_temp]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZSQL_TB_NC_FilasPorHoras')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/Azure"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Fila",
						"type": "varchar"
					},
					{
						"name": "Intervalo",
						"type": "varchar"
					},
					{
						"name": "Atendidas_Ate_NS",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Atendidas_Apos_NS",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Atendidas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Abandonos_Ate_NS",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Abandonos_Apos_NS",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Abandonos_Anuncio_Inicial",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Abandonos",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Roteamentos_Timeout",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Roteamentos_Fila_Cheia",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Roteamentos_Fila_Vazia",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Roteamentos_Fila_Sem_Ags_Disp",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Roteamentos_Caixa_Postal",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Roteamentos",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Fora_Horario_Antes",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Fora_Horario_Intervalo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Fora_Horario_Depois",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Fora_Horario",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Total_Recebidas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Callback_Tratados",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Callback_Nao_Tratados",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Callback",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Tempo_Toque",
						"type": "varchar"
					},
					{
						"name": "Tempo_Falado",
						"type": "varchar"
					},
					{
						"name": "Tempo_Medio_Falado",
						"type": "varchar"
					},
					{
						"name": "Tempo_Medio_Pausa_ACW",
						"type": "varchar"
					},
					{
						"name": "Tempo_Medio_Produtivo_AHT",
						"type": "varchar"
					},
					{
						"name": "Nivel_Servico",
						"type": "varchar"
					},
					{
						"name": "Taxa_Atendimento",
						"type": "varchar"
					},
					{
						"name": "Taxa_Abandono",
						"type": "varchar"
					},
					{
						"name": "Tempo_Medio_Espera",
						"type": "varchar"
					},
					{
						"name": "Tempo_Medio_para_Atender",
						"type": "varchar"
					},
					{
						"name": "Tempo_Total_para_Atender",
						"type": "varchar"
					},
					{
						"name": "Tempo_Medio_para_Abandono",
						"type": "varchar"
					},
					{
						"name": "Tempo_Total_para_Abandono",
						"type": "varchar"
					},
					{
						"name": "Tempo_Total_Espera",
						"type": "varchar"
					},
					{
						"name": "Agentes_Logados_Minimo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Agentes_Logados_Maximo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Chamadas_em_Espera_Minimo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Chamadas_em_Espera_Medio",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Chamadas_em_Espera_Maximo",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[Nexcore_FilasPorHoras]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZSQL_TB_NC_FilasPorHoras_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/Azure"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Fila",
						"type": "varchar"
					},
					{
						"name": "Intervalo",
						"type": "varchar"
					},
					{
						"name": "Atendidas_Ate_NS",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Atendidas_Apos_NS",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Atendidas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Abandonos_Ate_NS",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Abandonos_Apos_NS",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Abandonos_Anuncio_Inicial",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Abandonos",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Roteamentos_Timeout",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Roteamentos_Fila_Cheia",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Roteamentos_Fila_Vazia",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Roteamentos_Fila_Sem_Ags_Disp",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Roteamentos_Caixa_Postal",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Roteamentos",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Fora_Horario_Antes",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Fora_Horario_Intervalo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Fora_Horario_Depois",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Fora_Horario",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Total_Recebidas",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Callback_Tratados",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Callback_Nao_Tratados",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Callback",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Tempo_Toque",
						"type": "varchar"
					},
					{
						"name": "Tempo_Falado",
						"type": "varchar"
					},
					{
						"name": "Tempo_Medio_Falado",
						"type": "varchar"
					},
					{
						"name": "Tempo_Medio_Pausa_ACW",
						"type": "varchar"
					},
					{
						"name": "Tempo_Medio_Produtivo_AHT",
						"type": "varchar"
					},
					{
						"name": "Nivel_Servico",
						"type": "varchar"
					},
					{
						"name": "Taxa_Atendimento",
						"type": "varchar"
					},
					{
						"name": "Taxa_Abandono",
						"type": "varchar"
					},
					{
						"name": "Tempo_Medio_Espera",
						"type": "varchar"
					},
					{
						"name": "Tempo_Medio_para_Atender",
						"type": "varchar"
					},
					{
						"name": "Tempo_Total_para_Atender",
						"type": "varchar"
					},
					{
						"name": "Tempo_Medio_para_Abandono",
						"type": "varchar"
					},
					{
						"name": "Tempo_Total_para_Abandono",
						"type": "varchar"
					},
					{
						"name": "Tempo_Total_Espera",
						"type": "varchar"
					},
					{
						"name": "Agentes_Logados_Minimo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Agentes_Logados_Maximo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Chamadas_em_Espera_Minimo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Chamadas_em_Espera_Medio",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Chamadas_em_Espera_Maximo",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[Nexcore_FilasPorHoras_temp]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZSQL_TB_Pacientes_Unidade')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Retornos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cd_pessoa_fisica",
						"type": "int",
						"precision": 10
					},
					{
						"name": "nm_pessoa_fisica",
						"type": "varchar"
					},
					{
						"name": "nr_cpf",
						"type": "varchar"
					},
					{
						"name": "dt_nascimento",
						"type": "date"
					},
					{
						"name": "nr_telefone_celular",
						"type": "varchar"
					},
					{
						"name": "nr_telefone",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Pacientes_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZSQL_TB_Ret_Agendamentos_Futuros_Unidade')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Retornos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_CONVENIO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DATA_AGENDA",
						"type": "date"
					},
					{
						"name": "HORA_AGENDA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "IE_TIPO_AGENDA",
						"type": "varchar"
					},
					{
						"name": "NM_MEDICO",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Ret_Agendamentos_Futuros_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZSQL_TB_Ret_Atendimentos_Unidade')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Retornos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "NR_ATENDIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_MEDICO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DT_ENTRADA",
						"type": "date"
					},
					{
						"name": "CD_ESTABELECIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_CGC",
						"type": "varchar"
					},
					{
						"name": "NM_MEDICO",
						"type": "varchar"
					},
					{
						"name": "NM_FANTASIA_ESTAB",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Ret_Atendimentos_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZSQL_TB_Ret_Consulta_Oft_Unidade')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Retornos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "NR_SEQUENCIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DT_ATUALIZACAO",
						"type": "date"
					},
					{
						"name": "NR_ATENDIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_MEDICO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_MEDICO",
						"type": "varchar"
					},
					{
						"name": "DS_RETORNO",
						"type": "varchar"
					},
					{
						"name": "DS_CONDUTA",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Ret_Consulta_Oft_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZSQL_TB_Ret_Pacientes_unidade')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Retornos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ULTIMO_ATENDIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_PESSOA_FISICA",
						"type": "varchar"
					},
					{
						"name": "NR_TELEFONE_CELULAR",
						"type": "varchar"
					},
					{
						"name": "NR_TELEFONE",
						"type": "varchar"
					},
					{
						"name": "DS_EMAIL",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Ret_Pacientes_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZSQL_TB_Zero_Faltas')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Zero Faltas"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "id_compromisso",
						"type": "int",
						"precision": 10
					},
					{
						"name": "id_cliente",
						"type": "int",
						"precision": 10
					},
					{
						"name": "nomepaciente",
						"type": "varchar"
					},
					{
						"name": "dtnascimento",
						"type": "date"
					},
					{
						"name": "celular",
						"type": "varchar"
					},
					{
						"name": "email",
						"type": "varchar"
					},
					{
						"name": "idconvenio",
						"type": "int",
						"precision": 10
					},
					{
						"name": "convenio",
						"type": "int",
						"precision": 10
					},
					{
						"name": "cd_plano",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ds_plano",
						"type": "varchar"
					},
					{
						"name": "datacompromisso",
						"type": "date"
					},
					{
						"name": "horacompromisso",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "id_status",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ds_status",
						"type": "varchar"
					},
					{
						"name": "cd_agenda",
						"type": "int",
						"precision": 10
					},
					{
						"name": "agenda",
						"type": "varchar"
					},
					{
						"name": "cd_procedimento",
						"type": "int",
						"precision": 10
					},
					{
						"name": "procedimento",
						"type": "varchar"
					},
					{
						"name": "id_empresa",
						"type": "int",
						"precision": 10
					},
					{
						"name": "empresa",
						"type": "varchar"
					},
					{
						"name": "id_unidade",
						"type": "int",
						"precision": 10
					},
					{
						"name": "unidade",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Projesi_Zero_Faltas"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_CARE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atendimentos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "ptk_care"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_CSV_CONVENIO_DEPARA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse/DEPARA"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CONVENIO",
						"type": "nvarchar"
					},
					{
						"name": "CONVENIO_DEPARA",
						"type": "nvarchar"
					},
					{
						"name": "MODALIDADE",
						"type": "nvarchar"
					},
					{
						"name": "TP_CONVENIO",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "depara_sys_convenio"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_CSV_DEPARA_PROCEDIMENTO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse/DEPARA"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cod_sys",
						"type": "varchar"
					},
					{
						"name": "nm_sys",
						"type": "varchar"
					},
					{
						"name": "Codigo",
						"type": "varchar"
					},
					{
						"name": "Descricao",
						"type": "varchar"
					},
					{
						"name": "Categoria",
						"type": "varchar"
					},
					{
						"name": "Categoria_Aux",
						"type": "nvarchar"
					},
					{
						"name": "Classe",
						"type": "varchar"
					},
					{
						"name": "Especialidade",
						"type": "varchar"
					},
					{
						"name": "Procedimento",
						"type": "varchar"
					},
					{
						"name": "Patologia",
						"type": "varchar"
					},
					{
						"name": "DT_ATUALIZACAO",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "depara_sys"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_DIM_CNPJ')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CNPJ"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dw",
					"table": "DimConvenioCGC"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_ESTOQUE_POSICAO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Estoque"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "estoque_posicao"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_EXCEL_CIDS_GRUPO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dw",
					"table": "TBL_CIDs_GRUPO"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_MOVIMENTO_ESTOQUE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Estoque"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "movimento_estoque"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_OUT_CNPJ_CONVENIO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CNPJ"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "BI_CNPJ_CONVENIO"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_PROD_DIARIA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Producao Diaria"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID_SYSTEM",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_ESTABELECIMENTO",
						"type": "char"
					},
					{
						"name": "DS_ESTABELECIMENTO",
						"type": "varchar"
					},
					{
						"name": "DT_ENTRADA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DT_LANCAMENTO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "NR_ATENDIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NR_INTERNO_CONTA",
						"type": "varchar"
					},
					{
						"name": "CGC_CONVENIO",
						"type": "varchar"
					},
					{
						"name": "CD_CONVENIO",
						"type": "char"
					},
					{
						"name": "DS_CONVENIO",
						"type": "varchar"
					},
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_PACIENTE",
						"type": "char"
					},
					{
						"name": "CD_MEDICO_SOL",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MEDICO_SOLICITANTE",
						"type": "char"
					},
					{
						"name": "CD_MEDICO_EXECUTANTE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MEDICO_EXECUTANTE",
						"type": "char"
					},
					{
						"name": "MEDICO_RESPONSAVEL",
						"type": "char"
					},
					{
						"name": "MEDICO_ATENDIMENTO",
						"type": "char"
					},
					{
						"name": "CD_SETOR_ATENDIMENTO",
						"type": "char"
					},
					{
						"name": "DS_SETOR_ATENDIMENTO",
						"type": "char"
					},
					{
						"name": "NR_SEQUENCIA",
						"type": "decimal",
						"precision": 18,
						"scale": 0
					},
					{
						"name": "NR_PROC_INTERNO",
						"type": "char"
					},
					{
						"name": "DS_PROC_INTERNO",
						"type": "char"
					},
					{
						"name": "CD_PROCEDIMENTO",
						"type": "char"
					},
					{
						"name": "DS_PROCEDIMENTO",
						"type": "char"
					},
					{
						"name": "DS_CLASSIF_PROCEDIMENTO",
						"type": "varchar"
					},
					{
						"name": "CD_PROCEDENCIA",
						"type": "char"
					},
					{
						"name": "QTD_ITEM",
						"type": "decimal",
						"precision": 4,
						"scale": 0
					},
					{
						"name": "VL_ITEM_ORIGINAL",
						"type": "float",
						"precision": 15
					},
					{
						"name": "VL_ITEM",
						"type": "float",
						"precision": 15
					},
					{
						"name": "VL_HM",
						"type": "float",
						"precision": 15
					},
					{
						"name": "PERC_DESCONTO",
						"type": "decimal",
						"precision": 27,
						"scale": 15
					},
					{
						"name": "DT_ATUALIZACAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "aux_prod_diaria"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_P_REPASSE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "parametro_repasse_pg"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_Plan_Recebimento')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "plan_recebimento_cta_receber"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_STG')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SCHEMA": {
						"type": "string"
					},
					"TABELA": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SCHEMA",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TABELA",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Agenda')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atendimentos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CD_AGENDA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_AGENDA",
						"type": "varchar"
					},
					{
						"name": "CD_TIPO_AGENDA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_CGC",
						"type": "varchar"
					},
					{
						"name": "DS_AREA_ATUACAO",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Agenda_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Agendamento')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atendimentos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_CONVENIO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CNPJ",
						"type": "varchar"
					},
					{
						"name": "DATA_AGENDA",
						"type": "date"
					},
					{
						"name": "HORA_AGENDA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TIPO_AGENDA",
						"type": "varchar"
					},
					{
						"name": "NM_PACIENTE",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO_PRINC",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO_ADIC",
						"type": "varchar"
					},
					{
						"name": "IE_QUANTIDADE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_USUARIO",
						"type": "varchar"
					},
					{
						"name": "NM_MEDICO",
						"type": "varchar"
					},
					{
						"name": "SIGLA_UNIDADE",
						"type": "varchar"
					},
					{
						"name": "MARCA",
						"type": "varchar"
					},
					{
						"name": "STATUS_AGENDA",
						"type": "varchar"
					},
					{
						"name": "NR_ATENDIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NR_SEQUENCIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ID",
						"type": "varchar"
					},
					{
						"name": "CD_PROCEDENCIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_PROCEDENCIA",
						"type": "varchar"
					},
					{
						"name": "DT_AGENDAMENTO",
						"type": "date"
					},
					{
						"name": "DIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MES",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ANO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_AGRUPAMENTO",
						"type": "varchar"
					},
					{
						"name": "CD_MOTIVO_CANCELAMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_MOTIVO_CANCELAMENTO",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Agendamento_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Agendamento_Cirurgia_Unidade')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Cirurgias"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DT_AGENDA",
						"type": "date"
					},
					{
						"name": "CD_AGENDA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_PESSOA_FISICA",
						"type": "varchar"
					},
					{
						"name": "DS_AUTORIZACAO",
						"type": "varchar"
					},
					{
						"name": "PROCEDIMENTO",
						"type": "varchar"
					},
					{
						"name": "NR_CIRURGIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "IE_LADO",
						"type": "char"
					},
					{
						"name": "CD_CONVENIO",
						"type": "varchar"
					},
					{
						"name": "DS_UNIDADE",
						"type": "varchar"
					},
					{
						"name": "CNPJ",
						"type": "varchar"
					},
					{
						"name": "BASE",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Agendamento_Cirurgia_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Agendamento_Cirurgias')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atendimentos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_CONVENIO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CNPJ",
						"type": "varchar"
					},
					{
						"name": "DATA_AGENDA",
						"type": "date"
					},
					{
						"name": "HORA_AGENDA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TIPO_AGENDA",
						"type": "varchar"
					},
					{
						"name": "NM_PACIENTE",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO_PRINC",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO_ADIC",
						"type": "varchar"
					},
					{
						"name": "IE_QUANTIDADE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_USUARIO",
						"type": "varchar"
					},
					{
						"name": "NM_MEDICO",
						"type": "varchar"
					},
					{
						"name": "SIGLA_UNIDADE",
						"type": "varchar"
					},
					{
						"name": "MARCA",
						"type": "varchar"
					},
					{
						"name": "STATUS_AGENDA",
						"type": "varchar"
					},
					{
						"name": "NR_ATENDIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NR_SEQUENCIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ID",
						"type": "varchar"
					},
					{
						"name": "CD_PROCEDENCIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_PROCEDENCIA",
						"type": "varchar"
					},
					{
						"name": "DT_AGENDAMENTO",
						"type": "date"
					},
					{
						"name": "DIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MES",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ANO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_AGRUPAMENTO",
						"type": "varchar"
					},
					{
						"name": "CD_MOTIVO_CANCELAMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_MOTIVO_CANCELAMENTO",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Agendamento_Exame_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Agendamento_Exames')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atendimentos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_CONVENIO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CNPJ",
						"type": "varchar"
					},
					{
						"name": "DATA_AGENDA",
						"type": "date"
					},
					{
						"name": "HORA_AGENDA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TIPO_AGENDA",
						"type": "varchar"
					},
					{
						"name": "NM_PACIENTE",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO_PRINC",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO_ADIC",
						"type": "varchar"
					},
					{
						"name": "IE_QUANTIDADE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_USUARIO",
						"type": "varchar"
					},
					{
						"name": "NM_MEDICO",
						"type": "varchar"
					},
					{
						"name": "SIGLA_UNIDADE",
						"type": "varchar"
					},
					{
						"name": "MARCA",
						"type": "varchar"
					},
					{
						"name": "STATUS_AGENDA",
						"type": "varchar"
					},
					{
						"name": "NR_ATENDIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NR_SEQUENCIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ID",
						"type": "varchar"
					},
					{
						"name": "CD_PROCEDENCIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_PROCEDENCIA",
						"type": "varchar"
					},
					{
						"name": "DT_AGENDAMENTO",
						"type": "date"
					},
					{
						"name": "DIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MES",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ANO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_AGRUPAMENTO",
						"type": "varchar"
					},
					{
						"name": "CD_MOTIVO_CANCELAMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_MOTIVO_CANCELAMENTO",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Agendamento_Exame_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Agendamento_Livre')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atendimentos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CNPJ",
						"type": "varchar"
					},
					{
						"name": "DATA_AGENDA",
						"type": "date"
					},
					{
						"name": "HORA_AGENDA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TIPO_AGENDA",
						"type": "varchar"
					},
					{
						"name": "STATUS_AGENDA",
						"type": "varchar"
					},
					{
						"name": "NR_SEQUENCIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MES",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ANO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_CLASSIFICACAO",
						"type": "varchar"
					},
					{
						"name": "DS_AGRUPAMENTO",
						"type": "varchar"
					},
					{
						"name": "CD_AGENDA",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Agendamento_Livres_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Agendamento_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atendimentos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_CONVENIO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CNPJ",
						"type": "varchar"
					},
					{
						"name": "DATA_AGENDA",
						"type": "date"
					},
					{
						"name": "HORA_AGENDA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "TIPO_AGENDA",
						"type": "varchar"
					},
					{
						"name": "NM_PACIENTE",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO_PRINC",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO_ADIC",
						"type": "varchar"
					},
					{
						"name": "IE_QUANTIDADE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_USUARIO",
						"type": "varchar"
					},
					{
						"name": "NM_MEDICO",
						"type": "varchar"
					},
					{
						"name": "SIGLA_UNIDADE",
						"type": "varchar"
					},
					{
						"name": "MARCA",
						"type": "varchar"
					},
					{
						"name": "STATUS_AGENDA",
						"type": "varchar"
					},
					{
						"name": "NR_ATENDIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NR_SEQUENCIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ID",
						"type": "varchar"
					},
					{
						"name": "CD_PROCEDENCIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_PROCEDENCIA",
						"type": "varchar"
					},
					{
						"name": "DT_AGENDAMENTO",
						"type": "date"
					},
					{
						"name": "DIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MES",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ANO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_AGRUPAMENTO",
						"type": "varchar"
					},
					{
						"name": "CD_MOTIVO_CANCELAMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_MOTIVO_CANCELAMENTO",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Agendamento_Unidade_Temp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Agendamentos_Livres_Unidade')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atendimentos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_CONVENIO",
						"type": "varchar"
					},
					{
						"name": "CNPJ",
						"type": "varchar"
					},
					{
						"name": "DATA_AGENDA",
						"type": "date"
					},
					{
						"name": "HORA_AGENDA",
						"type": "time",
						"scale": 7
					},
					{
						"name": "TIPO_AGENDA",
						"type": "varchar"
					},
					{
						"name": "NM_PACIENTE",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO_PRINC",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO_ADIC",
						"type": "varchar"
					},
					{
						"name": "IE_QUANTIDADE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_USUARIO",
						"type": "varchar"
					},
					{
						"name": "NM_MEDICO",
						"type": "varchar"
					},
					{
						"name": "DS_UNIDADE",
						"type": "varchar"
					},
					{
						"name": "MARCA",
						"type": "varchar"
					},
					{
						"name": "STATUS_AGENDA",
						"type": "varchar"
					},
					{
						"name": "NR_ATENDIMENTO",
						"type": "varchar"
					},
					{
						"name": "NR_SEQUENCIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ID",
						"type": "varchar"
					},
					{
						"name": "CD_PROCEDENCIA",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDENCIA",
						"type": "varchar"
					},
					{
						"name": "DT_AGENDAMENTO",
						"type": "date"
					},
					{
						"name": "DIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MES",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ANO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_CLASSIFICACAO",
						"type": "varchar"
					},
					{
						"name": "DS_AGRUPAMENTO",
						"type": "varchar"
					},
					{
						"name": "CD_MOTIVO_CANCELAMENTO",
						"type": "varchar"
					},
					{
						"name": "DS_MOTIVO_CANCELAMENTO",
						"type": "varchar"
					},
					{
						"name": "CD_AGENDA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DT_ATUALIZACAO",
						"type": "date"
					},
					{
						"name": "BASE",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Agendamento_Livres_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Atendimento')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atendimentos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_PESSOA_FISICA",
						"type": "varchar"
					},
					{
						"name": "DT_ENTRADA",
						"type": "date"
					},
					{
						"name": "HR_ENTRADA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "NM_MEDICO",
						"type": "varchar"
					},
					{
						"name": "CD_CONVENIO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_CONVENIO",
						"type": "varchar"
					},
					{
						"name": "NR_ATENDIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CNPJ",
						"type": "varchar"
					},
					{
						"name": "SIGLA_UNIDADE",
						"type": "varchar"
					},
					{
						"name": "MARCA",
						"type": "varchar"
					},
					{
						"name": "CD_PROCEDENCIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_PROCEDENCIA",
						"type": "varchar"
					},
					{
						"name": "ID",
						"type": "varchar"
					},
					{
						"name": "DIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MES",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ANO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DT_CANCELAMENTO",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Atendimento_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Atendimento_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atendimentos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_PESSOA_FISICA",
						"type": "varchar"
					},
					{
						"name": "DT_ENTRADA",
						"type": "date"
					},
					{
						"name": "HR_ENTRADA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "NM_MEDICO",
						"type": "varchar"
					},
					{
						"name": "CD_CONVENIO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_CONVENIO",
						"type": "varchar"
					},
					{
						"name": "NR_ATENDIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CNPJ",
						"type": "varchar"
					},
					{
						"name": "SIGLA_UNIDADE",
						"type": "varchar"
					},
					{
						"name": "MARCA",
						"type": "varchar"
					},
					{
						"name": "CD_PROCEDENCIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_PROCEDENCIA",
						"type": "varchar"
					},
					{
						"name": "ID",
						"type": "varchar"
					},
					{
						"name": "DIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MES",
						"type": "int",
						"precision": 10
					},
					{
						"name": "ANO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DT_CANCELAMENTO",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Atendimento_Unidade_Temp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Baixa_Titulos_Pagar')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Contas a Pagar"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "nr_titulo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "nr_sequencia",
						"type": "int",
						"precision": 10
					},
					{
						"name": "dt_baixa",
						"type": "date"
					},
					{
						"name": "vl_pago",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_descontos",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_juros",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_multa",
						"type": "float",
						"precision": 15
					},
					{
						"name": "dt_atualizacao",
						"type": "date"
					},
					{
						"name": "ds_tipo_baixa",
						"type": "varchar"
					},
					{
						"name": "ds_transacao",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Aging_Baixa_Titulo_Pagar"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Baixa_Titulos_Receber')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Contas a Receber"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "nr_titulO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "dt_recebimento",
						"type": "date"
					},
					{
						"name": "vl_recebido",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_descontos",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_juros",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_multa",
						"type": "float",
						"precision": 15
					},
					{
						"name": "dt_atualizacao",
						"type": "date"
					},
					{
						"name": "ds_tipo_recebimento",
						"type": "varchar"
					},
					{
						"name": "nr_seq_trans_fin",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Baixa_Titulo_Receber"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Cirurgias')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Cirurgias"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "NR_CIRURGIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DT_INICIO_PREVISTA",
						"type": "date"
					},
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_PACIENTE",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO",
						"type": "varchar"
					},
					{
						"name": "CD_MEDICO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_MEDICO",
						"type": "varchar"
					},
					{
						"name": "CNPJ",
						"type": "varchar"
					},
					{
						"name": "DS_UNIDADE",
						"type": "varchar"
					},
					{
						"name": "MARCA",
						"type": "varchar"
					},
					{
						"name": "DT_ATUALIZACAO",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Cirurgia_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Consulta')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atendimentos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "NR_SEQUENCIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DT_ATUALIZACAO",
						"type": "date"
					},
					{
						"name": "HR_ATUALIZACAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "NR_ATENDIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_MEDICO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_MEDICO",
						"type": "varchar"
					},
					{
						"name": "DS_RETORNO",
						"type": "varchar"
					},
					{
						"name": "DS_CONDUTA",
						"type": "varchar"
					},
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_DIAGNOSTICO",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Consulta_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Convenio')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atendimentos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CD_CONVENIO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_CONVENIO",
						"type": "varchar"
					},
					{
						"name": "CD_ESTABELECIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CNPJ",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Convenio_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Estabelecimento')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atendimentos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CNPJ",
						"type": "varchar"
					},
					{
						"name": "DS_ESTABELECIMENTO",
						"type": "varchar"
					},
					{
						"name": "DS_EMPRESA",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Estabelecimento_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Notas_Fiscais')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nota Fiscal"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CNPJ",
						"type": "varchar"
					},
					{
						"name": "DS_UNIDADE",
						"type": "varchar"
					},
					{
						"name": "DT_EMISSAO",
						"type": "date"
					},
					{
						"name": "DT_ENTRADA_SAIDA",
						"type": "date"
					},
					{
						"name": "NR_SEQUENCIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NR_NOTA_FISCAL",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_CONTA_CONTABIL",
						"type": "varchar"
					},
					{
						"name": "DS_CONTA_CONTABIL",
						"type": "varchar"
					},
					{
						"name": "FORNECEDOR",
						"type": "varchar"
					},
					{
						"name": "VL_TOTAL_ITEM_NF",
						"type": "float",
						"precision": 15
					},
					{
						"name": "DS_OBSERVACAO",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Nota_Fiscal_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Ordens_Servico_Hist')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ordens de Serviço"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Ordem_Servico_Terc_Hist"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Ordens_Servico_Terceiro')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Ordens de Serviço"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "Ordem_Servico_Terceiros"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Orientacao_Cirurgia_Unidade')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Cirurgias"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "DT_AGENDA",
						"type": "date"
					},
					{
						"name": "CD_AGENDA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_PESSOA_FISICA",
						"type": "varchar"
					},
					{
						"name": "DS_AUTORIZACAO",
						"type": "varchar"
					},
					{
						"name": "IE_LADO",
						"type": "char"
					},
					{
						"name": "PROCEDIMENTO",
						"type": "varchar"
					},
					{
						"name": "CNPJ",
						"type": "varchar"
					},
					{
						"name": "DS_UNIDADE",
						"type": "varchar"
					},
					{
						"name": "BASE",
						"type": "varchar"
					},
					{
						"name": "INDICADOR_CIRURGIA",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Orientacao_Cirurgica_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Pacientes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atendimentos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_PESSOA_FISICA",
						"type": "varchar"
					},
					{
						"name": "NR_CPF",
						"type": "varchar"
					},
					{
						"name": "DT_NASCIMENTO",
						"type": "date"
					},
					{
						"name": "NR_TELEFONE_CELULAR",
						"type": "varchar"
					},
					{
						"name": "NR_TELEFONE",
						"type": "varchar"
					},
					{
						"name": "CNPJ",
						"type": "varchar"
					},
					{
						"name": "SIGLA_UNIDADE",
						"type": "varchar"
					},
					{
						"name": "MARCA",
						"type": "varchar"
					},
					{
						"name": "NR_PRONTUARIO",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Pacientes_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Pacientes_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atendimentos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NM_PESSOA_FISICA",
						"type": "varchar"
					},
					{
						"name": "NR_CPF",
						"type": "varchar"
					},
					{
						"name": "DT_NASCIMENTO",
						"type": "date"
					},
					{
						"name": "NR_TELEFONE_CELULAR",
						"type": "varchar"
					},
					{
						"name": "NR_TELEFONE",
						"type": "varchar"
					},
					{
						"name": "CNPJ",
						"type": "varchar"
					},
					{
						"name": "SIGLA_UNIDADE",
						"type": "varchar"
					},
					{
						"name": "MARCA",
						"type": "varchar"
					},
					{
						"name": "NR_PRONTUARIO",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Pacientes_Unidade_Temp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Padrao_Retorno_Cir_Sadalla')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atendimentos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CD_PROCEDIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_PROCED_RET_45_DIAS",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_PROCED_RET_45_DIAS",
						"type": "varchar"
					},
					{
						"name": "CD_PROCED_RET_02_MES",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_PROCED_RET_02_MES",
						"type": "varchar"
					},
					{
						"name": "CD_PROCED_RET_03_MES",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_PROCED_RET_03_MES",
						"type": "varchar"
					},
					{
						"name": "CD_PROCED_RET_06_MES",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_PROCED_RET_06_MES",
						"type": "varchar"
					},
					{
						"name": "CD_PROCED_RET_01_ANO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_PROCED_RET_01_ANO",
						"type": "varchar"
					},
					{
						"name": "CD_PROCED_RET_ANUAL",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_PROCED_RET_ANUAL",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Padrao_Retorno_Cir_Sadalla"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Setor')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atendimentos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CD_SETOR_ATENDIMENTO",
						"type": "varchar"
					},
					{
						"name": "DS_SETOR_ATENDIMENTO",
						"type": "varchar"
					},
					{
						"name": "CNPJ",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Setor_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Titulos_Pagar')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Contas a Pagar"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "estabelecimento",
						"type": "varchar"
					},
					{
						"name": "cd_cgc",
						"type": "varchar"
					},
					{
						"name": "nm_razaosocial",
						"type": "varchar"
					},
					{
						"name": "nm_fantasia",
						"type": "varchar"
					},
					{
						"name": "nr_titulo",
						"type": "int",
						"precision": 10
					},
					{
						"name": "nr_seq_nota_fiscal",
						"type": "int",
						"precision": 10
					},
					{
						"name": "dt_emissao",
						"type": "date"
					},
					{
						"name": "dt_vencimento_original",
						"type": "date"
					},
					{
						"name": "dt_vencimento_atual",
						"type": "date"
					},
					{
						"name": "vl_titulo",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_saldo_titulo",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_saldo_juros",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_saldo_multa",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_dia_antecipacao",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_bordero",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_juros_bordero",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_multa_bordero",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_desconto_bordero",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_ir",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_imposto_munic",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_inss",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_out_desp_bordero",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_titulo_estrang",
						"type": "float",
						"precision": 15
					},
					{
						"name": "vl_cotacao",
						"type": "float",
						"precision": 15
					},
					{
						"name": "situacao",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Aging_Titulo_Pagar"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Titulos_Receber')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Contas a Receber"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ESTABELECIMENTO",
						"type": "varchar"
					},
					{
						"name": "CD_CNPJ",
						"type": "varchar"
					},
					{
						"name": "NM_RAZAOSOCIAL",
						"type": "varchar"
					},
					{
						"name": "NM_FANTASIA",
						"type": "varchar"
					},
					{
						"name": "NR_TITULO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NR_NOTA_FISCAL",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DT_EMISSAO",
						"type": "date"
					},
					{
						"name": "DT_VENCIMENTO_ORIGINAL",
						"type": "date"
					},
					{
						"name": "DT_VENCIMENTO_PRORROGADO",
						"type": "date"
					},
					{
						"name": "VL_BRUTO",
						"type": "float",
						"precision": 15
					},
					{
						"name": "VL_SALDO_JUROS",
						"type": "float",
						"precision": 15
					},
					{
						"name": "VL_SALDO_MULTA",
						"type": "float",
						"precision": 15
					},
					{
						"name": "VL_LIQUIDO",
						"type": "float",
						"precision": 15
					},
					{
						"name": "VL_SALDO_TITULO",
						"type": "float",
						"precision": 15
					},
					{
						"name": "VL_AMENOR",
						"type": "float",
						"precision": 15
					},
					{
						"name": "SITUACAO",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Titulos_Receber"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Unidade_Producao_Medica')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Produção Médica Unidades"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "BASE",
						"type": "varchar"
					},
					{
						"name": "CNPJ",
						"type": "varchar"
					},
					{
						"name": "MARCA",
						"type": "varchar"
					},
					{
						"name": "DT_ATUALIZACAO",
						"type": "date"
					},
					{
						"name": "NR_ATENDIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DT_ENTRADA",
						"type": "date"
					},
					{
						"name": "NR_INTERNO_CONTA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DT_NASCIMENTO",
						"type": "date"
					},
					{
						"name": "NR_CPF",
						"type": "varchar"
					},
					{
						"name": "IE_SEXO",
						"type": "char"
					},
					{
						"name": "NR_CEP",
						"type": "varchar"
					},
					{
						"name": "DS_CIDADE",
						"type": "varchar"
					},
					{
						"name": "DS_PESSOA_FISICA",
						"type": "varchar"
					},
					{
						"name": "CD_CONVENIO",
						"type": "varchar"
					},
					{
						"name": "DS_CONVENIO",
						"type": "varchar"
					},
					{
						"name": "CD_MEDICO_EXECUTOR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_MEDICO_EXECUTOR",
						"type": "varchar"
					},
					{
						"name": "CD_MEDICO_REQUISITANTE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_MEDICO_REQUISITANTE",
						"type": "varchar"
					},
					{
						"name": "IE_ORIGEM_PROCED",
						"type": "varchar"
					},
					{
						"name": "CD_PROCEDIMENTO",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO",
						"type": "varchar"
					},
					{
						"name": "DS_CLASSIFICACAO",
						"type": "varchar"
					},
					{
						"name": "QT_PROCEDIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "VL_PROCEDIMENTO",
						"type": "float",
						"precision": 15
					},
					{
						"name": "IE_STATUS_ACERTO",
						"type": "varchar"
					},
					{
						"name": "STATUS_CONTA",
						"type": "varchar"
					},
					{
						"name": "CD_TUSS",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Unidade_Producao_Medica"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_SQL_TB_Usuario')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Atendimentos"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "NM_USUARIO",
						"type": "varchar"
					},
					{
						"name": "DS_USUARIO",
						"type": "varchar"
					},
					{
						"name": "IE_SITUACAO",
						"type": "char"
					},
					{
						"name": "DT_ATUALIZACAO",
						"type": "date"
					},
					{
						"name": "SIGLA_UNIDADE",
						"type": "varchar"
					},
					{
						"name": "MARCA",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Usuario_Unidade"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_UPO_FPA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "UPO_FPA"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AZ_WAC_REC_TASY')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "wac_tbl_recebimento_tasy"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AuxAtend_Repasse')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "auxatend_repasse"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlProcedimentosTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Power BI"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NR_REGISTRO_UNICO",
						"type": "varchar"
					},
					{
						"name": "CD_MARCA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_MARCA",
						"type": "varchar"
					},
					{
						"name": "DT_ATUALIZACAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "DT_ENTRADA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "NR_ATENDIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_ESTABELECIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_ESTABELECIMENTO",
						"type": "varchar"
					},
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DT_NASCIMENTO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "NR_CPF",
						"type": "varchar"
					},
					{
						"name": "IE_SEXO",
						"type": "char"
					},
					{
						"name": "NR_CEP",
						"type": "varchar"
					},
					{
						"name": "DS_CIDADE",
						"type": "varchar"
					},
					{
						"name": "DS_PESSOA_FISICA",
						"type": "varchar"
					},
					{
						"name": "CD_CONVENIO",
						"type": "varchar"
					},
					{
						"name": "DS_CONVENIO",
						"type": "varchar"
					},
					{
						"name": "CD_MEDICO_EXECUTOR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_MEDICO_EXECUTOR",
						"type": "varchar"
					},
					{
						"name": "CD_MEDICO_REQUISITANTE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_MEDICO_REQUISITANTE",
						"type": "varchar"
					},
					{
						"name": "IE_ORIGEM_PROCED",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_PROCEDIMENTO",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO",
						"type": "varchar"
					},
					{
						"name": "CD_PROCEDIMENTO_PRINCIPAL",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO_PRINCIPAL",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
						"type": "varchar"
					},
					{
						"name": "CD_CATEGORIA_AUXILIAR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_CATEGORIA_AUXILIAR",
						"type": "varchar"
					},
					{
						"name": "CD_CATEGORIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_CATEGORIA",
						"type": "varchar"
					},
					{
						"name": "CD_CLASSE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_CLASSE",
						"type": "varchar"
					},
					{
						"name": "CD_CLASSIF_LIO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_CLASSIF_LIO",
						"type": "varchar"
					},
					{
						"name": "QT_PROCEDIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QT_AJUSTADA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "VL_CONTA",
						"type": "real",
						"precision": 7
					},
					{
						"name": "VL_PROCEDIMENTO",
						"type": "real",
						"precision": 7
					},
					{
						"name": "IE_STATUS_ACERTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_STATUS_CONTA",
						"type": "varchar"
					},
					{
						"name": "CD_TUSS",
						"type": "int",
						"precision": 10
					},
					{
						"name": "TIPO_CONVENIO",
						"type": "varchar"
					},
					{
						"name": "CRM_EXECUTOR",
						"type": "varchar"
					},
					{
						"name": "MPE_EXECUTOR",
						"type": "varchar"
					},
					{
						"name": "INTERCOMPANY_EXECUTOR",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[Procedimentos]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTEMPTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Power BI"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "CD_MARCA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MARCA",
						"type": "varchar"
					},
					{
						"name": "CD_ESTABELECIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NR_ATENDIMENTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "NR_REGISTRO_UNICO",
						"type": "varchar"
					},
					{
						"name": "DT_ATUALIZACAO",
						"type": "date"
					},
					{
						"name": "DT_ENTRADA",
						"type": "date"
					},
					{
						"name": "NR_INTERNO_CONTA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_ESTABELECIMENTO",
						"type": "varchar"
					},
					{
						"name": "CD_PESSOA_FISICA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DT_NASCIMENTO",
						"type": "date"
					},
					{
						"name": "NR_CPF",
						"type": "varchar"
					},
					{
						"name": "IE_SEXO",
						"type": "varchar"
					},
					{
						"name": "NR_CEP",
						"type": "varchar"
					},
					{
						"name": "DS_CIDADE",
						"type": "varchar"
					},
					{
						"name": "DS_PESSOA_FISICA",
						"type": "varchar"
					},
					{
						"name": "CD_CONVENIO",
						"type": "varchar"
					},
					{
						"name": "DS_CONVENIO",
						"type": "varchar"
					},
					{
						"name": "CD_MEDICO_EXECUTOR",
						"type": "varchar"
					},
					{
						"name": "DS_MEDICO_EXECUTOR",
						"type": "varchar"
					},
					{
						"name": "CD_MEDICO_REQUISITANTE",
						"type": "varchar"
					},
					{
						"name": "DS_MEDICO_REQUISITANTE",
						"type": "varchar"
					},
					{
						"name": "IE_ORIGEM_PROCED",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CD_PROCEDIMENTO",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO",
						"type": "varchar"
					},
					{
						"name": "DS_CLASSIFICACAO",
						"type": "varchar"
					},
					{
						"name": "DS_CLASSIF_PROCEDIMENTO",
						"type": "varchar"
					},
					{
						"name": "CD_PROCED_PRINCIPAL",
						"type": "varchar"
					},
					{
						"name": "DS_PROCED_PRINCIPAL",
						"type": "varchar"
					},
					{
						"name": "QT_PROCEDIMENTO",
						"type": "float",
						"precision": 15
					},
					{
						"name": "VL_CONTA",
						"type": "float",
						"precision": 15
					},
					{
						"name": "VL_PROCEDIMENTO",
						"type": "float",
						"precision": 15
					},
					{
						"name": "IE_STATUS_ACERTO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "STATUS_CONTA",
						"type": "varchar"
					},
					{
						"name": "CD_TUSS",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_CLASSIF_LIO",
						"type": "varchar"
					},
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Processed",
						"type": "varchar"
					},
					{
						"name": "CD_CLASSE",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_CLASSE",
						"type": "varchar"
					},
					{
						"name": "CD_CLASSIF_LIO",
						"type": "int",
						"precision": 10
					},
					{
						"name": "QT_AJUSTADA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_STATUS_CONTA",
						"type": "varchar"
					},
					{
						"name": "DS_PROCEDIMENTO_PRINCIPAL_FINAL",
						"type": "varchar"
					},
					{
						"name": "CD_CATEGORIA_AUXILIAR",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_CATEGORIA_AUXILIAR",
						"type": "varchar"
					},
					{
						"name": "CD_CATEGORIA",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DS_CATEGORIA",
						"type": "varchar"
					},
					{
						"name": "MEDICO_EXECUTOR_PARCEIRO",
						"type": "varchar"
					},
					{
						"name": "BASE",
						"type": "varchar"
					},
					{
						"name": "TIPO_CONVENIO",
						"type": "varchar"
					},
					{
						"name": "INTERCOMPANY",
						"type": "varchar"
					},
					{
						"name": "CRM",
						"type": "varchar"
					},
					{
						"name": "MPE",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"tableName": "[[dbo].[TEMPTASY]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BLOB_UPO_FPA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Az_blob_UPO_FPA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "default_1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "UPO.xlsx",
						"container": "upofpa"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Estabelecimento",
						"type": "String"
					},
					{
						"name": "Data",
						"type": "String"
					},
					{
						"name": "Hora",
						"type": "String"
					},
					{
						"name": "Índice",
						"type": "String"
					},
					{
						"name": "Atendimento",
						"type": "String"
					},
					{
						"name": "Conta",
						"type": "String"
					},
					{
						"name": "CODCONVENIO",
						"type": "String"
					},
					{
						"name": "CONVENIO",
						"type": "String"
					},
					{
						"name": "Convenio Ajustado",
						"type": "String"
					},
					{
						"name": "Tipo Convenio",
						"type": "String"
					},
					{
						"name": "PACIENTE",
						"type": "String"
					},
					{
						"name": "Medico",
						"type": "String"
					},
					{
						"name": "SETOR",
						"type": "String"
					},
					{
						"name": "ID item",
						"type": "String"
					},
					{
						"name": "Cod Item",
						"type": "String"
					},
					{
						"name": "Item",
						"type": "String"
					},
					{
						"name": "CodProced Principal",
						"type": "String"
					},
					{
						"name": "Procedimento Principal",
						"type": "String"
					},
					{
						"name": "Status Conta",
						"type": "String"
					},
					{
						"name": "Categoria",
						"type": "String"
					},
					{
						"name": "Categoria Auxiliar",
						"type": "String"
					},
					{
						"name": "Classe",
						"type": "String"
					},
					{
						"name": "Especialidade",
						"type": "String"
					},
					{
						"name": "Procedimento",
						"type": "String"
					},
					{
						"name": "Patologia",
						"type": "String"
					},
					{
						"name": "Qtde",
						"type": "String"
					},
					{
						"name": "Qtde Ajuste",
						"type": "String"
					},
					{
						"name": "ROB",
						"type": "String"
					},
					{
						"name": "mês",
						"type": "String"
					},
					{
						"name": "Ano",
						"type": "String"
					},
					{
						"name": "DE_Para Unidades",
						"type": "String"
					},
					{
						"name": "De_Para Modelo de Convenio",
						"type": "String"
					},
					{
						"name": "Retorno",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Az_blob_UPO_FPA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_ANS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ANS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"container": "ans"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ANS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_ContasReceber')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_Recebimento",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileSystem": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": {
							"value": "@dataset().FileSystem",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_Recebimento')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CEOP_DS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Data Source que lê dados gravados na pasta CEOP no storage account",
				"linkedServiceName": {
					"referenceName": "sv_hmaisbrasildatadriven",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "CEOP_TESTE.csv",
						"fileSystem": "ceop"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Atendimento;Cnv.Id;Conv�nio;Guia;Guia Operadora;Data Guia;Prontu�rio;Paciente;Matricula;Validade Matricula;M�dico Atendimento;Tp. Atend;Status Atend;Data Atendimento;Hora Atendimento;Data Sa�da;Hora Sa�da;Conta;Data Conta;ID Item;Codigo Item;Item;Tipo Item;ID Grupo;Grupo do Item;Status Conta;Data Lan�amento;Hora Lan�amento;Quant.;Valor Unit.;Valor Total;ID Plano;Plano;Id Empresa;Empresa;Cod.Prestador;Prestador;Cod.Executante;Executante;Data Solic.Exame;Data Laudo Exame;Data Entrega Exame;ID Tecnico;T�cnico;Valor Glosado;Valor Recebido;Motivo de Glosa;",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CEOP_DS_EXCEL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_hmaisbrasildatadriven",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Plan1",
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "CEOP_GESTHOR.xlsx",
						"fileSystem": "ceop"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "Atendimento",
						"type": "String"
					},
					{
						"name": "Cnv.Id",
						"type": "String"
					},
					{
						"name": "Convênio",
						"type": "String"
					},
					{
						"name": "Guia",
						"type": "String"
					},
					{
						"name": "Guia Operadora",
						"type": "String"
					},
					{
						"name": "Data Guia",
						"type": "String"
					},
					{
						"name": "Prontuário",
						"type": "String"
					},
					{
						"name": "Paciente",
						"type": "String"
					},
					{
						"name": "Matricula",
						"type": "String"
					},
					{
						"name": "Validade Matricula",
						"type": "String"
					},
					{
						"name": "Médico Atendimento",
						"type": "String"
					},
					{
						"name": "Tp. Atend",
						"type": "String"
					},
					{
						"name": "Status Atend",
						"type": "String"
					},
					{
						"name": "Data Atendimento",
						"type": "String"
					},
					{
						"name": "Hora Atendimento",
						"type": "String"
					},
					{
						"name": "Data Saída",
						"type": "String"
					},
					{
						"name": "Hora Saída",
						"type": "String"
					},
					{
						"name": "Conta",
						"type": "String"
					},
					{
						"name": "Data Conta",
						"type": "String"
					},
					{
						"name": "ID Item",
						"type": "String"
					},
					{
						"name": "Codigo Item",
						"type": "String"
					},
					{
						"name": "Item",
						"type": "String"
					},
					{
						"name": "Tipo Item",
						"type": "String"
					},
					{
						"name": "ID Grupo",
						"type": "String"
					},
					{
						"name": "Grupo do Item",
						"type": "String"
					},
					{
						"name": "Status Conta",
						"type": "String"
					},
					{
						"name": "Data Lançamento",
						"type": "String"
					},
					{
						"name": "Hora Lançamento",
						"type": "String"
					},
					{
						"name": "Quant.",
						"type": "String"
					},
					{
						"name": "Valor Unit.",
						"type": "String"
					},
					{
						"name": "Valor Total",
						"type": "String"
					},
					{
						"name": "ID Plano",
						"type": "String"
					},
					{
						"name": "Plano",
						"type": "String"
					},
					{
						"name": "Id Empresa",
						"type": "String"
					},
					{
						"name": "Empresa",
						"type": "String"
					},
					{
						"name": "Cod.Prestador",
						"type": "String"
					},
					{
						"name": "Prestador",
						"type": "String"
					},
					{
						"name": "Cod.Executante",
						"type": "String"
					},
					{
						"name": "Executante",
						"type": "String"
					},
					{
						"name": "Data Solic.Exame",
						"type": "String"
					},
					{
						"name": "Data Laudo Exame",
						"type": "String"
					},
					{
						"name": "Data Entrega Exame",
						"type": "String"
					},
					{
						"name": "ID Tecnico",
						"type": "String"
					},
					{
						"name": "Técnico",
						"type": "String"
					},
					{
						"name": "Valor Glosado",
						"type": "String"
					},
					{
						"name": "Valor Recebido",
						"type": "String"
					},
					{
						"name": "Motivo de Glosa",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CIDs_Grupo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_StorageVM",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "FileServerLocation",
						"fileName": "CIDs AGRUPADOS.xlsx",
						"folderPath": "Depara"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "CD_CATEGORIA_CID",
						"type": "String"
					},
					{
						"name": "DS_CATEGORIA_CID",
						"type": "String"
					},
					{
						"name": "GRUPO CIDs",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_StorageVM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSI_CSV_NC_AgentesPorDia')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/CSI"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "AgentesPorDiaCSI.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSI_CSV_NC_AgentesPorDia_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_AgentesPorDia_CSI",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/CSI/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_AgentesPorDia_CSI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSI_CSV_NC_AgentesPorHora')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/CSI"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "AgentesPorHoraCSI.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSI_CSV_NC_AgentesPorHora_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_AgentesPorHora_CSI",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/CSI/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_AgentesPorHora_CSI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSI_CSV_NC_Bilhete_Ligacoes_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_Bilhetes_CSI",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/CSI/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_Bilhetes_CSI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSI_CSV_NC_BilhetesLigacoes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/CSI"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "BilheteLigacoesCSI.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSI_CSV_NC_FilasPorHora')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/CSI"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "FilasPorHoraCSI.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSI_CSV_NC_FilasporHora_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_FIlasPorHoras_CSI",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/CSI/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_FIlasPorHoras_CSI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSV_ANS_TUSS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_ANS",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().Filename",
							"type": "Expression"
						},
						"folderPath": "tuss",
						"container": "ans"
					},
					"columnDelimiter": ";",
					"encodingName": "ISO-8859-1",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_ANS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSV_CNPJ_PY_AZ_FINAL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_StorageVM",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CNPJ"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "RETURN_CNPJ_CONV.csv",
						"folderPath": "CNPJ"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CGC_CONVENIO",
						"type": "String"
					},
					{
						"name": "DS_RAZAO_SOCIAL",
						"type": "String"
					},
					{
						"name": "UF",
						"type": "String"
					},
					{
						"name": "CEP",
						"type": "String"
					},
					{
						"name": "SITUACAO_REG",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_StorageVM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSV_CNPJ_SYS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_StorageVM",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "CNPJ"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "CNPJ_SYS.csv",
						"folderPath": "CNPJ"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_StorageVM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSV_CONVENIO_DEPARA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_StorageVM",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse/DEPARA"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "depara_sys_regra_convenio.csv",
						"folderPath": "Depara"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CONVENIO;CONVENIO_DEPARA;MODALIDADE;TP_CONVENIO",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_StorageVM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSV_OFTALMODIAGNOSE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_Oftalmodiagnose",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"nome_tabela": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().nome_tabela",
							"type": "Expression"
						},
						"container": "oftalmodiagnose"
					},
					"columnDelimiter": ";",
					"rowDelimiter": "^",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_Oftalmodiagnose')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSV_PROCEDIMENTO_DEPARA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_StorageVM",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse/DEPARA"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "depara_sys_regra.csv",
						"folderPath": "Depara"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "cod_sys;nm_sys;Codigo;Descricao;Categoria;Categoria_Aux;Classe;Especialidade;Procedimento;Patologia;DT_ATUALIZACAO",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_StorageVM')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CSV_VISAODF_LEG_FPA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_VisaoDF",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "VISAODF_LEG_FPA.csv",
						"container": "visaodf"
					},
					"columnDelimiter": ",",
					"encodingName": "ISO-8859-1",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DATA",
						"type": "String"
					},
					{
						"name": "OS",
						"type": "String"
					},
					{
						"name": "CONVENIO",
						"type": "String"
					},
					{
						"name": "DS_ITEM",
						"type": "String"
					},
					{
						"name": "CATEGORIA",
						"type": "String"
					},
					{
						"name": "CLASSE",
						"type": "String"
					},
					{
						"name": "QTD",
						"type": "String"
					},
					{
						"name": "VALOR_OS",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_VisaoDF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CloudTasyPrdDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "CloudTasyProd",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Power BI"
				},
				"annotations": [],
				"type": "OracleTable",
				"structure": [
					{
						"name": "DATA_MOVIMENTO",
						"type": "String"
					},
					{
						"name": "CD_LOCAL_ESTOQUE",
						"type": "Decimal"
					},
					{
						"name": "DS_LOCAL_ESTOQUE",
						"type": "String"
					},
					{
						"name": "CD_ESTABELECIMENTO",
						"type": "Decimal"
					},
					{
						"name": "DS_ESTABELECIMENTO",
						"type": "String"
					},
					{
						"name": "CD_MATERIAL",
						"type": "Decimal"
					},
					{
						"name": "DS_MATERIAL_SHORT",
						"type": "String"
					},
					{
						"name": "CD_GRUPO_MATERIAL",
						"type": "Decimal"
					},
					{
						"name": "DS_GRUPO_MATERIAL",
						"type": "String"
					},
					{
						"name": "CD_CLASSE_MATERIAL",
						"type": "Decimal"
					},
					{
						"name": "DS_CLASSE_MATERIAL",
						"type": "String"
					},
					{
						"name": "CD_OPERACAO_ESTOQUE",
						"type": "Decimal"
					},
					{
						"name": "DS_OPERACAO",
						"type": "String"
					},
					{
						"name": "QT_MOVIMENTO",
						"type": "Double"
					},
					{
						"name": "VL_MOVIMENTO",
						"type": "Double"
					}
				],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/CloudTasyProd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DESTINO_ADF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "A",
					"table": "DESTINO_X"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DESTINO_TABELAS_ADF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Schema_Destino": {
						"type": "string"
					},
					"Tabela_Destino": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().Schema_Destino",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().Tabela_Destino",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DH_CSV_NC_AgentesPorDia')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/DH"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "AgentesPorDiaDAYHORC.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Usuario",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Recusas",
						"type": "String"
					},
					{
						"name": "Recebidas",
						"type": "String"
					},
					{
						"name": "Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Transferencias",
						"type": "String"
					},
					{
						"name": "Efetuadas",
						"type": "String"
					},
					{
						"name": "Efetuadas Tratados",
						"type": "String"
					},
					{
						"name": "% Taxa de Contato",
						"type": "String"
					},
					{
						"name": "Tempo Atendidas",
						"type": "String"
					},
					{
						"name": "Tempo Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Tempo Efetuadas",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Total Falado",
						"type": "String"
					},
					{
						"name": "Tempo Toque Agente",
						"type": "String"
					},
					{
						"name": "Tempo Toque Cliente",
						"type": "String"
					},
					{
						"name": "Tempo Pausa",
						"type": "String"
					},
					{
						"name": "Tempo Estouro",
						"type": "String"
					},
					{
						"name": "Tempo Dispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Indispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Logado",
						"type": "String"
					},
					{
						"name": "Tempo Deslogado",
						"type": "String"
					},
					{
						"name": "% Falado x Logado",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DH_CSV_NC_AgentesPorDia_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_AgentesPorDia_DAYHORC",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/DH/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Usuario",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Recusas",
						"type": "String"
					},
					{
						"name": "Recebidas",
						"type": "String"
					},
					{
						"name": "Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Transferencias",
						"type": "String"
					},
					{
						"name": "Efetuadas",
						"type": "String"
					},
					{
						"name": "Efetuadas Tratados",
						"type": "String"
					},
					{
						"name": "% Taxa de Contato",
						"type": "String"
					},
					{
						"name": "Tempo Atendidas",
						"type": "String"
					},
					{
						"name": "Tempo Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Tempo Efetuadas",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Total Falado",
						"type": "String"
					},
					{
						"name": "Tempo Toque Agente",
						"type": "String"
					},
					{
						"name": "Tempo Toque Cliente",
						"type": "String"
					},
					{
						"name": "Tempo Pausa",
						"type": "String"
					},
					{
						"name": "Tempo Estouro",
						"type": "String"
					},
					{
						"name": "Tempo Dispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Indispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Logado",
						"type": "String"
					},
					{
						"name": "Tempo Deslogado",
						"type": "String"
					},
					{
						"name": "% Falado x Logado",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_AgentesPorDia_DAYHORC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DH_CSV_NC_AgentesPorHora')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/DH"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "AgentesPorHoraDAYHORC.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DH_CSV_NC_AgentesPorHora_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_AgentesPorHora_DAYHORC",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/DH/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_AgentesPorHora_DAYHORC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DH_CSV_NC_BilheteLigacoes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Arquivo Nexcore BilheteLigacoes.csv",
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/DH"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "BilheteLigacoesDAYHORC.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Data",
						"type": "String"
					},
					{
						"name": "Hora",
						"type": "String"
					},
					{
						"name": "Usu�rio",
						"type": "String"
					},
					{
						"name": "Tipo",
						"type": "String"
					},
					{
						"name": "Origem",
						"type": "String"
					},
					{
						"name": "Destino",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Centro de Custo",
						"type": "String"
					},
					{
						"name": "Tempo Tarifado",
						"type": "String"
					},
					{
						"name": "Tempo Decorrido",
						"type": "String"
					},
					{
						"name": "Campanha",
						"type": "String"
					},
					{
						"name": "Fila",
						"type": "String"
					},
					{
						"name": "Unique ID",
						"type": "String"
					},
					{
						"name": "Linked ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DH_CSV_NC_Bilhete_Ligacoes_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_Bilhetes_DAYHORC",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/DH/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_Bilhetes_DAYHORC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DH_CSV_NC_FilasPorHora')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/DH"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "FilasPorHoraDAYHORC.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Fila",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas Ate NS",
						"type": "String"
					},
					{
						"name": "Atendidas Apos NS",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Abandonos Ate NS",
						"type": "String"
					},
					{
						"name": "Abandonos Apos NS",
						"type": "String"
					},
					{
						"name": "Abandonos Anuncio Inicial",
						"type": "String"
					},
					{
						"name": "Abandonos",
						"type": "String"
					},
					{
						"name": "Roteamentos Timeout",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Cheia",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Vazia",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Sem Ags. Disp.",
						"type": "String"
					},
					{
						"name": "Roteamentos Caixa Postal",
						"type": "String"
					},
					{
						"name": "Roteamentos",
						"type": "String"
					},
					{
						"name": "Fora Horario Antes",
						"type": "String"
					},
					{
						"name": "Fora Horario Intervalo",
						"type": "String"
					},
					{
						"name": "Fora Horario Depois",
						"type": "String"
					},
					{
						"name": "Fora Horario",
						"type": "String"
					},
					{
						"name": "Total Recebidas",
						"type": "String"
					},
					{
						"name": "Callback Tratados",
						"type": "String"
					},
					{
						"name": "Callback Nao Tratados",
						"type": "String"
					},
					{
						"name": "Callback",
						"type": "String"
					},
					{
						"name": "Tempo Toque",
						"type": "String"
					},
					{
						"name": "Tempo Falado",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Medio Pausa ACW",
						"type": "String"
					},
					{
						"name": "Tempo Medio Produtivo AHT",
						"type": "String"
					},
					{
						"name": "% Nivel Servico",
						"type": "String"
					},
					{
						"name": "% Taxa Atendimento",
						"type": "String"
					},
					{
						"name": "% Taxa Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Medio Espera",
						"type": "String"
					},
					{
						"name": "Tempo Medio para Atender",
						"type": "String"
					},
					{
						"name": "Tempo Total para Atender",
						"type": "String"
					},
					{
						"name": "Tempo Medio para Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Total para Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Total Espera",
						"type": "String"
					},
					{
						"name": "Agentes Logados - Minimo",
						"type": "String"
					},
					{
						"name": "Agentes Logados - Maximo",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera - Minimo",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera - Medio",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera = Maximo",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DH_CSV_NC_FilasPorHora_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_FIlasPorHoras_DAYHORC",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/DH/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Fila",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas Ate NS",
						"type": "String"
					},
					{
						"name": "Atendidas Apos NS",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Abandonos Ate NS",
						"type": "String"
					},
					{
						"name": "Abandonos Apos NS",
						"type": "String"
					},
					{
						"name": "Abandonos Anuncio Inicial",
						"type": "String"
					},
					{
						"name": "Abandonos",
						"type": "String"
					},
					{
						"name": "Roteamentos Timeout",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Cheia",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Vazia",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Sem Ags. Disp.",
						"type": "String"
					},
					{
						"name": "Roteamentos Caixa Postal",
						"type": "String"
					},
					{
						"name": "Roteamentos",
						"type": "String"
					},
					{
						"name": "Fora Horario Antes",
						"type": "String"
					},
					{
						"name": "Fora Horario Intervalo",
						"type": "String"
					},
					{
						"name": "Fora Horario Depois",
						"type": "String"
					},
					{
						"name": "Fora Horario",
						"type": "String"
					},
					{
						"name": "Total Recebidas",
						"type": "String"
					},
					{
						"name": "Callback Tratados",
						"type": "String"
					},
					{
						"name": "Callback Nao Tratados",
						"type": "String"
					},
					{
						"name": "Callback",
						"type": "String"
					},
					{
						"name": "Tempo Toque",
						"type": "String"
					},
					{
						"name": "Tempo Falado",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Medio Pausa ACW",
						"type": "String"
					},
					{
						"name": "Tempo Medio Produtivo AHT",
						"type": "String"
					},
					{
						"name": "% Nivel Servico",
						"type": "String"
					},
					{
						"name": "% Taxa Atendimento",
						"type": "String"
					},
					{
						"name": "% Taxa Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Medio Espera",
						"type": "String"
					},
					{
						"name": "Tempo Medio para Atender",
						"type": "String"
					},
					{
						"name": "Tempo Total para Atender",
						"type": "String"
					},
					{
						"name": "Tempo Medio para Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Total para Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Total Espera",
						"type": "String"
					},
					{
						"name": "Agentes Logados - Minimo",
						"type": "String"
					},
					{
						"name": "Agentes Logados - Maximo",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera - Minimo",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera - Medio",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera = Maximo",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_FIlasPorHoras_DAYHORC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Five9')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Five9",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "\\99 - Relatorios ESP\\ESP0001",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Five9')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_HMAISDATADRIVEN')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_hmaisbrasildatadriven",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"Filesystem": {
						"type": "string"
					},
					"File": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().File",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().Filesystem",
							"type": "Expression"
						}
					},
					"columnDelimiter": ";",
					"encodingName": "UTF-8",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_HMAISDATADRIVEN_BINARY')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_hmaisbrasildatadriven",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileSystem": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": {
							"value": "@dataset().FileSystem",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_IRIS_ODBC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_IRIS_ODBC",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OdbcTable",
				"schema": [],
				"typeProperties": {
					"tableName": "\"DBA\".\"OSM\""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_IRIS_ODBC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OFTALMODIAGNOSE_ODBC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_OFTALMODIAGNOSE_ODBC",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OdbcTable",
				"schema": [],
				"typeProperties": {
					"tableName": "\"DBA\".\"OSM\""
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_OFTALMODIAGNOSE_ODBC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_OFTALMODIAGNOSE_ODBC_WITH_PARAM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_OFTALMODIAGNOSE_ODBC",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OdbcTable",
				"schema": [],
				"typeProperties": {
					"tableName": {
						"value": "@concat(dataset().schema_name,'.',dataset().table_name)",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_OFTALMODIAGNOSE_ODBC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ORTOCITY')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ortoity_Oracle",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ortoity_Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_ORTOCITY_WITH_PARAM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Ortoity_Oracle",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Ortoity_Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Otorrinocenter')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Otorrinocenter",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "STG_PROD_DIARIA_GRUPOHMAIS_DATAMART"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Otorrinocenter')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DW_ORIGEM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EXECL_BLOB_DIN')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "blob_din",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileSystem": {
						"type": "string"
					},
					"File": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": {
						"value": "@concat('Base ',toUpper(replace(dataset().File,'.xlsx','')))",
						"type": "Expression"
					},
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().File",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().FileSystem",
							"type": "Expression"
						}
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/blob_din')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel_Recebimento')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_Recebimento",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileBlob": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Recebimentos Consolidado",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileBlob",
							"type": "Expression"
						},
						"container": "contasreceber"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_Recebimento')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Excel_VISAODF_Leg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_VisaoDF",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "VISAODF",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "VISAODF_DW.xlsx",
						"container": "visaodf"
					},
					"firstRowAsHeader": true
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_VisaoDF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FILE_ACTION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_hmaisbrasildatadriven",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "action.csv",
							"type": "Expression"
						},
						"fileSystem": "requestia"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FILE_CLIENT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_hmaisbrasildatadriven",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "client.csv",
							"type": "Expression"
						},
						"fileSystem": "requestia"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FILE_Padrao_Retornos_Cirurgias')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LINK_PASTA_BI",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Cirurgias"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "codigoscuidadoplanejado.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LINK_PASTA_BI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FILE_QANSWER')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Requestia",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Requestia"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "qanswer.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "QSESSION",
						"type": "String"
					},
					{
						"name": "QUESTION",
						"type": "String"
					},
					{
						"name": "QANSWER",
						"type": "String"
					},
					{
						"name": "QANSWERED",
						"type": "String"
					},
					{
						"name": "QANSWERDATE",
						"type": "String"
					},
					{
						"name": "QSHOW",
						"type": "String"
					},
					{
						"name": "QORDER",
						"type": "String"
					},
					{
						"name": "QUPDATED",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Requestia')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FILE_QANSWER_NEW')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_hmaisbrasildatadriven",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "qanswer.csv",
							"type": "Expression"
						},
						"fileSystem": "requestia"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FILE_QSESSION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Requestia",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Requestia"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "c"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "QSESSION",
						"type": "String"
					},
					{
						"name": "QSESSIONTITLE",
						"type": "String"
					},
					{
						"name": "QCLIENT",
						"type": "String"
					},
					{
						"name": "QFORM",
						"type": "String"
					},
					{
						"name": "QVERSION",
						"type": "String"
					},
					{
						"name": "QSTATUS",
						"type": "String"
					},
					{
						"name": "QANSWERDATE",
						"type": "String"
					},
					{
						"name": "QEXPDATE",
						"type": "String"
					},
					{
						"name": "QAPPLICATION",
						"type": "String"
					},
					{
						"name": "QSURVEYTYPE",
						"type": "String"
					},
					{
						"name": "REQLOCATION",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Requestia')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FILE_QSESSION_NEW')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_hmaisbrasildatadriven",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "qsession.csv",
							"type": "Expression"
						},
						"fileSystem": "requestia"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FILE_QTABLEACTION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Requestia",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "action.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Requestia')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FILE_QTABLEANSWER')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Requestia",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "cc"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "QSESSION",
						"type": "String"
					},
					{
						"name": "TABLE_NAME",
						"type": "String"
					},
					{
						"name": "TABLE_ROWID",
						"type": "String"
					},
					{
						"name": "TABLE_ROWNUM",
						"type": "String"
					},
					{
						"name": "COLUMN_NAME",
						"type": "String"
					},
					{
						"name": "COLUMN_VALUE",
						"type": "String"
					},
					{
						"name": "COLUMN_POSITION",
						"type": "String"
					},
					{
						"name": "COLUMN_ANSWERED",
						"type": "String"
					},
					{
						"name": "COLUMN_ANSWERDATE",
						"type": "String"
					},
					{
						"name": "COLUMN_UPDATED",
						"type": "String"
					},
					{
						"name": "COLUMN_VISIBLE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Requestia')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FILE_QTABLEANSWER_NEW')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_hmaisbrasildatadriven",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "qtableanswer.csv",
							"type": "Expression"
						},
						"fileSystem": "requestia"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FILE_REQUESTS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "ATENÇÃO: ao atender solicitação do cálculo de SLA, a Requestia passou a exportar um novo arquivo com novos campos. Para simplificar a alteração, alteraremos apenas a conexão.",
				"linkedServiceName": {
					"referenceName": "Folder_Requestia",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Requestia"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "cc"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "REQUEST",
						"type": "String"
					},
					{
						"name": "CLIENT",
						"type": "String"
					},
					{
						"name": "ORIGANAL",
						"type": "String"
					},
					{
						"name": "CURRANAL",
						"type": "String"
					},
					{
						"name": "GROUPANAL",
						"type": "String"
					},
					{
						"name": "LASTANAL",
						"type": "String"
					},
					{
						"name": "LASTANLGRP",
						"type": "String"
					},
					{
						"name": "ORIGGROUP",
						"type": "String"
					},
					{
						"name": "CURRGROUP",
						"type": "String"
					},
					{
						"name": "LASTGROUP",
						"type": "String"
					},
					{
						"name": "GRGROUP",
						"type": "String"
					},
					{
						"name": "CATEGORY",
						"type": "String"
					},
					{
						"name": "PRODUCT",
						"type": "String"
					},
					{
						"name": "PROCESS",
						"type": "String"
					},
					{
						"name": "PROBLEM",
						"type": "String"
					},
					{
						"name": "RSTATUS",
						"type": "String"
					},
					{
						"name": "RPRIORITY",
						"type": "String"
					},
					{
						"name": "REQTYPE",
						"type": "String"
					},
					{
						"name": "REQSOURCE",
						"type": "String"
					},
					{
						"name": "LOCATION",
						"type": "String"
					},
					{
						"name": "ORGUNIT",
						"type": "String"
					},
					{
						"name": "ORGUNIT_ROOT",
						"type": "String"
					},
					{
						"name": "CHARGE",
						"type": "String"
					},
					{
						"name": "SLEVEL",
						"type": "String"
					},
					{
						"name": "EQUIP",
						"type": "String"
					},
					{
						"name": "RESOURCEID",
						"type": "String"
					},
					{
						"name": "REQUESTOR",
						"type": "String"
					},
					{
						"name": "ABSTRACT",
						"type": "String"
					},
					{
						"name": "DESCRIPT",
						"type": "String"
					},
					{
						"name": "OPENDATE",
						"type": "String"
					},
					{
						"name": "CLOSEDATE",
						"type": "String"
					},
					{
						"name": "CLOSED",
						"type": "String"
					},
					{
						"name": "LASTACTION",
						"type": "String"
					},
					{
						"name": "LASTANALYST",
						"type": "String"
					},
					{
						"name": "LASTSTATUS",
						"type": "String"
					},
					{
						"name": "LASTPRIORITY",
						"type": "String"
					},
					{
						"name": "LASTREOPEN",
						"type": "String"
					},
					{
						"name": "LASTACTIONATEND",
						"type": "String"
					},
					{
						"name": "LASTACTTYPE",
						"type": "String"
					},
					{
						"name": "REFDATE",
						"type": "String"
					},
					{
						"name": "RESPDATE",
						"type": "String"
					},
					{
						"name": "RESPTIME",
						"type": "String"
					},
					{
						"name": "RESLTIME",
						"type": "String"
					},
					{
						"name": "RESPMINS",
						"type": "String"
					},
					{
						"name": "RESLMINS",
						"type": "String"
					},
					{
						"name": "RESPREMAINS",
						"type": "String"
					},
					{
						"name": "RESLREMAINS",
						"type": "String"
					},
					{
						"name": "RESPMODE",
						"type": "String"
					},
					{
						"name": "RESLMODE",
						"type": "String"
					},
					{
						"name": "NOCOMPUTE",
						"type": "String"
					},
					{
						"name": "RLOCKED",
						"type": "String"
					},
					{
						"name": "ESTIMCOST",
						"type": "String"
					},
					{
						"name": "TOTALCOST",
						"type": "String"
					},
					{
						"name": "APROVANLTYPE",
						"type": "String"
					},
					{
						"name": "APROVANALYST",
						"type": "String"
					},
					{
						"name": "APROVCLITYPE",
						"type": "String"
					},
					{
						"name": "APROVCLIEXACTOUNIT",
						"type": "String"
					},
					{
						"name": "MLEVELAPROV",
						"type": "String"
					},
					{
						"name": "OUNITAPROV",
						"type": "String"
					},
					{
						"name": "CLIENTAPROV",
						"type": "String"
					},
					{
						"name": "PACKAGE",
						"type": "String"
					},
					{
						"name": "PROJECT",
						"type": "String"
					},
					{
						"name": "REQPARENT",
						"type": "String"
					},
					{
						"name": "PAYMETHOD",
						"type": "String"
					},
					{
						"name": "WORKFLOW",
						"type": "String"
					},
					{
						"name": "SEVENT",
						"type": "String"
					},
					{
						"name": "CURRSEVENT",
						"type": "String"
					},
					{
						"name": "LASTSEVENT",
						"type": "String"
					},
					{
						"name": "REQWORKFLOW",
						"type": "String"
					},
					{
						"name": "ORIGCATEGORY",
						"type": "String"
					},
					{
						"name": "ORIGPRODUCT",
						"type": "String"
					},
					{
						"name": "ORIGPROCESS",
						"type": "String"
					},
					{
						"name": "ORIGPROBLEM",
						"type": "String"
					},
					{
						"name": "TIMEZONE",
						"type": "String"
					},
					{
						"name": "ID3PART",
						"type": "String"
					},
					{
						"name": "MQI_PROFILEID",
						"type": "String"
					},
					{
						"name": "MQI_VERIFIED",
						"type": "String"
					},
					{
						"name": "VIEWPROJECT",
						"type": "String"
					},
					{
						"name": "PROJSTARTED",
						"type": "String"
					},
					{
						"name": "TOTALATTACH",
						"type": "String"
					},
					{
						"name": "TOTALATTACHACT",
						"type": "String"
					},
					{
						"name": "INSERTDATE",
						"type": "String"
					},
					{
						"name": "UPDATEDATE",
						"type": "String"
					},
					{
						"name": "QFORM",
						"type": "String"
					},
					{
						"name": "QFORMSCRIPT",
						"type": "String"
					},
					{
						"name": "QSURVEY",
						"type": "String"
					},
					{
						"name": "QSESSIONFORM",
						"type": "String"
					},
					{
						"name": "QSESSIONSURVEY",
						"type": "String"
					},
					{
						"name": "REQUESTFLAGS",
						"type": "String"
					},
					{
						"name": "V_ASSOCIATION",
						"type": "String"
					},
					{
						"name": "V_ID_CONTRACT",
						"type": "String"
					},
					{
						"name": "V_ID_PROJECT",
						"type": "String"
					},
					{
						"name": "V_IS_PROJECT",
						"type": "String"
					},
					{
						"name": "V_HAS_PROJECT",
						"type": "String"
					},
					{
						"name": "V_HAS_APPROVER",
						"type": "String"
					},
					{
						"name": "LASTSEQUENCE",
						"type": "String"
					},
					{
						"name": "PRBPARENT",
						"type": "String"
					},
					{
						"name": "LASTRECALCDATE",
						"type": "String"
					},
					{
						"name": "LASTAPPROVCNTX",
						"type": "String"
					},
					{
						"name": "LASTAPPROVUSER",
						"type": "String"
					},
					{
						"name": "LASTAPPROVCODE",
						"type": "String"
					},
					{
						"name": "CURRAPPROVCODE",
						"type": "String"
					},
					{
						"name": "ORIGNOCOMPUTE",
						"type": "String"
					},
					{
						"name": "ORIGRSTATUS",
						"type": "String"
					},
					{
						"name": "ORIGRPRIORITY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Requestia')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FILE_REQUESTS_NEW')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_hmaisbrasildatadriven",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "ho_aux_request.csv",
							"type": "Expression"
						},
						"fileSystem": "requestia"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FILE_REQUEST_AUX')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Requestia",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Requestia"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "ho_aux_request.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "REQUEST",
						"type": "String"
					},
					{
						"name": "CLIENT",
						"type": "String"
					},
					{
						"name": "ORIGANAL",
						"type": "String"
					},
					{
						"name": "CURRANAL",
						"type": "String"
					},
					{
						"name": "GROUPANAL",
						"type": "String"
					},
					{
						"name": "LASTANAL",
						"type": "String"
					},
					{
						"name": "LASTANLGRP",
						"type": "String"
					},
					{
						"name": "ORIGGROUP",
						"type": "String"
					},
					{
						"name": "CURRGROUP",
						"type": "String"
					},
					{
						"name": "LASTGROUP",
						"type": "String"
					},
					{
						"name": "GRGROUP",
						"type": "String"
					},
					{
						"name": "CATEGORY",
						"type": "String"
					},
					{
						"name": "PRODUCT",
						"type": "String"
					},
					{
						"name": "PROCESS",
						"type": "String"
					},
					{
						"name": "PROBLEM",
						"type": "String"
					},
					{
						"name": "RSTATUS",
						"type": "String"
					},
					{
						"name": "RPRIORITY",
						"type": "String"
					},
					{
						"name": "REQTYPE",
						"type": "String"
					},
					{
						"name": "REQSOURCE",
						"type": "String"
					},
					{
						"name": "LOCATION",
						"type": "String"
					},
					{
						"name": "ORGUNIT",
						"type": "String"
					},
					{
						"name": "ORGUNIT_ROOT",
						"type": "String"
					},
					{
						"name": "CHARGE",
						"type": "String"
					},
					{
						"name": "SLEVEL",
						"type": "String"
					},
					{
						"name": "EQUIP",
						"type": "String"
					},
					{
						"name": "RESOURCEID",
						"type": "String"
					},
					{
						"name": "REQUESTOR",
						"type": "String"
					},
					{
						"name": "ABSTRACT",
						"type": "String"
					},
					{
						"name": "DESCRIPT",
						"type": "String"
					},
					{
						"name": "OPENDATE",
						"type": "String"
					},
					{
						"name": "CLOSEDATE",
						"type": "String"
					},
					{
						"name": "CLOSED",
						"type": "String"
					},
					{
						"name": "LASTACTION",
						"type": "String"
					},
					{
						"name": "LASTANALYST",
						"type": "String"
					},
					{
						"name": "LASTSTATUS",
						"type": "String"
					},
					{
						"name": "LASTPRIORITY",
						"type": "String"
					},
					{
						"name": "LASTREOPEN",
						"type": "String"
					},
					{
						"name": "LASTACTIONATEND",
						"type": "String"
					},
					{
						"name": "LASTACTTYPE",
						"type": "String"
					},
					{
						"name": "REFDATE",
						"type": "String"
					},
					{
						"name": "RESPDATE",
						"type": "String"
					},
					{
						"name": "RESPTIME",
						"type": "String"
					},
					{
						"name": "RESLTIME",
						"type": "String"
					},
					{
						"name": "RESPMINS",
						"type": "String"
					},
					{
						"name": "RESLMINS",
						"type": "String"
					},
					{
						"name": "RESPREMAINS",
						"type": "String"
					},
					{
						"name": "RESLREMAINS",
						"type": "String"
					},
					{
						"name": "RESPMODE",
						"type": "String"
					},
					{
						"name": "RESLMODE",
						"type": "String"
					},
					{
						"name": "NOCOMPUTE",
						"type": "String"
					},
					{
						"name": "RLOCKED",
						"type": "String"
					},
					{
						"name": "ESTIMCOST",
						"type": "String"
					},
					{
						"name": "TOTALCOST",
						"type": "String"
					},
					{
						"name": "APROVANLTYPE",
						"type": "String"
					},
					{
						"name": "APROVANALYST",
						"type": "String"
					},
					{
						"name": "APROVCLITYPE",
						"type": "String"
					},
					{
						"name": "APROVCLIEXACTOUNIT",
						"type": "String"
					},
					{
						"name": "MLEVELAPROV",
						"type": "String"
					},
					{
						"name": "OUNITAPROV",
						"type": "String"
					},
					{
						"name": "CLIENTAPROV",
						"type": "String"
					},
					{
						"name": "PACKAGE",
						"type": "String"
					},
					{
						"name": "PROJECT",
						"type": "String"
					},
					{
						"name": "REQPARENT",
						"type": "String"
					},
					{
						"name": "PAYMETHOD",
						"type": "String"
					},
					{
						"name": "WORKFLOW",
						"type": "String"
					},
					{
						"name": "SEVENT",
						"type": "String"
					},
					{
						"name": "CURRSEVENT",
						"type": "String"
					},
					{
						"name": "LASTSEVENT",
						"type": "String"
					},
					{
						"name": "REQWORKFLOW",
						"type": "String"
					},
					{
						"name": "ORIGCATEGORY",
						"type": "String"
					},
					{
						"name": "ORIGPRODUCT",
						"type": "String"
					},
					{
						"name": "ORIGPROCESS",
						"type": "String"
					},
					{
						"name": "ORIGPROBLEM",
						"type": "String"
					},
					{
						"name": "TIMEZONE",
						"type": "String"
					},
					{
						"name": "ID3PART",
						"type": "String"
					},
					{
						"name": "MQI_PROFILEID",
						"type": "String"
					},
					{
						"name": "MQI_VERIFIED",
						"type": "String"
					},
					{
						"name": "VIEWPROJECT",
						"type": "String"
					},
					{
						"name": "PROJSTARTED",
						"type": "String"
					},
					{
						"name": "TOTALATTACH",
						"type": "String"
					},
					{
						"name": "TOTALATTACHACT",
						"type": "String"
					},
					{
						"name": "INSERTDATE",
						"type": "String"
					},
					{
						"name": "UPDATEDATE",
						"type": "String"
					},
					{
						"name": "QFORM",
						"type": "String"
					},
					{
						"name": "QFORMSCRIPT",
						"type": "String"
					},
					{
						"name": "QSURVEY",
						"type": "String"
					},
					{
						"name": "QSESSIONFORM",
						"type": "String"
					},
					{
						"name": "QSESSIONSURVEY",
						"type": "String"
					},
					{
						"name": "REQUESTFLAGS",
						"type": "String"
					},
					{
						"name": "V_ASSOCIATION",
						"type": "String"
					},
					{
						"name": "V_ID_CONTRACT",
						"type": "String"
					},
					{
						"name": "V_ID_PROJECT",
						"type": "String"
					},
					{
						"name": "V_IS_PROJECT",
						"type": "String"
					},
					{
						"name": "V_HAS_PROJECT",
						"type": "String"
					},
					{
						"name": "V_HAS_APPROVER",
						"type": "String"
					},
					{
						"name": "LASTSEQUENCE",
						"type": "String"
					},
					{
						"name": "PRBPARENT",
						"type": "String"
					},
					{
						"name": "LASTRECALCDATE",
						"type": "String"
					},
					{
						"name": "LASTAPPROVCNTX",
						"type": "String"
					},
					{
						"name": "LASTAPPROVUSER",
						"type": "String"
					},
					{
						"name": "LASTAPPROVCODE",
						"type": "String"
					},
					{
						"name": "CURRAPPROVCODE",
						"type": "String"
					},
					{
						"name": "ORIGNOCOMPUTE",
						"type": "String"
					},
					{
						"name": "ORIGRSTATUS",
						"type": "String"
					},
					{
						"name": "ORIGRPRIORITY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Requestia')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FILE_SURVEY')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_hmaisbrasildatadriven",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "ho_aux_survey.csv",
						"fileSystem": "requestia"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIVE9_DS_CSV_ESP0001')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_hmaisbrasildatadriven",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "FIVE9_ESP0001.csv",
						"fileSystem": "five9"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIVE9_DS_CSV_ESP0002')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_hmaisbrasildatadriven",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "FIVE9_ESP0002.csv",
						"fileSystem": "five9"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIVE9_DS_CSV_ESP0003')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_hmaisbrasildatadriven",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "FIVE9_ESP0003.csv",
						"fileSystem": "five9"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FIVE9_DS_CSV_ESP0004')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sv_hmaisbrasildatadriven",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "FIVE9_ESP0004.csv",
						"fileSystem": "five9"
					},
					"columnDelimiter": ";",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/sv_hmaisbrasildatadriven')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HMO_SIMAH')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HMO_SIMAH",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HMO_SIMAH')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOB_CSV_NC_AgentesPorDia')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOB"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "AgentesPorDiaHOBL2.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Usuario",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Recusas",
						"type": "String"
					},
					{
						"name": "Recebidas",
						"type": "String"
					},
					{
						"name": "Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Transferencias",
						"type": "String"
					},
					{
						"name": "Efetuadas",
						"type": "String"
					},
					{
						"name": "Efetuadas Tratados",
						"type": "String"
					},
					{
						"name": "% Taxa de Contato",
						"type": "String"
					},
					{
						"name": "Tempo Atendidas",
						"type": "String"
					},
					{
						"name": "Tempo Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Tempo Efetuadas",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Total Falado",
						"type": "String"
					},
					{
						"name": "Tempo Toque Agente",
						"type": "String"
					},
					{
						"name": "Tempo Toque Cliente",
						"type": "String"
					},
					{
						"name": "Tempo Pausa",
						"type": "String"
					},
					{
						"name": "Tempo Estouro",
						"type": "String"
					},
					{
						"name": "Tempo Dispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Indispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Logado",
						"type": "String"
					},
					{
						"name": "Tempo Deslogado",
						"type": "String"
					},
					{
						"name": "% Falado x Logado",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOB_CSV_NC_AgentesPorDia_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_AgentesPorDia_HOBL2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOB/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Usuario",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Recusas",
						"type": "String"
					},
					{
						"name": "Recebidas",
						"type": "String"
					},
					{
						"name": "Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Transferencias",
						"type": "String"
					},
					{
						"name": "Efetuadas",
						"type": "String"
					},
					{
						"name": "Efetuadas Tratados",
						"type": "String"
					},
					{
						"name": "% Taxa de Contato",
						"type": "String"
					},
					{
						"name": "Tempo Atendidas",
						"type": "String"
					},
					{
						"name": "Tempo Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Tempo Efetuadas",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Total Falado",
						"type": "String"
					},
					{
						"name": "Tempo Toque Agente",
						"type": "String"
					},
					{
						"name": "Tempo Toque Cliente",
						"type": "String"
					},
					{
						"name": "Tempo Pausa",
						"type": "String"
					},
					{
						"name": "Tempo Estouro",
						"type": "String"
					},
					{
						"name": "Tempo Dispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Indispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Logado",
						"type": "String"
					},
					{
						"name": "Tempo Deslogado",
						"type": "String"
					},
					{
						"name": "% Falado x Logado",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_AgentesPorDia_HOBL2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOB_CSV_NC_AgentesPorHora')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOB"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "AgentesPorHoraHOBL2.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Usuario",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Recusas",
						"type": "String"
					},
					{
						"name": "Recebidas",
						"type": "String"
					},
					{
						"name": "Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Transferencias",
						"type": "String"
					},
					{
						"name": "Efetuadas",
						"type": "String"
					},
					{
						"name": "Efetuadas Tratados",
						"type": "String"
					},
					{
						"name": "% Taxa de Contato",
						"type": "String"
					},
					{
						"name": "Tempo Atendidas",
						"type": "String"
					},
					{
						"name": "Tempo Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Tempo Efetuadas",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Total Falado",
						"type": "String"
					},
					{
						"name": "Tempo Toque Agente",
						"type": "String"
					},
					{
						"name": "Tempo Toque Cliente",
						"type": "String"
					},
					{
						"name": "Tempo Pausa",
						"type": "String"
					},
					{
						"name": "Tempo Estouro",
						"type": "String"
					},
					{
						"name": "Tempo Dispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Indispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Logado",
						"type": "String"
					},
					{
						"name": "Tempo Deslogado",
						"type": "String"
					},
					{
						"name": "% Falado x Logado",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOB_CSV_NC_AgentesPorHora_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_AgentesPorHora_HOBL2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOB/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Usuario",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Recusas",
						"type": "String"
					},
					{
						"name": "Recebidas",
						"type": "String"
					},
					{
						"name": "Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Transferencias",
						"type": "String"
					},
					{
						"name": "Efetuadas",
						"type": "String"
					},
					{
						"name": "Efetuadas Tratados",
						"type": "String"
					},
					{
						"name": "% Taxa de Contato",
						"type": "String"
					},
					{
						"name": "Tempo Atendidas",
						"type": "String"
					},
					{
						"name": "Tempo Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Tempo Efetuadas",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Total Falado",
						"type": "String"
					},
					{
						"name": "Tempo Toque Agente",
						"type": "String"
					},
					{
						"name": "Tempo Toque Cliente",
						"type": "String"
					},
					{
						"name": "Tempo Pausa",
						"type": "String"
					},
					{
						"name": "Tempo Estouro",
						"type": "String"
					},
					{
						"name": "Tempo Dispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Indispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Logado",
						"type": "String"
					},
					{
						"name": "Tempo Deslogado",
						"type": "String"
					},
					{
						"name": "% Falado x Logado",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_AgentesPorHora_HOBL2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOB_CSV_NC_BilheteLigacoes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Arquivo Nexcore BilheteLigacoes.csv",
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOB"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "BilheteLigacoesHOBL2.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Data",
						"type": "String"
					},
					{
						"name": "Hora",
						"type": "String"
					},
					{
						"name": "Usu�rio",
						"type": "String"
					},
					{
						"name": "Tipo",
						"type": "String"
					},
					{
						"name": "Origem",
						"type": "String"
					},
					{
						"name": "Destino",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Centro de Custo",
						"type": "String"
					},
					{
						"name": "Tempo Tarifado",
						"type": "String"
					},
					{
						"name": "Tempo Decorrido",
						"type": "String"
					},
					{
						"name": "Campanha",
						"type": "String"
					},
					{
						"name": "Fila",
						"type": "String"
					},
					{
						"name": "Unique ID",
						"type": "String"
					},
					{
						"name": "Linked ID",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOB_CSV_NC_Bilhete_Ligacoes_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_Bilhetes_HOBL2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOB/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_Bilhetes_HOBL2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOB_CSV_NC_FilasPorHora')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOB"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "FilasPorHoraHOBL2.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Fila",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas Ate NS",
						"type": "String"
					},
					{
						"name": "Atendidas Apos NS",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Abandonos Ate NS",
						"type": "String"
					},
					{
						"name": "Abandonos Apos NS",
						"type": "String"
					},
					{
						"name": "Abandonos Anuncio Inicial",
						"type": "String"
					},
					{
						"name": "Abandonos",
						"type": "String"
					},
					{
						"name": "Roteamentos Timeout",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Cheia",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Vazia",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Sem Ags. Disp.",
						"type": "String"
					},
					{
						"name": "Roteamentos Caixa Postal",
						"type": "String"
					},
					{
						"name": "Roteamentos",
						"type": "String"
					},
					{
						"name": "Fora Horario Antes",
						"type": "String"
					},
					{
						"name": "Fora Horario Intervalo",
						"type": "String"
					},
					{
						"name": "Fora Horario Depois",
						"type": "String"
					},
					{
						"name": "Fora Horario",
						"type": "String"
					},
					{
						"name": "Total Recebidas",
						"type": "String"
					},
					{
						"name": "Callback Tratados",
						"type": "String"
					},
					{
						"name": "Callback Nao Tratados",
						"type": "String"
					},
					{
						"name": "Callback",
						"type": "String"
					},
					{
						"name": "Tempo Toque",
						"type": "String"
					},
					{
						"name": "Tempo Falado",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Medio Pausa ACW",
						"type": "String"
					},
					{
						"name": "Tempo Medio Produtivo AHT",
						"type": "String"
					},
					{
						"name": "% Nivel Servico",
						"type": "String"
					},
					{
						"name": "% Taxa Atendimento",
						"type": "String"
					},
					{
						"name": "% Taxa Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Medio Espera",
						"type": "String"
					},
					{
						"name": "Tempo Medio para Atender",
						"type": "String"
					},
					{
						"name": "Tempo Total para Atender",
						"type": "String"
					},
					{
						"name": "Tempo Medio para Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Total para Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Total Espera",
						"type": "String"
					},
					{
						"name": "Agentes Logados - Minimo",
						"type": "String"
					},
					{
						"name": "Agentes Logados - Maximo",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera - Minimo",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera - Medio",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera = Maximo",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOB_CSV_NC_FilasPorHora_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_FIlasPorHoras_HOBL2",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOB/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Fila",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas Ate NS",
						"type": "String"
					},
					{
						"name": "Atendidas Apos NS",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Abandonos Ate NS",
						"type": "String"
					},
					{
						"name": "Abandonos Apos NS",
						"type": "String"
					},
					{
						"name": "Abandonos Anuncio Inicial",
						"type": "String"
					},
					{
						"name": "Abandonos",
						"type": "String"
					},
					{
						"name": "Roteamentos Timeout",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Cheia",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Vazia",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Sem Ags. Disp.",
						"type": "String"
					},
					{
						"name": "Roteamentos Caixa Postal",
						"type": "String"
					},
					{
						"name": "Roteamentos",
						"type": "String"
					},
					{
						"name": "Fora Horario Antes",
						"type": "String"
					},
					{
						"name": "Fora Horario Intervalo",
						"type": "String"
					},
					{
						"name": "Fora Horario Depois",
						"type": "String"
					},
					{
						"name": "Fora Horario",
						"type": "String"
					},
					{
						"name": "Total Recebidas",
						"type": "String"
					},
					{
						"name": "Callback Tratados",
						"type": "String"
					},
					{
						"name": "Callback Nao Tratados",
						"type": "String"
					},
					{
						"name": "Callback",
						"type": "String"
					},
					{
						"name": "Tempo Toque",
						"type": "String"
					},
					{
						"name": "Tempo Falado",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Medio Pausa ACW",
						"type": "String"
					},
					{
						"name": "Tempo Medio Produtivo AHT",
						"type": "String"
					},
					{
						"name": "% Nivel Servico",
						"type": "String"
					},
					{
						"name": "% Taxa Atendimento",
						"type": "String"
					},
					{
						"name": "% Taxa Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Medio Espera",
						"type": "String"
					},
					{
						"name": "Tempo Medio para Atender",
						"type": "String"
					},
					{
						"name": "Tempo Total para Atender",
						"type": "String"
					},
					{
						"name": "Tempo Medio para Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Total para Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Total Espera",
						"type": "String"
					},
					{
						"name": "Agentes Logados - Minimo",
						"type": "String"
					},
					{
						"name": "Agentes Logados - Maximo",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera - Minimo",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera - Medio",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera = Maximo",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_FIlasPorHoras_HOBL2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOSAG_CSV_NC_AgentesPorDia')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOSAG"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "AgentesPorDiaSADALLA.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Usuario",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Recusas",
						"type": "String"
					},
					{
						"name": "Recebidas",
						"type": "String"
					},
					{
						"name": "Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Transferencias",
						"type": "String"
					},
					{
						"name": "Efetuadas",
						"type": "String"
					},
					{
						"name": "Efetuadas Tratados",
						"type": "String"
					},
					{
						"name": "% Taxa de Contato",
						"type": "String"
					},
					{
						"name": "Tempo Atendidas",
						"type": "String"
					},
					{
						"name": "Tempo Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Tempo Efetuadas",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Total Falado",
						"type": "String"
					},
					{
						"name": "Tempo Toque Agente",
						"type": "String"
					},
					{
						"name": "Tempo Toque Cliente",
						"type": "String"
					},
					{
						"name": "Tempo Pausa",
						"type": "String"
					},
					{
						"name": "Tempo Estouro",
						"type": "String"
					},
					{
						"name": "Tempo Dispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Indispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Logado",
						"type": "String"
					},
					{
						"name": "Tempo Deslogado",
						"type": "String"
					},
					{
						"name": "% Falado x Logado",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOSAG_CSV_NC_AgentesPorDia_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_AgentesPorDia_SADALLA",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOSAG/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Usuario",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Recusas",
						"type": "String"
					},
					{
						"name": "Recebidas",
						"type": "String"
					},
					{
						"name": "Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Transferencias",
						"type": "String"
					},
					{
						"name": "Efetuadas",
						"type": "String"
					},
					{
						"name": "Efetuadas Tratados",
						"type": "String"
					},
					{
						"name": "% Taxa de Contato",
						"type": "String"
					},
					{
						"name": "Tempo Atendidas",
						"type": "String"
					},
					{
						"name": "Tempo Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Tempo Efetuadas",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Total Falado",
						"type": "String"
					},
					{
						"name": "Tempo Toque Agente",
						"type": "String"
					},
					{
						"name": "Tempo Toque Cliente",
						"type": "String"
					},
					{
						"name": "Tempo Pausa",
						"type": "String"
					},
					{
						"name": "Tempo Estouro",
						"type": "String"
					},
					{
						"name": "Tempo Dispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Indispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Logado",
						"type": "String"
					},
					{
						"name": "Tempo Deslogado",
						"type": "String"
					},
					{
						"name": "% Falado x Logado",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_AgentesPorDia_SADALLA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOSAG_CSV_NC_AgentesPorHora')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOSAG"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "AgentesPorHoraSADALLA.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Usuario",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Recusas",
						"type": "String"
					},
					{
						"name": "Recebidas",
						"type": "String"
					},
					{
						"name": "Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Transferencias",
						"type": "String"
					},
					{
						"name": "Efetuadas",
						"type": "String"
					},
					{
						"name": "Efetuadas Tratados",
						"type": "String"
					},
					{
						"name": "% Taxa de Contato",
						"type": "String"
					},
					{
						"name": "Tempo Atendidas",
						"type": "String"
					},
					{
						"name": "Tempo Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Tempo Efetuadas",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Total Falado",
						"type": "String"
					},
					{
						"name": "Tempo Toque Agente",
						"type": "String"
					},
					{
						"name": "Tempo Toque Cliente",
						"type": "String"
					},
					{
						"name": "Tempo Pausa",
						"type": "String"
					},
					{
						"name": "Tempo Estouro",
						"type": "String"
					},
					{
						"name": "Tempo Dispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Indispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Logado",
						"type": "String"
					},
					{
						"name": "Tempo Deslogado",
						"type": "String"
					},
					{
						"name": "% Falado x Logado",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOSAG_CSV_NC_AgentesPorHora_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_AgentesPorHora_SADALLA",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOSAG/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Usuario",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Recusas",
						"type": "String"
					},
					{
						"name": "Recebidas",
						"type": "String"
					},
					{
						"name": "Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Transferencias",
						"type": "String"
					},
					{
						"name": "Efetuadas",
						"type": "String"
					},
					{
						"name": "Efetuadas Tratados",
						"type": "String"
					},
					{
						"name": "% Taxa de Contato",
						"type": "String"
					},
					{
						"name": "Tempo Atendidas",
						"type": "String"
					},
					{
						"name": "Tempo Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Tempo Efetuadas",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Total Falado",
						"type": "String"
					},
					{
						"name": "Tempo Toque Agente",
						"type": "String"
					},
					{
						"name": "Tempo Toque Cliente",
						"type": "String"
					},
					{
						"name": "Tempo Pausa",
						"type": "String"
					},
					{
						"name": "Tempo Estouro",
						"type": "String"
					},
					{
						"name": "Tempo Dispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Indispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Logado",
						"type": "String"
					},
					{
						"name": "Tempo Deslogado",
						"type": "String"
					},
					{
						"name": "% Falado x Logado",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_AgentesPorHora_SADALLA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOSAG_CSV_NC_BilheteLigacoes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Arquivo Nexcore BilheteLigacoes.csv",
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOSAG"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "BilheteLigacoesSADALLA.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Data",
						"type": "String"
					},
					{
						"name": "Hora",
						"type": "String"
					},
					{
						"name": "Usu�rio",
						"type": "String"
					},
					{
						"name": "Tipo",
						"type": "String"
					},
					{
						"name": "Origem",
						"type": "String"
					},
					{
						"name": "Destino",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Centro de Custo",
						"type": "String"
					},
					{
						"name": "Tempo Tarifado",
						"type": "String"
					},
					{
						"name": "Tempo Decorrido",
						"type": "String"
					},
					{
						"name": "Campanha",
						"type": "String"
					},
					{
						"name": "Fila",
						"type": "String"
					},
					{
						"name": "Unique ID",
						"type": "String"
					},
					{
						"name": "Linked ID",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOSAG_CSV_NC_Bilhete_Ligacoes_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_Bilhetes_HOSL",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOSAG/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_Bilhetes_HOSL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOSAG_CSV_NC_FilasPorHora')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOSAG"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "FilasPorHoraSADALLA.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Fila",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas Ate NS",
						"type": "String"
					},
					{
						"name": "Atendidas Apos NS",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Abandonos Ate NS",
						"type": "String"
					},
					{
						"name": "Abandonos Apos NS",
						"type": "String"
					},
					{
						"name": "Abandonos Anuncio Inicial",
						"type": "String"
					},
					{
						"name": "Abandonos",
						"type": "String"
					},
					{
						"name": "Roteamentos Timeout",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Cheia",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Vazia",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Sem Ags. Disp.",
						"type": "String"
					},
					{
						"name": "Roteamentos Caixa Postal",
						"type": "String"
					},
					{
						"name": "Roteamentos",
						"type": "String"
					},
					{
						"name": "Fora Horario Antes",
						"type": "String"
					},
					{
						"name": "Fora Horario Intervalo",
						"type": "String"
					},
					{
						"name": "Fora Horario Depois",
						"type": "String"
					},
					{
						"name": "Fora Horario",
						"type": "String"
					},
					{
						"name": "Total Recebidas",
						"type": "String"
					},
					{
						"name": "Callback Tratados",
						"type": "String"
					},
					{
						"name": "Callback Nao Tratados",
						"type": "String"
					},
					{
						"name": "Callback",
						"type": "String"
					},
					{
						"name": "Tempo Toque",
						"type": "String"
					},
					{
						"name": "Tempo Falado",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Medio Pausa ACW",
						"type": "String"
					},
					{
						"name": "Tempo Medio Produtivo AHT",
						"type": "String"
					},
					{
						"name": "% Nivel Servico",
						"type": "String"
					},
					{
						"name": "% Taxa Atendimento",
						"type": "String"
					},
					{
						"name": "% Taxa Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Medio Espera",
						"type": "String"
					},
					{
						"name": "Tempo Medio para Atender",
						"type": "String"
					},
					{
						"name": "Tempo Total para Atender",
						"type": "String"
					},
					{
						"name": "Tempo Medio para Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Total para Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Total Espera",
						"type": "String"
					},
					{
						"name": "Agentes Logados - Minimo",
						"type": "String"
					},
					{
						"name": "Agentes Logados - Maximo",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera - Minimo",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera - Medio",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera = Maximo",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOSAG_CSV_NC_FilasPorHora_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_FIlasPorHoras_SADALLA",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOSAG/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Fila",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas Ate NS",
						"type": "String"
					},
					{
						"name": "Atendidas Apos NS",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Abandonos Ate NS",
						"type": "String"
					},
					{
						"name": "Abandonos Apos NS",
						"type": "String"
					},
					{
						"name": "Abandonos Anuncio Inicial",
						"type": "String"
					},
					{
						"name": "Abandonos",
						"type": "String"
					},
					{
						"name": "Roteamentos Timeout",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Cheia",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Vazia",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Sem Ags. Disp.",
						"type": "String"
					},
					{
						"name": "Roteamentos Caixa Postal",
						"type": "String"
					},
					{
						"name": "Roteamentos",
						"type": "String"
					},
					{
						"name": "Fora Horario Antes",
						"type": "String"
					},
					{
						"name": "Fora Horario Intervalo",
						"type": "String"
					},
					{
						"name": "Fora Horario Depois",
						"type": "String"
					},
					{
						"name": "Fora Horario",
						"type": "String"
					},
					{
						"name": "Total Recebidas",
						"type": "String"
					},
					{
						"name": "Callback Tratados",
						"type": "String"
					},
					{
						"name": "Callback Nao Tratados",
						"type": "String"
					},
					{
						"name": "Callback",
						"type": "String"
					},
					{
						"name": "Tempo Toque",
						"type": "String"
					},
					{
						"name": "Tempo Falado",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Medio Pausa ACW",
						"type": "String"
					},
					{
						"name": "Tempo Medio Produtivo AHT",
						"type": "String"
					},
					{
						"name": "% Nivel Servico",
						"type": "String"
					},
					{
						"name": "% Taxa Atendimento",
						"type": "String"
					},
					{
						"name": "% Taxa Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Medio Espera",
						"type": "String"
					},
					{
						"name": "Tempo Medio para Atender",
						"type": "String"
					},
					{
						"name": "Tempo Total para Atender",
						"type": "String"
					},
					{
						"name": "Tempo Medio para Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Total para Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Total Espera",
						"type": "String"
					},
					{
						"name": "Agentes Logados - Minimo",
						"type": "String"
					},
					{
						"name": "Agentes Logados - Maximo",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera - Minimo",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera - Medio",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera = Maximo",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_FIlasPorHoras_SADALLA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOSL_CSV_NC_AgentesPorDia')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOSL"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "AgentesPorDiaHOSL.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Usuario",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Recusas",
						"type": "String"
					},
					{
						"name": "Recebidas",
						"type": "String"
					},
					{
						"name": "Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Transferencias",
						"type": "String"
					},
					{
						"name": "Efetuadas",
						"type": "String"
					},
					{
						"name": "Efetuadas Tratados",
						"type": "String"
					},
					{
						"name": "% Taxa de Contato",
						"type": "String"
					},
					{
						"name": "Tempo Atendidas",
						"type": "String"
					},
					{
						"name": "Tempo Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Tempo Efetuadas",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Total Falado",
						"type": "String"
					},
					{
						"name": "Tempo Toque Agente",
						"type": "String"
					},
					{
						"name": "Tempo Toque Cliente",
						"type": "String"
					},
					{
						"name": "Tempo Pausa",
						"type": "String"
					},
					{
						"name": "Tempo Estouro",
						"type": "String"
					},
					{
						"name": "Tempo Dispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Indispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Logado",
						"type": "String"
					},
					{
						"name": "Tempo Deslogado",
						"type": "String"
					},
					{
						"name": "% Falado x Logado",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOSL_CSV_NC_AgentesPorDia_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_AgentesPorDia_HOSL",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOSL/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Usuario",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Recusas",
						"type": "String"
					},
					{
						"name": "Recebidas",
						"type": "String"
					},
					{
						"name": "Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Transferencias",
						"type": "String"
					},
					{
						"name": "Efetuadas",
						"type": "String"
					},
					{
						"name": "Efetuadas Tratados",
						"type": "String"
					},
					{
						"name": "% Taxa de Contato",
						"type": "String"
					},
					{
						"name": "Tempo Atendidas",
						"type": "String"
					},
					{
						"name": "Tempo Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Tempo Efetuadas",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Total Falado",
						"type": "String"
					},
					{
						"name": "Tempo Toque Agente",
						"type": "String"
					},
					{
						"name": "Tempo Toque Cliente",
						"type": "String"
					},
					{
						"name": "Tempo Pausa",
						"type": "String"
					},
					{
						"name": "Tempo Estouro",
						"type": "String"
					},
					{
						"name": "Tempo Dispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Indispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Logado",
						"type": "String"
					},
					{
						"name": "Tempo Deslogado",
						"type": "String"
					},
					{
						"name": "% Falado x Logado",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_AgentesPorDia_HOSL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOSL_CSV_NC_AgentesPorHora')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOSL"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "AgentesPorHoraHOSL.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Usuario",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Recusas",
						"type": "String"
					},
					{
						"name": "Recebidas",
						"type": "String"
					},
					{
						"name": "Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Transferencias",
						"type": "String"
					},
					{
						"name": "Efetuadas",
						"type": "String"
					},
					{
						"name": "Efetuadas Tratados",
						"type": "String"
					},
					{
						"name": "% Taxa de Contato",
						"type": "String"
					},
					{
						"name": "Tempo Atendidas",
						"type": "String"
					},
					{
						"name": "Tempo Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Tempo Efetuadas",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Total Falado",
						"type": "String"
					},
					{
						"name": "Tempo Toque Agente",
						"type": "String"
					},
					{
						"name": "Tempo Toque Cliente",
						"type": "String"
					},
					{
						"name": "Tempo Pausa",
						"type": "String"
					},
					{
						"name": "Tempo Estouro",
						"type": "String"
					},
					{
						"name": "Tempo Dispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Indispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Logado",
						"type": "String"
					},
					{
						"name": "Tempo Deslogado",
						"type": "String"
					},
					{
						"name": "% Falado x Logado",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOSL_CSV_NC_AgentesPorHora_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_AgentesPorHora_HOSL",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOSL/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Usuario",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Recusas",
						"type": "String"
					},
					{
						"name": "Recebidas",
						"type": "String"
					},
					{
						"name": "Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Transferencias",
						"type": "String"
					},
					{
						"name": "Efetuadas",
						"type": "String"
					},
					{
						"name": "Efetuadas Tratados",
						"type": "String"
					},
					{
						"name": "% Taxa de Contato",
						"type": "String"
					},
					{
						"name": "Tempo Atendidas",
						"type": "String"
					},
					{
						"name": "Tempo Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Tempo Efetuadas",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Total Falado",
						"type": "String"
					},
					{
						"name": "Tempo Toque Agente",
						"type": "String"
					},
					{
						"name": "Tempo Toque Cliente",
						"type": "String"
					},
					{
						"name": "Tempo Pausa",
						"type": "String"
					},
					{
						"name": "Tempo Estouro",
						"type": "String"
					},
					{
						"name": "Tempo Dispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Indispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Logado",
						"type": "String"
					},
					{
						"name": "Tempo Deslogado",
						"type": "String"
					},
					{
						"name": "% Falado x Logado",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_AgentesPorHora_HOSL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOSL_CSV_NC_BilheteLigacoes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Arquivo Nexcore BilheteLigacoes.csv",
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOSL"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "BilheteLigacoesHOSL.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Data",
						"type": "String"
					},
					{
						"name": "Hora",
						"type": "String"
					},
					{
						"name": "Usu�rio",
						"type": "String"
					},
					{
						"name": "Tipo",
						"type": "String"
					},
					{
						"name": "Origem",
						"type": "String"
					},
					{
						"name": "Destino",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Centro de Custo",
						"type": "String"
					},
					{
						"name": "Tempo Tarifado",
						"type": "String"
					},
					{
						"name": "Tempo Decorrido",
						"type": "String"
					},
					{
						"name": "Campanha",
						"type": "String"
					},
					{
						"name": "Fila",
						"type": "String"
					},
					{
						"name": "Unique ID",
						"type": "String"
					},
					{
						"name": "Linked ID",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOSL_CSV_NC_Bilhete_Ligacoes_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_Bilhetes_HOSL",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOSL/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_Bilhetes_HOSL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOSL_CSV_NC_FilasPorHora')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOSL"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "FilasPorHoraHOSL.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Fila",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas Ate NS",
						"type": "String"
					},
					{
						"name": "Atendidas Apos NS",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Abandonos Ate NS",
						"type": "String"
					},
					{
						"name": "Abandonos Apos NS",
						"type": "String"
					},
					{
						"name": "Abandonos Anuncio Inicial",
						"type": "String"
					},
					{
						"name": "Abandonos",
						"type": "String"
					},
					{
						"name": "Roteamentos Timeout",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Cheia",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Vazia",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Sem Ags. Disp.",
						"type": "String"
					},
					{
						"name": "Roteamentos Caixa Postal",
						"type": "String"
					},
					{
						"name": "Roteamentos",
						"type": "String"
					},
					{
						"name": "Fora Horario Antes",
						"type": "String"
					},
					{
						"name": "Fora Horario Intervalo",
						"type": "String"
					},
					{
						"name": "Fora Horario Depois",
						"type": "String"
					},
					{
						"name": "Fora Horario",
						"type": "String"
					},
					{
						"name": "Total Recebidas",
						"type": "String"
					},
					{
						"name": "Callback Tratados",
						"type": "String"
					},
					{
						"name": "Callback Nao Tratados",
						"type": "String"
					},
					{
						"name": "Callback",
						"type": "String"
					},
					{
						"name": "Tempo Toque",
						"type": "String"
					},
					{
						"name": "Tempo Falado",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Medio Pausa ACW",
						"type": "String"
					},
					{
						"name": "Tempo Medio Produtivo AHT",
						"type": "String"
					},
					{
						"name": "% Nivel Servico",
						"type": "String"
					},
					{
						"name": "% Taxa Atendimento",
						"type": "String"
					},
					{
						"name": "% Taxa Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Medio Espera",
						"type": "String"
					},
					{
						"name": "Tempo Medio para Atender",
						"type": "String"
					},
					{
						"name": "Tempo Total para Atender",
						"type": "String"
					},
					{
						"name": "Tempo Medio para Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Total para Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Total Espera",
						"type": "String"
					},
					{
						"name": "Agentes Logados - Minimo",
						"type": "String"
					},
					{
						"name": "Agentes Logados - Maximo",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera - Minimo",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera - Medio",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera = Maximo",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HOSL_CSV_NC_FilasPorHora_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_FIlasPorHoras_HOSL",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/HOSL/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Fila",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas Ate NS",
						"type": "String"
					},
					{
						"name": "Atendidas Apos NS",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Abandonos Ate NS",
						"type": "String"
					},
					{
						"name": "Abandonos Apos NS",
						"type": "String"
					},
					{
						"name": "Abandonos Anuncio Inicial",
						"type": "String"
					},
					{
						"name": "Abandonos",
						"type": "String"
					},
					{
						"name": "Roteamentos Timeout",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Cheia",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Vazia",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Sem Ags. Disp.",
						"type": "String"
					},
					{
						"name": "Roteamentos Caixa Postal",
						"type": "String"
					},
					{
						"name": "Roteamentos",
						"type": "String"
					},
					{
						"name": "Fora Horario Antes",
						"type": "String"
					},
					{
						"name": "Fora Horario Intervalo",
						"type": "String"
					},
					{
						"name": "Fora Horario Depois",
						"type": "String"
					},
					{
						"name": "Fora Horario",
						"type": "String"
					},
					{
						"name": "Total Recebidas",
						"type": "String"
					},
					{
						"name": "Callback Tratados",
						"type": "String"
					},
					{
						"name": "Callback Nao Tratados",
						"type": "String"
					},
					{
						"name": "Callback",
						"type": "String"
					},
					{
						"name": "Tempo Toque",
						"type": "String"
					},
					{
						"name": "Tempo Falado",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Medio Pausa ACW",
						"type": "String"
					},
					{
						"name": "Tempo Medio Produtivo AHT",
						"type": "String"
					},
					{
						"name": "% Nivel Servico",
						"type": "String"
					},
					{
						"name": "% Taxa Atendimento",
						"type": "String"
					},
					{
						"name": "% Taxa Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Medio Espera",
						"type": "String"
					},
					{
						"name": "Tempo Medio para Atender",
						"type": "String"
					},
					{
						"name": "Tempo Total para Atender",
						"type": "String"
					},
					{
						"name": "Tempo Medio para Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Total para Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Total Espera",
						"type": "String"
					},
					{
						"name": "Agentes Logados - Minimo",
						"type": "String"
					},
					{
						"name": "Agentes Logados - Maximo",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera - Minimo",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera - Medio",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera = Maximo",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_FIlasPorHoras_HOSL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INOB_CSV_NC_AgentesPorDia')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/INOB"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "AgentesPorDiaINOB.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Usuario",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Recusas",
						"type": "String"
					},
					{
						"name": "Recebidas",
						"type": "String"
					},
					{
						"name": "Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Transferencias",
						"type": "String"
					},
					{
						"name": "Efetuadas",
						"type": "String"
					},
					{
						"name": "Efetuadas Tratados",
						"type": "String"
					},
					{
						"name": "% Taxa de Contato",
						"type": "String"
					},
					{
						"name": "Tempo Atendidas",
						"type": "String"
					},
					{
						"name": "Tempo Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Tempo Efetuadas",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Total Falado",
						"type": "String"
					},
					{
						"name": "Tempo Toque Agente",
						"type": "String"
					},
					{
						"name": "Tempo Toque Cliente",
						"type": "String"
					},
					{
						"name": "Tempo Pausa",
						"type": "String"
					},
					{
						"name": "Tempo Estouro",
						"type": "String"
					},
					{
						"name": "Tempo Dispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Indispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Logado",
						"type": "String"
					},
					{
						"name": "Tempo Deslogado",
						"type": "String"
					},
					{
						"name": "% Falado x Logado",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INOB_CSV_NC_AgentesPorDia_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_AgentesPorHora_INOB",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/INOB/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Usuario",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Recusas",
						"type": "String"
					},
					{
						"name": "Recebidas",
						"type": "String"
					},
					{
						"name": "Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Transferencias",
						"type": "String"
					},
					{
						"name": "Efetuadas",
						"type": "String"
					},
					{
						"name": "Efetuadas Tratados",
						"type": "String"
					},
					{
						"name": "% Taxa de Contato",
						"type": "String"
					},
					{
						"name": "Tempo Atendidas",
						"type": "String"
					},
					{
						"name": "Tempo Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Tempo Efetuadas",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Total Falado",
						"type": "String"
					},
					{
						"name": "Tempo Toque Agente",
						"type": "String"
					},
					{
						"name": "Tempo Toque Cliente",
						"type": "String"
					},
					{
						"name": "Tempo Pausa",
						"type": "String"
					},
					{
						"name": "Tempo Estouro",
						"type": "String"
					},
					{
						"name": "Tempo Dispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Indispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Logado",
						"type": "String"
					},
					{
						"name": "Tempo Deslogado",
						"type": "String"
					},
					{
						"name": "% Falado x Logado",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_AgentesPorHora_INOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INOB_CSV_NC_AgentesPorHora')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/INOB"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "AgentesPorHoraINOB.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Usuario",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Recusas",
						"type": "String"
					},
					{
						"name": "Recebidas",
						"type": "String"
					},
					{
						"name": "Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Transferencias",
						"type": "String"
					},
					{
						"name": "Efetuadas",
						"type": "String"
					},
					{
						"name": "Efetuadas Tratados",
						"type": "String"
					},
					{
						"name": "% Taxa de Contato",
						"type": "String"
					},
					{
						"name": "Tempo Atendidas",
						"type": "String"
					},
					{
						"name": "Tempo Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Tempo Efetuadas",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Total Falado",
						"type": "String"
					},
					{
						"name": "Tempo Toque Agente",
						"type": "String"
					},
					{
						"name": "Tempo Toque Cliente",
						"type": "String"
					},
					{
						"name": "Tempo Pausa",
						"type": "String"
					},
					{
						"name": "Tempo Estouro",
						"type": "String"
					},
					{
						"name": "Tempo Dispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Indispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Logado",
						"type": "String"
					},
					{
						"name": "Tempo Deslogado",
						"type": "String"
					},
					{
						"name": "% Falado x Logado",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INOB_CSV_NC_AgentesPorHora_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_AgentesPorHora_INOB",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/INOB/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Usuario",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Recusas",
						"type": "String"
					},
					{
						"name": "Recebidas",
						"type": "String"
					},
					{
						"name": "Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Transferencias",
						"type": "String"
					},
					{
						"name": "Efetuadas",
						"type": "String"
					},
					{
						"name": "Efetuadas Tratados",
						"type": "String"
					},
					{
						"name": "% Taxa de Contato",
						"type": "String"
					},
					{
						"name": "Tempo Atendidas",
						"type": "String"
					},
					{
						"name": "Tempo Internas Recebidas",
						"type": "String"
					},
					{
						"name": "Tempo Efetuadas",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Total Falado",
						"type": "String"
					},
					{
						"name": "Tempo Toque Agente",
						"type": "String"
					},
					{
						"name": "Tempo Toque Cliente",
						"type": "String"
					},
					{
						"name": "Tempo Pausa",
						"type": "String"
					},
					{
						"name": "Tempo Estouro",
						"type": "String"
					},
					{
						"name": "Tempo Dispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Indispon�vel",
						"type": "String"
					},
					{
						"name": "Tempo Logado",
						"type": "String"
					},
					{
						"name": "Tempo Deslogado",
						"type": "String"
					},
					{
						"name": "% Falado x Logado",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_AgentesPorHora_INOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INOB_CSV_NC_BilheteLigacoes')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Arquivo Nexcore BilheteLigacoes.csv",
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/INOB"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "BilheteLigacoesINOB.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Data",
						"type": "String"
					},
					{
						"name": "Hora",
						"type": "String"
					},
					{
						"name": "Usu�rio",
						"type": "String"
					},
					{
						"name": "Tipo",
						"type": "String"
					},
					{
						"name": "Origem",
						"type": "String"
					},
					{
						"name": "Destino",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Centro de Custo",
						"type": "String"
					},
					{
						"name": "Tempo Tarifado",
						"type": "String"
					},
					{
						"name": "Tempo Decorrido",
						"type": "String"
					},
					{
						"name": "Campanha",
						"type": "String"
					},
					{
						"name": "Fila",
						"type": "String"
					},
					{
						"name": "Unique ID",
						"type": "String"
					},
					{
						"name": "Linked ID",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INOB_CSV_NC_Bilhete_Ligacoes_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_Bilhetes_HOSL",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/INOB/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_Bilhetes_HOSL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INOB_CSV_NC_FilasPorHora')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Folder_Nexcore_Consolidado",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/INOB"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation",
						"fileName": "FilasPorHoraINOB.csv"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": [
					{
						"name": "Fila",
						"type": "String"
					},
					{
						"name": "Intervalo",
						"type": "String"
					},
					{
						"name": "Atendidas Ate NS",
						"type": "String"
					},
					{
						"name": "Atendidas Apos NS",
						"type": "String"
					},
					{
						"name": "Atendidas",
						"type": "String"
					},
					{
						"name": "Abandonos Ate NS",
						"type": "String"
					},
					{
						"name": "Abandonos Apos NS",
						"type": "String"
					},
					{
						"name": "Abandonos Anuncio Inicial",
						"type": "String"
					},
					{
						"name": "Abandonos",
						"type": "String"
					},
					{
						"name": "Roteamentos Timeout",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Cheia",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Vazia",
						"type": "String"
					},
					{
						"name": "Roteamentos Fila Sem Ags. Disp.",
						"type": "String"
					},
					{
						"name": "Roteamentos Caixa Postal",
						"type": "String"
					},
					{
						"name": "Roteamentos",
						"type": "String"
					},
					{
						"name": "Fora Horario Antes",
						"type": "String"
					},
					{
						"name": "Fora Horario Intervalo",
						"type": "String"
					},
					{
						"name": "Fora Horario Depois",
						"type": "String"
					},
					{
						"name": "Fora Horario",
						"type": "String"
					},
					{
						"name": "Total Recebidas",
						"type": "String"
					},
					{
						"name": "Callback Tratados",
						"type": "String"
					},
					{
						"name": "Callback Nao Tratados",
						"type": "String"
					},
					{
						"name": "Callback",
						"type": "String"
					},
					{
						"name": "Tempo Toque",
						"type": "String"
					},
					{
						"name": "Tempo Falado",
						"type": "String"
					},
					{
						"name": "Tempo Medio Falado",
						"type": "String"
					},
					{
						"name": "Tempo Medio Pausa ACW",
						"type": "String"
					},
					{
						"name": "Tempo Medio Produtivo AHT",
						"type": "String"
					},
					{
						"name": "% Nivel Servico",
						"type": "String"
					},
					{
						"name": "% Taxa Atendimento",
						"type": "String"
					},
					{
						"name": "% Taxa Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Medio Espera",
						"type": "String"
					},
					{
						"name": "Tempo Medio para Atender",
						"type": "String"
					},
					{
						"name": "Tempo Total para Atender",
						"type": "String"
					},
					{
						"name": "Tempo Medio para Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Total para Abandono",
						"type": "String"
					},
					{
						"name": "Tempo Total Espera",
						"type": "String"
					},
					{
						"name": "Agentes Logados - Minimo",
						"type": "String"
					},
					{
						"name": "Agentes Logados - Maximo",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera - Minimo",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera - Medio",
						"type": "String"
					},
					{
						"name": "Chamadas em Espera = Maximo",
						"type": "String"
					},
					{
						"name": "Marca",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Folder_Nexcore_Consolidado')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INOB_CSV_NC_FilasPorHora_Temp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Historicos_FIlasPorHoras_INOB",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Nexcore/INOB/Históricos"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ";",
					"escapeChar": "",
					"firstRowAsHeader": true,
					"quoteChar": ""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Historicos_FIlasPorHoras_INOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_AGENDAMENTO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_AGENDAMENTO",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_AGENDAMENTO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_AGENDAMENTO_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_AGENDAMENTO_DIARIO",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_AGENDAMENTO_DIARIO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_ATENDIMENTO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_ATENDIMENTO",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_ATENDIMENTO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_ATENDIMENTO_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_ATENDIMENTO_DIARIO",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_ATENDIMENTO_DIARIO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_CAIXA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_CAIXA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_CAIXA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_CAIXA_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_CAIXA_DIARIO",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_CAIXA_DIARIO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_CONTASPAGARRECEBER')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_CONTASPAGARRECEBER",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_CONTASPAGARRECEBER')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_CONTASPAGARRECEBER_DIARIAS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_CONTASPAGARRECEBER_DIARIAS",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_CONTASPAGARRECEBER_DIARIAS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_FATURAMENTO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_FATURAMENTO",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_FATURAMENTO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_FATURAMENTO_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_FATURAMENTO_DIARIO",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_FATURAMENTO_DIARIO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_FINANCEIRO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_FINANCEIRO",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_FINANCEIRO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_FINANCEIRO_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_FINANCEIRO_DIARIO",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_FINANCEIRO_DIARIO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_PACIENTE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_PACIENTE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_PACIENTE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_PACIENTE_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_PACIENTE_DIARIO",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_PACIENTE_DIARIO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_PROFISSIONAL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_PROFISSIONAL",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_PROFISSIONAL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_PROFISSIONAL_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_PROFISSIONAL_DIARIO",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_PROFISSIONAL_DIARIO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_QUESTIONARIO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_QUESTIONARIO",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_QUESTIONARIO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_QUESTIONARIO_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_QUESTIONARIO_DIARIO",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_QUESTIONARIO_DIARIO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_REPASSE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_REPASSE",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_REPASSE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_REPASSE_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_REPASSE_DIARIO",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_REPASSE_DIARIO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_TELEORIENTACAO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_TELEORIENTACAO",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_TELEORIENTACAO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_TELEORIENTACAO_DIARIA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_TELEORIENTACAO_DIARIO",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_TELEORIENTACAO_DIARIO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_VENDA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_VENDA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_VENDA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_VENDA_DIARIA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "INST_DR_OSMAR_VENDA_DIARIA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/INST_DR_OSMAR_VENDA_DIARIA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IRIS_DATASET')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "iris_smm"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IRIS_ODBC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_IRIS_ODBC",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SCHEMA_NAME": {
						"type": "string"
					},
					"TABLE_NAME": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OdbcTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_IRIS_ODBC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LISTA_TABELAS_ADF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/NAJA_DW')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Naja Server",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Naja Server')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OFT_DATASET')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "stg",
					"table": "oft_tbl_loc"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ORACLE_DINAMICO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Tasy_Connections",
					"type": "LinkedServiceReference",
					"parameters": {
						"NOME_KEYVAULT_SECRET": {
							"value": "@dataset().NOME_KEYVAULT_SECRET",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"NOME_KEYVAULT_SECRET": {
						"type": "string"
					},
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Tasy_Connections')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ORACLE_LOG')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle_Log",
					"type": "LinkedServiceReference",
					"parameters": {
						"NOME_KEYVAULT": {
							"value": "@dataset().nm_keyvault",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"nm_keyvault": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle_Log')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ORIGEM_TABELAS_ADF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SMART_ITAIGARA_NEW",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SMART_ITAIGARA_NEW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OdbcTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_OFTALMODIAGNOSE_ODBC",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OdbcTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_OFTALMODIAGNOSE_ODBC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oftalmodiagnose_ODBC')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_OFTALMODIAGNOSE_ODBC",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OdbcTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_OFTALMODIAGNOSE_ODBC')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parametro_Repasse')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_RepasseMedico",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "Planilha1",
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "tp_pagamento_repasse_marca.xlsx",
						"container": "repassemedico"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_RepasseMedico')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet_AuxAtend')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_RepasseMedico",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "base/aux_atendimento",
						"container": "repassemedico"
					},
					"compressionCodec": "snappy"
				},
				"schema": [
					{
						"name": "FK_NR_SEQ_ITEM",
						"type": "UTF8"
					},
					{
						"name": "DS_TIPO_REPASSE",
						"type": "UTF8"
					},
					{
						"name": "FK_CD_ESTABELECIMENTO",
						"type": "UTF8"
					},
					{
						"name": "FK_NR_REPASSE_TERCEIRO",
						"type": "UTF8"
					},
					{
						"name": "FK_NR_SEQ_TERCEIRO",
						"type": "UTF8"
					},
					{
						"name": "FK_NR_ATENDIMENTO",
						"type": "UTF8"
					},
					{
						"name": "FK_CD_MEDICO",
						"type": "UTF8"
					},
					{
						"name": "DS_OBSERVACAO",
						"type": "UTF8"
					},
					{
						"name": "DT_MESANO_REFERENCIA_REPASSE",
						"type": "UTF8"
					},
					{
						"name": "DT_MESANO_REFERENCIA_REPASSE_TERCEIRO",
						"type": "UTF8"
					},
					{
						"name": "DT_LIBERACAO",
						"type": "UTF8"
					},
					{
						"name": "DT_ATUALIZACAO",
						"type": "UTF8"
					},
					{
						"name": "VL_LIBERADO",
						"type": "DECIMAL",
						"precision": 15,
						"scale": 2
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_RepasseMedico')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parquet_Oftalmodiagnose')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage_Oftalmodiagnose",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"nome_tabela": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().nome_tabela",
							"type": "Expression"
						},
						"container": "oftalmodiagnose"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage_Oftalmodiagnose')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/QUERY_DINAMICO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SLFW_Dinamico')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SLFW",
					"type": "LinkedServiceReference",
					"parameters": {
						"NOME_KEYVAULT_SECRET": {
							"value": "@dataset().NOME_KEYVAULT_SECRET",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					},
					"NOME_KEYVAULT_SECRET": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SLFW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART_HOSL_PrdDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SMART_HOSL_NEW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Power BI"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SMART_HOSL_NEW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART_INOB_PrdDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SMART_INOB_NEW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Power BI"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SMART_INOB_NEW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART_IOF_PrdDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SMART_IOF_NEW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Power BI"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SMART_IOF_NEW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART_ITABUNA_PrdDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SMART_ITABUNA_NEW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Power BI"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SMART_ITABUNA_NEW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART_ITAIGARA_PrdDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SMART_ITAIGARA_NEW",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Power BI"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SMART_ITAIGARA_NEW')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART_Oftalmoclin_Prd_DataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SMART_Oftalmoclin",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Power BI"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SMART_Oftalmoclin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_DIN')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_DINAMICO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Smart_Connections",
					"type": "LinkedServiceReference",
					"parameters": {
						"NOME_KEYVAULT_SECRET": {
							"value": "@dataset().NOME_KEYVAULT_SECRET",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"NOME_KEYVAULT_SECRET": {
						"type": "string"
					},
					"schema_name": {
						"type": "string"
					},
					"table_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().schema_name",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().table_name",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Smart_Connections')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_PROD_DIARIA_SADALLA')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "NR_SEQ_PROC_CRIT_REPASSE",
						"type": "decimal",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "CD_PESSOA_FISICA",
						"type": "nvarchar"
					},
					{
						"name": "CD_ESTABELECIMENTO",
						"type": "decimal",
						"precision": 4,
						"scale": 0
					},
					{
						"name": "CD_CONVENIO_PARAMETRO",
						"type": "decimal",
						"precision": 5,
						"scale": 0
					},
					{
						"name": "DT_ENTRADA",
						"type": "datetime2",
						"scale": 0
					},
					{
						"name": "NR_ATENDIMENTO",
						"type": "decimal",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "NR_INTERNO_CONTA",
						"type": "decimal",
						"precision": 10,
						"scale": 0
					},
					{
						"name": "CD_MEDICO_ATENDIMENTO",
						"type": "nvarchar"
					},
					{
						"name": "CD_MEDICO_SOLICITANTE",
						"type": "nvarchar"
					},
					{
						"name": "CD_MEDICO_RESPONSAVEL",
						"type": "nvarchar"
					},
					{
						"name": "CD_MEDICO_EXECUTOR",
						"type": "nvarchar"
					},
					{
						"name": "CONVENIO",
						"type": "nvarchar"
					},
					{
						"name": "CONVENIO_AJUST",
						"type": "nvarchar"
					},
					{
						"name": "NOME_MEDICO",
						"type": "nvarchar"
					},
					{
						"name": "MEDICO_AJUST",
						"type": "nvarchar"
					},
					{
						"name": "TIPO",
						"type": "nvarchar"
					},
					{
						"name": "CLASSE",
						"type": "nvarchar"
					},
					{
						"name": "CD_PROCEDIMENTO",
						"type": "decimal",
						"precision": 15,
						"scale": 0
					},
					{
						"name": "QT_PROCEDIMENTO",
						"type": "float",
						"precision": 15
					},
					{
						"name": "QT_AJUST",
						"type": "float",
						"precision": 15
					},
					{
						"name": "VL_CONTA",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "VL_MEDICO",
						"type": "float",
						"precision": 15
					},
					{
						"name": "VL_HOSPITAL",
						"type": "float",
						"precision": 15
					},
					{
						"name": "VALOR_MATERIAL",
						"type": "float",
						"precision": 15
					},
					{
						"name": "REPASSE_MEDICO",
						"type": "float",
						"precision": 15
					},
					{
						"name": "VL_REPASSE",
						"type": "decimal",
						"precision": 15,
						"scale": 2
					},
					{
						"name": "NR_SEQ_PROC_PACOTE",
						"type": "decimal",
						"precision": 10,
						"scale": 0
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "prod_diaria_sadalla"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SadallaTasyPrdDataSet')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SadallaTasyProd",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Power BI"
				},
				"annotations": [],
				"type": "OracleTable",
				"structure": [
					{
						"name": "DATA_MOVIMENTO",
						"type": "String"
					},
					{
						"name": "CD_LOCAL_ESTOQUE",
						"type": "Decimal"
					},
					{
						"name": "DS_LOCAL_ESTOQUE",
						"type": "String"
					},
					{
						"name": "CD_ESTABELECIMENTO",
						"type": "Decimal"
					},
					{
						"name": "DS_ESTABELECIMENTO",
						"type": "String"
					},
					{
						"name": "CD_MATERIAL",
						"type": "Decimal"
					},
					{
						"name": "DS_MATERIAL_SHORT",
						"type": "String"
					},
					{
						"name": "CD_GRUPO_MATERIAL",
						"type": "Decimal"
					},
					{
						"name": "DS_GRUPO_MATERIAL",
						"type": "String"
					},
					{
						"name": "CD_CLASSE_MATERIAL",
						"type": "Decimal"
					},
					{
						"name": "DS_CLASSE_MATERIAL",
						"type": "String"
					},
					{
						"name": "CD_OPERACAO_ESTOQUE",
						"type": "Decimal"
					},
					{
						"name": "DS_OPERACAO",
						"type": "String"
					},
					{
						"name": "QT_MOVIMENTO",
						"type": "Double"
					},
					{
						"name": "VL_MOVIMENTO",
						"type": "Double"
					}
				],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SadallaTasyProd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TABLE_QANSWER')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Requestia"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "QSESSION",
						"type": "varchar"
					},
					{
						"name": "QUESTION",
						"type": "varchar"
					},
					{
						"name": "QANSWER",
						"type": "varchar"
					},
					{
						"name": "QANSWERED",
						"type": "varchar"
					},
					{
						"name": "QANSWERDATE",
						"type": "varchar"
					},
					{
						"name": "QSHOW",
						"type": "varchar"
					},
					{
						"name": "QORDER",
						"type": "varchar"
					},
					{
						"name": "QUPDATED",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "REQUESTIA_QANSWER"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TABLE_QSESSION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Requestia"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "QSESSION",
						"type": "varchar"
					},
					{
						"name": "QSESSIONTITLE",
						"type": "varchar"
					},
					{
						"name": "QCLIENT",
						"type": "varchar"
					},
					{
						"name": "QFORM",
						"type": "varchar"
					},
					{
						"name": "QVERSION",
						"type": "varchar"
					},
					{
						"name": "QSTATUS",
						"type": "varchar"
					},
					{
						"name": "QANSWERDATE",
						"type": "varchar"
					},
					{
						"name": "QEXPDATE",
						"type": "varchar"
					},
					{
						"name": "QAPPLICATION",
						"type": "varchar"
					},
					{
						"name": "QSURVEYTYPE",
						"type": "varchar"
					},
					{
						"name": "REQLOCATION",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "REQUESTIA_QSESSION"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TABLE_QTABLEACTION')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "REQUEST",
						"type": "varchar"
					},
					{
						"name": "ACTTYPE",
						"type": "varchar"
					},
					{
						"name": "LASTANAL",
						"type": "varchar"
					},
					{
						"name": "CURRSTATUS",
						"type": "varchar"
					},
					{
						"name": "ACTDATE",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "REQUESTIA_ACTIONS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TABLE_QTABLEANSWER')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Requestia"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "QSESSION",
						"type": "varchar"
					},
					{
						"name": "TABLE_NAME",
						"type": "varchar"
					},
					{
						"name": "TABLE_ROWID",
						"type": "varchar"
					},
					{
						"name": "TABLE_ROWNUM",
						"type": "varchar"
					},
					{
						"name": "COLUMN_NAME",
						"type": "varchar"
					},
					{
						"name": "COLUMN_VALUE",
						"type": "varchar"
					},
					{
						"name": "COLUMN_POSITION",
						"type": "varchar"
					},
					{
						"name": "COLUMN_ANSWERED",
						"type": "varchar"
					},
					{
						"name": "COLUMN_ANSWERDATE",
						"type": "varchar"
					},
					{
						"name": "COLUMN_UPDATED",
						"type": "varchar"
					},
					{
						"name": "COLUMN_VISIBLE",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "REQUESTIA_QTABLEANSWER"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TABLE_REQUESTS')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Requestia"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "REQUEST",
						"type": "varchar"
					},
					{
						"name": "CLIENT",
						"type": "varchar"
					},
					{
						"name": "ORIGANAL",
						"type": "varchar"
					},
					{
						"name": "CURRANAL",
						"type": "varchar"
					},
					{
						"name": "GROUPANAL",
						"type": "varchar"
					},
					{
						"name": "LASTANAL",
						"type": "varchar"
					},
					{
						"name": "LASTANLGRP",
						"type": "varchar"
					},
					{
						"name": "ORIGGROUP",
						"type": "varchar"
					},
					{
						"name": "CURRGROUP",
						"type": "varchar"
					},
					{
						"name": "LASTGROUP",
						"type": "varchar"
					},
					{
						"name": "CATEGORY",
						"type": "varchar"
					},
					{
						"name": "PRODUCT",
						"type": "varchar"
					},
					{
						"name": "PROCESS",
						"type": "varchar"
					},
					{
						"name": "RSTATUS",
						"type": "varchar"
					},
					{
						"name": "RPRIORITY",
						"type": "varchar"
					},
					{
						"name": "REQTYPE",
						"type": "varchar"
					},
					{
						"name": "REQSOURCE",
						"type": "varchar"
					},
					{
						"name": "REQLOCATION",
						"type": "varchar"
					},
					{
						"name": "ORGUNIT",
						"type": "varchar"
					},
					{
						"name": "ORGUNIT_ROOT",
						"type": "varchar"
					},
					{
						"name": "ABSTRACT",
						"type": "varchar"
					},
					{
						"name": "DESCRIPT",
						"type": "varchar"
					},
					{
						"name": "OPENDATE",
						"type": "varchar"
					},
					{
						"name": "CLOSEDATE",
						"type": "varchar"
					},
					{
						"name": "CLOSED",
						"type": "varchar"
					},
					{
						"name": "LASTACTION",
						"type": "varchar"
					},
					{
						"name": "LASTANALYST",
						"type": "varchar"
					},
					{
						"name": "LASTSTATUS",
						"type": "varchar"
					},
					{
						"name": "LASTPRIORITY",
						"type": "varchar"
					},
					{
						"name": "LASTREOPEN",
						"type": "varchar"
					},
					{
						"name": "LASTACTIONATEND",
						"type": "varchar"
					},
					{
						"name": "LASTACTTYPE",
						"type": "varchar"
					},
					{
						"name": "RESPDATE",
						"type": "varchar"
					},
					{
						"name": "RESPTIME",
						"type": "varchar"
					},
					{
						"name": "RESLTIME",
						"type": "varchar"
					},
					{
						"name": "RESPMINS",
						"type": "varchar"
					},
					{
						"name": "RESLMINS",
						"type": "varchar"
					},
					{
						"name": "RESPREMAINS",
						"type": "varchar"
					},
					{
						"name": "RESLREMAINS",
						"type": "varchar"
					},
					{
						"name": "RESPMODE",
						"type": "varchar"
					},
					{
						"name": "RESLMODE",
						"type": "varchar"
					},
					{
						"name": "NOCOMPUTE",
						"type": "varchar"
					},
					{
						"name": "APROVANLTYPE",
						"type": "varchar"
					},
					{
						"name": "APROVCLITYPE",
						"type": "varchar"
					},
					{
						"name": "MLEVELAPROV",
						"type": "varchar"
					},
					{
						"name": "CLIENTAPROV",
						"type": "varchar"
					},
					{
						"name": "PACKAGE",
						"type": "varchar"
					},
					{
						"name": "WORKFLOW",
						"type": "varchar"
					},
					{
						"name": "LASTSEVENT",
						"type": "varchar"
					},
					{
						"name": "REQWORKFLOW",
						"type": "varchar"
					},
					{
						"name": "ORIGCATEGORY",
						"type": "varchar"
					},
					{
						"name": "ORIGPRODUCT",
						"type": "varchar"
					},
					{
						"name": "ORIGPROCESS",
						"type": "varchar"
					},
					{
						"name": "TOTALATTACH",
						"type": "varchar"
					},
					{
						"name": "TOTALATTACHACT",
						"type": "varchar"
					},
					{
						"name": "INSERTDATE",
						"type": "varchar"
					},
					{
						"name": "QFORM",
						"type": "varchar"
					},
					{
						"name": "QSURVEY",
						"type": "varchar"
					},
					{
						"name": "QSESSIONFORM",
						"type": "varchar"
					},
					{
						"name": "QSESSIONSURVEY",
						"type": "varchar"
					},
					{
						"name": "REQUESTFLAGS",
						"type": "varchar"
					},
					{
						"name": "V_ASSOCIATION",
						"type": "varchar"
					},
					{
						"name": "V_HAS_APPROVER",
						"type": "varchar"
					},
					{
						"name": "LASTSEQUENCE",
						"type": "varchar"
					},
					{
						"name": "LASTRECALCDATE",
						"type": "varchar"
					},
					{
						"name": "LASTAPPROVCNTX",
						"type": "varchar"
					},
					{
						"name": "LASTAPPROVUSER",
						"type": "varchar"
					},
					{
						"name": "LASTAPPROVCODE",
						"type": "varchar"
					},
					{
						"name": "CURRAPPROVCODE",
						"type": "varchar"
					},
					{
						"name": "ORIGNOCOMPUTE",
						"type": "varchar"
					},
					{
						"name": "ORIGRSTATUS",
						"type": "varchar"
					},
					{
						"name": "ORIGRPRIORITY",
						"type": "varchar"
					},
					{
						"name": "ABERTURA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "RESOLUCAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ULTIMA ACAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ULTIMO ANALISTA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "REABERTURA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "% SLA",
						"type": "float",
						"precision": 15
					},
					{
						"name": "TEMPO SOLUCAO (H)",
						"type": "float",
						"precision": 15
					},
					{
						"name": "SITUACAO",
						"type": "varchar"
					},
					{
						"name": "SITUACAO SLA",
						"type": "varchar"
					},
					{
						"name": "UNIDADE ATENDIMENTO",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "REQUESTIA_REQUESTS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TABLE_REQUESTS_AUX')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Requestia"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "REQUEST",
						"type": "varchar"
					},
					{
						"name": "CLIENT",
						"type": "varchar"
					},
					{
						"name": "ORIGANAL",
						"type": "varchar"
					},
					{
						"name": "CURRANAL",
						"type": "varchar"
					},
					{
						"name": "GROUPANAL",
						"type": "varchar"
					},
					{
						"name": "LASTANAL",
						"type": "varchar"
					},
					{
						"name": "LASTANLGRP",
						"type": "varchar"
					},
					{
						"name": "ORIGGROUP",
						"type": "varchar"
					},
					{
						"name": "CURRGROUP",
						"type": "varchar"
					},
					{
						"name": "LASTGROUP",
						"type": "varchar"
					},
					{
						"name": "CATEGORY",
						"type": "varchar"
					},
					{
						"name": "PRODUCT",
						"type": "varchar"
					},
					{
						"name": "PROCESS",
						"type": "varchar"
					},
					{
						"name": "RSTATUS",
						"type": "varchar"
					},
					{
						"name": "RPRIORITY",
						"type": "varchar"
					},
					{
						"name": "REQTYPE",
						"type": "varchar"
					},
					{
						"name": "REQSOURCE",
						"type": "varchar"
					},
					{
						"name": "REQLOCATION",
						"type": "varchar"
					},
					{
						"name": "ORGUNIT",
						"type": "varchar"
					},
					{
						"name": "ORGUNIT_ROOT",
						"type": "varchar"
					},
					{
						"name": "ABSTRACT",
						"type": "varchar"
					},
					{
						"name": "DESCRIPT",
						"type": "varchar"
					},
					{
						"name": "OPENDATE",
						"type": "varchar"
					},
					{
						"name": "CLOSEDATE",
						"type": "varchar"
					},
					{
						"name": "CLOSED",
						"type": "varchar"
					},
					{
						"name": "LASTACTION",
						"type": "varchar"
					},
					{
						"name": "LASTANALYST",
						"type": "varchar"
					},
					{
						"name": "LASTSTATUS",
						"type": "varchar"
					},
					{
						"name": "LASTPRIORITY",
						"type": "varchar"
					},
					{
						"name": "LASTREOPEN",
						"type": "varchar"
					},
					{
						"name": "LASTACTIONATEND",
						"type": "varchar"
					},
					{
						"name": "LASTACTTYPE",
						"type": "varchar"
					},
					{
						"name": "RESPDATE",
						"type": "varchar"
					},
					{
						"name": "RESPTIME",
						"type": "varchar"
					},
					{
						"name": "RESLTIME",
						"type": "varchar"
					},
					{
						"name": "RESPMINS",
						"type": "varchar"
					},
					{
						"name": "RESLMINS",
						"type": "varchar"
					},
					{
						"name": "RESPREMAINS",
						"type": "varchar"
					},
					{
						"name": "RESLREMAINS",
						"type": "varchar"
					},
					{
						"name": "RESPMODE",
						"type": "varchar"
					},
					{
						"name": "RESLMODE",
						"type": "varchar"
					},
					{
						"name": "NOCOMPUTE",
						"type": "varchar"
					},
					{
						"name": "APROVANLTYPE",
						"type": "varchar"
					},
					{
						"name": "APROVCLITYPE",
						"type": "varchar"
					},
					{
						"name": "MLEVELAPROV",
						"type": "varchar"
					},
					{
						"name": "CLIENTAPROV",
						"type": "varchar"
					},
					{
						"name": "PACKAGE",
						"type": "varchar"
					},
					{
						"name": "WORKFLOW",
						"type": "varchar"
					},
					{
						"name": "LASTSEVENT",
						"type": "varchar"
					},
					{
						"name": "REQWORKFLOW",
						"type": "varchar"
					},
					{
						"name": "ORIGCATEGORY",
						"type": "varchar"
					},
					{
						"name": "ORIGPRODUCT",
						"type": "varchar"
					},
					{
						"name": "ORIGPROCESS",
						"type": "varchar"
					},
					{
						"name": "TOTALATTACH",
						"type": "varchar"
					},
					{
						"name": "TOTALATTACHACT",
						"type": "varchar"
					},
					{
						"name": "INSERTDATE",
						"type": "varchar"
					},
					{
						"name": "QFORM",
						"type": "varchar"
					},
					{
						"name": "QSURVEY",
						"type": "varchar"
					},
					{
						"name": "QSESSIONFORM",
						"type": "varchar"
					},
					{
						"name": "QSESSIONSURVEY",
						"type": "varchar"
					},
					{
						"name": "REQUESTFLAGS",
						"type": "varchar"
					},
					{
						"name": "V_ASSOCIATION",
						"type": "varchar"
					},
					{
						"name": "V_HAS_APPROVER",
						"type": "varchar"
					},
					{
						"name": "LASTSEQUENCE",
						"type": "varchar"
					},
					{
						"name": "LASTRECALCDATE",
						"type": "varchar"
					},
					{
						"name": "LASTAPPROVCNTX",
						"type": "varchar"
					},
					{
						"name": "LASTAPPROVUSER",
						"type": "varchar"
					},
					{
						"name": "LASTAPPROVCODE",
						"type": "varchar"
					},
					{
						"name": "CURRAPPROVCODE",
						"type": "varchar"
					},
					{
						"name": "ORIGNOCOMPUTE",
						"type": "varchar"
					},
					{
						"name": "ORIGRSTATUS",
						"type": "varchar"
					},
					{
						"name": "ORIGRPRIORITY",
						"type": "varchar"
					},
					{
						"name": "ABERTURA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "RESOLUCAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ULTIMA ACAO",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "ULTIMO ANALISTA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "REABERTURA",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "% SLA",
						"type": "float",
						"precision": 15
					},
					{
						"name": "TEMPO SOLUCAO (H)",
						"type": "float",
						"precision": 15
					},
					{
						"name": "SITUACAO",
						"type": "varchar"
					},
					{
						"name": "SITUACAO SLA",
						"type": "varchar"
					},
					{
						"name": "UNIDADE ATENDIMENTO",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "REQUESTIA_REQUEST_AUX"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TECHSALLUS_DINAMICO')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "TECHSALLUS_DINAMICO",
					"type": "LinkedServiceReference",
					"parameters": {
						"NOME_KEYVAULT_SECRET": {
							"value": "@dataset().NOME_KEYVAULT_SECRET",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"NOME_KEYVAULT_SECRET": {
						"type": "string"
					},
					"SCHEMA_NAME": {
						"type": "string"
					},
					"TABLE_NAME": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SCHEMA_NAME",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TABLE_NAME",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/TECHSALLUS_DINAMICO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Atendimento')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Atendimento",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Atendimento')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Atendimento_Diario')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Atendimento_Diario",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Atendimento_Diario')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Caixa')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Caixa",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Caixa')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Caixa_DIario')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Caixa_Diario",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Caixa_Diario')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_ContasPagarReceber')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_ContasPagarReceber",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_ContasPagarReceber')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_ContasPagarReceberDiarias')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_ContasPagarReceber_Diarias",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_ContasPagarReceber_Diarias')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Faturamento')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Faturamento",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Faturamento')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Faturamento_Diario')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Faturamento_Diario",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Faturamento_Diario')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Financeiro')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Financeiro",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Financeiro')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Financeiro_Diario')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Financeiro_Diario",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Financeiro_Diario')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Paciente')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Paciente",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Paciente')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Paciente_Diario')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Paciente_Diario",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Paciente_Diario')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Profissional')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Profissional",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Profissional')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Profissional_Diario')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Profissional_Diario",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Profissional_Diario')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Questionario')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Questionario",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Questionario')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Questionario_Diario')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Questionario_Diario",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Questionario_Diario')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Repasse')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Repasse",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Repasse')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Repasse_Diario')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Repasse_Diario",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Repasse_Diario')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Teleorientacao')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Teleorientacao",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Teleorientacao')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Teleorientacao_Diario')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Teleorientacao_Diaria",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Teleorientacao_Diaria')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Venda')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Venda",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Venda')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Venda_Diaria')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_VendaDiaria",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_VendaDiaria')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Urobrasil_Agendamento')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Agendamento",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Agendamento')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Urobrasil_Agendamento_Diario')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "UROBRASIL_Agendamento_Diario",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/UROBRASIL_Agendamento_Diario')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stage_cnv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Tabela stage relativa ao Convenio",
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "cnv_cod",
						"type": "varchar"
					},
					{
						"name": "cnv_nome",
						"type": "varchar"
					},
					{
						"name": "cnv_rsoc",
						"type": "varchar"
					},
					{
						"name": "cnv_stat",
						"type": "char"
					},
					{
						"name": "cnv_caixa_fatura",
						"type": "char"
					},
					{
						"name": "cnv_tab",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "bi_stg_cnv"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stage_emp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "emp_cod",
						"type": "int",
						"precision": 10
					},
					{
						"name": "emp_rsoc",
						"type": "varchar"
					},
					{
						"name": "emp_stat",
						"type": "char"
					},
					{
						"name": "emp_cgc",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "bi_stg_emp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stage_gcc')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "gcc_cod",
						"type": "char"
					},
					{
						"name": "gcc_descr",
						"type": "varchar"
					},
					{
						"name": "gcc_str_cod",
						"type": "char"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "bi_stg_gcc"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stage_mns')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "mns_dt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "mns_dt_reg",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "mns_serie",
						"type": "int",
						"precision": 10
					},
					{
						"name": "mns_num",
						"type": "int",
						"precision": 10
					},
					{
						"name": "mns_nfs_numero",
						"type": "int",
						"precision": 10
					},
					{
						"name": "mns_tipo",
						"type": "varchar"
					},
					{
						"name": "mns_ind_liberado",
						"type": "varchar"
					},
					{
						"name": "mns_vlr",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "mns_vlr_glosa",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "bi_stg_mns"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stage_mte')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "mte_dthr",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "mte_serie",
						"type": "int",
						"precision": 10
					},
					{
						"name": "mte_seq",
						"type": "int",
						"precision": 10
					},
					{
						"name": "mte_status",
						"type": "char"
					},
					{
						"name": "mte_ind_rec_nf",
						"type": "char"
					},
					{
						"name": "mte_nfs_numero",
						"type": "int",
						"precision": 10
					},
					{
						"name": "mte_pac_reg",
						"type": "int",
						"precision": 10
					},
					{
						"name": "mte_ind_pac_resp",
						"type": "char"
					},
					{
						"name": "mte_tca_cod",
						"type": "char"
					},
					{
						"name": "mte_str_recep",
						"type": "char"
					},
					{
						"name": "mte_valor",
						"type": "decimal",
						"precision": 12,
						"scale": 2
					},
					{
						"name": "mte_desconto",
						"type": "decimal",
						"precision": 12,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "bi_stg_mte"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stage_nfs')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "nfs_dt_emis",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "nfs_numero",
						"type": "int",
						"precision": 10
					},
					{
						"name": "nfs_tipo",
						"type": "char"
					},
					{
						"name": "nfs_serie",
						"type": "char"
					},
					{
						"name": "nfs_ind_tipo_fatura",
						"type": "char"
					},
					{
						"name": "nfs_emp_cod",
						"type": "int",
						"precision": 10
					},
					{
						"name": "nfs_emp_codigo",
						"type": "char"
					},
					{
						"name": "nfs_nfl_num",
						"type": "int",
						"precision": 10
					},
					{
						"name": "nfs_str_cod",
						"type": "char"
					},
					{
						"name": "nfs_valor",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "nfs_perc_iss",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "nfs_perc_ir",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "nfs_vlr_iss",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "nfs_vlr_ir",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "nfs_perc_multa",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "nfs_vlr_pis",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "nfs_vlr_cofins",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "nfs_vlr_cssl",
						"type": "decimal",
						"precision": 18,
						"scale": 2
					},
					{
						"name": "nfs_perc_pis",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "nfs_perc_cofins",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "nfs_perc_cssl",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "bi_stg_nfs"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stage_rdi')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "rdi_vcto",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "rdi_seq",
						"type": "decimal",
						"precision": 6,
						"scale": 0
					},
					{
						"name": "rdi_forma_pag",
						"type": "char"
					},
					{
						"name": "rdi_lib_repasse",
						"type": "char"
					},
					{
						"name": "rdi_mns_serie",
						"type": "int",
						"precision": 10
					},
					{
						"name": "rdi_mns_num",
						"type": "int",
						"precision": 10
					},
					{
						"name": "rdi_mte_serie",
						"type": "int",
						"precision": 10
					},
					{
						"name": "rdi_mte_seq",
						"type": "int",
						"precision": 10
					},
					{
						"name": "rdi_valor",
						"type": "decimal",
						"precision": 12,
						"scale": 2
					},
					{
						"name": "rdi_valor_complemento",
						"type": "decimal",
						"precision": 12,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "bi_stg_rdi"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stage_str')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "str_cod",
						"type": "char"
					},
					{
						"name": "str_nome",
						"type": "char"
					},
					{
						"name": "str_resp",
						"type": "int",
						"precision": 10
					},
					{
						"name": "str_tipo",
						"type": "char"
					},
					{
						"name": "str_status",
						"type": "char"
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "bi_stg_str"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stage_tca')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "tca_cod",
						"type": "char"
					},
					{
						"name": "tca_descr",
						"type": "varchar"
					},
					{
						"name": "tca_qt_dias_vcto",
						"type": "decimal",
						"precision": 5,
						"scale": 0
					},
					{
						"name": "tca_ind_cr",
						"type": "char"
					},
					{
						"name": "tca_del_logica",
						"type": "char"
					},
					{
						"name": "tca_valor_padrao",
						"type": "decimal",
						"precision": 14,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "bi_stg_tca"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/stage_udp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSQL_DB_Procedimentos",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Data Warehouse"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "udp_mte_serie_quita",
						"type": "int",
						"precision": 10
					},
					{
						"name": "udp_mte_seq_quita",
						"type": "int",
						"precision": 10
					},
					{
						"name": "udp_mte_serie_dep",
						"type": "int",
						"precision": 10
					},
					{
						"name": "udp_mte_seq_dep",
						"type": "int",
						"precision": 10
					},
					{
						"name": "udp_valor",
						"type": "decimal",
						"precision": 12,
						"scale": 2
					}
				],
				"typeProperties": {
					"schema": "stg",
					"table": "bi_stg_udp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Az_blob_UPO_FPA')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('Az_blob_UPO_FPA_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_ANS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_ANS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_Oftalmodiagnose')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_Oftalmodiagnose_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_Recebimento')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_Recebimento_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_RepasseMedico')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_RepasseMedico_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage_VisaoDF')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage_VisaoDF_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDatabricks')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-4986612633596064.4.azuredatabricks.net",
					"accessToken": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "DatabricksTokenHmaisBrasil"
					},
					"existingClusterId": "[parameters('AzureDatabricks_properties_typeProperties_existingClusterId')]"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSQL_DB_Procedimentos')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSQL_DB_Procedimentos_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureTableStorage_Oftalmodiagnose')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureTableStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureTableStorage_Oftalmodiagnose_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CloudTasyProd')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('CloudTasyProd_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Con_Files_VM')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Con_Files_VM_properties_typeProperties_host')]",
					"userId": "[parameters('Con_Files_VM_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DEV_SMART_ITAIGARA')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('DEV_SMART_ITAIGARA_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Five9')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('Five9_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Basic",
					"userName": "[parameters('Five9_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Five9_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Folder_Nexcore_Consolidado')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Folder onde são colocados os arquivos coletados do FTP Nexcore. Script agendado para execução diária no host 10.47.251.10",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Folder_Nexcore_Consolidado_properties_typeProperties_host')]",
					"userId": "[parameters('Folder_Nexcore_Consolidado_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Folder_Requestia')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Folder_Requestia_properties_typeProperties_host')]",
					"userId": "[parameters('Folder_Requestia_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Folder_StorageVM')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Folder_StorageVM_properties_typeProperties_host')]",
					"userId": "[parameters('Folder_StorageVM_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Folder_VM')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Folder_VM_properties_typeProperties_host')]",
					"userId": "[parameters('Folder_VM_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HMO_SIMAH')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('HMO_SIMAH_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_AgentesPorDia_CSI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_AgentesPorDia_CSI",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_AgentesPorDia_CSI_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_AgentesPorDia_CSI_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_AgentesPorDia_DAYHORC')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_AgentesPorDia_DAYHORC",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_AgentesPorDia_DAYHORC_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_AgentesPorDia_DAYHORC_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_AgentesPorDia_HOBL2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_AgentesPorDia_HOBL2",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_AgentesPorDia_HOBL2_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_AgentesPorDia_HOBL2_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_AgentesPorDia_HOSL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_AgentesPorDia_HOSL",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_AgentesPorDia_HOSL_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_AgentesPorDia_HOSL_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_AgentesPorDia_INOB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_AgentesPorDia_INOB",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_AgentesPorDia_INOB_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_AgentesPorDia_INOB_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_AgentesPorDia_SADALLA')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_AgentesPorDia_SADALLA",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_AgentesPorDia_SADALLA_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_AgentesPorDia_SADALLA_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_AgentesPorHora_CSI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_AgentesPorHora_CSI",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_AgentesPorHora_CSI_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_AgentesPorHora_CSI_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_AgentesPorHora_DAYHORC')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_AgentesPorHora_DAYHORC",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_AgentesPorHora_DAYHORC_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_AgentesPorHora_DAYHORC_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_AgentesPorHora_HOBL2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_AgentesPorHora_HOBL2\n",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_AgentesPorHora_HOBL2_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_AgentesPorHora_HOBL2_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_AgentesPorHora_HOSL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_AgentesPorHora_HOSL",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_AgentesPorHora_HOSL_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_AgentesPorHora_HOSL_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_AgentesPorHora_INOB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_AgentesPorHora_INOB",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_AgentesPorHora_INOB_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_AgentesPorHora_INOB_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_AgentesPorHora_SADALLA')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_AgentesPorHora_SADALLA",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_AgentesPorHora_SADALLA_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_AgentesPorHora_SADALLA_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_Bilhetes_CSI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_Bilhetes_CSI",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_Bilhetes_CSI_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_Bilhetes_CSI_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_Bilhetes_DAYHORC')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_Bilhetes_DAYHORC",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_Bilhetes_DAYHORC_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_Bilhetes_DAYHORC_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_Bilhetes_HOBL2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_Bilhetes_HOBL2",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_Bilhetes_HOBL2_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_Bilhetes_HOBL2_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_Bilhetes_HOSL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_Bilhetes_HOSL",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_Bilhetes_HOSL_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_Bilhetes_HOSL_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_Bilhetes_INOB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_Bilhetes_INOB",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_Bilhetes_INOB_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_Bilhetes_INOB_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('Historicos_Bilhetes_INOB_password')]"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_Bilhetes_SADALLA')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_Bilhetes_SADALLA",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_Bilhetes_SADALLA_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_Bilhetes_SADALLA_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_FIlasPorHoras_CSI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_FIlasPorHoras_CSI",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_FIlasPorHoras_CSI_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_FIlasPorHoras_CSI_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_FIlasPorHoras_DAYHORC')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_FIlasPorHoras_DAYHORC",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_FIlasPorHoras_DAYHORC_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_FIlasPorHoras_DAYHORC_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_FIlasPorHoras_HOBL2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_FIlasPorHoras_HOBL2",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_FIlasPorHoras_HOBL2_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_FIlasPorHoras_HOBL2_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_FIlasPorHoras_HOSL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_FIlasPorHoras_HOSL",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_FIlasPorHoras_HOSL_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_FIlasPorHoras_HOSL_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_FIlasPorHoras_INOB')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_FIlasPorHoras_INOB",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_FIlasPorHoras_INOB_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_FIlasPorHoras_INOB_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Historicos_FIlasPorHoras_SADALLA')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Historicos_FIlasPorHoras_SADALLA",
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('Historicos_FIlasPorHoras_SADALLA_properties_typeProperties_host')]",
					"userId": "[parameters('Historicos_FIlasPorHoras_SADALLA_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_AGENDAMENTO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_AGENDAMENTO_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_AGENDAMENTO_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_AGENDAMENTO_DIARIO_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_ATENDIMENTO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_ATENDIMENTO_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_ATENDIMENTO_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_ATENDIMENTO_DIARIO_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_CAIXA')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_CAIXA_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_CAIXA_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_CAIXA_DIARIO_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_CONTASPAGARRECEBER')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_CONTASPAGARRECEBER_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_CONTASPAGARRECEBER_DIARIAS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_CONTASPAGARRECEBER_DIARIAS_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_FATURAMENTO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_FATURAMENTO_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_FATURAMENTO_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_FATURAMENTO_DIARIO_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_FINANCEIRO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_FINANCEIRO_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_FINANCEIRO_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_FINANCEIRO_DIARIO_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_PACIENTE')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_PACIENTE_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_PACIENTE_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_PACIENTE_DIARIO_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_PROFISSIONAL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_PROFISSIONAL_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_PROFISSIONAL_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_PROFISSIONAL_DIARIO_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_QUESTIONARIO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_QUESTIONARIO_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_QUESTIONARIO_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_QUESTIONARIO_DIARIO_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_REPASSE')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_REPASSE_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_REPASSE_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_REPASSE_DIARIO_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_TELEORIENTACAO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_TELEORIENTACAO_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_TELEORIENTACAO_DIARIO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_TELEORIENTACAO_DIARIO_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_VENDA')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_VENDA_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/INST_DR_OSMAR_VENDA_DIARIA')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('INST_DR_OSMAR_VENDA_DIARIA_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LINK_PASTA_BI')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('LINK_PASTA_BI_properties_typeProperties_host')]",
					"userId": "[parameters('LINK_PASTA_BI_properties_typeProperties_userId')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "vmSA"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_IRIS_ODBC')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Odbc",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('LS_IRIS_ODBC_connectionString')]"
					},
					"authenticationType": "Basic",
					"userName": "[parameters('LS_IRIS_ODBC_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_IRIS_ODBC_password')]"
					}
				},
				"connectVia": {
					"referenceName": "IRIS",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IRIS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_OFTALMODIAGNOSE_ODBC')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Odbc",
				"typeProperties": {
					"connectionString": {
						"type": "SecureString",
						"value": "[parameters('LS_OFTALMODIAGNOSE_ODBC_connectionString')]"
					},
					"authenticationType": "Basic",
					"userName": "[parameters('LS_OFTALMODIAGNOSE_ODBC_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_OFTALMODIAGNOSE_ODBC_password')]"
					}
				},
				"connectVia": {
					"referenceName": "IROFTALMODIAGNOSE",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IROFTALMODIAGNOSE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Otorrinocenter')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('LS_Otorrinocenter_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Naja Server')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('Naja Server_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle_Log')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"NOME_KEYVAULT": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "[parameters('Oracle_Log_properties_typeProperties_connectionString_secretName')]",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ortoity_Oracle')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('Ortoity_Oracle_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SLFW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"NOME_KEYVAULT_SECRET": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "[parameters('SLFW_properties_typeProperties_connectionString_secretName')]",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART_HOSL_NEW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SMART_HOSL_NEW_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART_INOB_NEW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SMART_INOB_NEW_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART_IOF_NEW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SMART_IOF_NEW_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART_ITABUNA_NEW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SMART_ITABUNA_NEW_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART_ITAIGARA_NEW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SMART_ITAIGARA_NEW_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SMART_Oftalmoclin')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SMART_Oftalmoclin_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_CONTROLE')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SQL_CONTROLE_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_DESTINO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('SQL_DESTINO_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL_ORIGEM')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": "[parameters('SQL_ORIGEM_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SV_OptyKeyVault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('SV_OptyKeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SadallaSeniorProd')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('SadallaSeniorProd_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SadallaSeniorTeste')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('SadallaSeniorTeste_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SadallaTasyProd')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('SadallaTasyProd_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SadallaTasyProd_NEW')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('SadallaTasyProd_NEW_connectionString')]"
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Smart_Connections')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"NOME_KEYVAULT_SECRET": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "[parameters('Smart_Connections_properties_typeProperties_connectionString_secretName')]",
							"type": "Expression"
						}
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/TECHSALLUS_DINAMICO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"NOME_KEYVAULT_SECRET": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": "[parameters('TECHSALLUS_DINAMICO_properties_typeProperties_connectionString_secretName')]"
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Tasy_Connections')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"NOME_KEYVAULT_SECRET": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "SV_OptyKeyVault",
							"type": "LinkedServiceReference"
						},
						"secretName": {
							"value": "[parameters('Tasy_Connections_properties_typeProperties_connectionString_secretName')]",
							"type": "Expression"
						},
						"secretVersion": ""
					}
				},
				"connectVia": {
					"referenceName": "ServidorArquivosBI",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/ServidorArquivosBI')]",
				"[concat(variables('factoryId'), '/linkedServices/SV_OptyKeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Agendamento')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Agendamento_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Agendamento_Diario')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Agendamento_Diario_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Atendimento')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Atendimento_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Atendimento_Diario')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Atendimento_Diario_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Caixa')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Caixa_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Caixa_Diario')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Caixa_Diario_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_ContasPagarReceber')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_ContasPagarReceber_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_ContasPagarReceber_Diarias')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_ContasPagarReceber_Diarias_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Faturamento')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Faturamento_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Faturamento_Diario')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Faturamento_Diario_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Financeiro')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Financeiro_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Financeiro_Diario')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Financeiro_Diario_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Paciente')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Paciente_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Paciente_Diario')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Paciente_Diario_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Profissional')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Profissional_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Profissional_Diario')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Profissional_Diario_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Questionario')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Questionario_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Questionario_Diario')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Questionario_Diario_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Repasse')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Repasse_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Repasse_Diario')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Repasse_Diario_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Teleorientacao')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Teleorientacao_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Teleorientacao_Diaria')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Teleorientacao_Diaria_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_Venda')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_Venda_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/UROBRASIL_VendaDiaria')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('UROBRASIL_VendaDiaria_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/blob_din')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('blob_din_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/sv_hmaisbrasildatadriven')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('sv_hmaisbrasildatadriven_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('sv_hmaisbrasildatadriven_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 00 AM')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CARGA_DINAMICA_ADF_SMART_IRIS",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "CARGA_DINAMICA_ADF_SMART",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "CARGA_DINAMICA_ADF_TASY_ONPREMISES",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "CARGA_DINAMICA_ADF_NAJA",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "OFTALMODIAGNOSE_ADF",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-10-11T00:00:00",
						"timeZone": "E. South America Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								0
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CARGA_DINAMICA_ADF_SMART_IRIS')]",
				"[concat(variables('factoryId'), '/pipelines/CARGA_DINAMICA_ADF_SMART')]",
				"[concat(variables('factoryId'), '/pipelines/CARGA_DINAMICA_ADF_TASY_ONPREMISES')]",
				"[concat(variables('factoryId'), '/pipelines/CARGA_DINAMICA_ADF_NAJA')]",
				"[concat(variables('factoryId'), '/pipelines/OFTALMODIAGNOSE_ADF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 0100 AM')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Databricks Five9 API",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "Maqplan_Vendas",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-08-05T15:02:00",
						"timeZone": "E. South America Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								1
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Databricks Five9 API')]",
				"[concat(variables('factoryId'), '/pipelines/Maqplan_Vendas')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 0130 AM')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Plan_Recebimento",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-12-08T20:04:00",
						"timeZone": "E. South America Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								1
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Plan_Recebimento')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 02h20 AM')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CARGA_DINAMICA_ADF_TASY_CLOUD",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-07-31T20:46:00",
						"timeZone": "E. South America Standard Time",
						"schedule": {
							"minutes": [
								20
							],
							"hours": [
								2
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CARGA_DINAMICA_ADF_TASY_CLOUD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 0300 AM')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de pipelines as 05:00",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-01-21T22:31:00",
						"timeZone": "E. South America Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								3
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 03h30')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-12-01T20:41:00",
						"timeZone": "E. South America Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								3
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 05h')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Chamados Requestia_Otim_Deadlock",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "NF",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-11-24T12:05:00",
						"timeZone": "E. South America Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								5
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Chamados Requestia_Otim_Deadlock')]",
				"[concat(variables('factoryId'), '/pipelines/NF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 06h30')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "UPO_FPA",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-09-14T15:08:00",
						"timeZone": "E. South America Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								6
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/UPO_FPA')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 0700 AM')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de pipeline para atualização das informações dos indicadores de Call Center",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Agendas Projesi Testes",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "ORTOCITY_STORAGE_ACCOUNT",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "Carga Datamart TASY",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "Cirurgias e Exames Sadalla e HOB",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-08-25T20:22:00",
						"timeZone": "E. South America Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								7
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Agendas Projesi Testes')]",
				"[concat(variables('factoryId'), '/pipelines/ORTOCITY_STORAGE_ACCOUNT')]",
				"[concat(variables('factoryId'), '/pipelines/Carga Datamart TASY')]",
				"[concat(variables('factoryId'), '/pipelines/Cirurgias e Exames Sadalla e HOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 0730 AM')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2019-09-27T11:00:00",
						"timeZone": "E. South America Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								7
							]
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 0800 AM')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Geral Atendimentos HOB",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-10-01T17:06:00",
						"timeZone": "E. South America Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								8
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Geral Atendimentos HOB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 0900 AM')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "UROBRASIL",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "UPO",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "INSTITUTO_DR_OSMAR",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-08-13T00:00:00",
						"timeZone": "E. South America Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								9
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/UROBRASIL')]",
				"[concat(variables('factoryId'), '/pipelines/UPO')]",
				"[concat(variables('factoryId'), '/pipelines/INSTITUTO_DR_OSMAR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 1330')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CARGA_DINAMICA_ADF_TASY_INTRADIARIO",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-11-01T13:30:00",
						"timeZone": "E. South America Standard Time",
						"schedule": {
							"minutes": [
								30
							],
							"hours": [
								13
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CARGA_DINAMICA_ADF_TASY_INTRADIARIO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 17h')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Equalizacao DW Tasy",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2023-05-31T11:24:00",
						"timeZone": "E. South America Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								17
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Equalizacao DW Tasy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 2100 PM')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Execução de pipelines as 2100",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Geral Atendimentos Sadalla",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "OTORRINOCENTER",
							"type": "PipelineReference"
						},
						"parameters": {}
					},
					{
						"pipelineReference": {
							"referenceName": "Reprocessar Datamart Recebimento Tasy",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2020-01-22T12:57:00",
						"timeZone": "E. South America Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								21
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Geral Atendimentos Sadalla')]",
				"[concat(variables('factoryId'), '/pipelines/OTORRINOCENTER')]",
				"[concat(variables('factoryId'), '/pipelines/Reprocessar Datamart Recebimento Tasy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Daily 23 55')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Kill_Sessions_Sql",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-11-07T22:50:00",
						"timeZone": "E. South America Standard Time",
						"schedule": {
							"minutes": [
								55
							],
							"hours": [
								23
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Kill_Sessions_Sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IRIS')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IROFTALMODIAGNOSE')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/IRVISAODF')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ServidorArquivosBI')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/integrationRuntime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/NF')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Calendario",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DT_INICIO",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "DT_FIM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat('\nSELECT DISTINCT\n    CAST(MIN(A.TheDate) AS VARCHAR(20)) + '' 00:00:00.000'' AS DT_INICIO\n    ,CAST(MAX(A.TheDate) AS VARCHAR(20)) + '' 23:59:59.000'' AS DT_FIM,\n\n     CONVERT(VARCHAR(20),MIN(A.TheDate)  ,103)  AS DT_INICIO_ORACLE\n    ,CONVERT(VARCHAR(20),Max(A.TheDate) ,103)  AS DT_FIM_ORACLE\n\nFROM calendar A\nWHERE A.TheDate BETWEEN ','''',variables('DT_INICIO'),'''', ' AND  ','''',variables('DT_FIM'),'''')",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_DIN",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "DT_INICIO",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup Periodo Inicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DT_INICIO",
							"value": {
								"value": "@activity('Lookup Periodo Inicial').output.firstRow.Data_Inicial",
								"type": "Expression"
							}
						}
					},
					{
						"name": "DT_FIM",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup Periodo Inicial",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DT_FIM",
							"value": {
								"value": "@activity('Lookup Periodo Inicial').output.firstRow.data_final",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Calendario",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Calendario').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SMART - NF ITG",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "TASY - NF HTML",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat(\n'DECLARE @DT_INICIO AS DATE\n DECLARE @DT_FIM     AS DATE\n\nSET @DT_INICIO = ','''', item().DT_INICIO,'''',\n'SET @DT_FIM = '  , '''', item().DT_FIM,'''',\n' SELECT \n 90 as estabelecimento  ',\n\n '\n     ,nfe_dt_emissao\n    , nfe_dt_entrada\n    , nfe_tipo\n    , nfe_serie\n    , nfe_num\n    , fne_cod\n    , fne_nome_fantasia\n    , ine_mat_cod\n    , mat_desc_resumida\n    , gmm_nome\n    , ine_qtde_entrada\n    , mat_unm_cod_entrada\n    , ine_vlr_unit_entrada\n    , nfe_ipg_aberto\n    , ine_vlr_desconto\n    , ine_vlr_ipi\n    , nfe_aft\n    , nfe_vlr_total\n    , ds_nfe_tipo\n    , nfe_crit_venc\n    , nfe_cpg_parcelas\n    , nfe_ipg_dt_vcto\n    , nfe_parcela_1\nFROM (\n    SELECT cfg.cfg_emp\n        , sba.sba_cod\n        , sba.sba_nome\n        , nfe.nfe_serie\n        , nfe.nfe_num\n        , nfe.nfe_fne_cod\n        , nfe.nfe_tipo\n        , CASE nfe.nfe_tipo\n\n                WHEN ''PR''\n                THEN ''Entrada''\n            WHEN ''SR''\n                THEN ''Simples Remessa''\n            WHEN ''SF''\n                THEN ''Simples Faturamento''\n            WHEN ''DV''\n                THEN ''Devolução''\n            WHEN ''TR''\n                THEN ''Transferência''\n            ELSE ''N/A''\n            END AS ds_nfe_tipo\n        , fne.fne_cod\n        , fne.fne_nome_fantasia\n        , nfe.nfe_vlr_total\n \n \n        , (\n            SELECT TOP 1 i.ipg_dt_vcto\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ORDER BY i.ipg_dt_vcto\n            ) AS nfe_ipg_dt_vcto\n        , (\n            SELECT count(ipg_parc)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ) AS nfe_cpg_parcelas\n        , nfe.nfe_crit_venc\n        , nfe.nfe_parcela_1\n        , nfe.nfe_dt_emissao\n        , nfe.nfe_dt_entrada\n        , ine.ine_seq\n        , ine.ine_mat_cod\n        , mat.mat_desc_resumida\n        , mat.mat_lma_cod\n        , lma.lma_nome\n        , mat.mat_gmm_cod\n        , gmm.gmm_nome\n        , mat_unm_cod_entrada\n        , ine.ine_qtde AS ine_qtde_entrada\n        , ine.ine_vlr_unit AS ine_vlr_unit_entrada\n        , (\n            SELECT isnull(sum(ipg_valor), 0)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n                AND i.ipg_status IN (''A'', ''R'')\n                AND i.ipg_dt_vcto <= @DT_FIM\n            ) AS nfe_ipg_aberto\n        , mat_unm_cod_saida\n        , '' AS solic\n        , '' AS DATA_solic\n        , convert(VARCHAR, ine_aft_serie) + ''.'' + convert(VARCHAR, ine_aft_num) AS nfe_aft\n        , aft_dthr\n        , ine.ine_qtde * mat_fat_conv_s_v AS ine_qtde_saida\n        , ine.ine_vlr_unit / mat_fat_conv_s_v AS ine_vlr_saida\n        , ine.ine_vlr_ipi\n        , ine.ine_vlr_desconto\n        , (\n            SELECT TOP 1 f.fne_cod\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                          )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                    n.nfe_dt_entrada >= @DT_INICIO\n                    AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_cod\n        , (\n            SELECT TOP 1 f.fne_nome_fantasia\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                        )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                   n.nfe_dt_entrada >= @DT_INICIO\n                 AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_nome_fantasia\n        , replace(replace(replace(emp_cgc, ''.'', ''''), ''/'', ''''), ''-'', '''') AS emp_cgc\n    FROM nfe WITH (NOLOCK)\n    INNER JOIN ine WITH (NOLOCK)\n        ON (\n                nfe.nfe_fne_cod = ine.ine_fne_cod\n                AND nfe.nfe_serie = ine.ine_nfe_serie\n                AND nfe.nfe_num = ine.ine_nfe_num\n                AND nfe.nfe_tipo = ine.ine_nfe_tipo\n                )\n    LEFT OUTER JOIN fne WITH (NOLOCK)\n        ON (convert(VARCHAR, ine.ine_fne_cod) = convert(VARCHAR, fne.fne_cod))\n    LEFT OUTER JOIN mat WITH (NOLOCK)\n        ON (mat.mat_cod = ine.ine_mat_cod)\n    LEFT OUTER JOIN lma WITH (NOLOCK)\n       ON (\n                lma.lma_cod = mat.mat_lma_cod\n                AND lma.lma_gmm_cod = mat.mat_gmm_cod\n                )\n    LEFT OUTER JOIN gmm WITH (NOLOCK)\n        ON (lma.lma_gmm_cod = gmm.gmm_cod)\n    LEFT OUTER JOIN sba WITH (NOLOCK)\n        ON (sba.sba_cod = nfe.nfe_sba_cod)\n    LEFT OUTER JOIN aft WITH (NOLOCK)\n        ON (\n               aft_serie = ine_aft_serie\n                AND aft_num = ine_aft_num\n                )\n    LEFT OUTER JOIN emp WITH (NOLOCK)\n        ON (emp.emp_fne_cod = fne.FNE_COD)\n    CROSS JOIN cfg\n    WHERE (\n            nfe.nfe_dt_entrada >= @DT_INICIO\n            AND nfe.nfe_dt_entrada <= @DT_FIM\n            )\n        AND (\n            fne.fne_cod IN (''%'')\n            OR (''%'' IN (''%''))\n            )\n    ) AS t1\nORDER BY sba_cod\n    , sba_nome\n    , nfe_tipo\n    , nfe_dt_entrada\n    , nfe_serie\n    , nfe_num\n    , ine_seq\n '\n\n)\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_ITAIGARA_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_SMART"
											}
										}
									]
								},
								{
									"name": "SMART - NF ITB",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SMART - NF ITG",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat(\r\n'DECLARE @DT_INICIO AS DATE\r\n DECLARE @DT_FIM     AS DATE\r\n\r\nSET @DT_INICIO = ','''', item().DT_INICIO,'''',\r\n'SET @DT_FIM = '  , '''', item().DT_FIM,'''',\r\n' SELECT \r\n 91 as estabelecimento  ',\r\n\r\n '\r\n     ,nfe_dt_emissao\r\n    , nfe_dt_entrada\r\n    , nfe_tipo\r\n    , nfe_serie\r\n    , nfe_num\r\n    , fne_cod\r\n    , fne_nome_fantasia\r\n    , ine_mat_cod\r\n    , mat_desc_resumida\r\n    , gmm_nome\r\n    , ine_qtde_entrada\r\n    , mat_unm_cod_entrada\r\n    , ine_vlr_unit_entrada\r\n    , nfe_ipg_aberto\r\n    , ine_vlr_desconto\r\n    , ine_vlr_ipi\r\n    , nfe_aft\r\n    , nfe_vlr_total\r\n    , ds_nfe_tipo\r\n    , nfe_crit_venc\r\n    , nfe_cpg_parcelas\r\n    , nfe_ipg_dt_vcto\r\n    , nfe_parcela_1\r\nFROM (\r\n    SELECT cfg.cfg_emp\r\n        , sba.sba_cod\r\n        , sba.sba_nome\r\n        , nfe.nfe_serie\r\n        , nfe.nfe_num\r\n        , nfe.nfe_fne_cod\r\n        , nfe.nfe_tipo\r\n        , CASE nfe.nfe_tipo\r\n\r\n                WHEN ''PR''\r\n                THEN ''Entrada''\r\n            WHEN ''SR''\r\n                THEN ''Simples Remessa''\r\n            WHEN ''SF''\r\n                THEN ''Simples Faturamento''\r\n            WHEN ''DV''\r\n                THEN ''Devolução''\r\n            WHEN ''TR''\r\n                THEN ''Transferência''\r\n            ELSE ''N/A''\r\n            END AS ds_nfe_tipo\r\n        , fne.fne_cod\r\n        , fne.fne_nome_fantasia\r\n        , nfe.nfe_vlr_total\r\n \r\n \r\n        , (\r\n            SELECT TOP 1 i.ipg_dt_vcto\r\n            FROM cpg c\r\n            INNER JOIN ipg i\r\n                ON (\r\n                        c.cpg_serie = i.ipg_cpg_serie\r\n                        AND c.cpg_num = i.ipg_cpg_num\r\n                        )\r\n            WHERE c.cpg_nfe_serie = nfe_serie\r\n                AND c.cpg_nfe_num = nfe_num\r\n                AND c.cpg_nfe_tipo = nfe_tipo\r\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\r\n            ORDER BY i.ipg_dt_vcto\r\n            ) AS nfe_ipg_dt_vcto\r\n        , (\r\n            SELECT count(ipg_parc)\r\n            FROM cpg c\r\n            INNER JOIN ipg i\r\n                ON (\r\n                        c.cpg_serie = i.ipg_cpg_serie\r\n                        AND c.cpg_num = i.ipg_cpg_num\r\n                        )\r\n            WHERE c.cpg_nfe_serie = nfe_serie\r\n                AND c.cpg_nfe_num = nfe_num\r\n                AND c.cpg_nfe_tipo = nfe_tipo\r\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\r\n            ) AS nfe_cpg_parcelas\r\n        , nfe.nfe_crit_venc\r\n        , nfe.nfe_parcela_1\r\n        , nfe.nfe_dt_emissao\r\n        , nfe.nfe_dt_entrada\r\n        , ine.ine_seq\r\n        , ine.ine_mat_cod\r\n        , mat.mat_desc_resumida\r\n        , mat.mat_lma_cod\r\n        , lma.lma_nome\r\n        , mat.mat_gmm_cod\r\n        , gmm.gmm_nome\r\n        , mat_unm_cod_entrada\r\n        , ine.ine_qtde AS ine_qtde_entrada\r\n        , ine.ine_vlr_unit AS ine_vlr_unit_entrada\r\n        , (\r\n            SELECT isnull(sum(ipg_valor), 0)\r\n            FROM cpg c\r\n            INNER JOIN ipg i\r\n                ON (\r\n                        c.cpg_serie = i.ipg_cpg_serie\r\n                        AND c.cpg_num = i.ipg_cpg_num\r\n                        )\r\n            WHERE c.cpg_nfe_serie = nfe_serie\r\n                AND c.cpg_nfe_num = nfe_num\r\n                AND c.cpg_nfe_tipo = nfe_tipo\r\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\r\n                AND i.ipg_status IN (''A'', ''R'')\r\n                AND i.ipg_dt_vcto <= @DT_FIM\r\n            ) AS nfe_ipg_aberto\r\n        , mat_unm_cod_saida\r\n        , '' AS solic\r\n        , '' AS DATA_solic\r\n        , convert(VARCHAR, ine_aft_serie) + ''.'' + convert(VARCHAR, ine_aft_num) AS nfe_aft\r\n        , aft_dthr\r\n        , ine.ine_qtde * mat_fat_conv_s_v AS ine_qtde_saida\r\n        , ine.ine_vlr_unit / mat_fat_conv_s_v AS ine_vlr_saida\r\n        , ine.ine_vlr_ipi\r\n        , ine.ine_vlr_desconto\r\n        , (\r\n            SELECT TOP 1 f.fne_cod\r\n            FROM nfe n WITH (NOLOCK)\r\n            INNER JOIN ine i WITH (NOLOCK)\r\n                ON (\r\n                        n.nfe_fne_cod = i.ine_fne_cod\r\n                        AND n.nfe_serie = i.ine_nfe_serie\r\n                        AND n.nfe_num = i.ine_nfe_num\r\n                        AND n.nfe_tipo = i.ine_nfe_tipo\r\n                          )\r\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\r\n                ON ine.ine_fne_cod = fne.fne_cod\r\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\r\n                AND f.fne_cod = ine.ine_fne_cod\r\n                AND (\r\n                    n.nfe_dt_entrada >= @DT_INICIO\r\n                    AND n.nfe_dt_entrada <= @DT_FIM\r\n                    )\r\n            ORDER BY n.nfe_dt_entrada DESC\r\n            ) AS ine_fne_cod\r\n        , (\r\n            SELECT TOP 1 f.fne_nome_fantasia\r\n            FROM nfe n WITH (NOLOCK)\r\n            INNER JOIN ine i WITH (NOLOCK)\r\n                ON (\r\n                        n.nfe_fne_cod = i.ine_fne_cod\r\n                        AND n.nfe_serie = i.ine_nfe_serie\r\n                        AND n.nfe_num = i.ine_nfe_num\r\n                        AND n.nfe_tipo = i.ine_nfe_tipo\r\n                        )\r\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\r\n                ON ine.ine_fne_cod = fne.fne_cod\r\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\r\n                AND f.fne_cod = ine.ine_fne_cod\r\n                AND (\r\n                   n.nfe_dt_entrada >= @DT_INICIO\r\n                 AND n.nfe_dt_entrada <= @DT_FIM\r\n                    )\r\n            ORDER BY n.nfe_dt_entrada DESC\r\n            ) AS ine_fne_nome_fantasia\r\n        , replace(replace(replace(emp_cgc, ''.'', ''''), ''/'', ''''), ''-'', '''') AS emp_cgc\r\n    FROM nfe WITH (NOLOCK)\r\n    INNER JOIN ine WITH (NOLOCK)\r\n        ON (\r\n                nfe.nfe_fne_cod = ine.ine_fne_cod\r\n                AND nfe.nfe_serie = ine.ine_nfe_serie\r\n                AND nfe.nfe_num = ine.ine_nfe_num\r\n                AND nfe.nfe_tipo = ine.ine_nfe_tipo\r\n                )\r\n    LEFT OUTER JOIN fne WITH (NOLOCK)\r\n        ON (convert(VARCHAR, ine.ine_fne_cod) = convert(VARCHAR, fne.fne_cod))\r\n    LEFT OUTER JOIN mat WITH (NOLOCK)\r\n        ON (mat.mat_cod = ine.ine_mat_cod)\r\n    LEFT OUTER JOIN lma WITH (NOLOCK)\r\n       ON (\r\n                lma.lma_cod = mat.mat_lma_cod\r\n                AND lma.lma_gmm_cod = mat.mat_gmm_cod\r\n                )\r\n    LEFT OUTER JOIN gmm WITH (NOLOCK)\r\n        ON (lma.lma_gmm_cod = gmm.gmm_cod)\r\n    LEFT OUTER JOIN sba WITH (NOLOCK)\r\n        ON (sba.sba_cod = nfe.nfe_sba_cod)\r\n    LEFT OUTER JOIN aft WITH (NOLOCK)\r\n        ON (\r\n               aft_serie = ine_aft_serie\r\n                AND aft_num = ine_aft_num\r\n                )\r\n    LEFT OUTER JOIN emp WITH (NOLOCK)\r\n        ON (emp.emp_fne_cod = fne.FNE_COD)\r\n    CROSS JOIN cfg\r\n    WHERE (\r\n            nfe.nfe_dt_entrada >= @DT_INICIO\r\n            AND nfe.nfe_dt_entrada <= @DT_FIM\r\n            )\r\n        AND (\r\n            fne.fne_cod IN (''%'')\r\n            OR (''%'' IN (''%''))\r\n            )\r\n    ) AS t1\r\nORDER BY sba_cod\r\n    , sba_nome\r\n    , nfe_tipo\r\n    , nfe_dt_entrada\r\n    , nfe_serie\r\n    , nfe_num\r\n    , ine_seq\r\n '\r\n\r\n)\r\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_ITABUNA_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_SMART"
											}
										}
									]
								},
								{
									"name": "SMART - NF IOF",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SMART - NF ITB",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat(\n'DECLARE @DT_INICIO AS DATE\n DECLARE @DT_FIM     AS DATE\n\nSET @DT_INICIO = ','''', item().DT_INICIO,'''',\n'SET @DT_FIM = '  , '''', item().DT_FIM,'''',\n' SELECT \n 92 as estabelecimento  ',\n\n '\n     ,nfe_dt_emissao\n    , nfe_dt_entrada\n    , nfe_tipo\n    , nfe_serie\n    , nfe_num\n    , fne_cod\n    , fne_nome_fantasia\n    , ine_mat_cod\n    , mat_desc_resumida\n    , gmm_nome\n    , ine_qtde_entrada\n    , mat_unm_cod_entrada\n    , ine_vlr_unit_entrada\n    , nfe_ipg_aberto\n    , ine_vlr_desconto\n    , ine_vlr_ipi\n    , nfe_aft\n    , nfe_vlr_total\n    , ds_nfe_tipo\n    , nfe_crit_venc\n    , nfe_cpg_parcelas\n    , nfe_ipg_dt_vcto\n    , nfe_parcela_1\nFROM (\n    SELECT cfg.cfg_emp\n        , sba.sba_cod\n        , sba.sba_nome\n        , nfe.nfe_serie\n        , nfe.nfe_num\n        , nfe.nfe_fne_cod\n        , nfe.nfe_tipo\n        , CASE nfe.nfe_tipo\n\n                WHEN ''PR''\n                THEN ''Entrada''\n            WHEN ''SR''\n                THEN ''Simples Remessa''\n            WHEN ''SF''\n                THEN ''Simples Faturamento''\n            WHEN ''DV''\n                THEN ''Devolução''\n            WHEN ''TR''\n                THEN ''Transferência''\n            ELSE ''N/A''\n            END AS ds_nfe_tipo\n        , fne.fne_cod\n        , fne.fne_nome_fantasia\n        , nfe.nfe_vlr_total\n \n \n        , (\n            SELECT TOP 1 i.ipg_dt_vcto\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ORDER BY i.ipg_dt_vcto\n            ) AS nfe_ipg_dt_vcto\n        , (\n            SELECT count(ipg_parc)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n            ) AS nfe_cpg_parcelas\n        , nfe.nfe_crit_venc\n        , nfe.nfe_parcela_1\n        , nfe.nfe_dt_emissao\n        , nfe.nfe_dt_entrada\n        , ine.ine_seq\n        , ine.ine_mat_cod\n        , mat.mat_desc_resumida\n        , mat.mat_lma_cod\n        , lma.lma_nome\n        , mat.mat_gmm_cod\n        , gmm.gmm_nome\n        , mat_unm_cod_entrada\n        , ine.ine_qtde AS ine_qtde_entrada\n        , ine.ine_vlr_unit AS ine_vlr_unit_entrada\n        , (\n            SELECT isnull(sum(ipg_valor), 0)\n            FROM cpg c\n            INNER JOIN ipg i\n                ON (\n                        c.cpg_serie = i.ipg_cpg_serie\n                        AND c.cpg_num = i.ipg_cpg_num\n                        )\n            WHERE c.cpg_nfe_serie = nfe_serie\n                AND c.cpg_nfe_num = nfe_num\n                AND c.cpg_nfe_tipo = nfe_tipo\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\n                AND i.ipg_status IN (''A'', ''R'')\n                AND i.ipg_dt_vcto <= @DT_FIM\n            ) AS nfe_ipg_aberto\n        , mat_unm_cod_saida\n        , '' AS solic\n        , '' AS DATA_solic\n        , convert(VARCHAR, ine_aft_serie) + ''.'' + convert(VARCHAR, ine_aft_num) AS nfe_aft\n        , aft_dthr\n        , ine.ine_qtde * mat_fat_conv_s_v AS ine_qtde_saida\n        , ine.ine_vlr_unit / mat_fat_conv_s_v AS ine_vlr_saida\n        , ine.ine_vlr_ipi\n        , ine.ine_vlr_desconto\n        , (\n            SELECT TOP 1 f.fne_cod\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                          )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                    n.nfe_dt_entrada >= @DT_INICIO\n                    AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_cod\n        , (\n            SELECT TOP 1 f.fne_nome_fantasia\n            FROM nfe n WITH (NOLOCK)\n            INNER JOIN ine i WITH (NOLOCK)\n                ON (\n                        n.nfe_fne_cod = i.ine_fne_cod\n                        AND n.nfe_serie = i.ine_nfe_serie\n                        AND n.nfe_num = i.ine_nfe_num\n                        AND n.nfe_tipo = i.ine_nfe_tipo\n                        )\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\n                ON ine.ine_fne_cod = fne.fne_cod\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\n                AND f.fne_cod = ine.ine_fne_cod\n                AND (\n                   n.nfe_dt_entrada >= @DT_INICIO\n                 AND n.nfe_dt_entrada <= @DT_FIM\n                    )\n            ORDER BY n.nfe_dt_entrada DESC\n            ) AS ine_fne_nome_fantasia\n        , replace(replace(replace(emp_cgc, ''.'', ''''), ''/'', ''''), ''-'', '''') AS emp_cgc\n    FROM nfe WITH (NOLOCK)\n    INNER JOIN ine WITH (NOLOCK)\n        ON (\n                nfe.nfe_fne_cod = ine.ine_fne_cod\n                AND nfe.nfe_serie = ine.ine_nfe_serie\n                AND nfe.nfe_num = ine.ine_nfe_num\n                AND nfe.nfe_tipo = ine.ine_nfe_tipo\n                )\n    LEFT OUTER JOIN fne WITH (NOLOCK)\n        ON (convert(VARCHAR, ine.ine_fne_cod) = convert(VARCHAR, fne.fne_cod))\n    LEFT OUTER JOIN mat WITH (NOLOCK)\n        ON (mat.mat_cod = ine.ine_mat_cod)\n    LEFT OUTER JOIN lma WITH (NOLOCK)\n       ON (\n                lma.lma_cod = mat.mat_lma_cod\n                AND lma.lma_gmm_cod = mat.mat_gmm_cod\n                )\n    LEFT OUTER JOIN gmm WITH (NOLOCK)\n        ON (lma.lma_gmm_cod = gmm.gmm_cod)\n    LEFT OUTER JOIN sba WITH (NOLOCK)\n        ON (sba.sba_cod = nfe.nfe_sba_cod)\n    LEFT OUTER JOIN aft WITH (NOLOCK)\n        ON (\n               aft_serie = ine_aft_serie\n                AND aft_num = ine_aft_num\n                )\n    LEFT OUTER JOIN emp WITH (NOLOCK)\n        ON (emp.emp_fne_cod = fne.FNE_COD)\n    CROSS JOIN cfg\n    WHERE (\n            nfe.nfe_dt_entrada >= @DT_INICIO\n            AND nfe.nfe_dt_entrada <= @DT_FIM\n            )\n        AND (\n            fne.fne_cod IN (''%'')\n            OR (''%'' IN (''%''))\n            )\n    ) AS t1\nORDER BY sba_cod\n    , sba_nome\n    , nfe_tipo\n    , nfe_dt_entrada\n    , nfe_serie\n    , nfe_num\n    , ine_seq\n '\n\n)\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_IOF_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_SMART"
											}
										}
									]
								},
								{
									"name": "SMART - NF OFT",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SMART - NF IOF",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat(\r\n'DECLARE @DT_INICIO AS DATE\r\n DECLARE @DT_FIM     AS DATE\r\n\r\nSET @DT_INICIO = ','''', item().DT_INICIO,'''',\r\n'SET @DT_FIM = '  , '''', item().DT_FIM,'''',\r\n' SELECT \r\n 93 as estabelecimento  ',\r\n\r\n '\r\n     ,nfe_dt_emissao\r\n    , nfe_dt_entrada\r\n    , nfe_tipo\r\n    , nfe_serie\r\n    , nfe_num\r\n    , fne_cod\r\n    , fne_nome_fantasia\r\n    , ine_mat_cod\r\n    , mat_desc_resumida\r\n    , gmm_nome\r\n    , ine_qtde_entrada\r\n    , mat_unm_cod_entrada\r\n    , ine_vlr_unit_entrada\r\n    , nfe_ipg_aberto\r\n    , ine_vlr_desconto\r\n    , ine_vlr_ipi\r\n    , nfe_aft\r\n    , nfe_vlr_total\r\n    , ds_nfe_tipo\r\n    , nfe_crit_venc\r\n    , nfe_cpg_parcelas\r\n    , nfe_ipg_dt_vcto\r\n    , nfe_parcela_1\r\nFROM (\r\n    SELECT cfg.cfg_emp\r\n        , sba.sba_cod\r\n        , sba.sba_nome\r\n        , nfe.nfe_serie\r\n        , nfe.nfe_num\r\n        , nfe.nfe_fne_cod\r\n        , nfe.nfe_tipo\r\n        , CASE nfe.nfe_tipo\r\n\r\n                WHEN ''PR''\r\n                THEN ''Entrada''\r\n            WHEN ''SR''\r\n                THEN ''Simples Remessa''\r\n            WHEN ''SF''\r\n                THEN ''Simples Faturamento''\r\n            WHEN ''DV''\r\n                THEN ''Devolução''\r\n            WHEN ''TR''\r\n                THEN ''Transferência''\r\n            ELSE ''N/A''\r\n            END AS ds_nfe_tipo\r\n        , fne.fne_cod\r\n        , fne.fne_nome_fantasia\r\n        , nfe.nfe_vlr_total\r\n \r\n \r\n        , (\r\n            SELECT TOP 1 i.ipg_dt_vcto\r\n            FROM cpg c\r\n            INNER JOIN ipg i\r\n                ON (\r\n                        c.cpg_serie = i.ipg_cpg_serie\r\n                        AND c.cpg_num = i.ipg_cpg_num\r\n                        )\r\n            WHERE c.cpg_nfe_serie = nfe_serie\r\n                AND c.cpg_nfe_num = nfe_num\r\n                AND c.cpg_nfe_tipo = nfe_tipo\r\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\r\n            ORDER BY i.ipg_dt_vcto\r\n            ) AS nfe_ipg_dt_vcto\r\n        , (\r\n            SELECT count(ipg_parc)\r\n            FROM cpg c\r\n            INNER JOIN ipg i\r\n                ON (\r\n                        c.cpg_serie = i.ipg_cpg_serie\r\n                        AND c.cpg_num = i.ipg_cpg_num\r\n                        )\r\n            WHERE c.cpg_nfe_serie = nfe_serie\r\n                AND c.cpg_nfe_num = nfe_num\r\n                AND c.cpg_nfe_tipo = nfe_tipo\r\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\r\n            ) AS nfe_cpg_parcelas\r\n        , nfe.nfe_crit_venc\r\n        , nfe.nfe_parcela_1\r\n        , nfe.nfe_dt_emissao\r\n        , nfe.nfe_dt_entrada\r\n        , ine.ine_seq\r\n        , ine.ine_mat_cod\r\n        , mat.mat_desc_resumida\r\n        , mat.mat_lma_cod\r\n        , lma.lma_nome\r\n        , mat.mat_gmm_cod\r\n        , gmm.gmm_nome\r\n        , mat_unm_cod_entrada\r\n        , ine.ine_qtde AS ine_qtde_entrada\r\n        , ine.ine_vlr_unit AS ine_vlr_unit_entrada\r\n        , (\r\n            SELECT isnull(sum(ipg_valor), 0)\r\n            FROM cpg c\r\n            INNER JOIN ipg i\r\n                ON (\r\n                        c.cpg_serie = i.ipg_cpg_serie\r\n                        AND c.cpg_num = i.ipg_cpg_num\r\n                        )\r\n            WHERE c.cpg_nfe_serie = nfe_serie\r\n                AND c.cpg_nfe_num = nfe_num\r\n                AND c.cpg_nfe_tipo = nfe_tipo\r\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\r\n                AND i.ipg_status IN (''A'', ''R'')\r\n                AND i.ipg_dt_vcto <= @DT_FIM\r\n            ) AS nfe_ipg_aberto\r\n        , mat_unm_cod_saida\r\n        , '' AS solic\r\n        , '' AS DATA_solic\r\n        , convert(VARCHAR, ine_aft_serie) + ''.'' + convert(VARCHAR, ine_aft_num) AS nfe_aft\r\n        , aft_dthr\r\n        , ine.ine_qtde * mat_fat_conv_s_v AS ine_qtde_saida\r\n        , ine.ine_vlr_unit / mat_fat_conv_s_v AS ine_vlr_saida\r\n        , ine.ine_vlr_ipi\r\n        , ine.ine_vlr_desconto\r\n        , (\r\n            SELECT TOP 1 f.fne_cod\r\n            FROM nfe n WITH (NOLOCK)\r\n            INNER JOIN ine i WITH (NOLOCK)\r\n                ON (\r\n                        n.nfe_fne_cod = i.ine_fne_cod\r\n                        AND n.nfe_serie = i.ine_nfe_serie\r\n                        AND n.nfe_num = i.ine_nfe_num\r\n                        AND n.nfe_tipo = i.ine_nfe_tipo\r\n                          )\r\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\r\n                ON ine.ine_fne_cod = fne.fne_cod\r\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\r\n                AND f.fne_cod = ine.ine_fne_cod\r\n                AND (\r\n                    n.nfe_dt_entrada >= @DT_INICIO\r\n                    AND n.nfe_dt_entrada <= @DT_FIM\r\n                    )\r\n            ORDER BY n.nfe_dt_entrada DESC\r\n            ) AS ine_fne_cod\r\n        , (\r\n            SELECT TOP 1 f.fne_nome_fantasia\r\n            FROM nfe n WITH (NOLOCK)\r\n            INNER JOIN ine i WITH (NOLOCK)\r\n                ON (\r\n                        n.nfe_fne_cod = i.ine_fne_cod\r\n                        AND n.nfe_serie = i.ine_nfe_serie\r\n                        AND n.nfe_num = i.ine_nfe_num\r\n                        AND n.nfe_tipo = i.ine_nfe_tipo\r\n                        )\r\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\r\n                ON ine.ine_fne_cod = fne.fne_cod\r\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\r\n                AND f.fne_cod = ine.ine_fne_cod\r\n                AND (\r\n                   n.nfe_dt_entrada >= @DT_INICIO\r\n                 AND n.nfe_dt_entrada <= @DT_FIM\r\n                    )\r\n            ORDER BY n.nfe_dt_entrada DESC\r\n            ) AS ine_fne_nome_fantasia\r\n        , replace(replace(replace(emp_cgc, ''.'', ''''), ''/'', ''''), ''-'', '''') AS emp_cgc\r\n    FROM nfe WITH (NOLOCK)\r\n    INNER JOIN ine WITH (NOLOCK)\r\n        ON (\r\n                nfe.nfe_fne_cod = ine.ine_fne_cod\r\n                AND nfe.nfe_serie = ine.ine_nfe_serie\r\n                AND nfe.nfe_num = ine.ine_nfe_num\r\n                AND nfe.nfe_tipo = ine.ine_nfe_tipo\r\n                )\r\n    LEFT OUTER JOIN fne WITH (NOLOCK)\r\n        ON (convert(VARCHAR, ine.ine_fne_cod) = convert(VARCHAR, fne.fne_cod))\r\n    LEFT OUTER JOIN mat WITH (NOLOCK)\r\n        ON (mat.mat_cod = ine.ine_mat_cod)\r\n    LEFT OUTER JOIN lma WITH (NOLOCK)\r\n       ON (\r\n                lma.lma_cod = mat.mat_lma_cod\r\n                AND lma.lma_gmm_cod = mat.mat_gmm_cod\r\n                )\r\n    LEFT OUTER JOIN gmm WITH (NOLOCK)\r\n        ON (lma.lma_gmm_cod = gmm.gmm_cod)\r\n    LEFT OUTER JOIN sba WITH (NOLOCK)\r\n        ON (sba.sba_cod = nfe.nfe_sba_cod)\r\n    LEFT OUTER JOIN aft WITH (NOLOCK)\r\n        ON (\r\n               aft_serie = ine_aft_serie\r\n                AND aft_num = ine_aft_num\r\n                )\r\n    LEFT OUTER JOIN emp WITH (NOLOCK)\r\n        ON (emp.emp_fne_cod = fne.FNE_COD)\r\n    CROSS JOIN cfg\r\n    WHERE (\r\n            nfe.nfe_dt_entrada >= @DT_INICIO\r\n            AND nfe.nfe_dt_entrada <= @DT_FIM\r\n            )\r\n        AND (\r\n            fne.fne_cod IN (''%'')\r\n            OR (''%'' IN (''%''))\r\n            )\r\n    ) AS t1\r\nORDER BY sba_cod\r\n    , sba_nome\r\n    , nfe_tipo\r\n    , nfe_dt_entrada\r\n    , nfe_serie\r\n    , nfe_num\r\n    , ine_seq\r\n '\r\n\r\n)\r\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_Oftalmoclin_Prd_DataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_SMART"
											}
										}
									]
								},
								{
									"name": "SMART - NF HOSL",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "SMART - NF OFT",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "@concat(\r\n'DECLARE @DT_INICIO AS DATE\r\n DECLARE @DT_FIM     AS DATE\r\n\r\nSET @DT_INICIO = ','''', item().DT_INICIO,'''',\r\n'SET @DT_FIM = '  , '''', item().DT_FIM,'''',\r\n' SELECT \r\n 94 as estabelecimento  ',\r\n\r\n '\r\n     ,nfe_dt_emissao\r\n    , nfe_dt_entrada\r\n    , nfe_tipo\r\n    , nfe_serie\r\n    , nfe_num\r\n    , fne_cod\r\n    , fne_nome_fantasia\r\n    , ine_mat_cod\r\n    , mat_desc_resumida\r\n    , gmm_nome\r\n    , ine_qtde_entrada\r\n    , mat_unm_cod_entrada\r\n    , ine_vlr_unit_entrada\r\n    , nfe_ipg_aberto\r\n    , ine_vlr_desconto\r\n    , ine_vlr_ipi\r\n    , nfe_aft\r\n    , nfe_vlr_total\r\n    , ds_nfe_tipo\r\n    , nfe_crit_venc\r\n    , nfe_cpg_parcelas\r\n    , nfe_ipg_dt_vcto\r\n    , nfe_parcela_1\r\nFROM (\r\n    SELECT cfg.cfg_emp\r\n        , sba.sba_cod\r\n        , sba.sba_nome\r\n        , nfe.nfe_serie\r\n        , nfe.nfe_num\r\n        , nfe.nfe_fne_cod\r\n        , nfe.nfe_tipo\r\n        , CASE nfe.nfe_tipo\r\n\r\n                WHEN ''PR''\r\n                THEN ''Entrada''\r\n            WHEN ''SR''\r\n                THEN ''Simples Remessa''\r\n            WHEN ''SF''\r\n                THEN ''Simples Faturamento''\r\n            WHEN ''DV''\r\n                THEN ''Devolução''\r\n            WHEN ''TR''\r\n                THEN ''Transferência''\r\n            ELSE ''N/A''\r\n            END AS ds_nfe_tipo\r\n        , fne.fne_cod\r\n        , fne.fne_nome_fantasia\r\n        , nfe.nfe_vlr_total\r\n \r\n \r\n        , (\r\n            SELECT TOP 1 i.ipg_dt_vcto\r\n            FROM cpg c\r\n            INNER JOIN ipg i\r\n                ON (\r\n                        c.cpg_serie = i.ipg_cpg_serie\r\n                        AND c.cpg_num = i.ipg_cpg_num\r\n                        )\r\n            WHERE c.cpg_nfe_serie = nfe_serie\r\n                AND c.cpg_nfe_num = nfe_num\r\n                AND c.cpg_nfe_tipo = nfe_tipo\r\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\r\n            ORDER BY i.ipg_dt_vcto\r\n            ) AS nfe_ipg_dt_vcto\r\n        , (\r\n            SELECT count(ipg_parc)\r\n            FROM cpg c\r\n            INNER JOIN ipg i\r\n                ON (\r\n                        c.cpg_serie = i.ipg_cpg_serie\r\n                        AND c.cpg_num = i.ipg_cpg_num\r\n                        )\r\n            WHERE c.cpg_nfe_serie = nfe_serie\r\n                AND c.cpg_nfe_num = nfe_num\r\n                AND c.cpg_nfe_tipo = nfe_tipo\r\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\r\n            ) AS nfe_cpg_parcelas\r\n        , nfe.nfe_crit_venc\r\n        , nfe.nfe_parcela_1\r\n        , nfe.nfe_dt_emissao\r\n        , nfe.nfe_dt_entrada\r\n        , ine.ine_seq\r\n        , ine.ine_mat_cod\r\n        , mat.mat_desc_resumida\r\n        , mat.mat_lma_cod\r\n        , lma.lma_nome\r\n        , mat.mat_gmm_cod\r\n        , gmm.gmm_nome\r\n        , mat_unm_cod_entrada\r\n        , ine.ine_qtde AS ine_qtde_entrada\r\n        , ine.ine_vlr_unit AS ine_vlr_unit_entrada\r\n        , (\r\n            SELECT isnull(sum(ipg_valor), 0)\r\n            FROM cpg c\r\n            INNER JOIN ipg i\r\n                ON (\r\n                        c.cpg_serie = i.ipg_cpg_serie\r\n                        AND c.cpg_num = i.ipg_cpg_num\r\n                        )\r\n            WHERE c.cpg_nfe_serie = nfe_serie\r\n                AND c.cpg_nfe_num = nfe_num\r\n                AND c.cpg_nfe_tipo = nfe_tipo\r\n                AND c.cpg_nfe_fne_cod = nfe_fne_cod\r\n                AND i.ipg_status IN (''A'', ''R'')\r\n                AND i.ipg_dt_vcto <= @DT_FIM\r\n            ) AS nfe_ipg_aberto\r\n        , mat_unm_cod_saida\r\n        , '' AS solic\r\n        , '' AS DATA_solic\r\n        , convert(VARCHAR, ine_aft_serie) + ''.'' + convert(VARCHAR, ine_aft_num) AS nfe_aft\r\n        , aft_dthr\r\n        , ine.ine_qtde * mat_fat_conv_s_v AS ine_qtde_saida\r\n        , ine.ine_vlr_unit / mat_fat_conv_s_v AS ine_vlr_saida\r\n        , ine.ine_vlr_ipi\r\n        , ine.ine_vlr_desconto\r\n        , (\r\n            SELECT TOP 1 f.fne_cod\r\n            FROM nfe n WITH (NOLOCK)\r\n            INNER JOIN ine i WITH (NOLOCK)\r\n                ON (\r\n                        n.nfe_fne_cod = i.ine_fne_cod\r\n                        AND n.nfe_serie = i.ine_nfe_serie\r\n                        AND n.nfe_num = i.ine_nfe_num\r\n                        AND n.nfe_tipo = i.ine_nfe_tipo\r\n                          )\r\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\r\n                ON ine.ine_fne_cod = fne.fne_cod\r\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\r\n                AND f.fne_cod = ine.ine_fne_cod\r\n                AND (\r\n                    n.nfe_dt_entrada >= @DT_INICIO\r\n                    AND n.nfe_dt_entrada <= @DT_FIM\r\n                    )\r\n            ORDER BY n.nfe_dt_entrada DESC\r\n            ) AS ine_fne_cod\r\n        , (\r\n            SELECT TOP 1 f.fne_nome_fantasia\r\n            FROM nfe n WITH (NOLOCK)\r\n            INNER JOIN ine i WITH (NOLOCK)\r\n                ON (\r\n                        n.nfe_fne_cod = i.ine_fne_cod\r\n                        AND n.nfe_serie = i.ine_nfe_serie\r\n                        AND n.nfe_num = i.ine_nfe_num\r\n                        AND n.nfe_tipo = i.ine_nfe_tipo\r\n                        )\r\n            LEFT OUTER JOIN fne f WITH (NOLOCK)\r\n                ON ine.ine_fne_cod = fne.fne_cod\r\n            WHERE i.ine_mat_cod = ine.ine_mat_cod\r\n                AND f.fne_cod = ine.ine_fne_cod\r\n                AND (\r\n                   n.nfe_dt_entrada >= @DT_INICIO\r\n                 AND n.nfe_dt_entrada <= @DT_FIM\r\n                    )\r\n            ORDER BY n.nfe_dt_entrada DESC\r\n            ) AS ine_fne_nome_fantasia\r\n        , replace(replace(replace(emp_cgc, ''.'', ''''), ''/'', ''''), ''-'', '''') AS emp_cgc\r\n    FROM nfe WITH (NOLOCK)\r\n    INNER JOIN ine WITH (NOLOCK)\r\n        ON (\r\n                nfe.nfe_fne_cod = ine.ine_fne_cod\r\n                AND nfe.nfe_serie = ine.ine_nfe_serie\r\n                AND nfe.nfe_num = ine.ine_nfe_num\r\n                AND nfe.nfe_tipo = ine.ine_nfe_tipo\r\n                )\r\n    LEFT OUTER JOIN fne WITH (NOLOCK)\r\n        ON (convert(VARCHAR, ine.ine_fne_cod) = convert(VARCHAR, fne.fne_cod))\r\n    LEFT OUTER JOIN mat WITH (NOLOCK)\r\n        ON (mat.mat_cod = ine.ine_mat_cod)\r\n    LEFT OUTER JOIN lma WITH (NOLOCK)\r\n       ON (\r\n                lma.lma_cod = mat.mat_lma_cod\r\n                AND lma.lma_gmm_cod = mat.mat_gmm_cod\r\n                )\r\n    LEFT OUTER JOIN gmm WITH (NOLOCK)\r\n        ON (lma.lma_gmm_cod = gmm.gmm_cod)\r\n    LEFT OUTER JOIN sba WITH (NOLOCK)\r\n        ON (sba.sba_cod = nfe.nfe_sba_cod)\r\n    LEFT OUTER JOIN aft WITH (NOLOCK)\r\n        ON (\r\n               aft_serie = ine_aft_serie\r\n                AND aft_num = ine_aft_num\r\n                )\r\n    LEFT OUTER JOIN emp WITH (NOLOCK)\r\n        ON (emp.emp_fne_cod = fne.FNE_COD)\r\n    CROSS JOIN cfg\r\n    WHERE (\r\n            nfe.nfe_dt_entrada >= @DT_INICIO\r\n            AND nfe.nfe_dt_entrada <= @DT_FIM\r\n            )\r\n        AND (\r\n            fne.fne_cod IN (''%'')\r\n            OR (''%'' IN (''%''))\r\n            )\r\n    ) AS t1\r\nORDER BY sba_cod\r\n    , sba_nome\r\n    , nfe_tipo\r\n    , nfe_dt_entrada\r\n    , nfe_serie\r\n    , nfe_num\r\n    , ine_seq\r\n '\r\n\r\n)\r\n",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"tableOption": "autoCreate",
											"disableMetricsCollection": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SMART_HOSL_PrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_SMART"
											}
										}
									]
								},
								{
									"name": "TASY - NF Sadalla",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@concat(\n\n'with cate as(\nselect  \n        A.CD_ESTABELECIMENTO,\n        obter_nome_estab(a.cd_estabelecimento) ds_estabelecimento,\n        A.NR_ORDEM_COMPRA,\n        a.dt_entrada_saida,\n        a.dt_emissao,\n        a.nr_nota_fiscal,\n        a.cd_cgc_emitente,\n        substr(obter_nome_pf_pj(null,a.cd_cgc_emitente),1,100) ds_fornecedor,\n        pj.CD_CEP,\n        pj.DS_ENDERECO,\n        pj.DS_BAIRRO,\n        pj.DS_MUNICIPIO,\n        pj.SG_ESTADO,\n        b.cd_material,\n        substr(obter_desc_material(b.cd_material),1,100) ds_material,\n        e.ds_grupo_material,\n        b.cd_local_estoque,\n        b.qt_item_nf,\n        b.cd_unidade_medida_compra,\n        b.vl_unitario_item_nf,\n        b.vl_total_item_nf, \n        b.vl_frete / b.qt_item_nf vl_frete,\n        d.vl_tributo / b.qt_item_nf tributo,\n        dividir(b.vl_liquido, b.qt_item_estoque) vl_custo_medio,\n        ((dividir(b.vl_liquido, b.qt_item_estoque)) *(b.qt_item_nf))total_item,\n        obter_desc_operacao_nota(a.CD_OPERACAO_NF) operacao\n       -- ,obter_desc_local_estoque(b.CD_LOCAL_ESTOQUE) ds_local_estoque\nfrom    nota_fiscal a,\n        nota_fiscal_item b,\n        estrutura_material_v e,\n        nota_fiscal_item_trib d,\n        pessoa_juridica pj\nwhere   b.nr_sequencia = d.nr_sequencia (+)\n        and b.nr_item_nf = d.nr_item_nf (+)\n        and a.nr_sequencia = b.nr_sequencia\n        and b.cd_material = e.cd_material\n        and trunc(a.dt_entrada_saida,''mm'') between to_date(',\n\t\t\n\t\t'''', item().DT_INICIO_ORACLE, '''',\n\t\t\n\t\t\n\t\t\n\t\t',''DD/MM/YYYY'') and to_date(',\n                \n                '''', item().DT_FIM_ORACLE, '''',\n                \n                ',''DD/MM/YYYY'')\n        and a.ie_situacao = 1\n        and a.ie_tipo_nota in (''EF'',''EN'')\n        and a.CD_OPERACAO_NF <> 5\n        and a.dt_atualizacao_estoque is not null\n        and pj.cd_cgc = a.CD_CGC_EMITENTE (+)\n        --and ((a.cd_estabelecimento = :estab) or (:estab = 0))\norder by dt_entrada_saida,\n        nr_nota_fiscal,\n        ds_fornecedor,  \n        ds_material\n)  \nSELECT\n     2 AS ESTABELECIMENTO\n,A.CD_ESTABELECIMENTO\n,A.DS_ESTABELECIMENTO    \n,OC.DT_ORDEM_COMPRA\n,A.NR_ORDEM_COMPRA\n,A.DT_ENTRADA_SAIDA\n,A.DT_EMISSAO\n,A.NR_NOTA_FISCAL\n,A.CD_CGC_EMITENTE\n,A.DS_FORNECEDOR\n,A.CD_CEP\n,A.DS_ENDERECO\n,A.DS_BAIRRO\n,A.DS_MUNICIPIO\n,A.SG_ESTADO\n,A.CD_MATERIAL\n,A.DS_MATERIAL\n,A.DS_GRUPO_MATERIAL\n,A.CD_LOCAL_ESTOQUE\n,A.QT_ITEM_NF\n,A.CD_UNIDADE_MEDIDA_COMPRA\n,A.VL_UNITARIO_ITEM_NF\n,A.VL_TOTAL_ITEM_NF\n,A.VL_FRETE\n,A.TRIBUTO\n,A.VL_CUSTO_MEDIO\n,A.TOTAL_ITEM\n,A.OPERACAO\n,L.DS_LOCAL_ESTOQUE\nFROM CATE A\nLEFT JOIN ORDEM_COMPRA OC ON OC.NR_ORDEM_COMPRA = A.NR_ORDEM_COMPRA\nLEFT JOIN LOCAL_ESTOQUE L ON L.CD_LOCAL_ESTOQUE = A.CD_LOCAL_ESTOQUE'\n\n)\n\n\n \n",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "SadallaTasyPrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_TASY"
											}
										}
									]
								},
								{
									"name": "TASY - NF HTML",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "TASY - NF Sadalla",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@CONCAT(\n\n'with cate as(\nselect  \n        A.CD_ESTABELECIMENTO,\n        FAST_OPS.obter_nome_estab(a.cd_estabelecimento) ds_estabelecimento,\n        A.NR_ORDEM_COMPRA,\n        a.dt_entrada_saida,\n        a.dt_emissao,\n        a.nr_nota_fiscal,\n        a.cd_cgc_emitente,\n        substr(FAST_OPS.obter_nome_pf_pj(null,a.cd_cgc_emitente),1,100) ds_fornecedor,\n        pj.CD_CEP,\n        pj.DS_ENDERECO,\n        pj.DS_BAIRRO,\n        pj.DS_MUNICIPIO,\n        pj.SG_ESTADO,\n        b.cd_material,\n        substr(FAST_OPS.obter_desc_material(b.cd_material),1,100) ds_material,\n        e.ds_grupo_material,\n        b.cd_local_estoque,\n        b.qt_item_nf,\n        b.cd_unidade_medida_compra,\n        b.vl_unitario_item_nf,\n        b.vl_total_item_nf, \n        b.vl_frete / b.qt_item_nf vl_frete,\n        d.vl_tributo / b.qt_item_nf tributo,\n        FAST_OPS.dividir(b.vl_liquido, b.qt_item_estoque) vl_custo_medio,\n        ((FAST_OPS.dividir(b.vl_liquido, b.qt_item_estoque)) *(b.qt_item_nf))total_item,\n        FAST_OPS.obter_desc_operacao_nota(a.CD_OPERACAO_NF) operacao\n       -- ,obter_desc_local_estoque(b.CD_LOCAL_ESTOQUE) ds_local_estoque\nfrom    FAST_OPS.nota_fiscal a,\n        FAST_OPS.nota_fiscal_item b,\n        FAST_OPS.estrutura_material_v e,\n        FAST_OPS.nota_fiscal_item_trib d,\n        FAST_OPS.pessoa_juridica pj\nwhere   b.nr_sequencia = d.nr_sequencia (+)\n        and b.nr_item_nf = d.nr_item_nf (+)\n        and a.nr_sequencia = b.nr_sequencia\n        and b.cd_material = e.cd_material\n        and trunc(a.dt_entrada_saida,''mm'') between to_date(',\n\t\t\n\t\t'''', item().DT_INICIO_ORACLE, '''',\n\n\t\t',''DD/MM/YYYY'') and to_date(',\n\t\t\n\t\t'''', item().DT_FIM_ORACLE, '''',\n\t\t\n\t\t',''DD/MM/YYYY'')\n        and a.ie_situacao = 1\n        and a.ie_tipo_nota in (''EF'',''EN'')\n        and a.CD_OPERACAO_NF <> 5\n        and a.dt_atualizacao_estoque is not null\n        and pj.cd_cgc = a.CD_CGC_EMITENTE (+)\n        --and ((a.cd_estabelecimento = :estab) or (:estab = 0))\norder by dt_entrada_saida,\n        nr_nota_fiscal,\n        ds_fornecedor,  \n        ds_material\n)  \nSELECT\n1 AS ESTABELECIMENTO\n,A.CD_ESTABELECIMENTO\n,A.DS_ESTABELECIMENTO    \n,OC.DT_ORDEM_COMPRA\n,A.NR_ORDEM_COMPRA\n,A.DT_ENTRADA_SAIDA\n,A.DT_EMISSAO\n,A.NR_NOTA_FISCAL\n,A.CD_CGC_EMITENTE\n,A.DS_FORNECEDOR\n,A.CD_CEP\n,A.DS_ENDERECO\n,A.DS_BAIRRO\n,A.DS_MUNICIPIO\n,A.SG_ESTADO\n,A.CD_MATERIAL\n,A.DS_MATERIAL\n,A.DS_GRUPO_MATERIAL\n,A.CD_LOCAL_ESTOQUE\n,A.QT_ITEM_NF\n,A.CD_UNIDADE_MEDIDA_COMPRA\n,A.VL_UNITARIO_ITEM_NF\n,A.VL_TOTAL_ITEM_NF\n,A.VL_FRETE\n,A.TRIBUTO\n,A.VL_CUSTO_MEDIO\n,A.TOTAL_ITEM\n,A.OPERACAO\n,L.DS_LOCAL_ESTOQUE\nFROM CATE A\nLEFT JOIN FAST_OPS.ORDEM_COMPRA OC ON OC.NR_ORDEM_COMPRA = A.NR_ORDEM_COMPRA\nLEFT JOIN FAST_OPS.LOCAL_ESTOQUE L ON L.CD_LOCAL_ESTOQUE = A.CD_LOCAL_ESTOQUE'\n\n)",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false,
											"disableMetricsCollection": false
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "CloudTasyPrdDataSet",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "AZSQL_DINAMICO",
											"type": "DatasetReference",
											"parameters": {
												"schema_destino": "STG",
												"tabela_destino": "SUP_NFS_TASY"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Lookup Periodo Inicial",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "LIMPA STAGE SMART",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LIMPA STAGE TASY",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "declare @qtde_dias integer\n\nset @qtde_dias = 8\n\n\nSELECT\n\tCASE \n\t\tWHEN day(getdate()) <= @qtde_dias THEN\n\t\t\tconcat(substring(convert(varchar(30),DATEADD(MONTH,-1,getdate()),120),1,8),'01')\n\t\tWHEN day(getdate()) > @qtde_dias THEN\n\t\t\tSubstring(convert(varchar(30),dateadd(day,1,EOMONTH(getdate(),-1))),1,10)\n\tEND as Data_Inicial,\n\n\t\tsubstring(convert(varchar(30),DATEADD(day,-1,getdate()),120),1,10) as 'data_final' ,\n\n\n\tCASE\n\t\tWHEN day(getdate()) <= @qtde_dias THEN\n\t\t\tconcat('01' ,'/',\n\t\t\tsubstring(convert(varchar(20),DATEADD(MONTH,-1,getdate()),120),6,2),'/',\n\t\t\tsubstring(convert(varchar(20),DATEADD(MONTH,-1,getdate())),8,4))\n\n\t\tWHEN day(getdate()) > @qtde_dias THEN\n\t\t\tSubstring(convert(varchar(30),dateadd(day,1,EOMONTH(getdate(),-1)),103),1,10)\n\tEND as Data_Inicial_Oracle,\n        substring(convert(varchar(30),DATEADD(day,-1,getdate()),103),1,10) as 'data_final_Oracle'\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "SQL_DIN",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "LIMPA STAGE SMART",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "truncate table STG.SUP_NFS_SMART"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "LIMPA STAGE TASY",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": "truncate table STG.SUP_NFS_TASY"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "DELETE NFS",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "DELETE \nFROM DM.TBL_NFS_XPTO\nWHERE   TBL_NFS_XPTO.DT_ENTRADA_SAIDA IN \n(\nSELECT distinct convert(date,DT_ENTRADA_SAIDA,103) AS DT_ENTRADA from STG.SUP_NFS_TASY  with(nolock) \nUNION\nselect distinct convert(date,NFE_DT_ENTRADA,103) AS DT_ENTRADA  from STG.SUP_NFS_SMART  with(nolock)\n) \n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "INSERT",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "DELETE NFS",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSQL_DB_Procedimentos",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "WITH TB AS(\nSELECT\nA.estabelecimento AS ESTABELECIMENTO\n,null AS DT_ORDEM_COMPRA\n,CAST(A.ESTABELECIMENTO AS VARCHAR(5)) + '|0' AS FK_NR_ORDEM_COMPRA\n,nfe_dt_entrada AS DT_ENTRADA_SAIDA\n,nfe_dt_emissao AS DT_EMISSAO\n,CAST(A.ESTABELECIMENTO AS VARCHAR(5)) + '|'+ CAST(nfe_tipo AS VARCHAR(10)) + CAST(NFE_SERIE AS VARCHAR(10)) + CAST(nfe_num AS VARCHAR(50)) AS FK_NR_NOTA_FISCAL\n,CASE nfe_tipo\n    WHEN 'PR' THEN 'Entrada'\n    WHEN 'SR' THEN 'Simples Remessa'\n    WHEN 'SF' THEN 'Simples Faturamento'\n    WHEN 'DV' THEN 'Devolução'\n    WHEN 'TR' THEN 'Transferência'\n    ELSE 'N/A'\nEND  TP_OPERACAO\n,CAST(EMP.estabelecimento AS VARCHAR(5)) + '|' + CAST(EMP.emp_cgc AS VARCHAR(255)) AS FK_CD_CGC_EMITENTE\n,CAST(A.ESTABELECIMENTO AS VARCHAR(5)) +'|'+CAST(ine_mat_cod AS varchar(100)) AS FK_CD_MATERIAL\n,CAST(A.ESTABELECIMENTO AS VARCHAR(5)) + '|0' AS FK_CD_LOCAL_ESTOQUE\n,ine_qtde_entrada AS QT_ITEM_NF\n,mat_unm_cod_entrada AS CD_UNIDADE_MEDIDA_COMPRA\n,CAST(ine_vlr_unit_entrada AS money) AS VL_UNITARIO_ITEM_NF\n,CAST(ine_vlr_unit_entrada * ine_qtde_entrada AS MONEY) AS VL_TOTAL_ITEM_NF\n,0 AS VL_FRETE\n,0 AS TRIBUTO\n,0 AS VL_CUSTO_MEDIO\n,0 AS TOTAL_ITEM\nFROM STG.SUP_NFS_SMART A\nLEFT JOIN DW.TBL_EMP EMP WITH(NOLOCK) ON EMP.estabelecimento = A.estabelecimento AND EMP.emp_fne_cod = A.fne_cod\n\nUNION ALL\n\nSELECT\n A.ESTABELECIMENTO\n,A.DT_ORDEM_COMPRA\n,CAST(A.ESTABELECIMENTO AS varchar(5)) + '|' + CAST(A.NR_ORDEM_COMPRA AS VARCHAR(50)) FK_NR_ORGEM_COMPRA\n,A.DT_ENTRADA_SAIDA\n,A.DT_EMISSAO\n,CAST(A.ESTABELECIMENTO AS varchar(5)) + '|' + CAST(A.NR_NOTA_FISCAL AS VARCHAR(50)) FK_NR_NOTA_FISCAL\n,A.OPERACAO AS TP_OPERACAO\n,CAST(A.ESTABELECIMENTO AS VARCHAR(5)) + '|' + CAST(A.CD_CGC_EMITENTE AS VARCHAR(255)) AS FK_CD_CGC_EMITENTE\n,CAST(A.ESTABELECIMENTO AS varchar(5)) + '|' + CAST(A.CD_MATERIAL AS VARCHAR(50)) FK_CD_MATERIAL\n,CAST(A.ESTABELECIMENTO AS varchar(5)) + '|' + CAST(A.CD_LOCAL_ESTOQUE AS VARCHAR(50)) AS FK_CD_LOCAL_ESTOQUE\n,A.QT_ITEM_NF\n,A.CD_UNIDADE_MEDIDA_COMPRA\n,A.VL_UNITARIO_ITEM_NF\n,A.VL_TOTAL_ITEM_NF\n,A.VL_FRETE\n,A.TRIBUTO\n,A.VL_CUSTO_MEDIO\n,A.TOTAL_ITEM\nFROM STG.sup_nfs_tasy A\n\n)\n\nINSERT INTO [dm].[TBL_NFS_XPTO]\n           ([ESTABELECIMENTO]\n           ,[DT_ORDEM_COMPRA]\n           ,[FK_NR_ORDEM_COMPRA]\n           ,[DT_ENTRADA_SAIDA]\n           ,[DT_EMISSAO]\n           ,[FK_NR_NOTA_FISCAL]\n           ,[TP_OPERACAO]\n           ,[FK_CD_CGC_EMITENTE]\n           ,[FK_CD_MATERIAL]\n           ,[FK_CD_LOCAL_ESTOQUE]\n           ,[QT_ITEM_NF]\n           ,[CD_UNIDADE_MEDIDA_COMPRA]\n           ,[VL_UNITARIO_ITEM_NF]\n           ,[VL_TOTAL_ITEM_NF]\n           ,[VL_FRETE]\n           ,[TRIBUTO]\n           ,[VL_CUSTO_MEDIO]\n           ,[TOTAL_ITEM]\n\t\t   )\n\n\nSELECT      [ESTABELECIMENTO]\n           ,[DT_ORDEM_COMPRA]\n           ,[FK_NR_ORDEM_COMPRA]\n           ,[DT_ENTRADA_SAIDA]\n           ,[DT_EMISSAO]\n           ,[FK_NR_NOTA_FISCAL]\n           ,[TP_OPERACAO]\n           ,[FK_CD_CGC_EMITENTE]\n           ,[FK_CD_MATERIAL]\n           ,[FK_CD_LOCAL_ESTOQUE]\n           ,[QT_ITEM_NF]\n           ,[CD_UNIDADE_MEDIDA_COMPRA]\n           ,[VL_UNITARIO_ITEM_NF]\n           ,[VL_TOTAL_ITEM_NF]\n           ,[VL_FRETE]\n           ,[TRIBUTO]\n           ,[VL_CUSTO_MEDIO]\n           ,[TOTAL_ITEM]\n\t\t   \n\t\t   FROM TB\n\n",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"DT_INICIO": {
						"type": "String"
					},
					"DT_FIM": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Suprimentos/Nota Fiscal"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SQL_DIN')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSQL_DB_Procedimentos')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITAIGARA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/AZSQL_DINAMICO')]",
				"[concat(variables('factoryId'), '/datasets/SMART_ITABUNA_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_IOF_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_Oftalmoclin_Prd_DataSet')]",
				"[concat(variables('factoryId'), '/datasets/SMART_HOSL_PrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/SadallaTasyPrdDataSet')]",
				"[concat(variables('factoryId'), '/datasets/CloudTasyPrdDataSet')]"
			]
		}
	]
}